
AudioRGB_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000475c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080048f0  080048f0  000148f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004910  08004910  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004910  08004910  00014910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004918  08004918  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004918  08004918  00014918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800491c  0800491c  0001491c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  20000070  08004990  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  08004990  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d42  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c9a  00000000  00000000  00035de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  00038a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001018  00000000  00000000  00039ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cab  00000000  00000000  0003abc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000173a5  00000000  00000000  0005386b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b50c  00000000  00000000  0006ac10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010611c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004968  00000000  00000000  00106170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080048d8 	.word	0x080048d8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	080048d8 	.word	0x080048d8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004d2:	463b      	mov	r3, r7
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004de:	4b28      	ldr	r3, [pc, #160]	; (8000580 <MX_ADC1_Init+0xb4>)
 80004e0:	4a28      	ldr	r2, [pc, #160]	; (8000584 <MX_ADC1_Init+0xb8>)
 80004e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004e4:	4b26      	ldr	r3, [pc, #152]	; (8000580 <MX_ADC1_Init+0xb4>)
 80004e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004ec:	4b24      	ldr	r3, [pc, #144]	; (8000580 <MX_ADC1_Init+0xb4>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80004f2:	4b23      	ldr	r3, [pc, #140]	; (8000580 <MX_ADC1_Init+0xb4>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004f8:	4b21      	ldr	r3, [pc, #132]	; (8000580 <MX_ADC1_Init+0xb4>)
 80004fa:	2201      	movs	r2, #1
 80004fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004fe:	4b20      	ldr	r3, [pc, #128]	; (8000580 <MX_ADC1_Init+0xb4>)
 8000500:	2200      	movs	r2, #0
 8000502:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000506:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <MX_ADC1_Init+0xb4>)
 8000508:	2200      	movs	r2, #0
 800050a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800050c:	4b1c      	ldr	r3, [pc, #112]	; (8000580 <MX_ADC1_Init+0xb4>)
 800050e:	4a1e      	ldr	r2, [pc, #120]	; (8000588 <MX_ADC1_Init+0xbc>)
 8000510:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000512:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <MX_ADC1_Init+0xb4>)
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000518:	4b19      	ldr	r3, [pc, #100]	; (8000580 <MX_ADC1_Init+0xb4>)
 800051a:	2202      	movs	r2, #2
 800051c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <MX_ADC1_Init+0xb4>)
 8000520:	2201      	movs	r2, #1
 8000522:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000526:	4b16      	ldr	r3, [pc, #88]	; (8000580 <MX_ADC1_Init+0xb4>)
 8000528:	2201      	movs	r2, #1
 800052a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800052c:	4814      	ldr	r0, [pc, #80]	; (8000580 <MX_ADC1_Init+0xb4>)
 800052e:	f001 f925 	bl	800177c <HAL_ADC_Init>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000538:	f000 fcb4 	bl	8000ea4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800053c:	2301      	movs	r3, #1
 800053e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000540:	2301      	movs	r3, #1
 8000542:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000548:	463b      	mov	r3, r7
 800054a:	4619      	mov	r1, r3
 800054c:	480c      	ldr	r0, [pc, #48]	; (8000580 <MX_ADC1_Init+0xb4>)
 800054e:	f001 fa67 	bl	8001a20 <HAL_ADC_ConfigChannel>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000558:	f000 fca4 	bl	8000ea4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800055c:	230c      	movs	r3, #12
 800055e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000560:	2302      	movs	r3, #2
 8000562:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000564:	463b      	mov	r3, r7
 8000566:	4619      	mov	r1, r3
 8000568:	4805      	ldr	r0, [pc, #20]	; (8000580 <MX_ADC1_Init+0xb4>)
 800056a:	f001 fa59 	bl	8001a20 <HAL_ADC_ConfigChannel>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000574:	f000 fc96 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000578:	bf00      	nop
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000098 	.word	0x20000098
 8000584:	40012000 	.word	0x40012000
 8000588:	0f000001 	.word	0x0f000001

0800058c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08a      	sub	sp, #40	; 0x28
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a3c      	ldr	r2, [pc, #240]	; (800069c <HAL_ADC_MspInit+0x110>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d172      	bne.n	8000694 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	613b      	str	r3, [r7, #16]
 80005b2:	4b3b      	ldr	r3, [pc, #236]	; (80006a0 <HAL_ADC_MspInit+0x114>)
 80005b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005b6:	4a3a      	ldr	r2, [pc, #232]	; (80006a0 <HAL_ADC_MspInit+0x114>)
 80005b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005bc:	6453      	str	r3, [r2, #68]	; 0x44
 80005be:	4b38      	ldr	r3, [pc, #224]	; (80006a0 <HAL_ADC_MspInit+0x114>)
 80005c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005c6:	613b      	str	r3, [r7, #16]
 80005c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	4b34      	ldr	r3, [pc, #208]	; (80006a0 <HAL_ADC_MspInit+0x114>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a33      	ldr	r2, [pc, #204]	; (80006a0 <HAL_ADC_MspInit+0x114>)
 80005d4:	f043 0304 	orr.w	r3, r3, #4
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b31      	ldr	r3, [pc, #196]	; (80006a0 <HAL_ADC_MspInit+0x114>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0304 	and.w	r3, r3, #4
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60bb      	str	r3, [r7, #8]
 80005ea:	4b2d      	ldr	r3, [pc, #180]	; (80006a0 <HAL_ADC_MspInit+0x114>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a2c      	ldr	r2, [pc, #176]	; (80006a0 <HAL_ADC_MspInit+0x114>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b2a      	ldr	r3, [pc, #168]	; (80006a0 <HAL_ADC_MspInit+0x114>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = RNG_Pin;
 8000602:	2304      	movs	r3, #4
 8000604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000606:	2303      	movs	r3, #3
 8000608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RNG_GPIO_Port, &GPIO_InitStruct);
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4619      	mov	r1, r3
 8000614:	4823      	ldr	r0, [pc, #140]	; (80006a4 <HAL_ADC_MspInit+0x118>)
 8000616:	f002 f925 	bl	8002864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUX_Pin;
 800061a:	2302      	movs	r3, #2
 800061c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800061e:	2303      	movs	r3, #3
 8000620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AUX_GPIO_Port, &GPIO_InitStruct);
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4619      	mov	r1, r3
 800062c:	481e      	ldr	r0, [pc, #120]	; (80006a8 <HAL_ADC_MspInit+0x11c>)
 800062e:	f002 f919 	bl	8002864 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000632:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <HAL_ADC_MspInit+0x120>)
 8000634:	4a1e      	ldr	r2, [pc, #120]	; (80006b0 <HAL_ADC_MspInit+0x124>)
 8000636:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000638:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <HAL_ADC_MspInit+0x120>)
 800063a:	2200      	movs	r2, #0
 800063c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800063e:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <HAL_ADC_MspInit+0x120>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000644:	4b19      	ldr	r3, [pc, #100]	; (80006ac <HAL_ADC_MspInit+0x120>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800064a:	4b18      	ldr	r3, [pc, #96]	; (80006ac <HAL_ADC_MspInit+0x120>)
 800064c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000650:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000652:	4b16      	ldr	r3, [pc, #88]	; (80006ac <HAL_ADC_MspInit+0x120>)
 8000654:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000658:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <HAL_ADC_MspInit+0x120>)
 800065c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000660:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <HAL_ADC_MspInit+0x120>)
 8000664:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000668:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <HAL_ADC_MspInit+0x120>)
 800066c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000670:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <HAL_ADC_MspInit+0x120>)
 8000674:	2200      	movs	r2, #0
 8000676:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000678:	480c      	ldr	r0, [pc, #48]	; (80006ac <HAL_ADC_MspInit+0x120>)
 800067a:	f001 fd83 	bl	8002184 <HAL_DMA_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8000684:	f000 fc0e 	bl	8000ea4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4a08      	ldr	r2, [pc, #32]	; (80006ac <HAL_ADC_MspInit+0x120>)
 800068c:	639a      	str	r2, [r3, #56]	; 0x38
 800068e:	4a07      	ldr	r2, [pc, #28]	; (80006ac <HAL_ADC_MspInit+0x120>)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000694:	bf00      	nop
 8000696:	3728      	adds	r7, #40	; 0x28
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40012000 	.word	0x40012000
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40020800 	.word	0x40020800
 80006a8:	40020000 	.word	0x40020000
 80006ac:	200000e0 	.word	0x200000e0
 80006b0:	40026410 	.word	0x40026410

080006b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	4b1f      	ldr	r3, [pc, #124]	; (800073c <MX_DMA_Init+0x88>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a1e      	ldr	r2, [pc, #120]	; (800073c <MX_DMA_Init+0x88>)
 80006c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <MX_DMA_Init+0x88>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	4b18      	ldr	r3, [pc, #96]	; (800073c <MX_DMA_Init+0x88>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a17      	ldr	r2, [pc, #92]	; (800073c <MX_DMA_Init+0x88>)
 80006e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <MX_DMA_Init+0x88>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2100      	movs	r1, #0
 80006f6:	200f      	movs	r0, #15
 80006f8:	f001 fd0d 	bl	8002116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80006fc:	200f      	movs	r0, #15
 80006fe:	f001 fd26 	bl	800214e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	2010      	movs	r0, #16
 8000708:	f001 fd05 	bl	8002116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800070c:	2010      	movs	r0, #16
 800070e:	f001 fd1e 	bl	800214e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2100      	movs	r1, #0
 8000716:	202f      	movs	r0, #47	; 0x2f
 8000718:	f001 fcfd 	bl	8002116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800071c:	202f      	movs	r0, #47	; 0x2f
 800071e:	f001 fd16 	bl	800214e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	2100      	movs	r1, #0
 8000726:	2038      	movs	r0, #56	; 0x38
 8000728:	f001 fcf5 	bl	8002116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800072c:	2038      	movs	r0, #56	; 0x38
 800072e:	f001 fd0e 	bl	800214e <HAL_NVIC_EnableIRQ>

}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800

08000740 <bufferAppend>:

// implements an append function for a circular array
// when the array is full, the values at the beginning are overwritten
// the buffer array contains the last measured ADC elements to smooth the audio signal
void bufferAppend(int val, int *arr, int *ind)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	607a      	str	r2, [r7, #4]
	*ind = (*ind+1 > BUFFER_SIZE_AUX-1) ? 0 : *ind+1;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	dc03      	bgt.n	800075c <bufferAppend+0x1c>
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	3301      	adds	r3, #1
 800075a:	e000      	b.n	800075e <bufferAppend+0x1e>
 800075c:	2300      	movs	r3, #0
 800075e:	687a      	ldr	r2, [r7, #4]
 8000760:	6013      	str	r3, [r2, #0]
	arr[*ind] = val;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	68ba      	ldr	r2, [r7, #8]
 800076a:	4413      	add	r3, r2
 800076c:	68fa      	ldr	r2, [r7, #12]
 800076e:	601a      	str	r2, [r3, #0]
}
 8000770:	bf00      	nop
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <bufferFilter>:

// apply an average-filter to the buffer array
int bufferFilter(int *arr)
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	int sum = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < BUFFER_SIZE_AUX; i++) sum += arr[i];
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	e00a      	b.n	80007a4 <bufferFilter+0x28>
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	4413      	add	r3, r2
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	68fa      	ldr	r2, [r7, #12]
 800079a:	4413      	add	r3, r2
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	3301      	adds	r3, #1
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	ddf1      	ble.n	800078e <bufferFilter+0x12>
	return sum / BUFFER_SIZE_AUX;
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	0fda      	lsrs	r2, r3, #31
 80007ae:	4413      	add	r3, r2
 80007b0:	105b      	asrs	r3, r3, #1
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3714      	adds	r7, #20
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <saturate>:

// ----------------------------
// saturate, transform, amplify
// ----------------------------

int saturate(int val) { return saturateLimits(val, COLOR_MIN, COLOR_MAX); }
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	22ff      	movs	r2, #255	; 0xff
 80007c8:	2100      	movs	r1, #0
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f000 f805 	bl	80007da <saturateLimits>
 80007d0:	4603      	mov	r3, r0
 80007d2:	4618      	mov	r0, r3
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <saturateLimits>:
int saturateLimits(int val, int lowerLim, int upperLim) { return (val < lowerLim) ? lowerLim : ((val > upperLim) ? upperLim : val); }
 80007da:	b480      	push	{r7}
 80007dc:	b085      	sub	sp, #20
 80007de:	af00      	add	r7, sp, #0
 80007e0:	60f8      	str	r0, [r7, #12]
 80007e2:	60b9      	str	r1, [r7, #8]
 80007e4:	607a      	str	r2, [r7, #4]
 80007e6:	68fa      	ldr	r2, [r7, #12]
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	db05      	blt.n	80007fa <saturateLimits+0x20>
 80007ee:	68fa      	ldr	r2, [r7, #12]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4293      	cmp	r3, r2
 80007f4:	bfa8      	it	ge
 80007f6:	4613      	movge	r3, r2
 80007f8:	e000      	b.n	80007fc <saturateLimits+0x22>
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	4618      	mov	r0, r3
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <transform>:

int transform(int val, int inMin, int inMax, int outMin, int outMax)
{
 8000808:	b480      	push	{r7}
 800080a:	b087      	sub	sp, #28
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
 8000814:	603b      	str	r3, [r7, #0]
	int inHalf = inMin + (inMax - inMin) / 2;
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	1ad3      	subs	r3, r2, r3
 800081c:	0fda      	lsrs	r2, r3, #31
 800081e:	4413      	add	r3, r2
 8000820:	105b      	asrs	r3, r3, #1
 8000822:	461a      	mov	r2, r3
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	4413      	add	r3, r2
 8000828:	617b      	str	r3, [r7, #20]
	int outHalf = outMin + (outMax - outMin) / 2;
 800082a:	6a3a      	ldr	r2, [r7, #32]
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	1ad3      	subs	r3, r2, r3
 8000830:	0fda      	lsrs	r2, r3, #31
 8000832:	4413      	add	r3, r2
 8000834:	105b      	asrs	r3, r3, #1
 8000836:	461a      	mov	r2, r3
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	4413      	add	r3, r2
 800083c:	613b      	str	r3, [r7, #16]
	return val - (inHalf - outHalf);
 800083e:	697a      	ldr	r2, [r7, #20]
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	1ad3      	subs	r3, r2, r3
 8000844:	68fa      	ldr	r2, [r7, #12]
 8000846:	1ad3      	subs	r3, r2, r3
}
 8000848:	4618      	mov	r0, r3
 800084a:	371c      	adds	r7, #28
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <amplify>:

int amplify(int val) { return amplifyFactor(val, VOLUME_BOOST); }
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	2104      	movs	r1, #4
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f000 f805 	bl	800086e <amplifyFactor>
 8000864:	4603      	mov	r3, r0
 8000866:	4618      	mov	r0, r3
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <amplifyFactor>:
int amplifyFactor(int val, int fac) { return val * fac; }
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
 8000876:	6039      	str	r1, [r7, #0]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	683a      	ldr	r2, [r7, #0]
 800087c:	fb02 f303 	mul.w	r3, r2, r3
 8000880:	4618      	mov	r0, r3
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <noise>:
// ---------------
// noise generator
// ---------------

int noiseLimit(volatile uint16_t *dma, int mod) { return noise() % mod; }
int noise(volatile uint16_t *dma) { return dma[1]; }
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3302      	adds	r3, #2
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	b29b      	uxth	r3, r3
 800089c:	4618      	mov	r0, r3
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <writeRGBArray>:

// ----
// rgbs
// ----

void writeRGBArray(uint8_t *rgb) { writeRGB(rgb[0], rgb[1], rgb[2]); }
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	4618      	mov	r0, r3
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	3301      	adds	r3, #1
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	4619      	mov	r1, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	3302      	adds	r3, #2
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	461a      	mov	r2, r3
 80008c6:	f000 f805 	bl	80008d4 <writeRGB>
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <writeRGB>:
void writeRGB(uint8_t r, uint8_t g, uint8_t b)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
 80008de:	460b      	mov	r3, r1
 80008e0:	71bb      	strb	r3, [r7, #6]
 80008e2:	4613      	mov	r3, r2
 80008e4:	717b      	strb	r3, [r7, #5]
	TIM3->CCR3 = saturate(r);
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff68 	bl	80007be <saturate>
 80008ee:	4602      	mov	r2, r0
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <writeRGB+0x7c>)
 80008f2:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR1 = saturate(g);
 80008f4:	79bb      	ldrb	r3, [r7, #6]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff ff61 	bl	80007be <saturate>
 80008fc:	4602      	mov	r2, r0
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <writeRGB+0x7c>)
 8000900:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = saturate(g);
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff ff5a 	bl	80007be <saturate>
 800090a:	4602      	mov	r2, r0
 800090c:	4b10      	ldr	r3, [pc, #64]	; (8000950 <writeRGB+0x7c>)
 800090e:	639a      	str	r2, [r3, #56]	; 0x38

	// prevent higher pulses than period
	if (TIM3->CCR3 > TIM3->ARR) TIM3->CCR3 = 0;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <writeRGB+0x7c>)
 8000912:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000914:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <writeRGB+0x7c>)
 8000916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000918:	429a      	cmp	r2, r3
 800091a:	d902      	bls.n	8000922 <writeRGB+0x4e>
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <writeRGB+0x7c>)
 800091e:	2200      	movs	r2, #0
 8000920:	63da      	str	r2, [r3, #60]	; 0x3c
	if (TIM3->CCR1 > TIM3->ARR) TIM3->CCR1 = 0;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <writeRGB+0x7c>)
 8000924:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000926:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <writeRGB+0x7c>)
 8000928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800092a:	429a      	cmp	r2, r3
 800092c:	d902      	bls.n	8000934 <writeRGB+0x60>
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <writeRGB+0x7c>)
 8000930:	2200      	movs	r2, #0
 8000932:	635a      	str	r2, [r3, #52]	; 0x34
	if (TIM3->CCR2 > TIM3->ARR) TIM3->CCR2 = 0;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <writeRGB+0x7c>)
 8000936:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <writeRGB+0x7c>)
 800093a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800093c:	429a      	cmp	r2, r3
 800093e:	d902      	bls.n	8000946 <writeRGB+0x72>
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <writeRGB+0x7c>)
 8000942:	2200      	movs	r2, #0
 8000944:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40000400 	.word	0x40000400

08000954 <generator>:

// color generator
float generator(float val)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af02      	add	r7, sp, #8
 800095a:	ed87 0a01 	vstr	s0, [r7, #4]
	return transform(
 800095e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000962:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000966:	ee17 0a90 	vmov	r0, s15
 800096a:	f7ff ff73 	bl	8000854 <amplify>
 800096e:	23ff      	movs	r3, #255	; 0xff
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2300      	movs	r3, #0
 8000974:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000978:	2164      	movs	r1, #100	; 0x64
 800097a:	f7ff ff45 	bl	8000808 <transform>
 800097e:	ee07 0a90 	vmov	s15, r0
 8000982:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		VOLUME_MIN,
		VOLUME_MAX,
		COLOR_MIN,
		COLOR_MAX
	);
}
 8000986:	eeb0 0a67 	vmov.f32	s0, s15
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <emptyArray>:

// ------
// arrays
// ------

void emptyArray(int *arr, const size_t arrLen) { fillArray(0, arr, arrLen); }
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
 800099a:	683a      	ldr	r2, [r7, #0]
 800099c:	6879      	ldr	r1, [r7, #4]
 800099e:	2000      	movs	r0, #0
 80009a0:	f000 f804 	bl	80009ac <fillArray>
 80009a4:	bf00      	nop
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <fillArray>:
void fillArray(int val, int *arr, const size_t arrLen) { for (int i=0; i < arrLen; i++) arr[i] = val; }
 80009ac:	b480      	push	{r7}
 80009ae:	b087      	sub	sp, #28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	e008      	b.n	80009d0 <fillArray+0x24>
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	4413      	add	r3, r2
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	3301      	adds	r3, #1
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d8f2      	bhi.n	80009be <fillArray+0x12>
 80009d8:	bf00      	nop
 80009da:	bf00      	nop
 80009dc:	371c      	adds	r7, #28
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
	...

080009e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	; 0x28
 80009ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	4b39      	ldr	r3, [pc, #228]	; (8000ae8 <MX_GPIO_Init+0x100>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a38      	ldr	r2, [pc, #224]	; (8000ae8 <MX_GPIO_Init+0x100>)
 8000a08:	f043 0304 	orr.w	r3, r3, #4
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b36      	ldr	r3, [pc, #216]	; (8000ae8 <MX_GPIO_Init+0x100>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0304 	and.w	r3, r3, #4
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	4b32      	ldr	r3, [pc, #200]	; (8000ae8 <MX_GPIO_Init+0x100>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a31      	ldr	r2, [pc, #196]	; (8000ae8 <MX_GPIO_Init+0x100>)
 8000a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ae8 <MX_GPIO_Init+0x100>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ae8 <MX_GPIO_Init+0x100>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a2a      	ldr	r2, [pc, #168]	; (8000ae8 <MX_GPIO_Init+0x100>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b28      	ldr	r3, [pc, #160]	; (8000ae8 <MX_GPIO_Init+0x100>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <MX_GPIO_Init+0x100>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a23      	ldr	r2, [pc, #140]	; (8000ae8 <MX_GPIO_Init+0x100>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b21      	ldr	r3, [pc, #132]	; (8000ae8 <MX_GPIO_Init+0x100>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OB_GPIO_Port, LED_OB_Pin, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2120      	movs	r1, #32
 8000a72:	481e      	ldr	r0, [pc, #120]	; (8000aec <MX_GPIO_Init+0x104>)
 8000a74:	f002 f87a 	bl	8002b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_OB_Pin;
 8000a78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a82:	2302      	movs	r3, #2
 8000a84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_OB_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4818      	ldr	r0, [pc, #96]	; (8000af0 <MX_GPIO_Init+0x108>)
 8000a8e:	f001 fee9 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_OB_Pin;
 8000a92:	2320      	movs	r3, #32
 8000a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_OB_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4810      	ldr	r0, [pc, #64]	; (8000aec <MX_GPIO_Init+0x104>)
 8000aaa:	f001 fedb 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = TCH_3_Pin|TCH_4_Pin|TCH_1_Pin;
 8000aae:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	480a      	ldr	r0, [pc, #40]	; (8000aec <MX_GPIO_Init+0x104>)
 8000ac4:	f001 fece 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TCH_2_Pin;
 8000ac8:	2320      	movs	r3, #32
 8000aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TCH_2_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4806      	ldr	r0, [pc, #24]	; (8000af4 <MX_GPIO_Init+0x10c>)
 8000adc:	f001 fec2 	bl	8002864 <HAL_GPIO_Init>

}
 8000ae0:	bf00      	nop
 8000ae2:	3728      	adds	r7, #40	; 0x28
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020000 	.word	0x40020000
 8000af0:	40020800 	.word	0x40020800
 8000af4:	40020400 	.word	0x40020400

08000af8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <MX_I2C1_Init+0x50>)
 8000afe:	4a13      	ldr	r2, [pc, #76]	; (8000b4c <MX_I2C1_Init+0x54>)
 8000b00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_I2C1_Init+0x50>)
 8000b04:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <MX_I2C1_Init+0x58>)
 8000b06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_I2C1_Init+0x50>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <MX_I2C1_Init+0x50>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_I2C1_Init+0x50>)
 8000b16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <MX_I2C1_Init+0x50>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_I2C1_Init+0x50>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b28:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <MX_I2C1_Init+0x50>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_I2C1_Init+0x50>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b34:	4804      	ldr	r0, [pc, #16]	; (8000b48 <MX_I2C1_Init+0x50>)
 8000b36:	f002 f833 	bl	8002ba0 <HAL_I2C_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b40:	f000 f9b0 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000140 	.word	0x20000140
 8000b4c:	40005400 	.word	0x40005400
 8000b50:	000186a0 	.word	0x000186a0

08000b54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a19      	ldr	r2, [pc, #100]	; (8000bd8 <HAL_I2C_MspInit+0x84>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d12c      	bne.n	8000bd0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <HAL_I2C_MspInit+0x88>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a17      	ldr	r2, [pc, #92]	; (8000bdc <HAL_I2C_MspInit+0x88>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <HAL_I2C_MspInit+0x88>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_I2C_SCL_Pin|LCD_I2C_SDA_Pin;
 8000b92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b98:	2312      	movs	r3, #18
 8000b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	4619      	mov	r1, r3
 8000bae:	480c      	ldr	r0, [pc, #48]	; (8000be0 <HAL_I2C_MspInit+0x8c>)
 8000bb0:	f001 fe58 	bl	8002864 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <HAL_I2C_MspInit+0x88>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	4a07      	ldr	r2, [pc, #28]	; (8000bdc <HAL_I2C_MspInit+0x88>)
 8000bbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <HAL_I2C_MspInit+0x88>)
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000bd0:	bf00      	nop
 8000bd2:	3728      	adds	r7, #40	; 0x28
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40005400 	.word	0x40005400
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020400 	.word	0x40020400

08000be4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08e      	sub	sp, #56	; 0x38
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	// left audio channel
	uint16_t *buffArr = (uint16_t *)malloc(BUFFER_SIZE_AUX * sizeof(uint16_t));
 8000bea:	2004      	movs	r0, #4
 8000bec:	f003 fdec 	bl	80047c8 <malloc>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
	emptyArray(buffArr, BUFFER_SIZE_AUX);
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000bf8:	f7ff feca 	bl	8000990 <emptyArray>
	size_t buffInd = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	613b      	str	r3, [r7, #16]
	uint16_t aux = 0, aux_filter = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	847b      	strh	r3, [r7, #34]	; 0x22
 8000c04:	2300      	movs	r3, #0
 8000c06:	843b      	strh	r3, [r7, #32]

	// dma circular buffer
	volatile uint16_t buffDMA[CHANNEL_COUNT_ADC];

	// rgb led
	uint8_t *rgbArr = (uint8_t *)malloc(ARRAY_SIZE_RGB * sizeof(uint8_t));
 8000c08:	2003      	movs	r0, #3
 8000c0a:	f003 fddd 	bl	80047c8 <malloc>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	61fb      	str	r3, [r7, #28]
	emptyArray(rgbArr, ARRAY_SIZE_RGB);
 8000c12:	2103      	movs	r1, #3
 8000c14:	69f8      	ldr	r0, [r7, #28]
 8000c16:	f7ff febb 	bl	8000990 <emptyArray>
	size_t colSel = 0, colSelPrev = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	637b      	str	r3, [r7, #52]	; 0x34
 8000c1e:	2300      	movs	r3, #0
 8000c20:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t colVal = COLOR_HALF, colValPrev = COLOR_HALF;
 8000c22:	237f      	movs	r3, #127	; 0x7f
 8000c24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000c28:	237f      	movs	r3, #127	; 0x7f
 8000c2a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	// touch sensor
	int *touchArr = (int *)malloc(CHANNEL_COUNT_TCH * sizeof(int));
 8000c2e:	2010      	movs	r0, #16
 8000c30:	f003 fdca 	bl	80047c8 <malloc>
 8000c34:	4603      	mov	r3, r0
 8000c36:	61bb      	str	r3, [r7, #24]

	// noise generator
	uint16_t rng = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	82fb      	strh	r3, [r7, #22]

	// in-loop ticks
	uint32_t ticks = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c40:	f000 fd06 	bl	8001650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c44:	f000 f8c2 	bl	8000dcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c48:	f7ff fece 	bl	80009e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c4c:	f000 fc64 	bl	8001518 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000c50:	f7ff fd30 	bl	80006b4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c54:	f7ff fc3a 	bl	80004cc <MX_ADC1_Init>
  MX_I2C1_Init();
 8000c58:	f7ff ff4e 	bl	8000af8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000c5c:	f000 f9ea 	bl	8001034 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c60:	f000 fa38 	bl	80010d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c64:	f000 fa82 	bl	800116c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	// start pwm timer for rgb
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000c68:	2108      	movs	r1, #8
 8000c6a:	4855      	ldr	r0, [pc, #340]	; (8000dc0 <main+0x1dc>)
 8000c6c:	f002 fdf8 	bl	8003860 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000c70:	2104      	movs	r1, #4
 8000c72:	4853      	ldr	r0, [pc, #332]	; (8000dc0 <main+0x1dc>)
 8000c74:	f002 fdf4 	bl	8003860 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4851      	ldr	r0, [pc, #324]	; (8000dc0 <main+0x1dc>)
 8000c7c:	f002 fdf0 	bl	8003860 <HAL_TIM_PWM_Start>
	writeRGBArray(rgbArr);
 8000c80:	69f8      	ldr	r0, [r7, #28]
 8000c82:	f7ff fe11 	bl	80008a8 <writeRGBArray>

	// start adc to dma
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&buffDMA, CHANNEL_COUNT_ADC);
 8000c86:	f107 030c 	add.w	r3, r7, #12
 8000c8a:	2202      	movs	r2, #2
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	484d      	ldr	r0, [pc, #308]	; (8000dc4 <main+0x1e0>)
 8000c90:	f000 fdb8 	bl	8001804 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// get audio from adc via dma, write buffer and apply filter
		aux = buffDMA[0];
 8000c94:	89bb      	ldrh	r3, [r7, #12]
 8000c96:	847b      	strh	r3, [r7, #34]	; 0x22
		bufferAppend(aux, buffArr, &buffInd);
 8000c98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000c9a:	f107 0210 	add.w	r2, r7, #16
 8000c9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fd4d 	bl	8000740 <bufferAppend>
		aux_filter = bufferFilter(buffArr);
 8000ca6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ca8:	f7ff fd68 	bl	800077c <bufferFilter>
 8000cac:	4603      	mov	r3, r0
 8000cae:	843b      	strh	r3, [r7, #32]

		// color generator
		rgbArr[0] = generator(aux_filter);
 8000cb0:	8c3b      	ldrh	r3, [r7, #32]
 8000cb2:	ee07 3a90 	vmov	s15, r3
 8000cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cba:	eeb0 0a67 	vmov.f32	s0, s15
 8000cbe:	f7ff fe49 	bl	8000954 <generator>
 8000cc2:	eef0 7a40 	vmov.f32	s15, s0
 8000cc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cca:	edc7 7a01 	vstr	s15, [r7, #4]
 8000cce:	793b      	ldrb	r3, [r7, #4]
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	701a      	strb	r2, [r3, #0]
		rgbArr[1] = generator(aux_filter);
 8000cd6:	8c3b      	ldrh	r3, [r7, #32]
 8000cd8:	ee07 3a90 	vmov	s15, r3
 8000cdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ce0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ce4:	f7ff fe36 	bl	8000954 <generator>
 8000ce8:	eef0 7a40 	vmov.f32	s15, s0
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cf4:	edc7 7a01 	vstr	s15, [r7, #4]
 8000cf8:	793a      	ldrb	r2, [r7, #4]
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	701a      	strb	r2, [r3, #0]
		rgbArr[2] = generator(aux_filter);
 8000cfe:	8c3b      	ldrh	r3, [r7, #32]
 8000d00:	ee07 3a90 	vmov	s15, r3
 8000d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d08:	eeb0 0a67 	vmov.f32	s0, s15
 8000d0c:	f7ff fe22 	bl	8000954 <generator>
 8000d10:	eef0 7a40 	vmov.f32	s15, s0
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	3302      	adds	r3, #2
 8000d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d1c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000d20:	793a      	ldrb	r2, [r7, #4]
 8000d22:	b2d2      	uxtb	r2, r2
 8000d24:	701a      	strb	r2, [r3, #0]

		// modify color
		if (ticks % COLOR_CYCLE == 0)
 8000d26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d28:	4b27      	ldr	r3, [pc, #156]	; (8000dc8 <main+0x1e4>)
 8000d2a:	fba3 2301 	umull	r2, r3, r3, r1
 8000d2e:	091a      	lsrs	r2, r3, #4
 8000d30:	4613      	mov	r3, r2
 8000d32:	011b      	lsls	r3, r3, #4
 8000d34:	1a9b      	subs	r3, r3, r2
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	1aca      	subs	r2, r1, r3
 8000d3a:	2a00      	cmp	r2, #0
 8000d3c:	d113      	bne.n	8000d66 <main+0x182>
		{
			// save previous color
			colSelPrev = colSel;
 8000d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d40:	633b      	str	r3, [r7, #48]	; 0x30
			colValPrev = colVal;
 8000d42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d46:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			// get next random color
			colSel = noise(buffDMA, ARRAY_SIZE_RGB);
 8000d4a:	f107 030c 	add.w	r3, r7, #12
 8000d4e:	2103      	movs	r1, #3
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fd9b 	bl	800088c <noise>
 8000d56:	4603      	mov	r3, r0
 8000d58:	637b      	str	r3, [r7, #52]	; 0x34
			colVal = rgbArr[colSel];
 8000d5a:	69fa      	ldr	r2, [r7, #28]
 8000d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d5e:	4413      	add	r3, r2
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		// fade in previous color
		colValPrev += COLOR_FADE;
 8000d66:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000d6a:	330a      	adds	r3, #10
 8000d6c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		rgbArr[colSelPrev] = min(colValPrev, rgbArr[colSelPrev]);
 8000d70:	69fa      	ldr	r2, [r7, #28]
 8000d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d74:	4413      	add	r3, r2
 8000d76:	781a      	ldrb	r2, [r3, #0]
 8000d78:	69f9      	ldr	r1, [r7, #28]
 8000d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d7c:	440b      	add	r3, r1
 8000d7e:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8000d82:	428a      	cmp	r2, r1
 8000d84:	bf28      	it	cs
 8000d86:	460a      	movcs	r2, r1
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	701a      	strb	r2, [r3, #0]
		// fade out next color, if unequal to the previous color
		if (colSel != colSelPrev)
 8000d8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d00a      	beq.n	8000daa <main+0x1c6>
		{
			colVal -= COLOR_FADE;
 8000d94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d98:	3b0a      	subs	r3, #10
 8000d9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			rgbArr[colSel] = colVal;
 8000d9e:	69fa      	ldr	r2, [r7, #28]
 8000da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000da2:	4413      	add	r3, r2
 8000da4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000da8:	701a      	strb	r2, [r3, #0]
		}

		// set rgb of led
		writeRGBArray(rgbArr);
 8000daa:	69f8      	ldr	r0, [r7, #28]
 8000dac:	f7ff fd7c 	bl	80008a8 <writeRGBArray>

		// update in-loop ticks and wait
		ticks++;
 8000db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000db2:	3301      	adds	r3, #1
 8000db4:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_Delay(DELAY);
 8000db6:	200a      	movs	r0, #10
 8000db8:	f000 fcbc 	bl	8001734 <HAL_Delay>
		aux = buffDMA[0];
 8000dbc:	e76a      	b.n	8000c94 <main+0xb0>
 8000dbe:	bf00      	nop
 8000dc0:	200001f4 	.word	0x200001f4
 8000dc4:	20000098 	.word	0x20000098
 8000dc8:	88888889 	.word	0x88888889

08000dcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b094      	sub	sp, #80	; 0x50
 8000dd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd2:	f107 0320 	add.w	r3, r7, #32
 8000dd6:	2230      	movs	r2, #48	; 0x30
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f003 fcfc 	bl	80047d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df0:	2300      	movs	r3, #0
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	4b29      	ldr	r3, [pc, #164]	; (8000e9c <SystemClock_Config+0xd0>)
 8000df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df8:	4a28      	ldr	r2, [pc, #160]	; (8000e9c <SystemClock_Config+0xd0>)
 8000dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dfe:	6413      	str	r3, [r2, #64]	; 0x40
 8000e00:	4b26      	ldr	r3, [pc, #152]	; (8000e9c <SystemClock_Config+0xd0>)
 8000e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	4b23      	ldr	r3, [pc, #140]	; (8000ea0 <SystemClock_Config+0xd4>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e18:	4a21      	ldr	r2, [pc, #132]	; (8000ea0 <SystemClock_Config+0xd4>)
 8000e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e1e:	6013      	str	r3, [r2, #0]
 8000e20:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <SystemClock_Config+0xd4>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e30:	2301      	movs	r3, #1
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e34:	2310      	movs	r3, #16
 8000e36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e40:	2310      	movs	r3, #16
 8000e42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e44:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e48:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e4a:	2304      	movs	r3, #4
 8000e4c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e4e:	2307      	movs	r3, #7
 8000e50:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e52:	f107 0320 	add.w	r3, r7, #32
 8000e56:	4618      	mov	r0, r3
 8000e58:	f001 ffe6 	bl	8002e28 <HAL_RCC_OscConfig>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e62:	f000 f81f 	bl	8000ea4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e66:	230f      	movs	r3, #15
 8000e68:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	2102      	movs	r1, #2
 8000e82:	4618      	mov	r0, r3
 8000e84:	f002 fa48 	bl	8003318 <HAL_RCC_ClockConfig>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000e8e:	f000 f809 	bl	8000ea4 <Error_Handler>
  }
}
 8000e92:	bf00      	nop
 8000e94:	3750      	adds	r7, #80	; 0x50
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40007000 	.word	0x40007000

08000ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea8:	b672      	cpsid	i
}
 8000eaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eac:	e7fe      	b.n	8000eac <Error_Handler+0x8>
	...

08000eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <HAL_MspInit+0x4c>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	4a0f      	ldr	r2, [pc, #60]	; (8000efc <HAL_MspInit+0x4c>)
 8000ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <HAL_MspInit+0x4c>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	603b      	str	r3, [r7, #0]
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <HAL_MspInit+0x4c>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	4a08      	ldr	r2, [pc, #32]	; (8000efc <HAL_MspInit+0x4c>)
 8000edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_MspInit+0x4c>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000eee:	2007      	movs	r0, #7
 8000ef0:	f001 f906 	bl	8002100 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40023800 	.word	0x40023800

08000f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <NMI_Handler+0x4>

08000f06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <HardFault_Handler+0x4>

08000f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <MemManage_Handler+0x4>

08000f12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <BusFault_Handler+0x4>

08000f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <UsageFault_Handler+0x4>

08000f1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f4c:	f000 fbd2 	bl	80016f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <DMA1_Stream4_IRQHandler+0x10>)
 8000f5a:	f001 fa19 	bl	8002390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2000023c 	.word	0x2000023c

08000f68 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8000f6c:	4802      	ldr	r0, [pc, #8]	; (8000f78 <DMA1_Stream5_IRQHandler+0x10>)
 8000f6e:	f001 fa0f 	bl	8002390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	2000029c 	.word	0x2000029c

08000f7c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <DMA1_Stream7_IRQHandler+0x10>)
 8000f82:	f001 fa05 	bl	8002390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000194 	.word	0x20000194

08000f90 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <DMA2_Stream0_IRQHandler+0x10>)
 8000f96:	f001 f9fb 	bl	8002390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200000e0 	.word	0x200000e0

08000fa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fac:	4a14      	ldr	r2, [pc, #80]	; (8001000 <_sbrk+0x5c>)
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <_sbrk+0x60>)
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <_sbrk+0x64>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d102      	bne.n	8000fc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <_sbrk+0x64>)
 8000fc2:	4a12      	ldr	r2, [pc, #72]	; (800100c <_sbrk+0x68>)
 8000fc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <_sbrk+0x64>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d207      	bcs.n	8000fe4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd4:	f003 fbce 	bl	8004774 <__errno>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	220c      	movs	r2, #12
 8000fdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe2:	e009      	b.n	8000ff8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <_sbrk+0x64>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fea:	4b07      	ldr	r3, [pc, #28]	; (8001008 <_sbrk+0x64>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	4a05      	ldr	r2, [pc, #20]	; (8001008 <_sbrk+0x64>)
 8000ff4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20018000 	.word	0x20018000
 8001004:	00000400 	.word	0x00000400
 8001008:	2000008c 	.word	0x2000008c
 800100c:	200003e8 	.word	0x200003e8

08001010 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <SystemInit+0x20>)
 8001016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800101a:	4a05      	ldr	r2, [pc, #20]	; (8001030 <SystemInit+0x20>)
 800101c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001020:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim3_ch2;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800103a:	f107 0308 	add.w	r3, r7, #8
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001048:	463b      	mov	r3, r7
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001050:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <MX_TIM1_Init+0x98>)
 8001052:	4a1f      	ldr	r2, [pc, #124]	; (80010d0 <MX_TIM1_Init+0x9c>)
 8001054:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001056:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <MX_TIM1_Init+0x98>)
 8001058:	2200      	movs	r2, #0
 800105a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105c:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <MX_TIM1_Init+0x98>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001062:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <MX_TIM1_Init+0x98>)
 8001064:	2200      	movs	r2, #0
 8001066:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001068:	4b18      	ldr	r3, [pc, #96]	; (80010cc <MX_TIM1_Init+0x98>)
 800106a:	2200      	movs	r2, #0
 800106c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800106e:	4b17      	ldr	r3, [pc, #92]	; (80010cc <MX_TIM1_Init+0x98>)
 8001070:	2200      	movs	r2, #0
 8001072:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001074:	4b15      	ldr	r3, [pc, #84]	; (80010cc <MX_TIM1_Init+0x98>)
 8001076:	2200      	movs	r2, #0
 8001078:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800107a:	4814      	ldr	r0, [pc, #80]	; (80010cc <MX_TIM1_Init+0x98>)
 800107c:	f002 fb48 	bl	8003710 <HAL_TIM_Base_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8001086:	f7ff ff0d 	bl	8000ea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800108a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001090:	f107 0308 	add.w	r3, r7, #8
 8001094:	4619      	mov	r1, r3
 8001096:	480d      	ldr	r0, [pc, #52]	; (80010cc <MX_TIM1_Init+0x98>)
 8001098:	f002 fd54 	bl	8003b44 <HAL_TIM_ConfigClockSource>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 80010a2:	f7ff feff 	bl	8000ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a6:	2300      	movs	r3, #0
 80010a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010ae:	463b      	mov	r3, r7
 80010b0:	4619      	mov	r1, r3
 80010b2:	4806      	ldr	r0, [pc, #24]	; (80010cc <MX_TIM1_Init+0x98>)
 80010b4:	f003 f8da 	bl	800426c <HAL_TIMEx_MasterConfigSynchronization>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80010be:	f7ff fef1 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200002fc 	.word	0x200002fc
 80010d0:	40010000 	.word	0x40010000

080010d4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010da:	f107 0308 	add.w	r3, r7, #8
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e8:	463b      	mov	r3, r7
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010f0:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <MX_TIM2_Init+0x94>)
 80010f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010f8:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <MX_TIM2_Init+0x94>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fe:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <MX_TIM2_Init+0x94>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001104:	4b18      	ldr	r3, [pc, #96]	; (8001168 <MX_TIM2_Init+0x94>)
 8001106:	f04f 32ff 	mov.w	r2, #4294967295
 800110a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800110c:	4b16      	ldr	r3, [pc, #88]	; (8001168 <MX_TIM2_Init+0x94>)
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <MX_TIM2_Init+0x94>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001118:	4813      	ldr	r0, [pc, #76]	; (8001168 <MX_TIM2_Init+0x94>)
 800111a:	f002 faf9 	bl	8003710 <HAL_TIM_Base_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001124:	f7ff febe 	bl	8000ea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800112c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800112e:	f107 0308 	add.w	r3, r7, #8
 8001132:	4619      	mov	r1, r3
 8001134:	480c      	ldr	r0, [pc, #48]	; (8001168 <MX_TIM2_Init+0x94>)
 8001136:	f002 fd05 	bl	8003b44 <HAL_TIM_ConfigClockSource>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001140:	f7ff feb0 	bl	8000ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001144:	2300      	movs	r3, #0
 8001146:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800114c:	463b      	mov	r3, r7
 800114e:	4619      	mov	r1, r3
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_TIM2_Init+0x94>)
 8001152:	f003 f88b 	bl	800426c <HAL_TIMEx_MasterConfigSynchronization>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800115c:	f7ff fea2 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000344 	.word	0x20000344

0800116c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08e      	sub	sp, #56	; 0x38
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001172:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001180:	f107 0320 	add.w	r3, r7, #32
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
 8001198:	615a      	str	r2, [r3, #20]
 800119a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800119c:	4b37      	ldr	r3, [pc, #220]	; (800127c <MX_TIM3_Init+0x110>)
 800119e:	4a38      	ldr	r2, [pc, #224]	; (8001280 <MX_TIM3_Init+0x114>)
 80011a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80011a2:	4b36      	ldr	r3, [pc, #216]	; (800127c <MX_TIM3_Init+0x110>)
 80011a4:	2253      	movs	r2, #83	; 0x53
 80011a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a8:	4b34      	ldr	r3, [pc, #208]	; (800127c <MX_TIM3_Init+0x110>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255-1;
 80011ae:	4b33      	ldr	r3, [pc, #204]	; (800127c <MX_TIM3_Init+0x110>)
 80011b0:	22fe      	movs	r2, #254	; 0xfe
 80011b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b4:	4b31      	ldr	r3, [pc, #196]	; (800127c <MX_TIM3_Init+0x110>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ba:	4b30      	ldr	r3, [pc, #192]	; (800127c <MX_TIM3_Init+0x110>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011c0:	482e      	ldr	r0, [pc, #184]	; (800127c <MX_TIM3_Init+0x110>)
 80011c2:	f002 faa5 	bl	8003710 <HAL_TIM_Base_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80011cc:	f7ff fe6a 	bl	8000ea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011da:	4619      	mov	r1, r3
 80011dc:	4827      	ldr	r0, [pc, #156]	; (800127c <MX_TIM3_Init+0x110>)
 80011de:	f002 fcb1 	bl	8003b44 <HAL_TIM_ConfigClockSource>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80011e8:	f7ff fe5c 	bl	8000ea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011ec:	4823      	ldr	r0, [pc, #140]	; (800127c <MX_TIM3_Init+0x110>)
 80011ee:	f002 fade 	bl	80037ae <HAL_TIM_PWM_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80011f8:	f7ff fe54 	bl	8000ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fc:	2300      	movs	r3, #0
 80011fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001200:	2300      	movs	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001204:	f107 0320 	add.w	r3, r7, #32
 8001208:	4619      	mov	r1, r3
 800120a:	481c      	ldr	r0, [pc, #112]	; (800127c <MX_TIM3_Init+0x110>)
 800120c:	f003 f82e 	bl	800426c <HAL_TIMEx_MasterConfigSynchronization>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001216:	f7ff fe45 	bl	8000ea4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800121a:	2360      	movs	r3, #96	; 0x60
 800121c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 255;
 800121e:	23ff      	movs	r3, #255	; 0xff
 8001220:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	2200      	movs	r2, #0
 800122e:	4619      	mov	r1, r3
 8001230:	4812      	ldr	r0, [pc, #72]	; (800127c <MX_TIM3_Init+0x110>)
 8001232:	f002 fbc5 	bl	80039c0 <HAL_TIM_PWM_ConfigChannel>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800123c:	f7ff fe32 	bl	8000ea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	2204      	movs	r2, #4
 8001244:	4619      	mov	r1, r3
 8001246:	480d      	ldr	r0, [pc, #52]	; (800127c <MX_TIM3_Init+0x110>)
 8001248:	f002 fbba 	bl	80039c0 <HAL_TIM_PWM_ConfigChannel>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8001252:	f7ff fe27 	bl	8000ea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2208      	movs	r2, #8
 800125a:	4619      	mov	r1, r3
 800125c:	4807      	ldr	r0, [pc, #28]	; (800127c <MX_TIM3_Init+0x110>)
 800125e:	f002 fbaf 	bl	80039c0 <HAL_TIM_PWM_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8001268:	f7ff fe1c 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800126c:	4803      	ldr	r0, [pc, #12]	; (800127c <MX_TIM3_Init+0x110>)
 800126e:	f000 f8f9 	bl	8001464 <HAL_TIM_MspPostInit>

}
 8001272:	bf00      	nop
 8001274:	3738      	adds	r7, #56	; 0x38
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200001f4 	.word	0x200001f4
 8001280:	40000400 	.word	0x40000400

08001284 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a6b      	ldr	r2, [pc, #428]	; (8001440 <HAL_TIM_Base_MspInit+0x1bc>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d10e      	bne.n	80012b4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	4b6a      	ldr	r3, [pc, #424]	; (8001444 <HAL_TIM_Base_MspInit+0x1c0>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	4a69      	ldr	r2, [pc, #420]	; (8001444 <HAL_TIM_Base_MspInit+0x1c0>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6453      	str	r3, [r2, #68]	; 0x44
 80012a6:	4b67      	ldr	r3, [pc, #412]	; (8001444 <HAL_TIM_Base_MspInit+0x1c0>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	697b      	ldr	r3, [r7, #20]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80012b2:	e0c0      	b.n	8001436 <HAL_TIM_Base_MspInit+0x1b2>
  else if(tim_baseHandle->Instance==TIM2)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012bc:	d10e      	bne.n	80012dc <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	4b60      	ldr	r3, [pc, #384]	; (8001444 <HAL_TIM_Base_MspInit+0x1c0>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a5f      	ldr	r2, [pc, #380]	; (8001444 <HAL_TIM_Base_MspInit+0x1c0>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
 80012ce:	4b5d      	ldr	r3, [pc, #372]	; (8001444 <HAL_TIM_Base_MspInit+0x1c0>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]
}
 80012da:	e0ac      	b.n	8001436 <HAL_TIM_Base_MspInit+0x1b2>
  else if(tim_baseHandle->Instance==TIM3)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a59      	ldr	r2, [pc, #356]	; (8001448 <HAL_TIM_Base_MspInit+0x1c4>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	f040 80a7 	bne.w	8001436 <HAL_TIM_Base_MspInit+0x1b2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	4b55      	ldr	r3, [pc, #340]	; (8001444 <HAL_TIM_Base_MspInit+0x1c0>)
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	4a54      	ldr	r2, [pc, #336]	; (8001444 <HAL_TIM_Base_MspInit+0x1c0>)
 80012f2:	f043 0302 	orr.w	r3, r3, #2
 80012f6:	6413      	str	r3, [r2, #64]	; 0x40
 80012f8:	4b52      	ldr	r3, [pc, #328]	; (8001444 <HAL_TIM_Base_MspInit+0x1c0>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]
    hdma_tim3_ch3.Instance = DMA1_Stream7;
 8001304:	4b51      	ldr	r3, [pc, #324]	; (800144c <HAL_TIM_Base_MspInit+0x1c8>)
 8001306:	4a52      	ldr	r2, [pc, #328]	; (8001450 <HAL_TIM_Base_MspInit+0x1cc>)
 8001308:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Channel = DMA_CHANNEL_5;
 800130a:	4b50      	ldr	r3, [pc, #320]	; (800144c <HAL_TIM_Base_MspInit+0x1c8>)
 800130c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001310:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001312:	4b4e      	ldr	r3, [pc, #312]	; (800144c <HAL_TIM_Base_MspInit+0x1c8>)
 8001314:	2240      	movs	r2, #64	; 0x40
 8001316:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001318:	4b4c      	ldr	r3, [pc, #304]	; (800144c <HAL_TIM_Base_MspInit+0x1c8>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800131e:	4b4b      	ldr	r3, [pc, #300]	; (800144c <HAL_TIM_Base_MspInit+0x1c8>)
 8001320:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001324:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001326:	4b49      	ldr	r3, [pc, #292]	; (800144c <HAL_TIM_Base_MspInit+0x1c8>)
 8001328:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800132c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800132e:	4b47      	ldr	r3, [pc, #284]	; (800144c <HAL_TIM_Base_MspInit+0x1c8>)
 8001330:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001334:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_NORMAL;
 8001336:	4b45      	ldr	r3, [pc, #276]	; (800144c <HAL_TIM_Base_MspInit+0x1c8>)
 8001338:	2200      	movs	r2, #0
 800133a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 800133c:	4b43      	ldr	r3, [pc, #268]	; (800144c <HAL_TIM_Base_MspInit+0x1c8>)
 800133e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001342:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001344:	4b41      	ldr	r3, [pc, #260]	; (800144c <HAL_TIM_Base_MspInit+0x1c8>)
 8001346:	2200      	movs	r2, #0
 8001348:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 800134a:	4840      	ldr	r0, [pc, #256]	; (800144c <HAL_TIM_Base_MspInit+0x1c8>)
 800134c:	f000 ff1a 	bl	8002184 <HAL_DMA_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_TIM_Base_MspInit+0xd6>
      Error_Handler();
 8001356:	f7ff fda5 	bl	8000ea4 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a3b      	ldr	r2, [pc, #236]	; (800144c <HAL_TIM_Base_MspInit+0x1c8>)
 800135e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001360:	4a3a      	ldr	r2, [pc, #232]	; (800144c <HAL_TIM_Base_MspInit+0x1c8>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 8001366:	4b3b      	ldr	r3, [pc, #236]	; (8001454 <HAL_TIM_Base_MspInit+0x1d0>)
 8001368:	4a3b      	ldr	r2, [pc, #236]	; (8001458 <HAL_TIM_Base_MspInit+0x1d4>)
 800136a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 800136c:	4b39      	ldr	r3, [pc, #228]	; (8001454 <HAL_TIM_Base_MspInit+0x1d0>)
 800136e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001372:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001374:	4b37      	ldr	r3, [pc, #220]	; (8001454 <HAL_TIM_Base_MspInit+0x1d0>)
 8001376:	2240      	movs	r2, #64	; 0x40
 8001378:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800137a:	4b36      	ldr	r3, [pc, #216]	; (8001454 <HAL_TIM_Base_MspInit+0x1d0>)
 800137c:	2200      	movs	r2, #0
 800137e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001380:	4b34      	ldr	r3, [pc, #208]	; (8001454 <HAL_TIM_Base_MspInit+0x1d0>)
 8001382:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001386:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001388:	4b32      	ldr	r3, [pc, #200]	; (8001454 <HAL_TIM_Base_MspInit+0x1d0>)
 800138a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800138e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001390:	4b30      	ldr	r3, [pc, #192]	; (8001454 <HAL_TIM_Base_MspInit+0x1d0>)
 8001392:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001396:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8001398:	4b2e      	ldr	r3, [pc, #184]	; (8001454 <HAL_TIM_Base_MspInit+0x1d0>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_MEDIUM;
 800139e:	4b2d      	ldr	r3, [pc, #180]	; (8001454 <HAL_TIM_Base_MspInit+0x1d0>)
 80013a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013a4:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013a6:	4b2b      	ldr	r3, [pc, #172]	; (8001454 <HAL_TIM_Base_MspInit+0x1d0>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80013ac:	4829      	ldr	r0, [pc, #164]	; (8001454 <HAL_TIM_Base_MspInit+0x1d0>)
 80013ae:	f000 fee9 	bl	8002184 <HAL_DMA_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <HAL_TIM_Base_MspInit+0x138>
      Error_Handler();
 80013b8:	f7ff fd74 	bl	8000ea4 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a25      	ldr	r2, [pc, #148]	; (8001454 <HAL_TIM_Base_MspInit+0x1d0>)
 80013c0:	629a      	str	r2, [r3, #40]	; 0x28
 80013c2:	4a24      	ldr	r2, [pc, #144]	; (8001454 <HAL_TIM_Base_MspInit+0x1d0>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 80013c8:	4b24      	ldr	r3, [pc, #144]	; (800145c <HAL_TIM_Base_MspInit+0x1d8>)
 80013ca:	4a25      	ldr	r2, [pc, #148]	; (8001460 <HAL_TIM_Base_MspInit+0x1dc>)
 80013cc:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 80013ce:	4b23      	ldr	r3, [pc, #140]	; (800145c <HAL_TIM_Base_MspInit+0x1d8>)
 80013d0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80013d4:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013d6:	4b21      	ldr	r3, [pc, #132]	; (800145c <HAL_TIM_Base_MspInit+0x1d8>)
 80013d8:	2240      	movs	r2, #64	; 0x40
 80013da:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80013dc:	4b1f      	ldr	r3, [pc, #124]	; (800145c <HAL_TIM_Base_MspInit+0x1d8>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80013e2:	4b1e      	ldr	r3, [pc, #120]	; (800145c <HAL_TIM_Base_MspInit+0x1d8>)
 80013e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013e8:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013ea:	4b1c      	ldr	r3, [pc, #112]	; (800145c <HAL_TIM_Base_MspInit+0x1d8>)
 80013ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013f0:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013f2:	4b1a      	ldr	r3, [pc, #104]	; (800145c <HAL_TIM_Base_MspInit+0x1d8>)
 80013f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013f8:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80013fa:	4b18      	ldr	r3, [pc, #96]	; (800145c <HAL_TIM_Base_MspInit+0x1d8>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001400:	4b16      	ldr	r3, [pc, #88]	; (800145c <HAL_TIM_Base_MspInit+0x1d8>)
 8001402:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001406:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001408:	4b14      	ldr	r3, [pc, #80]	; (800145c <HAL_TIM_Base_MspInit+0x1d8>)
 800140a:	2200      	movs	r2, #0
 800140c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 800140e:	4813      	ldr	r0, [pc, #76]	; (800145c <HAL_TIM_Base_MspInit+0x1d8>)
 8001410:	f000 feb8 	bl	8002184 <HAL_DMA_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_TIM_Base_MspInit+0x19a>
      Error_Handler();
 800141a:	f7ff fd43 	bl	8000ea4 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a0e      	ldr	r2, [pc, #56]	; (800145c <HAL_TIM_Base_MspInit+0x1d8>)
 8001422:	625a      	str	r2, [r3, #36]	; 0x24
 8001424:	4a0d      	ldr	r2, [pc, #52]	; (800145c <HAL_TIM_Base_MspInit+0x1d8>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a0b      	ldr	r2, [pc, #44]	; (800145c <HAL_TIM_Base_MspInit+0x1d8>)
 800142e:	639a      	str	r2, [r3, #56]	; 0x38
 8001430:	4a0a      	ldr	r2, [pc, #40]	; (800145c <HAL_TIM_Base_MspInit+0x1d8>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001436:	bf00      	nop
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40010000 	.word	0x40010000
 8001444:	40023800 	.word	0x40023800
 8001448:	40000400 	.word	0x40000400
 800144c:	20000194 	.word	0x20000194
 8001450:	400260b8 	.word	0x400260b8
 8001454:	2000029c 	.word	0x2000029c
 8001458:	40026088 	.word	0x40026088
 800145c:	2000023c 	.word	0x2000023c
 8001460:	40026070 	.word	0x40026070

08001464 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a21      	ldr	r2, [pc, #132]	; (8001508 <HAL_TIM_MspPostInit+0xa4>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d13b      	bne.n	80014fe <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	4b20      	ldr	r3, [pc, #128]	; (800150c <HAL_TIM_MspPostInit+0xa8>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a1f      	ldr	r2, [pc, #124]	; (800150c <HAL_TIM_MspPostInit+0xa8>)
 8001490:	f043 0302 	orr.w	r3, r3, #2
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b1d      	ldr	r3, [pc, #116]	; (800150c <HAL_TIM_MspPostInit+0xa8>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	4b19      	ldr	r3, [pc, #100]	; (800150c <HAL_TIM_MspPostInit+0xa8>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a18      	ldr	r2, [pc, #96]	; (800150c <HAL_TIM_MspPostInit+0xa8>)
 80014ac:	f043 0304 	orr.w	r3, r3, #4
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b16      	ldr	r3, [pc, #88]	; (800150c <HAL_TIM_MspPostInit+0xa8>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PC7     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin;
 80014be:	2311      	movs	r3, #17
 80014c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80014ca:	2301      	movs	r3, #1
 80014cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014ce:	2302      	movs	r3, #2
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	480d      	ldr	r0, [pc, #52]	; (8001510 <HAL_TIM_MspPostInit+0xac>)
 80014da:	f001 f9c3 	bl	8002864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_B_Pin;
 80014de:	2380      	movs	r3, #128	; 0x80
 80014e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80014ea:	2301      	movs	r3, #1
 80014ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014ee:	2302      	movs	r3, #2
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	4806      	ldr	r0, [pc, #24]	; (8001514 <HAL_TIM_MspPostInit+0xb0>)
 80014fa:	f001 f9b3 	bl	8002864 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80014fe:	bf00      	nop
 8001500:	3728      	adds	r7, #40	; 0x28
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40000400 	.word	0x40000400
 800150c:	40023800 	.word	0x40023800
 8001510:	40020400 	.word	0x40020400
 8001514:	40020800 	.word	0x40020800

08001518 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 800151e:	4a12      	ldr	r2, [pc, #72]	; (8001568 <MX_USART2_UART_Init+0x50>)
 8001520:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 8001524:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001528:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 800153e:	220c      	movs	r2, #12
 8001540:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800154e:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 8001550:	f002 fefa 	bl	8004348 <HAL_UART_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800155a:	f7ff fca3 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	2000038c 	.word	0x2000038c
 8001568:	40004400 	.word	0x40004400

0800156c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	; 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a19      	ldr	r2, [pc, #100]	; (80015f0 <HAL_UART_MspInit+0x84>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d12b      	bne.n	80015e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <HAL_UART_MspInit+0x88>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	4a17      	ldr	r2, [pc, #92]	; (80015f4 <HAL_UART_MspInit+0x88>)
 8001598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
 800159e:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <HAL_UART_MspInit+0x88>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <HAL_UART_MspInit+0x88>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a10      	ldr	r2, [pc, #64]	; (80015f4 <HAL_UART_MspInit+0x88>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <HAL_UART_MspInit+0x88>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015c6:	230c      	movs	r3, #12
 80015c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015d6:	2307      	movs	r3, #7
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	4805      	ldr	r0, [pc, #20]	; (80015f8 <HAL_UART_MspInit+0x8c>)
 80015e2:	f001 f93f 	bl	8002864 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015e6:	bf00      	nop
 80015e8:	3728      	adds	r7, #40	; 0x28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40004400 	.word	0x40004400
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020000 	.word	0x40020000

080015fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001634 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001600:	480d      	ldr	r0, [pc, #52]	; (8001638 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001602:	490e      	ldr	r1, [pc, #56]	; (800163c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001604:	4a0e      	ldr	r2, [pc, #56]	; (8001640 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001608:	e002      	b.n	8001610 <LoopCopyDataInit>

0800160a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800160c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160e:	3304      	adds	r3, #4

08001610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001614:	d3f9      	bcc.n	800160a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001616:	4a0b      	ldr	r2, [pc, #44]	; (8001644 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001618:	4c0b      	ldr	r4, [pc, #44]	; (8001648 <LoopFillZerobss+0x26>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800161c:	e001      	b.n	8001622 <LoopFillZerobss>

0800161e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001620:	3204      	adds	r2, #4

08001622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001624:	d3fb      	bcc.n	800161e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001626:	f7ff fcf3 	bl	8001010 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800162a:	f003 f8a9 	bl	8004780 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800162e:	f7ff fad9 	bl	8000be4 <main>
  bx  lr    
 8001632:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001634:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800163c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001640:	08004920 	.word	0x08004920
  ldr r2, =_sbss
 8001644:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001648:	200003e4 	.word	0x200003e4

0800164c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800164c:	e7fe      	b.n	800164c <ADC_IRQHandler>
	...

08001650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <HAL_Init+0x40>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a0d      	ldr	r2, [pc, #52]	; (8001690 <HAL_Init+0x40>)
 800165a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800165e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <HAL_Init+0x40>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <HAL_Init+0x40>)
 8001666:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800166a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <HAL_Init+0x40>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a07      	ldr	r2, [pc, #28]	; (8001690 <HAL_Init+0x40>)
 8001672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001676:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001678:	2003      	movs	r0, #3
 800167a:	f000 fd41 	bl	8002100 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800167e:	2000      	movs	r0, #0
 8001680:	f000 f808 	bl	8001694 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001684:	f7ff fc14 	bl	8000eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40023c00 	.word	0x40023c00

08001694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <HAL_InitTick+0x54>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_InitTick+0x58>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	4619      	mov	r1, r3
 80016a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 fd59 	bl	800216a <HAL_SYSTICK_Config>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e00e      	b.n	80016e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b0f      	cmp	r3, #15
 80016c6:	d80a      	bhi.n	80016de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c8:	2200      	movs	r2, #0
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	f04f 30ff 	mov.w	r0, #4294967295
 80016d0:	f000 fd21 	bl	8002116 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d4:	4a06      	ldr	r2, [pc, #24]	; (80016f0 <HAL_InitTick+0x5c>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016da:	2300      	movs	r3, #0
 80016dc:	e000      	b.n	80016e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000000 	.word	0x20000000
 80016ec:	20000008 	.word	0x20000008
 80016f0:	20000004 	.word	0x20000004

080016f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_IncTick+0x20>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	461a      	mov	r2, r3
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_IncTick+0x24>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4413      	add	r3, r2
 8001704:	4a04      	ldr	r2, [pc, #16]	; (8001718 <HAL_IncTick+0x24>)
 8001706:	6013      	str	r3, [r2, #0]
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000008 	.word	0x20000008
 8001718:	200003d0 	.word	0x200003d0

0800171c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return uwTick;
 8001720:	4b03      	ldr	r3, [pc, #12]	; (8001730 <HAL_GetTick+0x14>)
 8001722:	681b      	ldr	r3, [r3, #0]
}
 8001724:	4618      	mov	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	200003d0 	.word	0x200003d0

08001734 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800173c:	f7ff ffee 	bl	800171c <HAL_GetTick>
 8001740:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800174c:	d005      	beq.n	800175a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <HAL_Delay+0x44>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4413      	add	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800175a:	bf00      	nop
 800175c:	f7ff ffde 	bl	800171c <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	429a      	cmp	r2, r3
 800176a:	d8f7      	bhi.n	800175c <HAL_Delay+0x28>
  {
  }
}
 800176c:	bf00      	nop
 800176e:	bf00      	nop
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000008 	.word	0x20000008

0800177c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e033      	b.n	80017fa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	2b00      	cmp	r3, #0
 8001798:	d109      	bne.n	80017ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7fe fef6 	bl	800058c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	f003 0310 	and.w	r3, r3, #16
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d118      	bne.n	80017ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017c2:	f023 0302 	bic.w	r3, r3, #2
 80017c6:	f043 0202 	orr.w	r2, r3, #2
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 fa48 	bl	8001c64 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f023 0303 	bic.w	r3, r3, #3
 80017e2:	f043 0201 	orr.w	r2, r3, #1
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	641a      	str	r2, [r3, #64]	; 0x40
 80017ea:	e001      	b.n	80017f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800181a:	2b01      	cmp	r3, #1
 800181c:	d101      	bne.n	8001822 <HAL_ADC_Start_DMA+0x1e>
 800181e:	2302      	movs	r3, #2
 8001820:	e0ce      	b.n	80019c0 <HAL_ADC_Start_DMA+0x1bc>
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	2b01      	cmp	r3, #1
 8001836:	d018      	beq.n	800186a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 0201 	orr.w	r2, r2, #1
 8001846:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001848:	4b5f      	ldr	r3, [pc, #380]	; (80019c8 <HAL_ADC_Start_DMA+0x1c4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a5f      	ldr	r2, [pc, #380]	; (80019cc <HAL_ADC_Start_DMA+0x1c8>)
 800184e:	fba2 2303 	umull	r2, r3, r2, r3
 8001852:	0c9a      	lsrs	r2, r3, #18
 8001854:	4613      	mov	r3, r2
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4413      	add	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800185c:	e002      	b.n	8001864 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	3b01      	subs	r3, #1
 8001862:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f9      	bne.n	800185e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001878:	d107      	bne.n	800188a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001888:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b01      	cmp	r3, #1
 8001896:	f040 8086 	bne.w	80019a6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018a2:	f023 0301 	bic.w	r3, r3, #1
 80018a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d007      	beq.n	80018cc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018d8:	d106      	bne.n	80018e8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	f023 0206 	bic.w	r2, r3, #6
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	645a      	str	r2, [r3, #68]	; 0x44
 80018e6:	e002      	b.n	80018ee <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018f6:	4b36      	ldr	r3, [pc, #216]	; (80019d0 <HAL_ADC_Start_DMA+0x1cc>)
 80018f8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018fe:	4a35      	ldr	r2, [pc, #212]	; (80019d4 <HAL_ADC_Start_DMA+0x1d0>)
 8001900:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001906:	4a34      	ldr	r2, [pc, #208]	; (80019d8 <HAL_ADC_Start_DMA+0x1d4>)
 8001908:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190e:	4a33      	ldr	r2, [pc, #204]	; (80019dc <HAL_ADC_Start_DMA+0x1d8>)
 8001910:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800191a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800192a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800193a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	334c      	adds	r3, #76	; 0x4c
 8001946:	4619      	mov	r1, r3
 8001948:	68ba      	ldr	r2, [r7, #8]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f000 fcc8 	bl	80022e0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 031f 	and.w	r3, r3, #31
 8001958:	2b00      	cmp	r3, #0
 800195a:	d10f      	bne.n	800197c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d129      	bne.n	80019be <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	e020      	b.n	80019be <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a17      	ldr	r2, [pc, #92]	; (80019e0 <HAL_ADC_Start_DMA+0x1dc>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d11b      	bne.n	80019be <HAL_ADC_Start_DMA+0x1ba>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d114      	bne.n	80019be <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	e00b      	b.n	80019be <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	f043 0210 	orr.w	r2, r3, #16
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	f043 0201 	orr.w	r2, r3, #1
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000000 	.word	0x20000000
 80019cc:	431bde83 	.word	0x431bde83
 80019d0:	40012300 	.word	0x40012300
 80019d4:	08001e5d 	.word	0x08001e5d
 80019d8:	08001f17 	.word	0x08001f17
 80019dc:	08001f33 	.word	0x08001f33
 80019e0:	40012000 	.word	0x40012000

080019e4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d101      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x1c>
 8001a38:	2302      	movs	r3, #2
 8001a3a:	e105      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x228>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b09      	cmp	r3, #9
 8001a4a:	d925      	bls.n	8001a98 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68d9      	ldr	r1, [r3, #12]
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4413      	add	r3, r2
 8001a60:	3b1e      	subs	r3, #30
 8001a62:	2207      	movs	r2, #7
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43da      	mvns	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	400a      	ands	r2, r1
 8001a70:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68d9      	ldr	r1, [r3, #12]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	4618      	mov	r0, r3
 8001a84:	4603      	mov	r3, r0
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	4403      	add	r3, r0
 8001a8a:	3b1e      	subs	r3, #30
 8001a8c:	409a      	lsls	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	e022      	b.n	8001ade <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6919      	ldr	r1, [r3, #16]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	4413      	add	r3, r2
 8001aac:	2207      	movs	r2, #7
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	400a      	ands	r2, r1
 8001aba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6919      	ldr	r1, [r3, #16]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	4618      	mov	r0, r3
 8001ace:	4603      	mov	r3, r0
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	4403      	add	r3, r0
 8001ad4:	409a      	lsls	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b06      	cmp	r3, #6
 8001ae4:	d824      	bhi.n	8001b30 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	4613      	mov	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	3b05      	subs	r3, #5
 8001af8:	221f      	movs	r2, #31
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43da      	mvns	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	400a      	ands	r2, r1
 8001b06:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	4618      	mov	r0, r3
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	3b05      	subs	r3, #5
 8001b22:	fa00 f203 	lsl.w	r2, r0, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b2e:	e04c      	b.n	8001bca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b0c      	cmp	r3, #12
 8001b36:	d824      	bhi.n	8001b82 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	3b23      	subs	r3, #35	; 0x23
 8001b4a:	221f      	movs	r2, #31
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43da      	mvns	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	400a      	ands	r2, r1
 8001b58:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	4618      	mov	r0, r3
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	3b23      	subs	r3, #35	; 0x23
 8001b74:	fa00 f203 	lsl.w	r2, r0, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	631a      	str	r2, [r3, #48]	; 0x30
 8001b80:	e023      	b.n	8001bca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	3b41      	subs	r3, #65	; 0x41
 8001b94:	221f      	movs	r2, #31
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	400a      	ands	r2, r1
 8001ba2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	3b41      	subs	r3, #65	; 0x41
 8001bbe:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bca:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <HAL_ADC_ConfigChannel+0x234>)
 8001bcc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a21      	ldr	r2, [pc, #132]	; (8001c58 <HAL_ADC_ConfigChannel+0x238>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d109      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x1cc>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b12      	cmp	r3, #18
 8001bde:	d105      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a19      	ldr	r2, [pc, #100]	; (8001c58 <HAL_ADC_ConfigChannel+0x238>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d123      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x21e>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2b10      	cmp	r3, #16
 8001bfc:	d003      	beq.n	8001c06 <HAL_ADC_ConfigChannel+0x1e6>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b11      	cmp	r3, #17
 8001c04:	d11b      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2b10      	cmp	r3, #16
 8001c18:	d111      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c1a:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <HAL_ADC_ConfigChannel+0x23c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a10      	ldr	r2, [pc, #64]	; (8001c60 <HAL_ADC_ConfigChannel+0x240>)
 8001c20:	fba2 2303 	umull	r2, r3, r2, r3
 8001c24:	0c9a      	lsrs	r2, r3, #18
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c30:	e002      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	3b01      	subs	r3, #1
 8001c36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f9      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	40012300 	.word	0x40012300
 8001c58:	40012000 	.word	0x40012000
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	431bde83 	.word	0x431bde83

08001c64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c6c:	4b79      	ldr	r3, [pc, #484]	; (8001e54 <ADC_Init+0x1f0>)
 8001c6e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	431a      	orrs	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6859      	ldr	r1, [r3, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	021a      	lsls	r2, r3, #8
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001cbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6859      	ldr	r1, [r3, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6899      	ldr	r1, [r3, #8]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf6:	4a58      	ldr	r2, [pc, #352]	; (8001e58 <ADC_Init+0x1f4>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d022      	beq.n	8001d42 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6899      	ldr	r1, [r3, #8]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6899      	ldr	r1, [r3, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	e00f      	b.n	8001d62 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d60:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 0202 	bic.w	r2, r2, #2
 8001d70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6899      	ldr	r1, [r3, #8]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	7e1b      	ldrb	r3, [r3, #24]
 8001d7c:	005a      	lsls	r2, r3, #1
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d01b      	beq.n	8001dc8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d9e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001dae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6859      	ldr	r1, [r3, #4]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	035a      	lsls	r2, r3, #13
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	e007      	b.n	8001dd8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dd6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001de6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	051a      	lsls	r2, r3, #20
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6899      	ldr	r1, [r3, #8]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e1a:	025a      	lsls	r2, r3, #9
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6899      	ldr	r1, [r3, #8]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	029a      	lsls	r2, r3, #10
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	609a      	str	r2, [r3, #8]
}
 8001e48:	bf00      	nop
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	40012300 	.word	0x40012300
 8001e58:	0f000001 	.word	0x0f000001

08001e5c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e68:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d13c      	bne.n	8001ef0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d12b      	bne.n	8001ee8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d127      	bne.n	8001ee8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d006      	beq.n	8001eb4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d119      	bne.n	8001ee8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0220 	bic.w	r2, r2, #32
 8001ec2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d105      	bne.n	8001ee8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	f043 0201 	orr.w	r2, r3, #1
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f7ff fd7b 	bl	80019e4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001eee:	e00e      	b.n	8001f0e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	f003 0310 	and.w	r3, r3, #16
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f7ff fd85 	bl	8001a0c <HAL_ADC_ErrorCallback>
}
 8001f02:	e004      	b.n	8001f0e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	4798      	blx	r3
}
 8001f0e:	bf00      	nop
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b084      	sub	sp, #16
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f22:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f7ff fd67 	bl	80019f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2240      	movs	r2, #64	; 0x40
 8001f44:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	f043 0204 	orr.w	r2, r3, #4
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f7ff fd5a 	bl	8001a0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f58:	bf00      	nop
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f92:	4a04      	ldr	r2, [pc, #16]	; (8001fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	60d3      	str	r3, [r2, #12]
}
 8001f98:	bf00      	nop
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	0a1b      	lsrs	r3, r3, #8
 8001fb2:	f003 0307 	and.w	r3, r3, #7
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	db0b      	blt.n	8001fee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	f003 021f 	and.w	r2, r3, #31
 8001fdc:	4907      	ldr	r1, [pc, #28]	; (8001ffc <__NVIC_EnableIRQ+0x38>)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	095b      	lsrs	r3, r3, #5
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	e000e100 	.word	0xe000e100

08002000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	6039      	str	r1, [r7, #0]
 800200a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002010:	2b00      	cmp	r3, #0
 8002012:	db0a      	blt.n	800202a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	b2da      	uxtb	r2, r3
 8002018:	490c      	ldr	r1, [pc, #48]	; (800204c <__NVIC_SetPriority+0x4c>)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	0112      	lsls	r2, r2, #4
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	440b      	add	r3, r1
 8002024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002028:	e00a      	b.n	8002040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	b2da      	uxtb	r2, r3
 800202e:	4908      	ldr	r1, [pc, #32]	; (8002050 <__NVIC_SetPriority+0x50>)
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	3b04      	subs	r3, #4
 8002038:	0112      	lsls	r2, r2, #4
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	440b      	add	r3, r1
 800203e:	761a      	strb	r2, [r3, #24]
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000e100 	.word	0xe000e100
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002054:	b480      	push	{r7}
 8002056:	b089      	sub	sp, #36	; 0x24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f1c3 0307 	rsb	r3, r3, #7
 800206e:	2b04      	cmp	r3, #4
 8002070:	bf28      	it	cs
 8002072:	2304      	movcs	r3, #4
 8002074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3304      	adds	r3, #4
 800207a:	2b06      	cmp	r3, #6
 800207c:	d902      	bls.n	8002084 <NVIC_EncodePriority+0x30>
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3b03      	subs	r3, #3
 8002082:	e000      	b.n	8002086 <NVIC_EncodePriority+0x32>
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	f04f 32ff 	mov.w	r2, #4294967295
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43da      	mvns	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	401a      	ands	r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800209c:	f04f 31ff 	mov.w	r1, #4294967295
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	fa01 f303 	lsl.w	r3, r1, r3
 80020a6:	43d9      	mvns	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ac:	4313      	orrs	r3, r2
         );
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3724      	adds	r7, #36	; 0x24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
	...

080020bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020cc:	d301      	bcc.n	80020d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ce:	2301      	movs	r3, #1
 80020d0:	e00f      	b.n	80020f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020d2:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <SysTick_Config+0x40>)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020da:	210f      	movs	r1, #15
 80020dc:	f04f 30ff 	mov.w	r0, #4294967295
 80020e0:	f7ff ff8e 	bl	8002000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <SysTick_Config+0x40>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ea:	4b04      	ldr	r3, [pc, #16]	; (80020fc <SysTick_Config+0x40>)
 80020ec:	2207      	movs	r2, #7
 80020ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	e000e010 	.word	0xe000e010

08002100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff ff29 	bl	8001f60 <__NVIC_SetPriorityGrouping>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002116:	b580      	push	{r7, lr}
 8002118:	b086      	sub	sp, #24
 800211a:	af00      	add	r7, sp, #0
 800211c:	4603      	mov	r3, r0
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	607a      	str	r2, [r7, #4]
 8002122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002128:	f7ff ff3e 	bl	8001fa8 <__NVIC_GetPriorityGrouping>
 800212c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	68b9      	ldr	r1, [r7, #8]
 8002132:	6978      	ldr	r0, [r7, #20]
 8002134:	f7ff ff8e 	bl	8002054 <NVIC_EncodePriority>
 8002138:	4602      	mov	r2, r0
 800213a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213e:	4611      	mov	r1, r2
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ff5d 	bl	8002000 <__NVIC_SetPriority>
}
 8002146:	bf00      	nop
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	4603      	mov	r3, r0
 8002156:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff ff31 	bl	8001fc4 <__NVIC_EnableIRQ>
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff ffa2 	bl	80020bc <SysTick_Config>
 8002178:	4603      	mov	r3, r0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
	...

08002184 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002190:	f7ff fac4 	bl	800171c <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e099      	b.n	80022d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2202      	movs	r2, #2
 80021a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0201 	bic.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021c0:	e00f      	b.n	80021e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021c2:	f7ff faab 	bl	800171c <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b05      	cmp	r3, #5
 80021ce:	d908      	bls.n	80021e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2220      	movs	r2, #32
 80021d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2203      	movs	r2, #3
 80021da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e078      	b.n	80022d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1e8      	bne.n	80021c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	4b38      	ldr	r3, [pc, #224]	; (80022dc <HAL_DMA_Init+0x158>)
 80021fc:	4013      	ands	r3, r2
 80021fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800220e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800221a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002226:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	4313      	orrs	r3, r2
 8002232:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	2b04      	cmp	r3, #4
 800223a:	d107      	bne.n	800224c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002244:	4313      	orrs	r3, r2
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	4313      	orrs	r3, r2
 800224a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f023 0307 	bic.w	r3, r3, #7
 8002262:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	4313      	orrs	r3, r2
 800226c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	2b04      	cmp	r3, #4
 8002274:	d117      	bne.n	80022a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	4313      	orrs	r3, r2
 800227e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00e      	beq.n	80022a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 fa6f 	bl	800276c <DMA_CheckFifoParam>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d008      	beq.n	80022a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2240      	movs	r2, #64	; 0x40
 8002298:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80022a2:	2301      	movs	r3, #1
 80022a4:	e016      	b.n	80022d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 fa26 	bl	8002700 <DMA_CalcBaseAndBitshift>
 80022b4:	4603      	mov	r3, r0
 80022b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022bc:	223f      	movs	r2, #63	; 0x3f
 80022be:	409a      	lsls	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	f010803f 	.word	0xf010803f

080022e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
 80022ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <HAL_DMA_Start_IT+0x26>
 8002302:	2302      	movs	r3, #2
 8002304:	e040      	b.n	8002388 <HAL_DMA_Start_IT+0xa8>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b01      	cmp	r3, #1
 8002318:	d12f      	bne.n	800237a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2202      	movs	r2, #2
 800231e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	68b9      	ldr	r1, [r7, #8]
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 f9b8 	bl	80026a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002338:	223f      	movs	r2, #63	; 0x3f
 800233a:	409a      	lsls	r2, r3
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0216 	orr.w	r2, r2, #22
 800234e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	2b00      	cmp	r3, #0
 8002356:	d007      	beq.n	8002368 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0208 	orr.w	r2, r2, #8
 8002366:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0201 	orr.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	e005      	b.n	8002386 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002382:	2302      	movs	r3, #2
 8002384:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002386:	7dfb      	ldrb	r3, [r7, #23]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800239c:	4b92      	ldr	r3, [pc, #584]	; (80025e8 <HAL_DMA_IRQHandler+0x258>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a92      	ldr	r2, [pc, #584]	; (80025ec <HAL_DMA_IRQHandler+0x25c>)
 80023a2:	fba2 2303 	umull	r2, r3, r2, r3
 80023a6:	0a9b      	lsrs	r3, r3, #10
 80023a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ba:	2208      	movs	r2, #8
 80023bc:	409a      	lsls	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d01a      	beq.n	80023fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d013      	beq.n	80023fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0204 	bic.w	r2, r2, #4
 80023e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e8:	2208      	movs	r2, #8
 80023ea:	409a      	lsls	r2, r3
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f4:	f043 0201 	orr.w	r2, r3, #1
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002400:	2201      	movs	r2, #1
 8002402:	409a      	lsls	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4013      	ands	r3, r2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d012      	beq.n	8002432 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00b      	beq.n	8002432 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241e:	2201      	movs	r2, #1
 8002420:	409a      	lsls	r2, r3
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242a:	f043 0202 	orr.w	r2, r3, #2
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002436:	2204      	movs	r2, #4
 8002438:	409a      	lsls	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	4013      	ands	r3, r2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d012      	beq.n	8002468 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00b      	beq.n	8002468 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002454:	2204      	movs	r2, #4
 8002456:	409a      	lsls	r2, r3
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002460:	f043 0204 	orr.w	r2, r3, #4
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246c:	2210      	movs	r2, #16
 800246e:	409a      	lsls	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4013      	ands	r3, r2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d043      	beq.n	8002500 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d03c      	beq.n	8002500 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248a:	2210      	movs	r2, #16
 800248c:	409a      	lsls	r2, r3
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d018      	beq.n	80024d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d108      	bne.n	80024c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d024      	beq.n	8002500 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	4798      	blx	r3
 80024be:	e01f      	b.n	8002500 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d01b      	beq.n	8002500 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	4798      	blx	r3
 80024d0:	e016      	b.n	8002500 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d107      	bne.n	80024f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0208 	bic.w	r2, r2, #8
 80024ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002504:	2220      	movs	r2, #32
 8002506:	409a      	lsls	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4013      	ands	r3, r2
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 808e 	beq.w	800262e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 8086 	beq.w	800262e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002526:	2220      	movs	r2, #32
 8002528:	409a      	lsls	r2, r3
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b05      	cmp	r3, #5
 8002538:	d136      	bne.n	80025a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0216 	bic.w	r2, r2, #22
 8002548:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695a      	ldr	r2, [r3, #20]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002558:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	2b00      	cmp	r3, #0
 8002560:	d103      	bne.n	800256a <HAL_DMA_IRQHandler+0x1da>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002566:	2b00      	cmp	r3, #0
 8002568:	d007      	beq.n	800257a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0208 	bic.w	r2, r2, #8
 8002578:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257e:	223f      	movs	r2, #63	; 0x3f
 8002580:	409a      	lsls	r2, r3
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800259a:	2b00      	cmp	r3, #0
 800259c:	d07d      	beq.n	800269a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	4798      	blx	r3
        }
        return;
 80025a6:	e078      	b.n	800269a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d01c      	beq.n	80025f0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d108      	bne.n	80025d6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d030      	beq.n	800262e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	4798      	blx	r3
 80025d4:	e02b      	b.n	800262e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d027      	beq.n	800262e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	4798      	blx	r3
 80025e6:	e022      	b.n	800262e <HAL_DMA_IRQHandler+0x29e>
 80025e8:	20000000 	.word	0x20000000
 80025ec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10f      	bne.n	800261e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0210 	bic.w	r2, r2, #16
 800260c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002632:	2b00      	cmp	r3, #0
 8002634:	d032      	beq.n	800269c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d022      	beq.n	8002688 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2205      	movs	r2, #5
 8002646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0201 	bic.w	r2, r2, #1
 8002658:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	3301      	adds	r3, #1
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	429a      	cmp	r2, r3
 8002664:	d307      	bcc.n	8002676 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f2      	bne.n	800265a <HAL_DMA_IRQHandler+0x2ca>
 8002674:	e000      	b.n	8002678 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002676:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	4798      	blx	r3
 8002698:	e000      	b.n	800269c <HAL_DMA_IRQHandler+0x30c>
        return;
 800269a:	bf00      	nop
    }
  }
}
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop

080026a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
 80026b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2b40      	cmp	r3, #64	; 0x40
 80026d0:	d108      	bne.n	80026e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026e2:	e007      	b.n	80026f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	60da      	str	r2, [r3, #12]
}
 80026f4:	bf00      	nop
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	b2db      	uxtb	r3, r3
 800270e:	3b10      	subs	r3, #16
 8002710:	4a14      	ldr	r2, [pc, #80]	; (8002764 <DMA_CalcBaseAndBitshift+0x64>)
 8002712:	fba2 2303 	umull	r2, r3, r2, r3
 8002716:	091b      	lsrs	r3, r3, #4
 8002718:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800271a:	4a13      	ldr	r2, [pc, #76]	; (8002768 <DMA_CalcBaseAndBitshift+0x68>)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4413      	add	r3, r2
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2b03      	cmp	r3, #3
 800272c:	d909      	bls.n	8002742 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002736:	f023 0303 	bic.w	r3, r3, #3
 800273a:	1d1a      	adds	r2, r3, #4
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	659a      	str	r2, [r3, #88]	; 0x58
 8002740:	e007      	b.n	8002752 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800274a:	f023 0303 	bic.w	r3, r3, #3
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002756:	4618      	mov	r0, r3
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	aaaaaaab 	.word	0xaaaaaaab
 8002768:	08004908 	.word	0x08004908

0800276c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d11f      	bne.n	80027c6 <DMA_CheckFifoParam+0x5a>
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	2b03      	cmp	r3, #3
 800278a:	d856      	bhi.n	800283a <DMA_CheckFifoParam+0xce>
 800278c:	a201      	add	r2, pc, #4	; (adr r2, 8002794 <DMA_CheckFifoParam+0x28>)
 800278e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002792:	bf00      	nop
 8002794:	080027a5 	.word	0x080027a5
 8002798:	080027b7 	.word	0x080027b7
 800279c:	080027a5 	.word	0x080027a5
 80027a0:	0800283b 	.word	0x0800283b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d046      	beq.n	800283e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027b4:	e043      	b.n	800283e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027be:	d140      	bne.n	8002842 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027c4:	e03d      	b.n	8002842 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ce:	d121      	bne.n	8002814 <DMA_CheckFifoParam+0xa8>
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	d837      	bhi.n	8002846 <DMA_CheckFifoParam+0xda>
 80027d6:	a201      	add	r2, pc, #4	; (adr r2, 80027dc <DMA_CheckFifoParam+0x70>)
 80027d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027dc:	080027ed 	.word	0x080027ed
 80027e0:	080027f3 	.word	0x080027f3
 80027e4:	080027ed 	.word	0x080027ed
 80027e8:	08002805 	.word	0x08002805
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
      break;
 80027f0:	e030      	b.n	8002854 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d025      	beq.n	800284a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002802:	e022      	b.n	800284a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800280c:	d11f      	bne.n	800284e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002812:	e01c      	b.n	800284e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2b02      	cmp	r3, #2
 8002818:	d903      	bls.n	8002822 <DMA_CheckFifoParam+0xb6>
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2b03      	cmp	r3, #3
 800281e:	d003      	beq.n	8002828 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002820:	e018      	b.n	8002854 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
      break;
 8002826:	e015      	b.n	8002854 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00e      	beq.n	8002852 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	73fb      	strb	r3, [r7, #15]
      break;
 8002838:	e00b      	b.n	8002852 <DMA_CheckFifoParam+0xe6>
      break;
 800283a:	bf00      	nop
 800283c:	e00a      	b.n	8002854 <DMA_CheckFifoParam+0xe8>
      break;
 800283e:	bf00      	nop
 8002840:	e008      	b.n	8002854 <DMA_CheckFifoParam+0xe8>
      break;
 8002842:	bf00      	nop
 8002844:	e006      	b.n	8002854 <DMA_CheckFifoParam+0xe8>
      break;
 8002846:	bf00      	nop
 8002848:	e004      	b.n	8002854 <DMA_CheckFifoParam+0xe8>
      break;
 800284a:	bf00      	nop
 800284c:	e002      	b.n	8002854 <DMA_CheckFifoParam+0xe8>
      break;   
 800284e:	bf00      	nop
 8002850:	e000      	b.n	8002854 <DMA_CheckFifoParam+0xe8>
      break;
 8002852:	bf00      	nop
    }
  } 
  
  return status; 
 8002854:	7bfb      	ldrb	r3, [r7, #15]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop

08002864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002864:	b480      	push	{r7}
 8002866:	b089      	sub	sp, #36	; 0x24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002876:	2300      	movs	r3, #0
 8002878:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800287a:	2300      	movs	r3, #0
 800287c:	61fb      	str	r3, [r7, #28]
 800287e:	e159      	b.n	8002b34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002880:	2201      	movs	r2, #1
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	4013      	ands	r3, r2
 8002892:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	429a      	cmp	r2, r3
 800289a:	f040 8148 	bne.w	8002b2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d005      	beq.n	80028b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d130      	bne.n	8002918 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	2203      	movs	r2, #3
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43db      	mvns	r3, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4013      	ands	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028ec:	2201      	movs	r2, #1
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4013      	ands	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	091b      	lsrs	r3, r3, #4
 8002902:	f003 0201 	and.w	r2, r3, #1
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	2b03      	cmp	r3, #3
 8002922:	d017      	beq.n	8002954 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	2203      	movs	r2, #3
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 0303 	and.w	r3, r3, #3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d123      	bne.n	80029a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	08da      	lsrs	r2, r3, #3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3208      	adds	r2, #8
 8002968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800296c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	220f      	movs	r2, #15
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	08da      	lsrs	r2, r3, #3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3208      	adds	r2, #8
 80029a2:	69b9      	ldr	r1, [r7, #24]
 80029a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	2203      	movs	r2, #3
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 0203 	and.w	r2, r3, #3
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 80a2 	beq.w	8002b2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	4b57      	ldr	r3, [pc, #348]	; (8002b4c <HAL_GPIO_Init+0x2e8>)
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	4a56      	ldr	r2, [pc, #344]	; (8002b4c <HAL_GPIO_Init+0x2e8>)
 80029f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f8:	6453      	str	r3, [r2, #68]	; 0x44
 80029fa:	4b54      	ldr	r3, [pc, #336]	; (8002b4c <HAL_GPIO_Init+0x2e8>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a06:	4a52      	ldr	r2, [pc, #328]	; (8002b50 <HAL_GPIO_Init+0x2ec>)
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	089b      	lsrs	r3, r3, #2
 8002a0c:	3302      	adds	r3, #2
 8002a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	220f      	movs	r2, #15
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43db      	mvns	r3, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4013      	ands	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a49      	ldr	r2, [pc, #292]	; (8002b54 <HAL_GPIO_Init+0x2f0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d019      	beq.n	8002a66 <HAL_GPIO_Init+0x202>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a48      	ldr	r2, [pc, #288]	; (8002b58 <HAL_GPIO_Init+0x2f4>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d013      	beq.n	8002a62 <HAL_GPIO_Init+0x1fe>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a47      	ldr	r2, [pc, #284]	; (8002b5c <HAL_GPIO_Init+0x2f8>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d00d      	beq.n	8002a5e <HAL_GPIO_Init+0x1fa>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a46      	ldr	r2, [pc, #280]	; (8002b60 <HAL_GPIO_Init+0x2fc>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d007      	beq.n	8002a5a <HAL_GPIO_Init+0x1f6>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a45      	ldr	r2, [pc, #276]	; (8002b64 <HAL_GPIO_Init+0x300>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d101      	bne.n	8002a56 <HAL_GPIO_Init+0x1f2>
 8002a52:	2304      	movs	r3, #4
 8002a54:	e008      	b.n	8002a68 <HAL_GPIO_Init+0x204>
 8002a56:	2307      	movs	r3, #7
 8002a58:	e006      	b.n	8002a68 <HAL_GPIO_Init+0x204>
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e004      	b.n	8002a68 <HAL_GPIO_Init+0x204>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	e002      	b.n	8002a68 <HAL_GPIO_Init+0x204>
 8002a62:	2301      	movs	r3, #1
 8002a64:	e000      	b.n	8002a68 <HAL_GPIO_Init+0x204>
 8002a66:	2300      	movs	r3, #0
 8002a68:	69fa      	ldr	r2, [r7, #28]
 8002a6a:	f002 0203 	and.w	r2, r2, #3
 8002a6e:	0092      	lsls	r2, r2, #2
 8002a70:	4093      	lsls	r3, r2
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a78:	4935      	ldr	r1, [pc, #212]	; (8002b50 <HAL_GPIO_Init+0x2ec>)
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	089b      	lsrs	r3, r3, #2
 8002a7e:	3302      	adds	r3, #2
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a86:	4b38      	ldr	r3, [pc, #224]	; (8002b68 <HAL_GPIO_Init+0x304>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4013      	ands	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002aaa:	4a2f      	ldr	r2, [pc, #188]	; (8002b68 <HAL_GPIO_Init+0x304>)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ab0:	4b2d      	ldr	r3, [pc, #180]	; (8002b68 <HAL_GPIO_Init+0x304>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ad4:	4a24      	ldr	r2, [pc, #144]	; (8002b68 <HAL_GPIO_Init+0x304>)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ada:	4b23      	ldr	r3, [pc, #140]	; (8002b68 <HAL_GPIO_Init+0x304>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002afe:	4a1a      	ldr	r2, [pc, #104]	; (8002b68 <HAL_GPIO_Init+0x304>)
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b04:	4b18      	ldr	r3, [pc, #96]	; (8002b68 <HAL_GPIO_Init+0x304>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d003      	beq.n	8002b28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b28:	4a0f      	ldr	r2, [pc, #60]	; (8002b68 <HAL_GPIO_Init+0x304>)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	3301      	adds	r3, #1
 8002b32:	61fb      	str	r3, [r7, #28]
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	2b0f      	cmp	r3, #15
 8002b38:	f67f aea2 	bls.w	8002880 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b3c:	bf00      	nop
 8002b3e:	bf00      	nop
 8002b40:	3724      	adds	r7, #36	; 0x24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	40013800 	.word	0x40013800
 8002b54:	40020000 	.word	0x40020000
 8002b58:	40020400 	.word	0x40020400
 8002b5c:	40020800 	.word	0x40020800
 8002b60:	40020c00 	.word	0x40020c00
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40013c00 	.word	0x40013c00

08002b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	807b      	strh	r3, [r7, #2]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b7c:	787b      	ldrb	r3, [r7, #1]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b82:	887a      	ldrh	r2, [r7, #2]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b88:	e003      	b.n	8002b92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b8a:	887b      	ldrh	r3, [r7, #2]
 8002b8c:	041a      	lsls	r2, r3, #16
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	619a      	str	r2, [r3, #24]
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
	...

08002ba0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e12b      	b.n	8002e0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7fd ffc4 	bl	8000b54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2224      	movs	r2, #36	; 0x24
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0201 	bic.w	r2, r2, #1
 8002be2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bf2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c04:	f000 fd5c 	bl	80036c0 <HAL_RCC_GetPCLK1Freq>
 8002c08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	4a81      	ldr	r2, [pc, #516]	; (8002e14 <HAL_I2C_Init+0x274>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d807      	bhi.n	8002c24 <HAL_I2C_Init+0x84>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4a80      	ldr	r2, [pc, #512]	; (8002e18 <HAL_I2C_Init+0x278>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	bf94      	ite	ls
 8002c1c:	2301      	movls	r3, #1
 8002c1e:	2300      	movhi	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	e006      	b.n	8002c32 <HAL_I2C_Init+0x92>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4a7d      	ldr	r2, [pc, #500]	; (8002e1c <HAL_I2C_Init+0x27c>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	bf94      	ite	ls
 8002c2c:	2301      	movls	r3, #1
 8002c2e:	2300      	movhi	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e0e7      	b.n	8002e0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	4a78      	ldr	r2, [pc, #480]	; (8002e20 <HAL_I2C_Init+0x280>)
 8002c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c42:	0c9b      	lsrs	r3, r3, #18
 8002c44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	4a6a      	ldr	r2, [pc, #424]	; (8002e14 <HAL_I2C_Init+0x274>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d802      	bhi.n	8002c74 <HAL_I2C_Init+0xd4>
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	3301      	adds	r3, #1
 8002c72:	e009      	b.n	8002c88 <HAL_I2C_Init+0xe8>
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c7a:	fb02 f303 	mul.w	r3, r2, r3
 8002c7e:	4a69      	ldr	r2, [pc, #420]	; (8002e24 <HAL_I2C_Init+0x284>)
 8002c80:	fba2 2303 	umull	r2, r3, r2, r3
 8002c84:	099b      	lsrs	r3, r3, #6
 8002c86:	3301      	adds	r3, #1
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	495c      	ldr	r1, [pc, #368]	; (8002e14 <HAL_I2C_Init+0x274>)
 8002ca4:	428b      	cmp	r3, r1
 8002ca6:	d819      	bhi.n	8002cdc <HAL_I2C_Init+0x13c>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	1e59      	subs	r1, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cb6:	1c59      	adds	r1, r3, #1
 8002cb8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002cbc:	400b      	ands	r3, r1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00a      	beq.n	8002cd8 <HAL_I2C_Init+0x138>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1e59      	subs	r1, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd6:	e051      	b.n	8002d7c <HAL_I2C_Init+0x1dc>
 8002cd8:	2304      	movs	r3, #4
 8002cda:	e04f      	b.n	8002d7c <HAL_I2C_Init+0x1dc>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d111      	bne.n	8002d08 <HAL_I2C_Init+0x168>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	1e58      	subs	r0, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6859      	ldr	r1, [r3, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	440b      	add	r3, r1
 8002cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	bf0c      	ite	eq
 8002d00:	2301      	moveq	r3, #1
 8002d02:	2300      	movne	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	e012      	b.n	8002d2e <HAL_I2C_Init+0x18e>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	1e58      	subs	r0, r3, #1
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6859      	ldr	r1, [r3, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	440b      	add	r3, r1
 8002d16:	0099      	lsls	r1, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d1e:	3301      	adds	r3, #1
 8002d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	bf0c      	ite	eq
 8002d28:	2301      	moveq	r3, #1
 8002d2a:	2300      	movne	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_I2C_Init+0x196>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e022      	b.n	8002d7c <HAL_I2C_Init+0x1dc>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10e      	bne.n	8002d5c <HAL_I2C_Init+0x1bc>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	1e58      	subs	r0, r3, #1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6859      	ldr	r1, [r3, #4]
 8002d46:	460b      	mov	r3, r1
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	440b      	add	r3, r1
 8002d4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d50:	3301      	adds	r3, #1
 8002d52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d5a:	e00f      	b.n	8002d7c <HAL_I2C_Init+0x1dc>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	1e58      	subs	r0, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6859      	ldr	r1, [r3, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	0099      	lsls	r1, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d72:	3301      	adds	r3, #1
 8002d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	6809      	ldr	r1, [r1, #0]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69da      	ldr	r2, [r3, #28]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002daa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6911      	ldr	r1, [r2, #16]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	68d2      	ldr	r2, [r2, #12]
 8002db6:	4311      	orrs	r1, r2
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6812      	ldr	r2, [r2, #0]
 8002dbc:	430b      	orrs	r3, r1
 8002dbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695a      	ldr	r2, [r3, #20]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0201 	orr.w	r2, r2, #1
 8002dea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2220      	movs	r2, #32
 8002df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	000186a0 	.word	0x000186a0
 8002e18:	001e847f 	.word	0x001e847f
 8002e1c:	003d08ff 	.word	0x003d08ff
 8002e20:	431bde83 	.word	0x431bde83
 8002e24:	10624dd3 	.word	0x10624dd3

08002e28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e264      	b.n	8003304 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d075      	beq.n	8002f32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e46:	4ba3      	ldr	r3, [pc, #652]	; (80030d4 <HAL_RCC_OscConfig+0x2ac>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d00c      	beq.n	8002e6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e52:	4ba0      	ldr	r3, [pc, #640]	; (80030d4 <HAL_RCC_OscConfig+0x2ac>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d112      	bne.n	8002e84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e5e:	4b9d      	ldr	r3, [pc, #628]	; (80030d4 <HAL_RCC_OscConfig+0x2ac>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e6a:	d10b      	bne.n	8002e84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e6c:	4b99      	ldr	r3, [pc, #612]	; (80030d4 <HAL_RCC_OscConfig+0x2ac>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d05b      	beq.n	8002f30 <HAL_RCC_OscConfig+0x108>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d157      	bne.n	8002f30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e23f      	b.n	8003304 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e8c:	d106      	bne.n	8002e9c <HAL_RCC_OscConfig+0x74>
 8002e8e:	4b91      	ldr	r3, [pc, #580]	; (80030d4 <HAL_RCC_OscConfig+0x2ac>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a90      	ldr	r2, [pc, #576]	; (80030d4 <HAL_RCC_OscConfig+0x2ac>)
 8002e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	e01d      	b.n	8002ed8 <HAL_RCC_OscConfig+0xb0>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ea4:	d10c      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x98>
 8002ea6:	4b8b      	ldr	r3, [pc, #556]	; (80030d4 <HAL_RCC_OscConfig+0x2ac>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a8a      	ldr	r2, [pc, #552]	; (80030d4 <HAL_RCC_OscConfig+0x2ac>)
 8002eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	4b88      	ldr	r3, [pc, #544]	; (80030d4 <HAL_RCC_OscConfig+0x2ac>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a87      	ldr	r2, [pc, #540]	; (80030d4 <HAL_RCC_OscConfig+0x2ac>)
 8002eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	e00b      	b.n	8002ed8 <HAL_RCC_OscConfig+0xb0>
 8002ec0:	4b84      	ldr	r3, [pc, #528]	; (80030d4 <HAL_RCC_OscConfig+0x2ac>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a83      	ldr	r2, [pc, #524]	; (80030d4 <HAL_RCC_OscConfig+0x2ac>)
 8002ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eca:	6013      	str	r3, [r2, #0]
 8002ecc:	4b81      	ldr	r3, [pc, #516]	; (80030d4 <HAL_RCC_OscConfig+0x2ac>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a80      	ldr	r2, [pc, #512]	; (80030d4 <HAL_RCC_OscConfig+0x2ac>)
 8002ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d013      	beq.n	8002f08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee0:	f7fe fc1c 	bl	800171c <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ee8:	f7fe fc18 	bl	800171c <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b64      	cmp	r3, #100	; 0x64
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e204      	b.n	8003304 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efa:	4b76      	ldr	r3, [pc, #472]	; (80030d4 <HAL_RCC_OscConfig+0x2ac>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCC_OscConfig+0xc0>
 8002f06:	e014      	b.n	8002f32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f08:	f7fe fc08 	bl	800171c <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f10:	f7fe fc04 	bl	800171c <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b64      	cmp	r3, #100	; 0x64
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e1f0      	b.n	8003304 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f22:	4b6c      	ldr	r3, [pc, #432]	; (80030d4 <HAL_RCC_OscConfig+0x2ac>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f0      	bne.n	8002f10 <HAL_RCC_OscConfig+0xe8>
 8002f2e:	e000      	b.n	8002f32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d063      	beq.n	8003006 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f3e:	4b65      	ldr	r3, [pc, #404]	; (80030d4 <HAL_RCC_OscConfig+0x2ac>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 030c 	and.w	r3, r3, #12
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00b      	beq.n	8002f62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f4a:	4b62      	ldr	r3, [pc, #392]	; (80030d4 <HAL_RCC_OscConfig+0x2ac>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f52:	2b08      	cmp	r3, #8
 8002f54:	d11c      	bne.n	8002f90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f56:	4b5f      	ldr	r3, [pc, #380]	; (80030d4 <HAL_RCC_OscConfig+0x2ac>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d116      	bne.n	8002f90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f62:	4b5c      	ldr	r3, [pc, #368]	; (80030d4 <HAL_RCC_OscConfig+0x2ac>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d005      	beq.n	8002f7a <HAL_RCC_OscConfig+0x152>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d001      	beq.n	8002f7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e1c4      	b.n	8003304 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7a:	4b56      	ldr	r3, [pc, #344]	; (80030d4 <HAL_RCC_OscConfig+0x2ac>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	4952      	ldr	r1, [pc, #328]	; (80030d4 <HAL_RCC_OscConfig+0x2ac>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8e:	e03a      	b.n	8003006 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d020      	beq.n	8002fda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f98:	4b4f      	ldr	r3, [pc, #316]	; (80030d8 <HAL_RCC_OscConfig+0x2b0>)
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9e:	f7fe fbbd 	bl	800171c <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fa6:	f7fe fbb9 	bl	800171c <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e1a5      	b.n	8003304 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb8:	4b46      	ldr	r3, [pc, #280]	; (80030d4 <HAL_RCC_OscConfig+0x2ac>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc4:	4b43      	ldr	r3, [pc, #268]	; (80030d4 <HAL_RCC_OscConfig+0x2ac>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	4940      	ldr	r1, [pc, #256]	; (80030d4 <HAL_RCC_OscConfig+0x2ac>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	600b      	str	r3, [r1, #0]
 8002fd8:	e015      	b.n	8003006 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fda:	4b3f      	ldr	r3, [pc, #252]	; (80030d8 <HAL_RCC_OscConfig+0x2b0>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe0:	f7fe fb9c 	bl	800171c <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fe8:	f7fe fb98 	bl	800171c <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e184      	b.n	8003304 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ffa:	4b36      	ldr	r3, [pc, #216]	; (80030d4 <HAL_RCC_OscConfig+0x2ac>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	2b00      	cmp	r3, #0
 8003010:	d030      	beq.n	8003074 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d016      	beq.n	8003048 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800301a:	4b30      	ldr	r3, [pc, #192]	; (80030dc <HAL_RCC_OscConfig+0x2b4>)
 800301c:	2201      	movs	r2, #1
 800301e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003020:	f7fe fb7c 	bl	800171c <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003028:	f7fe fb78 	bl	800171c <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e164      	b.n	8003304 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800303a:	4b26      	ldr	r3, [pc, #152]	; (80030d4 <HAL_RCC_OscConfig+0x2ac>)
 800303c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0f0      	beq.n	8003028 <HAL_RCC_OscConfig+0x200>
 8003046:	e015      	b.n	8003074 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003048:	4b24      	ldr	r3, [pc, #144]	; (80030dc <HAL_RCC_OscConfig+0x2b4>)
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304e:	f7fe fb65 	bl	800171c <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003056:	f7fe fb61 	bl	800171c <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e14d      	b.n	8003304 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003068:	4b1a      	ldr	r3, [pc, #104]	; (80030d4 <HAL_RCC_OscConfig+0x2ac>)
 800306a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1f0      	bne.n	8003056 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 80a0 	beq.w	80031c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003082:	2300      	movs	r3, #0
 8003084:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003086:	4b13      	ldr	r3, [pc, #76]	; (80030d4 <HAL_RCC_OscConfig+0x2ac>)
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10f      	bne.n	80030b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	4b0f      	ldr	r3, [pc, #60]	; (80030d4 <HAL_RCC_OscConfig+0x2ac>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	4a0e      	ldr	r2, [pc, #56]	; (80030d4 <HAL_RCC_OscConfig+0x2ac>)
 800309c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a0:	6413      	str	r3, [r2, #64]	; 0x40
 80030a2:	4b0c      	ldr	r3, [pc, #48]	; (80030d4 <HAL_RCC_OscConfig+0x2ac>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030aa:	60bb      	str	r3, [r7, #8]
 80030ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ae:	2301      	movs	r3, #1
 80030b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b2:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <HAL_RCC_OscConfig+0x2b8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d121      	bne.n	8003102 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030be:	4b08      	ldr	r3, [pc, #32]	; (80030e0 <HAL_RCC_OscConfig+0x2b8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a07      	ldr	r2, [pc, #28]	; (80030e0 <HAL_RCC_OscConfig+0x2b8>)
 80030c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ca:	f7fe fb27 	bl	800171c <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d0:	e011      	b.n	80030f6 <HAL_RCC_OscConfig+0x2ce>
 80030d2:	bf00      	nop
 80030d4:	40023800 	.word	0x40023800
 80030d8:	42470000 	.word	0x42470000
 80030dc:	42470e80 	.word	0x42470e80
 80030e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030e4:	f7fe fb1a 	bl	800171c <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e106      	b.n	8003304 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f6:	4b85      	ldr	r3, [pc, #532]	; (800330c <HAL_RCC_OscConfig+0x4e4>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f0      	beq.n	80030e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d106      	bne.n	8003118 <HAL_RCC_OscConfig+0x2f0>
 800310a:	4b81      	ldr	r3, [pc, #516]	; (8003310 <HAL_RCC_OscConfig+0x4e8>)
 800310c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310e:	4a80      	ldr	r2, [pc, #512]	; (8003310 <HAL_RCC_OscConfig+0x4e8>)
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	6713      	str	r3, [r2, #112]	; 0x70
 8003116:	e01c      	b.n	8003152 <HAL_RCC_OscConfig+0x32a>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2b05      	cmp	r3, #5
 800311e:	d10c      	bne.n	800313a <HAL_RCC_OscConfig+0x312>
 8003120:	4b7b      	ldr	r3, [pc, #492]	; (8003310 <HAL_RCC_OscConfig+0x4e8>)
 8003122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003124:	4a7a      	ldr	r2, [pc, #488]	; (8003310 <HAL_RCC_OscConfig+0x4e8>)
 8003126:	f043 0304 	orr.w	r3, r3, #4
 800312a:	6713      	str	r3, [r2, #112]	; 0x70
 800312c:	4b78      	ldr	r3, [pc, #480]	; (8003310 <HAL_RCC_OscConfig+0x4e8>)
 800312e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003130:	4a77      	ldr	r2, [pc, #476]	; (8003310 <HAL_RCC_OscConfig+0x4e8>)
 8003132:	f043 0301 	orr.w	r3, r3, #1
 8003136:	6713      	str	r3, [r2, #112]	; 0x70
 8003138:	e00b      	b.n	8003152 <HAL_RCC_OscConfig+0x32a>
 800313a:	4b75      	ldr	r3, [pc, #468]	; (8003310 <HAL_RCC_OscConfig+0x4e8>)
 800313c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313e:	4a74      	ldr	r2, [pc, #464]	; (8003310 <HAL_RCC_OscConfig+0x4e8>)
 8003140:	f023 0301 	bic.w	r3, r3, #1
 8003144:	6713      	str	r3, [r2, #112]	; 0x70
 8003146:	4b72      	ldr	r3, [pc, #456]	; (8003310 <HAL_RCC_OscConfig+0x4e8>)
 8003148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314a:	4a71      	ldr	r2, [pc, #452]	; (8003310 <HAL_RCC_OscConfig+0x4e8>)
 800314c:	f023 0304 	bic.w	r3, r3, #4
 8003150:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d015      	beq.n	8003186 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315a:	f7fe fadf 	bl	800171c <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003160:	e00a      	b.n	8003178 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003162:	f7fe fadb 	bl	800171c <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003170:	4293      	cmp	r3, r2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e0c5      	b.n	8003304 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003178:	4b65      	ldr	r3, [pc, #404]	; (8003310 <HAL_RCC_OscConfig+0x4e8>)
 800317a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0ee      	beq.n	8003162 <HAL_RCC_OscConfig+0x33a>
 8003184:	e014      	b.n	80031b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003186:	f7fe fac9 	bl	800171c <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800318c:	e00a      	b.n	80031a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800318e:	f7fe fac5 	bl	800171c <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	f241 3288 	movw	r2, #5000	; 0x1388
 800319c:	4293      	cmp	r3, r2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e0af      	b.n	8003304 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a4:	4b5a      	ldr	r3, [pc, #360]	; (8003310 <HAL_RCC_OscConfig+0x4e8>)
 80031a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1ee      	bne.n	800318e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031b0:	7dfb      	ldrb	r3, [r7, #23]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d105      	bne.n	80031c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031b6:	4b56      	ldr	r3, [pc, #344]	; (8003310 <HAL_RCC_OscConfig+0x4e8>)
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	4a55      	ldr	r2, [pc, #340]	; (8003310 <HAL_RCC_OscConfig+0x4e8>)
 80031bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 809b 	beq.w	8003302 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031cc:	4b50      	ldr	r3, [pc, #320]	; (8003310 <HAL_RCC_OscConfig+0x4e8>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 030c 	and.w	r3, r3, #12
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d05c      	beq.n	8003292 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d141      	bne.n	8003264 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e0:	4b4c      	ldr	r3, [pc, #304]	; (8003314 <HAL_RCC_OscConfig+0x4ec>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e6:	f7fe fa99 	bl	800171c <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ee:	f7fe fa95 	bl	800171c <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e081      	b.n	8003304 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003200:	4b43      	ldr	r3, [pc, #268]	; (8003310 <HAL_RCC_OscConfig+0x4e8>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1f0      	bne.n	80031ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	69da      	ldr	r2, [r3, #28]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	019b      	lsls	r3, r3, #6
 800321c:	431a      	orrs	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003222:	085b      	lsrs	r3, r3, #1
 8003224:	3b01      	subs	r3, #1
 8003226:	041b      	lsls	r3, r3, #16
 8003228:	431a      	orrs	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322e:	061b      	lsls	r3, r3, #24
 8003230:	4937      	ldr	r1, [pc, #220]	; (8003310 <HAL_RCC_OscConfig+0x4e8>)
 8003232:	4313      	orrs	r3, r2
 8003234:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003236:	4b37      	ldr	r3, [pc, #220]	; (8003314 <HAL_RCC_OscConfig+0x4ec>)
 8003238:	2201      	movs	r2, #1
 800323a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323c:	f7fe fa6e 	bl	800171c <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003244:	f7fe fa6a 	bl	800171c <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e056      	b.n	8003304 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003256:	4b2e      	ldr	r3, [pc, #184]	; (8003310 <HAL_RCC_OscConfig+0x4e8>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0f0      	beq.n	8003244 <HAL_RCC_OscConfig+0x41c>
 8003262:	e04e      	b.n	8003302 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003264:	4b2b      	ldr	r3, [pc, #172]	; (8003314 <HAL_RCC_OscConfig+0x4ec>)
 8003266:	2200      	movs	r2, #0
 8003268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326a:	f7fe fa57 	bl	800171c <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003272:	f7fe fa53 	bl	800171c <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e03f      	b.n	8003304 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003284:	4b22      	ldr	r3, [pc, #136]	; (8003310 <HAL_RCC_OscConfig+0x4e8>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1f0      	bne.n	8003272 <HAL_RCC_OscConfig+0x44a>
 8003290:	e037      	b.n	8003302 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d101      	bne.n	800329e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e032      	b.n	8003304 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800329e:	4b1c      	ldr	r3, [pc, #112]	; (8003310 <HAL_RCC_OscConfig+0x4e8>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d028      	beq.n	80032fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d121      	bne.n	80032fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d11a      	bne.n	80032fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032ce:	4013      	ands	r3, r2
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032d4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d111      	bne.n	80032fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e4:	085b      	lsrs	r3, r3, #1
 80032e6:	3b01      	subs	r3, #1
 80032e8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d107      	bne.n	80032fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d001      	beq.n	8003302 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40007000 	.word	0x40007000
 8003310:	40023800 	.word	0x40023800
 8003314:	42470060 	.word	0x42470060

08003318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e0cc      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800332c:	4b68      	ldr	r3, [pc, #416]	; (80034d0 <HAL_RCC_ClockConfig+0x1b8>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d90c      	bls.n	8003354 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333a:	4b65      	ldr	r3, [pc, #404]	; (80034d0 <HAL_RCC_ClockConfig+0x1b8>)
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003342:	4b63      	ldr	r3, [pc, #396]	; (80034d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	429a      	cmp	r2, r3
 800334e:	d001      	beq.n	8003354 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e0b8      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d020      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b00      	cmp	r3, #0
 800336a:	d005      	beq.n	8003378 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800336c:	4b59      	ldr	r3, [pc, #356]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	4a58      	ldr	r2, [pc, #352]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003372:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003376:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0308 	and.w	r3, r3, #8
 8003380:	2b00      	cmp	r3, #0
 8003382:	d005      	beq.n	8003390 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003384:	4b53      	ldr	r3, [pc, #332]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	4a52      	ldr	r2, [pc, #328]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 800338a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800338e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003390:	4b50      	ldr	r3, [pc, #320]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	494d      	ldr	r1, [pc, #308]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d044      	beq.n	8003438 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d107      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b6:	4b47      	ldr	r3, [pc, #284]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d119      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e07f      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d003      	beq.n	80033d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033d2:	2b03      	cmp	r3, #3
 80033d4:	d107      	bne.n	80033e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d6:	4b3f      	ldr	r3, [pc, #252]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d109      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e06f      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e6:	4b3b      	ldr	r3, [pc, #236]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e067      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033f6:	4b37      	ldr	r3, [pc, #220]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f023 0203 	bic.w	r2, r3, #3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4934      	ldr	r1, [pc, #208]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003404:	4313      	orrs	r3, r2
 8003406:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003408:	f7fe f988 	bl	800171c <HAL_GetTick>
 800340c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340e:	e00a      	b.n	8003426 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003410:	f7fe f984 	bl	800171c <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	f241 3288 	movw	r2, #5000	; 0x1388
 800341e:	4293      	cmp	r3, r2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e04f      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003426:	4b2b      	ldr	r3, [pc, #172]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 020c 	and.w	r2, r3, #12
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	429a      	cmp	r2, r3
 8003436:	d1eb      	bne.n	8003410 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003438:	4b25      	ldr	r3, [pc, #148]	; (80034d0 <HAL_RCC_ClockConfig+0x1b8>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d20c      	bcs.n	8003460 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003446:	4b22      	ldr	r3, [pc, #136]	; (80034d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800344e:	4b20      	ldr	r3, [pc, #128]	; (80034d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	429a      	cmp	r2, r3
 800345a:	d001      	beq.n	8003460 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e032      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d008      	beq.n	800347e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800346c:	4b19      	ldr	r3, [pc, #100]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	4916      	ldr	r1, [pc, #88]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	4313      	orrs	r3, r2
 800347c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d009      	beq.n	800349e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800348a:	4b12      	ldr	r3, [pc, #72]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	490e      	ldr	r1, [pc, #56]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	4313      	orrs	r3, r2
 800349c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800349e:	f000 f821 	bl	80034e4 <HAL_RCC_GetSysClockFreq>
 80034a2:	4602      	mov	r2, r0
 80034a4:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	091b      	lsrs	r3, r3, #4
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	490a      	ldr	r1, [pc, #40]	; (80034d8 <HAL_RCC_ClockConfig+0x1c0>)
 80034b0:	5ccb      	ldrb	r3, [r1, r3]
 80034b2:	fa22 f303 	lsr.w	r3, r2, r3
 80034b6:	4a09      	ldr	r2, [pc, #36]	; (80034dc <HAL_RCC_ClockConfig+0x1c4>)
 80034b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034ba:	4b09      	ldr	r3, [pc, #36]	; (80034e0 <HAL_RCC_ClockConfig+0x1c8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fe f8e8 	bl	8001694 <HAL_InitTick>

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40023c00 	.word	0x40023c00
 80034d4:	40023800 	.word	0x40023800
 80034d8:	080048f0 	.word	0x080048f0
 80034dc:	20000000 	.word	0x20000000
 80034e0:	20000004 	.word	0x20000004

080034e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034e8:	b084      	sub	sp, #16
 80034ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	607b      	str	r3, [r7, #4]
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	2300      	movs	r3, #0
 80034f6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034fc:	4b67      	ldr	r3, [pc, #412]	; (800369c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 030c 	and.w	r3, r3, #12
 8003504:	2b08      	cmp	r3, #8
 8003506:	d00d      	beq.n	8003524 <HAL_RCC_GetSysClockFreq+0x40>
 8003508:	2b08      	cmp	r3, #8
 800350a:	f200 80bd 	bhi.w	8003688 <HAL_RCC_GetSysClockFreq+0x1a4>
 800350e:	2b00      	cmp	r3, #0
 8003510:	d002      	beq.n	8003518 <HAL_RCC_GetSysClockFreq+0x34>
 8003512:	2b04      	cmp	r3, #4
 8003514:	d003      	beq.n	800351e <HAL_RCC_GetSysClockFreq+0x3a>
 8003516:	e0b7      	b.n	8003688 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003518:	4b61      	ldr	r3, [pc, #388]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800351a:	60bb      	str	r3, [r7, #8]
       break;
 800351c:	e0b7      	b.n	800368e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800351e:	4b61      	ldr	r3, [pc, #388]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003520:	60bb      	str	r3, [r7, #8]
      break;
 8003522:	e0b4      	b.n	800368e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003524:	4b5d      	ldr	r3, [pc, #372]	; (800369c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800352c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800352e:	4b5b      	ldr	r3, [pc, #364]	; (800369c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d04d      	beq.n	80035d6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800353a:	4b58      	ldr	r3, [pc, #352]	; (800369c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	099b      	lsrs	r3, r3, #6
 8003540:	461a      	mov	r2, r3
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	f240 10ff 	movw	r0, #511	; 0x1ff
 800354a:	f04f 0100 	mov.w	r1, #0
 800354e:	ea02 0800 	and.w	r8, r2, r0
 8003552:	ea03 0901 	and.w	r9, r3, r1
 8003556:	4640      	mov	r0, r8
 8003558:	4649      	mov	r1, r9
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	014b      	lsls	r3, r1, #5
 8003564:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003568:	0142      	lsls	r2, r0, #5
 800356a:	4610      	mov	r0, r2
 800356c:	4619      	mov	r1, r3
 800356e:	ebb0 0008 	subs.w	r0, r0, r8
 8003572:	eb61 0109 	sbc.w	r1, r1, r9
 8003576:	f04f 0200 	mov.w	r2, #0
 800357a:	f04f 0300 	mov.w	r3, #0
 800357e:	018b      	lsls	r3, r1, #6
 8003580:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003584:	0182      	lsls	r2, r0, #6
 8003586:	1a12      	subs	r2, r2, r0
 8003588:	eb63 0301 	sbc.w	r3, r3, r1
 800358c:	f04f 0000 	mov.w	r0, #0
 8003590:	f04f 0100 	mov.w	r1, #0
 8003594:	00d9      	lsls	r1, r3, #3
 8003596:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800359a:	00d0      	lsls	r0, r2, #3
 800359c:	4602      	mov	r2, r0
 800359e:	460b      	mov	r3, r1
 80035a0:	eb12 0208 	adds.w	r2, r2, r8
 80035a4:	eb43 0309 	adc.w	r3, r3, r9
 80035a8:	f04f 0000 	mov.w	r0, #0
 80035ac:	f04f 0100 	mov.w	r1, #0
 80035b0:	0259      	lsls	r1, r3, #9
 80035b2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80035b6:	0250      	lsls	r0, r2, #9
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	4610      	mov	r0, r2
 80035be:	4619      	mov	r1, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	461a      	mov	r2, r3
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	f7fc fe04 	bl	80001d4 <__aeabi_uldivmod>
 80035cc:	4602      	mov	r2, r0
 80035ce:	460b      	mov	r3, r1
 80035d0:	4613      	mov	r3, r2
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	e04a      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035d6:	4b31      	ldr	r3, [pc, #196]	; (800369c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	099b      	lsrs	r3, r3, #6
 80035dc:	461a      	mov	r2, r3
 80035de:	f04f 0300 	mov.w	r3, #0
 80035e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035e6:	f04f 0100 	mov.w	r1, #0
 80035ea:	ea02 0400 	and.w	r4, r2, r0
 80035ee:	ea03 0501 	and.w	r5, r3, r1
 80035f2:	4620      	mov	r0, r4
 80035f4:	4629      	mov	r1, r5
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	f04f 0300 	mov.w	r3, #0
 80035fe:	014b      	lsls	r3, r1, #5
 8003600:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003604:	0142      	lsls	r2, r0, #5
 8003606:	4610      	mov	r0, r2
 8003608:	4619      	mov	r1, r3
 800360a:	1b00      	subs	r0, r0, r4
 800360c:	eb61 0105 	sbc.w	r1, r1, r5
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	018b      	lsls	r3, r1, #6
 800361a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800361e:	0182      	lsls	r2, r0, #6
 8003620:	1a12      	subs	r2, r2, r0
 8003622:	eb63 0301 	sbc.w	r3, r3, r1
 8003626:	f04f 0000 	mov.w	r0, #0
 800362a:	f04f 0100 	mov.w	r1, #0
 800362e:	00d9      	lsls	r1, r3, #3
 8003630:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003634:	00d0      	lsls	r0, r2, #3
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	1912      	adds	r2, r2, r4
 800363c:	eb45 0303 	adc.w	r3, r5, r3
 8003640:	f04f 0000 	mov.w	r0, #0
 8003644:	f04f 0100 	mov.w	r1, #0
 8003648:	0299      	lsls	r1, r3, #10
 800364a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800364e:	0290      	lsls	r0, r2, #10
 8003650:	4602      	mov	r2, r0
 8003652:	460b      	mov	r3, r1
 8003654:	4610      	mov	r0, r2
 8003656:	4619      	mov	r1, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	461a      	mov	r2, r3
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	f7fc fdb8 	bl	80001d4 <__aeabi_uldivmod>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	4613      	mov	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800366c:	4b0b      	ldr	r3, [pc, #44]	; (800369c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	0c1b      	lsrs	r3, r3, #16
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	3301      	adds	r3, #1
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	fbb2 f3f3 	udiv	r3, r2, r3
 8003684:	60bb      	str	r3, [r7, #8]
      break;
 8003686:	e002      	b.n	800368e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003688:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800368a:	60bb      	str	r3, [r7, #8]
      break;
 800368c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800368e:	68bb      	ldr	r3, [r7, #8]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800369a:	bf00      	nop
 800369c:	40023800 	.word	0x40023800
 80036a0:	00f42400 	.word	0x00f42400
 80036a4:	007a1200 	.word	0x007a1200

080036a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036ac:	4b03      	ldr	r3, [pc, #12]	; (80036bc <HAL_RCC_GetHCLKFreq+0x14>)
 80036ae:	681b      	ldr	r3, [r3, #0]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	20000000 	.word	0x20000000

080036c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036c4:	f7ff fff0 	bl	80036a8 <HAL_RCC_GetHCLKFreq>
 80036c8:	4602      	mov	r2, r0
 80036ca:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	0a9b      	lsrs	r3, r3, #10
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	4903      	ldr	r1, [pc, #12]	; (80036e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036d6:	5ccb      	ldrb	r3, [r1, r3]
 80036d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036dc:	4618      	mov	r0, r3
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40023800 	.word	0x40023800
 80036e4:	08004900 	.word	0x08004900

080036e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036ec:	f7ff ffdc 	bl	80036a8 <HAL_RCC_GetHCLKFreq>
 80036f0:	4602      	mov	r2, r0
 80036f2:	4b05      	ldr	r3, [pc, #20]	; (8003708 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	0b5b      	lsrs	r3, r3, #13
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	4903      	ldr	r1, [pc, #12]	; (800370c <HAL_RCC_GetPCLK2Freq+0x24>)
 80036fe:	5ccb      	ldrb	r3, [r1, r3]
 8003700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003704:	4618      	mov	r0, r3
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40023800 	.word	0x40023800
 800370c:	08004900 	.word	0x08004900

08003710 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e041      	b.n	80037a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d106      	bne.n	800373c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7fd fda4 	bl	8001284 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3304      	adds	r3, #4
 800374c:	4619      	mov	r1, r3
 800374e:	4610      	mov	r0, r2
 8003750:	f000 fac0 	bl	8003cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b082      	sub	sp, #8
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e041      	b.n	8003844 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d106      	bne.n	80037da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f839 	bl	800384c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2202      	movs	r2, #2
 80037de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	3304      	adds	r3, #4
 80037ea:	4619      	mov	r1, r3
 80037ec:	4610      	mov	r0, r2
 80037ee:	f000 fa71 	bl	8003cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d109      	bne.n	8003884 <HAL_TIM_PWM_Start+0x24>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b01      	cmp	r3, #1
 800387a:	bf14      	ite	ne
 800387c:	2301      	movne	r3, #1
 800387e:	2300      	moveq	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	e022      	b.n	80038ca <HAL_TIM_PWM_Start+0x6a>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	2b04      	cmp	r3, #4
 8003888:	d109      	bne.n	800389e <HAL_TIM_PWM_Start+0x3e>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b01      	cmp	r3, #1
 8003894:	bf14      	ite	ne
 8003896:	2301      	movne	r3, #1
 8003898:	2300      	moveq	r3, #0
 800389a:	b2db      	uxtb	r3, r3
 800389c:	e015      	b.n	80038ca <HAL_TIM_PWM_Start+0x6a>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d109      	bne.n	80038b8 <HAL_TIM_PWM_Start+0x58>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	bf14      	ite	ne
 80038b0:	2301      	movne	r3, #1
 80038b2:	2300      	moveq	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	e008      	b.n	80038ca <HAL_TIM_PWM_Start+0x6a>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	bf14      	ite	ne
 80038c4:	2301      	movne	r3, #1
 80038c6:	2300      	moveq	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e068      	b.n	80039a4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d104      	bne.n	80038e2 <HAL_TIM_PWM_Start+0x82>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038e0:	e013      	b.n	800390a <HAL_TIM_PWM_Start+0xaa>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d104      	bne.n	80038f2 <HAL_TIM_PWM_Start+0x92>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038f0:	e00b      	b.n	800390a <HAL_TIM_PWM_Start+0xaa>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	d104      	bne.n	8003902 <HAL_TIM_PWM_Start+0xa2>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003900:	e003      	b.n	800390a <HAL_TIM_PWM_Start+0xaa>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2202      	movs	r2, #2
 8003906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2201      	movs	r2, #1
 8003910:	6839      	ldr	r1, [r7, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f000 fc84 	bl	8004220 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a23      	ldr	r2, [pc, #140]	; (80039ac <HAL_TIM_PWM_Start+0x14c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d107      	bne.n	8003932 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003930:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a1d      	ldr	r2, [pc, #116]	; (80039ac <HAL_TIM_PWM_Start+0x14c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d018      	beq.n	800396e <HAL_TIM_PWM_Start+0x10e>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003944:	d013      	beq.n	800396e <HAL_TIM_PWM_Start+0x10e>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a19      	ldr	r2, [pc, #100]	; (80039b0 <HAL_TIM_PWM_Start+0x150>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d00e      	beq.n	800396e <HAL_TIM_PWM_Start+0x10e>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a17      	ldr	r2, [pc, #92]	; (80039b4 <HAL_TIM_PWM_Start+0x154>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d009      	beq.n	800396e <HAL_TIM_PWM_Start+0x10e>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a16      	ldr	r2, [pc, #88]	; (80039b8 <HAL_TIM_PWM_Start+0x158>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d004      	beq.n	800396e <HAL_TIM_PWM_Start+0x10e>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a14      	ldr	r2, [pc, #80]	; (80039bc <HAL_TIM_PWM_Start+0x15c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d111      	bne.n	8003992 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2b06      	cmp	r3, #6
 800397e:	d010      	beq.n	80039a2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0201 	orr.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003990:	e007      	b.n	80039a2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f042 0201 	orr.w	r2, r2, #1
 80039a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40010000 	.word	0x40010000
 80039b0:	40000400 	.word	0x40000400
 80039b4:	40000800 	.word	0x40000800
 80039b8:	40000c00 	.word	0x40000c00
 80039bc:	40014000 	.word	0x40014000

080039c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039cc:	2300      	movs	r3, #0
 80039ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d101      	bne.n	80039de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039da:	2302      	movs	r3, #2
 80039dc:	e0ae      	b.n	8003b3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b0c      	cmp	r3, #12
 80039ea:	f200 809f 	bhi.w	8003b2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80039ee:	a201      	add	r2, pc, #4	; (adr r2, 80039f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f4:	08003a29 	.word	0x08003a29
 80039f8:	08003b2d 	.word	0x08003b2d
 80039fc:	08003b2d 	.word	0x08003b2d
 8003a00:	08003b2d 	.word	0x08003b2d
 8003a04:	08003a69 	.word	0x08003a69
 8003a08:	08003b2d 	.word	0x08003b2d
 8003a0c:	08003b2d 	.word	0x08003b2d
 8003a10:	08003b2d 	.word	0x08003b2d
 8003a14:	08003aab 	.word	0x08003aab
 8003a18:	08003b2d 	.word	0x08003b2d
 8003a1c:	08003b2d 	.word	0x08003b2d
 8003a20:	08003b2d 	.word	0x08003b2d
 8003a24:	08003aeb 	.word	0x08003aeb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68b9      	ldr	r1, [r7, #8]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 f9d0 	bl	8003dd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699a      	ldr	r2, [r3, #24]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0208 	orr.w	r2, r2, #8
 8003a42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0204 	bic.w	r2, r2, #4
 8003a52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6999      	ldr	r1, [r3, #24]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	619a      	str	r2, [r3, #24]
      break;
 8003a66:	e064      	b.n	8003b32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68b9      	ldr	r1, [r7, #8]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 fa16 	bl	8003ea0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699a      	ldr	r2, [r3, #24]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699a      	ldr	r2, [r3, #24]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6999      	ldr	r1, [r3, #24]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	021a      	lsls	r2, r3, #8
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	619a      	str	r2, [r3, #24]
      break;
 8003aa8:	e043      	b.n	8003b32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 fa61 	bl	8003f78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69da      	ldr	r2, [r3, #28]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f042 0208 	orr.w	r2, r2, #8
 8003ac4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	69da      	ldr	r2, [r3, #28]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0204 	bic.w	r2, r2, #4
 8003ad4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69d9      	ldr	r1, [r3, #28]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	61da      	str	r2, [r3, #28]
      break;
 8003ae8:	e023      	b.n	8003b32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68b9      	ldr	r1, [r7, #8]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 faab 	bl	800404c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	69da      	ldr	r2, [r3, #28]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	69da      	ldr	r2, [r3, #28]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69d9      	ldr	r1, [r3, #28]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	021a      	lsls	r2, r3, #8
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	61da      	str	r2, [r3, #28]
      break;
 8003b2a:	e002      	b.n	8003b32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <HAL_TIM_ConfigClockSource+0x1c>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	e0b4      	b.n	8003cca <HAL_TIM_ConfigClockSource+0x186>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b98:	d03e      	beq.n	8003c18 <HAL_TIM_ConfigClockSource+0xd4>
 8003b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b9e:	f200 8087 	bhi.w	8003cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba6:	f000 8086 	beq.w	8003cb6 <HAL_TIM_ConfigClockSource+0x172>
 8003baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bae:	d87f      	bhi.n	8003cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb0:	2b70      	cmp	r3, #112	; 0x70
 8003bb2:	d01a      	beq.n	8003bea <HAL_TIM_ConfigClockSource+0xa6>
 8003bb4:	2b70      	cmp	r3, #112	; 0x70
 8003bb6:	d87b      	bhi.n	8003cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb8:	2b60      	cmp	r3, #96	; 0x60
 8003bba:	d050      	beq.n	8003c5e <HAL_TIM_ConfigClockSource+0x11a>
 8003bbc:	2b60      	cmp	r3, #96	; 0x60
 8003bbe:	d877      	bhi.n	8003cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc0:	2b50      	cmp	r3, #80	; 0x50
 8003bc2:	d03c      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0xfa>
 8003bc4:	2b50      	cmp	r3, #80	; 0x50
 8003bc6:	d873      	bhi.n	8003cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc8:	2b40      	cmp	r3, #64	; 0x40
 8003bca:	d058      	beq.n	8003c7e <HAL_TIM_ConfigClockSource+0x13a>
 8003bcc:	2b40      	cmp	r3, #64	; 0x40
 8003bce:	d86f      	bhi.n	8003cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd0:	2b30      	cmp	r3, #48	; 0x30
 8003bd2:	d064      	beq.n	8003c9e <HAL_TIM_ConfigClockSource+0x15a>
 8003bd4:	2b30      	cmp	r3, #48	; 0x30
 8003bd6:	d86b      	bhi.n	8003cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd8:	2b20      	cmp	r3, #32
 8003bda:	d060      	beq.n	8003c9e <HAL_TIM_ConfigClockSource+0x15a>
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d867      	bhi.n	8003cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d05c      	beq.n	8003c9e <HAL_TIM_ConfigClockSource+0x15a>
 8003be4:	2b10      	cmp	r3, #16
 8003be6:	d05a      	beq.n	8003c9e <HAL_TIM_ConfigClockSource+0x15a>
 8003be8:	e062      	b.n	8003cb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6818      	ldr	r0, [r3, #0]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	6899      	ldr	r1, [r3, #8]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	f000 faf1 	bl	80041e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	609a      	str	r2, [r3, #8]
      break;
 8003c16:	e04f      	b.n	8003cb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6818      	ldr	r0, [r3, #0]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	6899      	ldr	r1, [r3, #8]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f000 fada 	bl	80041e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c3a:	609a      	str	r2, [r3, #8]
      break;
 8003c3c:	e03c      	b.n	8003cb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	6859      	ldr	r1, [r3, #4]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	f000 fa4e 	bl	80040ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2150      	movs	r1, #80	; 0x50
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 faa7 	bl	80041aa <TIM_ITRx_SetConfig>
      break;
 8003c5c:	e02c      	b.n	8003cb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6818      	ldr	r0, [r3, #0]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	6859      	ldr	r1, [r3, #4]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	f000 fa6d 	bl	800414a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2160      	movs	r1, #96	; 0x60
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 fa97 	bl	80041aa <TIM_ITRx_SetConfig>
      break;
 8003c7c:	e01c      	b.n	8003cb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	6859      	ldr	r1, [r3, #4]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	f000 fa2e 	bl	80040ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2140      	movs	r1, #64	; 0x40
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 fa87 	bl	80041aa <TIM_ITRx_SetConfig>
      break;
 8003c9c:	e00c      	b.n	8003cb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4610      	mov	r0, r2
 8003caa:	f000 fa7e 	bl	80041aa <TIM_ITRx_SetConfig>
      break;
 8003cae:	e003      	b.n	8003cb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8003cb4:	e000      	b.n	8003cb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
	...

08003cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a34      	ldr	r2, [pc, #208]	; (8003db8 <TIM_Base_SetConfig+0xe4>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d00f      	beq.n	8003d0c <TIM_Base_SetConfig+0x38>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf2:	d00b      	beq.n	8003d0c <TIM_Base_SetConfig+0x38>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a31      	ldr	r2, [pc, #196]	; (8003dbc <TIM_Base_SetConfig+0xe8>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d007      	beq.n	8003d0c <TIM_Base_SetConfig+0x38>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a30      	ldr	r2, [pc, #192]	; (8003dc0 <TIM_Base_SetConfig+0xec>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d003      	beq.n	8003d0c <TIM_Base_SetConfig+0x38>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a2f      	ldr	r2, [pc, #188]	; (8003dc4 <TIM_Base_SetConfig+0xf0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d108      	bne.n	8003d1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a25      	ldr	r2, [pc, #148]	; (8003db8 <TIM_Base_SetConfig+0xe4>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d01b      	beq.n	8003d5e <TIM_Base_SetConfig+0x8a>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d2c:	d017      	beq.n	8003d5e <TIM_Base_SetConfig+0x8a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a22      	ldr	r2, [pc, #136]	; (8003dbc <TIM_Base_SetConfig+0xe8>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d013      	beq.n	8003d5e <TIM_Base_SetConfig+0x8a>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a21      	ldr	r2, [pc, #132]	; (8003dc0 <TIM_Base_SetConfig+0xec>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d00f      	beq.n	8003d5e <TIM_Base_SetConfig+0x8a>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a20      	ldr	r2, [pc, #128]	; (8003dc4 <TIM_Base_SetConfig+0xf0>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d00b      	beq.n	8003d5e <TIM_Base_SetConfig+0x8a>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a1f      	ldr	r2, [pc, #124]	; (8003dc8 <TIM_Base_SetConfig+0xf4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d007      	beq.n	8003d5e <TIM_Base_SetConfig+0x8a>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a1e      	ldr	r2, [pc, #120]	; (8003dcc <TIM_Base_SetConfig+0xf8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d003      	beq.n	8003d5e <TIM_Base_SetConfig+0x8a>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a1d      	ldr	r2, [pc, #116]	; (8003dd0 <TIM_Base_SetConfig+0xfc>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d108      	bne.n	8003d70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a08      	ldr	r2, [pc, #32]	; (8003db8 <TIM_Base_SetConfig+0xe4>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d103      	bne.n	8003da4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	691a      	ldr	r2, [r3, #16]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	615a      	str	r2, [r3, #20]
}
 8003daa:	bf00      	nop
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	40010000 	.word	0x40010000
 8003dbc:	40000400 	.word	0x40000400
 8003dc0:	40000800 	.word	0x40000800
 8003dc4:	40000c00 	.word	0x40000c00
 8003dc8:	40014000 	.word	0x40014000
 8003dcc:	40014400 	.word	0x40014400
 8003dd0:	40014800 	.word	0x40014800

08003dd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b087      	sub	sp, #28
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	f023 0201 	bic.w	r2, r3, #1
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 0303 	bic.w	r3, r3, #3
 8003e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f023 0302 	bic.w	r3, r3, #2
 8003e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a1c      	ldr	r2, [pc, #112]	; (8003e9c <TIM_OC1_SetConfig+0xc8>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d10c      	bne.n	8003e4a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f023 0308 	bic.w	r3, r3, #8
 8003e36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f023 0304 	bic.w	r3, r3, #4
 8003e48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a13      	ldr	r2, [pc, #76]	; (8003e9c <TIM_OC1_SetConfig+0xc8>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d111      	bne.n	8003e76 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	621a      	str	r2, [r3, #32]
}
 8003e90:	bf00      	nop
 8003e92:	371c      	adds	r7, #28
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	40010000 	.word	0x40010000

08003ea0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	f023 0210 	bic.w	r2, r3, #16
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	021b      	lsls	r3, r3, #8
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f023 0320 	bic.w	r3, r3, #32
 8003eea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	011b      	lsls	r3, r3, #4
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a1e      	ldr	r2, [pc, #120]	; (8003f74 <TIM_OC2_SetConfig+0xd4>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d10d      	bne.n	8003f1c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	011b      	lsls	r3, r3, #4
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a15      	ldr	r2, [pc, #84]	; (8003f74 <TIM_OC2_SetConfig+0xd4>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d113      	bne.n	8003f4c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	621a      	str	r2, [r3, #32]
}
 8003f66:	bf00      	nop
 8003f68:	371c      	adds	r7, #28
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40010000 	.word	0x40010000

08003f78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f023 0303 	bic.w	r3, r3, #3
 8003fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	021b      	lsls	r3, r3, #8
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a1d      	ldr	r2, [pc, #116]	; (8004048 <TIM_OC3_SetConfig+0xd0>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d10d      	bne.n	8003ff2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	021b      	lsls	r3, r3, #8
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a14      	ldr	r2, [pc, #80]	; (8004048 <TIM_OC3_SetConfig+0xd0>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d113      	bne.n	8004022 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004000:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004008:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4313      	orrs	r3, r2
 8004014:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	4313      	orrs	r3, r2
 8004020:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	621a      	str	r2, [r3, #32]
}
 800403c:	bf00      	nop
 800403e:	371c      	adds	r7, #28
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	40010000 	.word	0x40010000

0800404c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800407a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004082:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	021b      	lsls	r3, r3, #8
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	4313      	orrs	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004096:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	031b      	lsls	r3, r3, #12
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a10      	ldr	r2, [pc, #64]	; (80040e8 <TIM_OC4_SetConfig+0x9c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d109      	bne.n	80040c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	019b      	lsls	r3, r3, #6
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	4313      	orrs	r3, r2
 80040be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	621a      	str	r2, [r3, #32]
}
 80040da:	bf00      	nop
 80040dc:	371c      	adds	r7, #28
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40010000 	.word	0x40010000

080040ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	f023 0201 	bic.w	r2, r3, #1
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	011b      	lsls	r3, r3, #4
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4313      	orrs	r3, r2
 8004120:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f023 030a 	bic.w	r3, r3, #10
 8004128:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	4313      	orrs	r3, r2
 8004130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	621a      	str	r2, [r3, #32]
}
 800413e:	bf00      	nop
 8004140:	371c      	adds	r7, #28
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800414a:	b480      	push	{r7}
 800414c:	b087      	sub	sp, #28
 800414e:	af00      	add	r7, sp, #0
 8004150:	60f8      	str	r0, [r7, #12]
 8004152:	60b9      	str	r1, [r7, #8]
 8004154:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	f023 0210 	bic.w	r2, r3, #16
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004174:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	031b      	lsls	r3, r3, #12
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	4313      	orrs	r3, r2
 800417e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004186:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	4313      	orrs	r3, r2
 8004190:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	621a      	str	r2, [r3, #32]
}
 800419e:	bf00      	nop
 80041a0:	371c      	adds	r7, #28
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b085      	sub	sp, #20
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f043 0307 	orr.w	r3, r3, #7
 80041cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	609a      	str	r2, [r3, #8]
}
 80041d4:	bf00      	nop
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b087      	sub	sp, #28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	021a      	lsls	r2, r3, #8
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	431a      	orrs	r2, r3
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	4313      	orrs	r3, r2
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	4313      	orrs	r3, r2
 800420c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	609a      	str	r2, [r3, #8]
}
 8004214:	bf00      	nop
 8004216:	371c      	adds	r7, #28
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004220:	b480      	push	{r7}
 8004222:	b087      	sub	sp, #28
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	f003 031f 	and.w	r3, r3, #31
 8004232:	2201      	movs	r2, #1
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6a1a      	ldr	r2, [r3, #32]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	43db      	mvns	r3, r3
 8004242:	401a      	ands	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6a1a      	ldr	r2, [r3, #32]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	f003 031f 	and.w	r3, r3, #31
 8004252:	6879      	ldr	r1, [r7, #4]
 8004254:	fa01 f303 	lsl.w	r3, r1, r3
 8004258:	431a      	orrs	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	621a      	str	r2, [r3, #32]
}
 800425e:	bf00      	nop
 8004260:	371c      	adds	r7, #28
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
	...

0800426c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800427c:	2b01      	cmp	r3, #1
 800427e:	d101      	bne.n	8004284 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004280:	2302      	movs	r3, #2
 8004282:	e050      	b.n	8004326 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2202      	movs	r2, #2
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a1c      	ldr	r2, [pc, #112]	; (8004334 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d018      	beq.n	80042fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d0:	d013      	beq.n	80042fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a18      	ldr	r2, [pc, #96]	; (8004338 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d00e      	beq.n	80042fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a16      	ldr	r2, [pc, #88]	; (800433c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d009      	beq.n	80042fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a15      	ldr	r2, [pc, #84]	; (8004340 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d004      	beq.n	80042fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a13      	ldr	r2, [pc, #76]	; (8004344 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d10c      	bne.n	8004314 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004300:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	4313      	orrs	r3, r2
 800430a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	40010000 	.word	0x40010000
 8004338:	40000400 	.word	0x40000400
 800433c:	40000800 	.word	0x40000800
 8004340:	40000c00 	.word	0x40000c00
 8004344:	40014000 	.word	0x40014000

08004348 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e03f      	b.n	80043da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d106      	bne.n	8004374 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7fd f8fc 	bl	800156c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2224      	movs	r2, #36	; 0x24
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800438a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f829 	bl	80043e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	691a      	ldr	r2, [r3, #16]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	695a      	ldr	r2, [r3, #20]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68da      	ldr	r2, [r3, #12]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043e8:	b09f      	sub	sp, #124	; 0x7c
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043fa:	68d9      	ldr	r1, [r3, #12]
 80043fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	ea40 0301 	orr.w	r3, r0, r1
 8004404:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004408:	689a      	ldr	r2, [r3, #8]
 800440a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	431a      	orrs	r2, r3
 8004410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	431a      	orrs	r2, r3
 8004416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	4313      	orrs	r3, r2
 800441c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800441e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004428:	f021 010c 	bic.w	r1, r1, #12
 800442c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004432:	430b      	orrs	r3, r1
 8004434:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004442:	6999      	ldr	r1, [r3, #24]
 8004444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	ea40 0301 	orr.w	r3, r0, r1
 800444c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800444e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	4bc5      	ldr	r3, [pc, #788]	; (8004768 <UART_SetConfig+0x384>)
 8004454:	429a      	cmp	r2, r3
 8004456:	d004      	beq.n	8004462 <UART_SetConfig+0x7e>
 8004458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	4bc3      	ldr	r3, [pc, #780]	; (800476c <UART_SetConfig+0x388>)
 800445e:	429a      	cmp	r2, r3
 8004460:	d103      	bne.n	800446a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004462:	f7ff f941 	bl	80036e8 <HAL_RCC_GetPCLK2Freq>
 8004466:	6778      	str	r0, [r7, #116]	; 0x74
 8004468:	e002      	b.n	8004470 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800446a:	f7ff f929 	bl	80036c0 <HAL_RCC_GetPCLK1Freq>
 800446e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004478:	f040 80b6 	bne.w	80045e8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800447c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800447e:	461c      	mov	r4, r3
 8004480:	f04f 0500 	mov.w	r5, #0
 8004484:	4622      	mov	r2, r4
 8004486:	462b      	mov	r3, r5
 8004488:	1891      	adds	r1, r2, r2
 800448a:	6439      	str	r1, [r7, #64]	; 0x40
 800448c:	415b      	adcs	r3, r3
 800448e:	647b      	str	r3, [r7, #68]	; 0x44
 8004490:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004494:	1912      	adds	r2, r2, r4
 8004496:	eb45 0303 	adc.w	r3, r5, r3
 800449a:	f04f 0000 	mov.w	r0, #0
 800449e:	f04f 0100 	mov.w	r1, #0
 80044a2:	00d9      	lsls	r1, r3, #3
 80044a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044a8:	00d0      	lsls	r0, r2, #3
 80044aa:	4602      	mov	r2, r0
 80044ac:	460b      	mov	r3, r1
 80044ae:	1911      	adds	r1, r2, r4
 80044b0:	6639      	str	r1, [r7, #96]	; 0x60
 80044b2:	416b      	adcs	r3, r5
 80044b4:	667b      	str	r3, [r7, #100]	; 0x64
 80044b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	461a      	mov	r2, r3
 80044bc:	f04f 0300 	mov.w	r3, #0
 80044c0:	1891      	adds	r1, r2, r2
 80044c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80044c4:	415b      	adcs	r3, r3
 80044c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044cc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80044d0:	f7fb fe80 	bl	80001d4 <__aeabi_uldivmod>
 80044d4:	4602      	mov	r2, r0
 80044d6:	460b      	mov	r3, r1
 80044d8:	4ba5      	ldr	r3, [pc, #660]	; (8004770 <UART_SetConfig+0x38c>)
 80044da:	fba3 2302 	umull	r2, r3, r3, r2
 80044de:	095b      	lsrs	r3, r3, #5
 80044e0:	011e      	lsls	r6, r3, #4
 80044e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044e4:	461c      	mov	r4, r3
 80044e6:	f04f 0500 	mov.w	r5, #0
 80044ea:	4622      	mov	r2, r4
 80044ec:	462b      	mov	r3, r5
 80044ee:	1891      	adds	r1, r2, r2
 80044f0:	6339      	str	r1, [r7, #48]	; 0x30
 80044f2:	415b      	adcs	r3, r3
 80044f4:	637b      	str	r3, [r7, #52]	; 0x34
 80044f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80044fa:	1912      	adds	r2, r2, r4
 80044fc:	eb45 0303 	adc.w	r3, r5, r3
 8004500:	f04f 0000 	mov.w	r0, #0
 8004504:	f04f 0100 	mov.w	r1, #0
 8004508:	00d9      	lsls	r1, r3, #3
 800450a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800450e:	00d0      	lsls	r0, r2, #3
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	1911      	adds	r1, r2, r4
 8004516:	65b9      	str	r1, [r7, #88]	; 0x58
 8004518:	416b      	adcs	r3, r5
 800451a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800451c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	461a      	mov	r2, r3
 8004522:	f04f 0300 	mov.w	r3, #0
 8004526:	1891      	adds	r1, r2, r2
 8004528:	62b9      	str	r1, [r7, #40]	; 0x28
 800452a:	415b      	adcs	r3, r3
 800452c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800452e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004532:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004536:	f7fb fe4d 	bl	80001d4 <__aeabi_uldivmod>
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	4b8c      	ldr	r3, [pc, #560]	; (8004770 <UART_SetConfig+0x38c>)
 8004540:	fba3 1302 	umull	r1, r3, r3, r2
 8004544:	095b      	lsrs	r3, r3, #5
 8004546:	2164      	movs	r1, #100	; 0x64
 8004548:	fb01 f303 	mul.w	r3, r1, r3
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	3332      	adds	r3, #50	; 0x32
 8004552:	4a87      	ldr	r2, [pc, #540]	; (8004770 <UART_SetConfig+0x38c>)
 8004554:	fba2 2303 	umull	r2, r3, r2, r3
 8004558:	095b      	lsrs	r3, r3, #5
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004560:	441e      	add	r6, r3
 8004562:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004564:	4618      	mov	r0, r3
 8004566:	f04f 0100 	mov.w	r1, #0
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	1894      	adds	r4, r2, r2
 8004570:	623c      	str	r4, [r7, #32]
 8004572:	415b      	adcs	r3, r3
 8004574:	627b      	str	r3, [r7, #36]	; 0x24
 8004576:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800457a:	1812      	adds	r2, r2, r0
 800457c:	eb41 0303 	adc.w	r3, r1, r3
 8004580:	f04f 0400 	mov.w	r4, #0
 8004584:	f04f 0500 	mov.w	r5, #0
 8004588:	00dd      	lsls	r5, r3, #3
 800458a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800458e:	00d4      	lsls	r4, r2, #3
 8004590:	4622      	mov	r2, r4
 8004592:	462b      	mov	r3, r5
 8004594:	1814      	adds	r4, r2, r0
 8004596:	653c      	str	r4, [r7, #80]	; 0x50
 8004598:	414b      	adcs	r3, r1
 800459a:	657b      	str	r3, [r7, #84]	; 0x54
 800459c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	461a      	mov	r2, r3
 80045a2:	f04f 0300 	mov.w	r3, #0
 80045a6:	1891      	adds	r1, r2, r2
 80045a8:	61b9      	str	r1, [r7, #24]
 80045aa:	415b      	adcs	r3, r3
 80045ac:	61fb      	str	r3, [r7, #28]
 80045ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045b2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80045b6:	f7fb fe0d 	bl	80001d4 <__aeabi_uldivmod>
 80045ba:	4602      	mov	r2, r0
 80045bc:	460b      	mov	r3, r1
 80045be:	4b6c      	ldr	r3, [pc, #432]	; (8004770 <UART_SetConfig+0x38c>)
 80045c0:	fba3 1302 	umull	r1, r3, r3, r2
 80045c4:	095b      	lsrs	r3, r3, #5
 80045c6:	2164      	movs	r1, #100	; 0x64
 80045c8:	fb01 f303 	mul.w	r3, r1, r3
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	3332      	adds	r3, #50	; 0x32
 80045d2:	4a67      	ldr	r2, [pc, #412]	; (8004770 <UART_SetConfig+0x38c>)
 80045d4:	fba2 2303 	umull	r2, r3, r2, r3
 80045d8:	095b      	lsrs	r3, r3, #5
 80045da:	f003 0207 	and.w	r2, r3, #7
 80045de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4432      	add	r2, r6
 80045e4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045e6:	e0b9      	b.n	800475c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045ea:	461c      	mov	r4, r3
 80045ec:	f04f 0500 	mov.w	r5, #0
 80045f0:	4622      	mov	r2, r4
 80045f2:	462b      	mov	r3, r5
 80045f4:	1891      	adds	r1, r2, r2
 80045f6:	6139      	str	r1, [r7, #16]
 80045f8:	415b      	adcs	r3, r3
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004600:	1912      	adds	r2, r2, r4
 8004602:	eb45 0303 	adc.w	r3, r5, r3
 8004606:	f04f 0000 	mov.w	r0, #0
 800460a:	f04f 0100 	mov.w	r1, #0
 800460e:	00d9      	lsls	r1, r3, #3
 8004610:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004614:	00d0      	lsls	r0, r2, #3
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	eb12 0804 	adds.w	r8, r2, r4
 800461e:	eb43 0905 	adc.w	r9, r3, r5
 8004622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	4618      	mov	r0, r3
 8004628:	f04f 0100 	mov.w	r1, #0
 800462c:	f04f 0200 	mov.w	r2, #0
 8004630:	f04f 0300 	mov.w	r3, #0
 8004634:	008b      	lsls	r3, r1, #2
 8004636:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800463a:	0082      	lsls	r2, r0, #2
 800463c:	4640      	mov	r0, r8
 800463e:	4649      	mov	r1, r9
 8004640:	f7fb fdc8 	bl	80001d4 <__aeabi_uldivmod>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	4b49      	ldr	r3, [pc, #292]	; (8004770 <UART_SetConfig+0x38c>)
 800464a:	fba3 2302 	umull	r2, r3, r3, r2
 800464e:	095b      	lsrs	r3, r3, #5
 8004650:	011e      	lsls	r6, r3, #4
 8004652:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004654:	4618      	mov	r0, r3
 8004656:	f04f 0100 	mov.w	r1, #0
 800465a:	4602      	mov	r2, r0
 800465c:	460b      	mov	r3, r1
 800465e:	1894      	adds	r4, r2, r2
 8004660:	60bc      	str	r4, [r7, #8]
 8004662:	415b      	adcs	r3, r3
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800466a:	1812      	adds	r2, r2, r0
 800466c:	eb41 0303 	adc.w	r3, r1, r3
 8004670:	f04f 0400 	mov.w	r4, #0
 8004674:	f04f 0500 	mov.w	r5, #0
 8004678:	00dd      	lsls	r5, r3, #3
 800467a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800467e:	00d4      	lsls	r4, r2, #3
 8004680:	4622      	mov	r2, r4
 8004682:	462b      	mov	r3, r5
 8004684:	1814      	adds	r4, r2, r0
 8004686:	64bc      	str	r4, [r7, #72]	; 0x48
 8004688:	414b      	adcs	r3, r1
 800468a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800468c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	4618      	mov	r0, r3
 8004692:	f04f 0100 	mov.w	r1, #0
 8004696:	f04f 0200 	mov.w	r2, #0
 800469a:	f04f 0300 	mov.w	r3, #0
 800469e:	008b      	lsls	r3, r1, #2
 80046a0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80046a4:	0082      	lsls	r2, r0, #2
 80046a6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80046aa:	f7fb fd93 	bl	80001d4 <__aeabi_uldivmod>
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	4b2f      	ldr	r3, [pc, #188]	; (8004770 <UART_SetConfig+0x38c>)
 80046b4:	fba3 1302 	umull	r1, r3, r3, r2
 80046b8:	095b      	lsrs	r3, r3, #5
 80046ba:	2164      	movs	r1, #100	; 0x64
 80046bc:	fb01 f303 	mul.w	r3, r1, r3
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	011b      	lsls	r3, r3, #4
 80046c4:	3332      	adds	r3, #50	; 0x32
 80046c6:	4a2a      	ldr	r2, [pc, #168]	; (8004770 <UART_SetConfig+0x38c>)
 80046c8:	fba2 2303 	umull	r2, r3, r2, r3
 80046cc:	095b      	lsrs	r3, r3, #5
 80046ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046d2:	441e      	add	r6, r3
 80046d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046d6:	4618      	mov	r0, r3
 80046d8:	f04f 0100 	mov.w	r1, #0
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	1894      	adds	r4, r2, r2
 80046e2:	603c      	str	r4, [r7, #0]
 80046e4:	415b      	adcs	r3, r3
 80046e6:	607b      	str	r3, [r7, #4]
 80046e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046ec:	1812      	adds	r2, r2, r0
 80046ee:	eb41 0303 	adc.w	r3, r1, r3
 80046f2:	f04f 0400 	mov.w	r4, #0
 80046f6:	f04f 0500 	mov.w	r5, #0
 80046fa:	00dd      	lsls	r5, r3, #3
 80046fc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004700:	00d4      	lsls	r4, r2, #3
 8004702:	4622      	mov	r2, r4
 8004704:	462b      	mov	r3, r5
 8004706:	eb12 0a00 	adds.w	sl, r2, r0
 800470a:	eb43 0b01 	adc.w	fp, r3, r1
 800470e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	4618      	mov	r0, r3
 8004714:	f04f 0100 	mov.w	r1, #0
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	008b      	lsls	r3, r1, #2
 8004722:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004726:	0082      	lsls	r2, r0, #2
 8004728:	4650      	mov	r0, sl
 800472a:	4659      	mov	r1, fp
 800472c:	f7fb fd52 	bl	80001d4 <__aeabi_uldivmod>
 8004730:	4602      	mov	r2, r0
 8004732:	460b      	mov	r3, r1
 8004734:	4b0e      	ldr	r3, [pc, #56]	; (8004770 <UART_SetConfig+0x38c>)
 8004736:	fba3 1302 	umull	r1, r3, r3, r2
 800473a:	095b      	lsrs	r3, r3, #5
 800473c:	2164      	movs	r1, #100	; 0x64
 800473e:	fb01 f303 	mul.w	r3, r1, r3
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	3332      	adds	r3, #50	; 0x32
 8004748:	4a09      	ldr	r2, [pc, #36]	; (8004770 <UART_SetConfig+0x38c>)
 800474a:	fba2 2303 	umull	r2, r3, r2, r3
 800474e:	095b      	lsrs	r3, r3, #5
 8004750:	f003 020f 	and.w	r2, r3, #15
 8004754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4432      	add	r2, r6
 800475a:	609a      	str	r2, [r3, #8]
}
 800475c:	bf00      	nop
 800475e:	377c      	adds	r7, #124	; 0x7c
 8004760:	46bd      	mov	sp, r7
 8004762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004766:	bf00      	nop
 8004768:	40011000 	.word	0x40011000
 800476c:	40011400 	.word	0x40011400
 8004770:	51eb851f 	.word	0x51eb851f

08004774 <__errno>:
 8004774:	4b01      	ldr	r3, [pc, #4]	; (800477c <__errno+0x8>)
 8004776:	6818      	ldr	r0, [r3, #0]
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	2000000c 	.word	0x2000000c

08004780 <__libc_init_array>:
 8004780:	b570      	push	{r4, r5, r6, lr}
 8004782:	4d0d      	ldr	r5, [pc, #52]	; (80047b8 <__libc_init_array+0x38>)
 8004784:	4c0d      	ldr	r4, [pc, #52]	; (80047bc <__libc_init_array+0x3c>)
 8004786:	1b64      	subs	r4, r4, r5
 8004788:	10a4      	asrs	r4, r4, #2
 800478a:	2600      	movs	r6, #0
 800478c:	42a6      	cmp	r6, r4
 800478e:	d109      	bne.n	80047a4 <__libc_init_array+0x24>
 8004790:	4d0b      	ldr	r5, [pc, #44]	; (80047c0 <__libc_init_array+0x40>)
 8004792:	4c0c      	ldr	r4, [pc, #48]	; (80047c4 <__libc_init_array+0x44>)
 8004794:	f000 f8a0 	bl	80048d8 <_init>
 8004798:	1b64      	subs	r4, r4, r5
 800479a:	10a4      	asrs	r4, r4, #2
 800479c:	2600      	movs	r6, #0
 800479e:	42a6      	cmp	r6, r4
 80047a0:	d105      	bne.n	80047ae <__libc_init_array+0x2e>
 80047a2:	bd70      	pop	{r4, r5, r6, pc}
 80047a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80047a8:	4798      	blx	r3
 80047aa:	3601      	adds	r6, #1
 80047ac:	e7ee      	b.n	800478c <__libc_init_array+0xc>
 80047ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80047b2:	4798      	blx	r3
 80047b4:	3601      	adds	r6, #1
 80047b6:	e7f2      	b.n	800479e <__libc_init_array+0x1e>
 80047b8:	08004918 	.word	0x08004918
 80047bc:	08004918 	.word	0x08004918
 80047c0:	08004918 	.word	0x08004918
 80047c4:	0800491c 	.word	0x0800491c

080047c8 <malloc>:
 80047c8:	4b02      	ldr	r3, [pc, #8]	; (80047d4 <malloc+0xc>)
 80047ca:	4601      	mov	r1, r0
 80047cc:	6818      	ldr	r0, [r3, #0]
 80047ce:	f000 b80b 	b.w	80047e8 <_malloc_r>
 80047d2:	bf00      	nop
 80047d4:	2000000c 	.word	0x2000000c

080047d8 <memset>:
 80047d8:	4402      	add	r2, r0
 80047da:	4603      	mov	r3, r0
 80047dc:	4293      	cmp	r3, r2
 80047de:	d100      	bne.n	80047e2 <memset+0xa>
 80047e0:	4770      	bx	lr
 80047e2:	f803 1b01 	strb.w	r1, [r3], #1
 80047e6:	e7f9      	b.n	80047dc <memset+0x4>

080047e8 <_malloc_r>:
 80047e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ea:	1ccd      	adds	r5, r1, #3
 80047ec:	f025 0503 	bic.w	r5, r5, #3
 80047f0:	3508      	adds	r5, #8
 80047f2:	2d0c      	cmp	r5, #12
 80047f4:	bf38      	it	cc
 80047f6:	250c      	movcc	r5, #12
 80047f8:	2d00      	cmp	r5, #0
 80047fa:	4606      	mov	r6, r0
 80047fc:	db01      	blt.n	8004802 <_malloc_r+0x1a>
 80047fe:	42a9      	cmp	r1, r5
 8004800:	d903      	bls.n	800480a <_malloc_r+0x22>
 8004802:	230c      	movs	r3, #12
 8004804:	6033      	str	r3, [r6, #0]
 8004806:	2000      	movs	r0, #0
 8004808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800480a:	f000 f857 	bl	80048bc <__malloc_lock>
 800480e:	4921      	ldr	r1, [pc, #132]	; (8004894 <_malloc_r+0xac>)
 8004810:	680a      	ldr	r2, [r1, #0]
 8004812:	4614      	mov	r4, r2
 8004814:	b99c      	cbnz	r4, 800483e <_malloc_r+0x56>
 8004816:	4f20      	ldr	r7, [pc, #128]	; (8004898 <_malloc_r+0xb0>)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	b923      	cbnz	r3, 8004826 <_malloc_r+0x3e>
 800481c:	4621      	mov	r1, r4
 800481e:	4630      	mov	r0, r6
 8004820:	f000 f83c 	bl	800489c <_sbrk_r>
 8004824:	6038      	str	r0, [r7, #0]
 8004826:	4629      	mov	r1, r5
 8004828:	4630      	mov	r0, r6
 800482a:	f000 f837 	bl	800489c <_sbrk_r>
 800482e:	1c43      	adds	r3, r0, #1
 8004830:	d123      	bne.n	800487a <_malloc_r+0x92>
 8004832:	230c      	movs	r3, #12
 8004834:	6033      	str	r3, [r6, #0]
 8004836:	4630      	mov	r0, r6
 8004838:	f000 f846 	bl	80048c8 <__malloc_unlock>
 800483c:	e7e3      	b.n	8004806 <_malloc_r+0x1e>
 800483e:	6823      	ldr	r3, [r4, #0]
 8004840:	1b5b      	subs	r3, r3, r5
 8004842:	d417      	bmi.n	8004874 <_malloc_r+0x8c>
 8004844:	2b0b      	cmp	r3, #11
 8004846:	d903      	bls.n	8004850 <_malloc_r+0x68>
 8004848:	6023      	str	r3, [r4, #0]
 800484a:	441c      	add	r4, r3
 800484c:	6025      	str	r5, [r4, #0]
 800484e:	e004      	b.n	800485a <_malloc_r+0x72>
 8004850:	6863      	ldr	r3, [r4, #4]
 8004852:	42a2      	cmp	r2, r4
 8004854:	bf0c      	ite	eq
 8004856:	600b      	streq	r3, [r1, #0]
 8004858:	6053      	strne	r3, [r2, #4]
 800485a:	4630      	mov	r0, r6
 800485c:	f000 f834 	bl	80048c8 <__malloc_unlock>
 8004860:	f104 000b 	add.w	r0, r4, #11
 8004864:	1d23      	adds	r3, r4, #4
 8004866:	f020 0007 	bic.w	r0, r0, #7
 800486a:	1ac2      	subs	r2, r0, r3
 800486c:	d0cc      	beq.n	8004808 <_malloc_r+0x20>
 800486e:	1a1b      	subs	r3, r3, r0
 8004870:	50a3      	str	r3, [r4, r2]
 8004872:	e7c9      	b.n	8004808 <_malloc_r+0x20>
 8004874:	4622      	mov	r2, r4
 8004876:	6864      	ldr	r4, [r4, #4]
 8004878:	e7cc      	b.n	8004814 <_malloc_r+0x2c>
 800487a:	1cc4      	adds	r4, r0, #3
 800487c:	f024 0403 	bic.w	r4, r4, #3
 8004880:	42a0      	cmp	r0, r4
 8004882:	d0e3      	beq.n	800484c <_malloc_r+0x64>
 8004884:	1a21      	subs	r1, r4, r0
 8004886:	4630      	mov	r0, r6
 8004888:	f000 f808 	bl	800489c <_sbrk_r>
 800488c:	3001      	adds	r0, #1
 800488e:	d1dd      	bne.n	800484c <_malloc_r+0x64>
 8004890:	e7cf      	b.n	8004832 <_malloc_r+0x4a>
 8004892:	bf00      	nop
 8004894:	20000090 	.word	0x20000090
 8004898:	20000094 	.word	0x20000094

0800489c <_sbrk_r>:
 800489c:	b538      	push	{r3, r4, r5, lr}
 800489e:	4d06      	ldr	r5, [pc, #24]	; (80048b8 <_sbrk_r+0x1c>)
 80048a0:	2300      	movs	r3, #0
 80048a2:	4604      	mov	r4, r0
 80048a4:	4608      	mov	r0, r1
 80048a6:	602b      	str	r3, [r5, #0]
 80048a8:	f7fc fb7c 	bl	8000fa4 <_sbrk>
 80048ac:	1c43      	adds	r3, r0, #1
 80048ae:	d102      	bne.n	80048b6 <_sbrk_r+0x1a>
 80048b0:	682b      	ldr	r3, [r5, #0]
 80048b2:	b103      	cbz	r3, 80048b6 <_sbrk_r+0x1a>
 80048b4:	6023      	str	r3, [r4, #0]
 80048b6:	bd38      	pop	{r3, r4, r5, pc}
 80048b8:	200003d4 	.word	0x200003d4

080048bc <__malloc_lock>:
 80048bc:	4801      	ldr	r0, [pc, #4]	; (80048c4 <__malloc_lock+0x8>)
 80048be:	f000 b809 	b.w	80048d4 <__retarget_lock_acquire_recursive>
 80048c2:	bf00      	nop
 80048c4:	200003dc 	.word	0x200003dc

080048c8 <__malloc_unlock>:
 80048c8:	4801      	ldr	r0, [pc, #4]	; (80048d0 <__malloc_unlock+0x8>)
 80048ca:	f000 b804 	b.w	80048d6 <__retarget_lock_release_recursive>
 80048ce:	bf00      	nop
 80048d0:	200003dc 	.word	0x200003dc

080048d4 <__retarget_lock_acquire_recursive>:
 80048d4:	4770      	bx	lr

080048d6 <__retarget_lock_release_recursive>:
 80048d6:	4770      	bx	lr

080048d8 <_init>:
 80048d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048da:	bf00      	nop
 80048dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048de:	bc08      	pop	{r3}
 80048e0:	469e      	mov	lr, r3
 80048e2:	4770      	bx	lr

080048e4 <_fini>:
 80048e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e6:	bf00      	nop
 80048e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ea:	bc08      	pop	{r3}
 80048ec:	469e      	mov	lr, r3
 80048ee:	4770      	bx	lr
