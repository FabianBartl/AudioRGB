
AudioRGB_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045ac  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004740  08004740  00014740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004760  08004760  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004760  08004760  00014760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004768  08004768  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004768  08004768  00014768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800476c  0800476c  0001476c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000070  080047e0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  080047e0  000203d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001583b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c57  00000000  00000000  000358db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  00038538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  000396b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018bad  00000000  00000000  0003a718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000172a5  00000000  00000000  000532c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b4de  00000000  00000000  0006a56a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00105a48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ad8  00000000  00000000  00105a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004728 	.word	0x08004728

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	08004728 	.word	0x08004728

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <ADC_Select_CH1>:

/* USER CODE BEGIN 0 */
// Copied generated code from MX_ADC1_Init(), but modified for one channel readout
// left audio channel
void ADC_Select_CH1(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80004d2:	463b      	mov	r3, r7
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_1;
 80004de:	2301      	movs	r3, #1
 80004e0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1; // has to be 1, because it's only one channel selected
 80004e2:	2301      	movs	r3, #1
 80004e4:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80004e6:	2306      	movs	r3, #6
 80004e8:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004ea:	463b      	mov	r3, r7
 80004ec:	4619      	mov	r1, r3
 80004ee:	4806      	ldr	r0, [pc, #24]	; (8000508 <ADC_Select_CH1+0x3c>)
 80004f0:	f001 faea 	bl	8001ac8 <HAL_ADC_ConfigChannel>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <ADC_Select_CH1+0x32>
	{
		Error_Handler();
 80004fa:	f000 fc2f 	bl	8000d5c <Error_Handler>
	}
}
 80004fe:	bf00      	nop
 8000500:	3710      	adds	r7, #16
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	2000009c 	.word	0x2000009c

0800050c <ADC_Select_CH4>:
// right audio channel
void ADC_Select_CH4(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000512:	463b      	mov	r3, r7
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_4;
 800051e:	2304      	movs	r3, #4
 8000520:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1; // has to be 1, because it's only one channel selected
 8000522:	2301      	movs	r3, #1
 8000524:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000526:	2306      	movs	r3, #6
 8000528:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800052a:	463b      	mov	r3, r7
 800052c:	4619      	mov	r1, r3
 800052e:	4806      	ldr	r0, [pc, #24]	; (8000548 <ADC_Select_CH4+0x3c>)
 8000530:	f001 faca 	bl	8001ac8 <HAL_ADC_ConfigChannel>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <ADC_Select_CH4+0x32>
	{
		Error_Handler();
 800053a:	f000 fc0f 	bl	8000d5c <Error_Handler>
	}
}
 800053e:	bf00      	nop
 8000540:	3710      	adds	r7, #16
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	2000009c 	.word	0x2000009c

0800054c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000552:	463b      	mov	r3, r7
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	*/
  	// Copied from below for editing as user code and skip generated code with goto
	hadc1.Instance = ADC1;
 800055e:	4b1a      	ldr	r3, [pc, #104]	; (80005c8 <MX_ADC1_Init+0x7c>)
 8000560:	4a1a      	ldr	r2, [pc, #104]	; (80005cc <MX_ADC1_Init+0x80>)
 8000562:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000564:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <MX_ADC1_Init+0x7c>)
 8000566:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800056a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800056c:	4b16      	ldr	r3, [pc, #88]	; (80005c8 <MX_ADC1_Init+0x7c>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <MX_ADC1_Init+0x7c>)
 8000574:	2201      	movs	r2, #1
 8000576:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <MX_ADC1_Init+0x7c>)
 800057a:	2201      	movs	r2, #1
 800057c:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800057e:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <MX_ADC1_Init+0x7c>)
 8000580:	2200      	movs	r2, #0
 8000582:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000586:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <MX_ADC1_Init+0x7c>)
 8000588:	2200      	movs	r2, #0
 800058a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800058c:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <MX_ADC1_Init+0x7c>)
 800058e:	4a10      	ldr	r2, [pc, #64]	; (80005d0 <MX_ADC1_Init+0x84>)
 8000590:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000592:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <MX_ADC1_Init+0x7c>)
 8000594:	2200      	movs	r2, #0
 8000596:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;	// setup with 3 for getting rank settings, later set manually to 1
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <MX_ADC1_Init+0x7c>)
 800059a:	2201      	movs	r2, #1
 800059c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800059e:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <MX_ADC1_Init+0x7c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005a6:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <MX_ADC1_Init+0x7c>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ac:	4806      	ldr	r0, [pc, #24]	; (80005c8 <MX_ADC1_Init+0x7c>)
 80005ae:	f001 f8c7 	bl	8001740 <HAL_ADC_Init>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 80005b8:	f000 fbd0 	bl	8000d5c <Error_Handler>
	}

	// jump to user code ADC1_Init 2
	goto SKIP_ADC1_INIT_Generated;
 80005bc:	bf00      	nop
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

	SKIP_ADC1_INIT_Generated:
	asm("nop");
 80005be:	bf00      	nop
  /* USER CODE END ADC1_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	2000009c 	.word	0x2000009c
 80005cc:	40012000 	.word	0x40012000
 80005d0:	0f000001 	.word	0x0f000001

080005d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	; 0x28
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a24      	ldr	r2, [pc, #144]	; (8000684 <HAL_ADC_MspInit+0xb0>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d141      	bne.n	800067a <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]
 80005fa:	4b23      	ldr	r3, [pc, #140]	; (8000688 <HAL_ADC_MspInit+0xb4>)
 80005fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005fe:	4a22      	ldr	r2, [pc, #136]	; (8000688 <HAL_ADC_MspInit+0xb4>)
 8000600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000604:	6453      	str	r3, [r2, #68]	; 0x44
 8000606:	4b20      	ldr	r3, [pc, #128]	; (8000688 <HAL_ADC_MspInit+0xb4>)
 8000608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800060a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <HAL_ADC_MspInit+0xb4>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a1b      	ldr	r2, [pc, #108]	; (8000688 <HAL_ADC_MspInit+0xb4>)
 800061c:	f043 0304 	orr.w	r3, r3, #4
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b19      	ldr	r3, [pc, #100]	; (8000688 <HAL_ADC_MspInit+0xb4>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0304 	and.w	r3, r3, #4
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	4b15      	ldr	r3, [pc, #84]	; (8000688 <HAL_ADC_MspInit+0xb4>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a14      	ldr	r2, [pc, #80]	; (8000688 <HAL_ADC_MspInit+0xb4>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b12      	ldr	r3, [pc, #72]	; (8000688 <HAL_ADC_MspInit+0xb4>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = RNG_Pin;
 800064a:	2304      	movs	r3, #4
 800064c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800064e:	2303      	movs	r3, #3
 8000650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RNG_GPIO_Port, &GPIO_InitStruct);
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	4619      	mov	r1, r3
 800065c:	480b      	ldr	r0, [pc, #44]	; (800068c <HAL_ADC_MspInit+0xb8>)
 800065e:	f002 f84d 	bl	80026fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUX_L_Pin|AUX_R_Pin;
 8000662:	2312      	movs	r3, #18
 8000664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000666:	2303      	movs	r3, #3
 8000668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4619      	mov	r1, r3
 8000674:	4806      	ldr	r0, [pc, #24]	; (8000690 <HAL_ADC_MspInit+0xbc>)
 8000676:	f002 f841 	bl	80026fc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800067a:	bf00      	nop
 800067c:	3728      	adds	r7, #40	; 0x28
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40012000 	.word	0x40012000
 8000688:	40023800 	.word	0x40023800
 800068c:	40020800 	.word	0x40020800
 8000690:	40020000 	.word	0x40020000

08000694 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MX_DMA_Init+0x5c>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a13      	ldr	r2, [pc, #76]	; (80006f0 <MX_DMA_Init+0x5c>)
 80006a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_DMA_Init+0x5c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	200b      	movs	r0, #11
 80006bc:	f001 fcfd 	bl	80020ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006c0:	200b      	movs	r0, #11
 80006c2:	f001 fd16 	bl	80020f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	200f      	movs	r0, #15
 80006cc:	f001 fcf5 	bl	80020ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80006d0:	200f      	movs	r0, #15
 80006d2:	f001 fd0e 	bl	80020f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	2010      	movs	r0, #16
 80006dc:	f001 fced 	bl	80020ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80006e0:	2010      	movs	r0, #16
 80006e2:	f001 fd06 	bl	80020f2 <HAL_NVIC_EnableIRQ>

}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800

080006f4 <bufferAppend>:

// implements an append function for a circular array
// when the array is full, the values at the beginning are overwritten
// the buffer array contains the last measured ADC elements to smooth the audio signal
void bufferAppend(int val, int *arr, size_t *ind)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
	*ind = (*ind+1 > BUFFER_SIZE_AUX-1) ? 0 : *ind+1;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	3301      	adds	r3, #1
 8000706:	2b13      	cmp	r3, #19
 8000708:	d803      	bhi.n	8000712 <bufferAppend+0x1e>
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	3301      	adds	r3, #1
 8000710:	e000      	b.n	8000714 <bufferAppend+0x20>
 8000712:	2300      	movs	r3, #0
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	6013      	str	r3, [r2, #0]
	arr[*ind] = val;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	68ba      	ldr	r2, [r7, #8]
 8000720:	4413      	add	r3, r2
 8000722:	68fa      	ldr	r2, [r7, #12]
 8000724:	601a      	str	r2, [r3, #0]
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
	...

08000734 <bufferFilter>:

// apply an average-filter to the last elements of the buffer array
int bufferFilter(int *arr, size_t *ind)
{
 8000734:	b480      	push	{r7}
 8000736:	b087      	sub	sp, #28
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
	int sum = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]
	for(size_t i=0, p=0; i < FILTER_SIZE_AUX; i++)
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	e00f      	b.n	800076c <bufferFilter+0x38>
	{
		p = (*ind-i < 0) ? BUFFER_SIZE_AUX-1 : *ind-i;
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	693b      	ldr	r3, [r7, #16]
 8000752:	1ad3      	subs	r3, r2, r3
 8000754:	60fb      	str	r3, [r7, #12]
		sum += arr[p];
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	4413      	add	r3, r2
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	697a      	ldr	r2, [r7, #20]
 8000762:	4413      	add	r3, r2
 8000764:	617b      	str	r3, [r7, #20]
	for(size_t i=0, p=0; i < FILTER_SIZE_AUX; i++)
 8000766:	693b      	ldr	r3, [r7, #16]
 8000768:	3301      	adds	r3, #1
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d9ec      	bls.n	800074c <bufferFilter+0x18>
	}
	return sum / BUFFER_SIZE_AUX;
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	4a05      	ldr	r2, [pc, #20]	; (800078c <bufferFilter+0x58>)
 8000776:	fb82 1203 	smull	r1, r2, r2, r3
 800077a:	10d2      	asrs	r2, r2, #3
 800077c:	17db      	asrs	r3, r3, #31
 800077e:	1ad3      	subs	r3, r2, r3
}
 8000780:	4618      	mov	r0, r3
 8000782:	371c      	adds	r7, #28
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	66666667 	.word	0x66666667

08000790 <saturateLimits>:

// ----------------------------
// saturate, transform, amplify
// ----------------------------

int saturateLimits(int val, int lowerLim, int upperLim) { return (val < lowerLim) ? lowerLim : ((val > upperLim) ? upperLim : val); }
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
 800079c:	68fa      	ldr	r2, [r7, #12]
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	db05      	blt.n	80007b0 <saturateLimits+0x20>
 80007a4:	68fa      	ldr	r2, [r7, #12]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4293      	cmp	r3, r2
 80007aa:	bfa8      	it	ge
 80007ac:	4613      	movge	r3, r2
 80007ae:	e000      	b.n	80007b2 <saturateLimits+0x22>
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	4618      	mov	r0, r3
 80007b4:	3714      	adds	r7, #20
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <saturate>:
int saturate(int val) { return saturateLimits(val, COLOR_MIN, COLOR_MAX); }
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	22ff      	movs	r2, #255	; 0xff
 80007c8:	2100      	movs	r1, #0
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f7ff ffe0 	bl	8000790 <saturateLimits>
 80007d0:	4603      	mov	r3, r0
 80007d2:	4618      	mov	r0, r3
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <transform>:

int transform(int val, int inMin, int inMax, int outMin, int outMax)
{
 80007da:	b480      	push	{r7}
 80007dc:	b087      	sub	sp, #28
 80007de:	af00      	add	r7, sp, #0
 80007e0:	60f8      	str	r0, [r7, #12]
 80007e2:	60b9      	str	r1, [r7, #8]
 80007e4:	607a      	str	r2, [r7, #4]
 80007e6:	603b      	str	r3, [r7, #0]
	int inHalf = inMin + (inMax - inMin) / 2;
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	0fda      	lsrs	r2, r3, #31
 80007f0:	4413      	add	r3, r2
 80007f2:	105b      	asrs	r3, r3, #1
 80007f4:	461a      	mov	r2, r3
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	4413      	add	r3, r2
 80007fa:	617b      	str	r3, [r7, #20]
	int outHalf = outMin + (outMax - outMin) / 2;
 80007fc:	6a3a      	ldr	r2, [r7, #32]
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	0fda      	lsrs	r2, r3, #31
 8000804:	4413      	add	r3, r2
 8000806:	105b      	asrs	r3, r3, #1
 8000808:	461a      	mov	r2, r3
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	4413      	add	r3, r2
 800080e:	613b      	str	r3, [r7, #16]
	return val - (inHalf - outHalf);
 8000810:	697a      	ldr	r2, [r7, #20]
 8000812:	693b      	ldr	r3, [r7, #16]
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	1ad3      	subs	r3, r2, r3
}
 800081a:	4618      	mov	r0, r3
 800081c:	371c      	adds	r7, #28
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <amplifyFactor>:

int amplifyFactor(int val, int fac) { return val * fac; }
 8000826:	b480      	push	{r7}
 8000828:	b083      	sub	sp, #12
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
 800082e:	6039      	str	r1, [r7, #0]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	683a      	ldr	r2, [r7, #0]
 8000834:	fb02 f303 	mul.w	r3, r2, r3
 8000838:	4618      	mov	r0, r3
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <amplify>:
int amplify(int val) { return amplifyFactor(val, VOLUME_BOOST); }
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	2104      	movs	r1, #4
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f7ff ffe9 	bl	8000826 <amplifyFactor>
 8000854:	4603      	mov	r3, r0
 8000856:	4618      	mov	r0, r3
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <min>:

// --------
// min, max
// --------

int min(int a, int b) { return (a < b) ? a : b; }
 800085e:	b480      	push	{r7}
 8000860:	b083      	sub	sp, #12
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
 8000866:	6039      	str	r1, [r7, #0]
 8000868:	683a      	ldr	r2, [r7, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4293      	cmp	r3, r2
 800086e:	bfa8      	it	ge
 8000870:	4613      	movge	r3, r2
 8000872:	4618      	mov	r0, r3
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
	...

08000880 <writeRGB>:
// ----
// rgbs
// ----

void writeRGB(int r, int g, int b)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
	// prevent higher pulses than period
	TIM4->CCR1 = min(saturate(r), TIM4->ARR);
 800088c:	68f8      	ldr	r0, [r7, #12]
 800088e:	f7ff ff96 	bl	80007be <saturate>
 8000892:	4603      	mov	r3, r0
 8000894:	4a13      	ldr	r2, [pc, #76]	; (80008e4 <writeRGB+0x64>)
 8000896:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000898:	4611      	mov	r1, r2
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff ffdf 	bl	800085e <min>
 80008a0:	4602      	mov	r2, r0
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <writeRGB+0x64>)
 80008a4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = min(saturate(g), TIM3->ARR);
 80008a6:	68b8      	ldr	r0, [r7, #8]
 80008a8:	f7ff ff89 	bl	80007be <saturate>
 80008ac:	4603      	mov	r3, r0
 80008ae:	4a0e      	ldr	r2, [pc, #56]	; (80008e8 <writeRGB+0x68>)
 80008b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80008b2:	4611      	mov	r1, r2
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ffd2 	bl	800085e <min>
 80008ba:	4602      	mov	r2, r0
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <writeRGB+0x68>)
 80008be:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR1 = min(saturate(b), TIM3->ARR);
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f7ff ff7c 	bl	80007be <saturate>
 80008c6:	4603      	mov	r3, r0
 80008c8:	4a07      	ldr	r2, [pc, #28]	; (80008e8 <writeRGB+0x68>)
 80008ca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80008cc:	4611      	mov	r1, r2
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff ffc5 	bl	800085e <min>
 80008d4:	4602      	mov	r2, r0
 80008d6:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <writeRGB+0x68>)
 80008d8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40000800 	.word	0x40000800
 80008e8:	40000400 	.word	0x40000400

080008ec <generatorLimit>:
void writeRGBArray(int *rgb) { writeRGB(rgb[0], rgb[1], rgb[2]); }

// color generator
int generatorLimit(int val, int lowerLim, int upperLim)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af02      	add	r7, sp, #8
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
	return transform(
 80008f8:	23ff      	movs	r3, #255	; 0xff
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	2300      	movs	r3, #0
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	68b9      	ldr	r1, [r7, #8]
 8000902:	68f8      	ldr	r0, [r7, #12]
 8000904:	f7ff ff69 	bl	80007da <transform>
 8000908:	4603      	mov	r3, r0
		lowerLim,
		upperLim,
		COLOR_MIN,
		COLOR_MAX
	);
}
 800090a:	4618      	mov	r0, r3
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <generator>:
int generator(int val) { return generatorLimit(amplify(val), VOLUME_MIN, VOLUME_MAX); }
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f7ff ff92 	bl	8000844 <amplify>
 8000920:	4603      	mov	r3, r0
 8000922:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000926:	2164      	movs	r1, #100	; 0x64
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff ffdf 	bl	80008ec <generatorLimit>
 800092e:	4603      	mov	r3, r0
 8000930:	4618      	mov	r0, r3
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <fillArray>:

// ------
// arrays
// ------

void fillArray(int val, int *arr, const size_t arrLen) { for(int i=0; i < arrLen; i++) arr[i] = val; }
 8000938:	b480      	push	{r7}
 800093a:	b087      	sub	sp, #28
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	e008      	b.n	800095c <fillArray+0x24>
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	68ba      	ldr	r2, [r7, #8]
 8000950:	4413      	add	r3, r2
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	3301      	adds	r3, #1
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	429a      	cmp	r2, r3
 8000962:	d8f2      	bhi.n	800094a <fillArray+0x12>
 8000964:	bf00      	nop
 8000966:	bf00      	nop
 8000968:	371c      	adds	r7, #28
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <emptyArray>:
void emptyArray(int *arr, const size_t arrLen) { fillArray(0, arr, arrLen); }
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
 800097a:	6039      	str	r1, [r7, #0]
 800097c:	683a      	ldr	r2, [r7, #0]
 800097e:	6879      	ldr	r1, [r7, #4]
 8000980:	2000      	movs	r0, #0
 8000982:	f7ff ffd9 	bl	8000938 <fillArray>
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <MX_GPIO_Init+0x84>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a1d      	ldr	r2, [pc, #116]	; (8000a14 <MX_GPIO_Init+0x84>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <MX_GPIO_Init+0x84>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0304 	and.w	r3, r3, #4
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <MX_GPIO_Init+0x84>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a16      	ldr	r2, [pc, #88]	; (8000a14 <MX_GPIO_Init+0x84>)
 80009bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <MX_GPIO_Init+0x84>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <MX_GPIO_Init+0x84>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <MX_GPIO_Init+0x84>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <MX_GPIO_Init+0x84>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	603b      	str	r3, [r7, #0]
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_GPIO_Init+0x84>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a08      	ldr	r2, [pc, #32]	; (8000a14 <MX_GPIO_Init+0x84>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_GPIO_Init+0x84>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]

}
 8000a06:	bf00      	nop
 8000a08:	3714      	adds	r7, #20
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800

08000a18 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <MX_I2C1_Init+0x50>)
 8000a1e:	4a13      	ldr	r2, [pc, #76]	; (8000a6c <MX_I2C1_Init+0x54>)
 8000a20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_I2C1_Init+0x50>)
 8000a24:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <MX_I2C1_Init+0x58>)
 8000a26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_I2C1_Init+0x50>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_I2C1_Init+0x50>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_I2C1_Init+0x50>)
 8000a36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <MX_I2C1_Init+0x50>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_I2C1_Init+0x50>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a48:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <MX_I2C1_Init+0x50>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_I2C1_Init+0x50>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a54:	4804      	ldr	r0, [pc, #16]	; (8000a68 <MX_I2C1_Init+0x50>)
 8000a56:	f001 ffd5 	bl	8002a04 <HAL_I2C_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a60:	f000 f97c 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	200000e4 	.word	0x200000e4
 8000a6c:	40005400 	.word	0x40005400
 8000a70:	000186a0 	.word	0x000186a0

08000a74 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	; 0x28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a19      	ldr	r2, [pc, #100]	; (8000af8 <HAL_I2C_MspInit+0x84>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d12c      	bne.n	8000af0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	4b18      	ldr	r3, [pc, #96]	; (8000afc <HAL_I2C_MspInit+0x88>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a17      	ldr	r2, [pc, #92]	; (8000afc <HAL_I2C_MspInit+0x88>)
 8000aa0:	f043 0302 	orr.w	r3, r3, #2
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <HAL_I2C_MspInit+0x88>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0302 	and.w	r3, r3, #2
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_I2C_SCL_Pin|LCD_I2C_SDA_Pin;
 8000ab2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ab8:	2312      	movs	r3, #18
 8000aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	480c      	ldr	r0, [pc, #48]	; (8000b00 <HAL_I2C_MspInit+0x8c>)
 8000ad0:	f001 fe14 	bl	80026fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <HAL_I2C_MspInit+0x88>)
 8000ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000adc:	4a07      	ldr	r2, [pc, #28]	; (8000afc <HAL_I2C_MspInit+0x88>)
 8000ade:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ae2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <HAL_I2C_MspInit+0x88>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000af0:	bf00      	nop
 8000af2:	3728      	adds	r7, #40	; 0x28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40005400 	.word	0x40005400
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020400 	.word	0x40020400

08000b04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b04:	b590      	push	{r4, r7, lr}
 8000b06:	b08d      	sub	sp, #52	; 0x34
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	// left audio channel
	uint16_t *buffArrL = (uint16_t *)malloc(BUFFER_SIZE_AUX * sizeof(uint16_t));
 8000b0a:	2028      	movs	r0, #40	; 0x28
 8000b0c:	f003 fd84 	bl	8004618 <malloc>
 8000b10:	4603      	mov	r3, r0
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
	emptyArray(buffArrL, BUFFER_SIZE_AUX);
 8000b14:	2114      	movs	r1, #20
 8000b16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b18:	f7ff ff2b 	bl	8000972 <emptyArray>
	size_t buffIndL = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	607b      	str	r3, [r7, #4]
	uint16_t auxValL = 0, auxFilterL = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000b24:	2300      	movs	r3, #0
 8000b26:	85fb      	strh	r3, [r7, #46]	; 0x2e

	// right audio channel
	uint16_t *buffArrR = (uint16_t *)malloc(BUFFER_SIZE_AUX * sizeof(uint16_t));
 8000b28:	2028      	movs	r0, #40	; 0x28
 8000b2a:	f003 fd75 	bl	8004618 <malloc>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	623b      	str	r3, [r7, #32]
	emptyArray(buffArrR, BUFFER_SIZE_AUX);
 8000b32:	2114      	movs	r1, #20
 8000b34:	6a38      	ldr	r0, [r7, #32]
 8000b36:	f7ff ff1c 	bl	8000972 <emptyArray>
	size_t buffIndR = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	603b      	str	r3, [r7, #0]
	uint16_t auxValR = 0, auxFilterR = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	83fb      	strh	r3, [r7, #30]
 8000b42:	2300      	movs	r3, #0
 8000b44:	85bb      	strh	r3, [r7, #44]	; 0x2c

	// rgb led (uint8_t doesn't work)
	uint16_t *rgbArr = (uint16_t *)malloc(CHANNEL_COUNT_RGB * sizeof(uint16_t));
 8000b46:	2006      	movs	r0, #6
 8000b48:	f003 fd66 	bl	8004618 <malloc>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	61bb      	str	r3, [r7, #24]
	emptyArray(rgbArr, CHANNEL_COUNT_RGB);
 8000b50:	2103      	movs	r1, #3
 8000b52:	69b8      	ldr	r0, [r7, #24]
 8000b54:	f7ff ff0d 	bl	8000972 <emptyArray>
	size_t colSel = 0, colSelPrev = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	613b      	str	r3, [r7, #16]
	uint16_t colVal = COLOR_HALF, colValPrev = COLOR_HALF;
 8000b60:	237f      	movs	r3, #127	; 0x7f
 8000b62:	81fb      	strh	r3, [r7, #14]
 8000b64:	237f      	movs	r3, #127	; 0x7f
 8000b66:	81bb      	strh	r3, [r7, #12]

	// touch sensor
	uint8_t *touchArr = (uint8_t *)malloc(CHANNEL_COUNT_TCH * sizeof(uint8_t));
 8000b68:	2004      	movs	r0, #4
 8000b6a:	f003 fd55 	bl	8004618 <malloc>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b72:	f000 fd4f 	bl	8001614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b76:	f000 f885 	bl	8000c84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7a:	f7ff ff09 	bl	8000990 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b7e:	f000 fcad 	bl	80014dc <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000b82:	f7ff fd87 	bl	8000694 <MX_DMA_Init>
  MX_ADC1_Init();
 8000b86:	f7ff fce1 	bl	800054c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000b8a:	f7ff ff45 	bl	8000a18 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000b8e:	f000 f9a3 	bl	8000ed8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b92:	f000 f9f1 	bl	8000f78 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b96:	f000 fa3b 	bl	8001010 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b9a:	f000 fab9 	bl	8001110 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	// setup rgb led
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4834      	ldr	r0, [pc, #208]	; (8000c74 <main+0x170>)
 8000ba2:	f002 fd85 	bl	80036b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000ba6:	2104      	movs	r1, #4
 8000ba8:	4833      	ldr	r0, [pc, #204]	; (8000c78 <main+0x174>)
 8000baa:	f002 fd81 	bl	80036b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4831      	ldr	r0, [pc, #196]	; (8000c78 <main+0x174>)
 8000bb2:	f002 fd7d 	bl	80036b0 <HAL_TIM_PWM_Start>
	writeRGB(COLOR_HALF, COLOR_HALF, COLOR_HALF);
 8000bb6:	227f      	movs	r2, #127	; 0x7f
 8000bb8:	217f      	movs	r1, #127	; 0x7f
 8000bba:	207f      	movs	r0, #127	; 0x7f
 8000bbc:	f7ff fe60 	bl	8000880 <writeRGB>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// get left audio channel from adc
		ADC_Select_CH1();
 8000bc0:	f7ff fc84 	bl	80004cc <ADC_Select_CH1>
		HAL_ADC_Start(&hadc1);
 8000bc4:	482d      	ldr	r0, [pc, #180]	; (8000c7c <main+0x178>)
 8000bc6:	f000 fdff 	bl	80017c8 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, TIMEOUT_ADC) == HAL_OK)
 8000bca:	2103      	movs	r1, #3
 8000bcc:	482b      	ldr	r0, [pc, #172]	; (8000c7c <main+0x178>)
 8000bce:	f000 fee2 	bl	8001996 <HAL_ADC_PollForConversion>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d114      	bne.n	8000c02 <main+0xfe>
		{
			auxValL = HAL_ADC_GetValue(&hadc1);
 8000bd8:	4828      	ldr	r0, [pc, #160]	; (8000c7c <main+0x178>)
 8000bda:	f000 ff67 	bl	8001aac <HAL_ADC_GetValue>
 8000bde:	4603      	mov	r3, r0
 8000be0:	84fb      	strh	r3, [r7, #38]	; 0x26
			HAL_ADC_Stop(&hadc1);
 8000be2:	4826      	ldr	r0, [pc, #152]	; (8000c7c <main+0x178>)
 8000be4:	f000 fea4 	bl	8001930 <HAL_ADC_Stop>
			// write buffer and apply filter
			bufferAppend(auxValL, buffArrL, &buffIndL);
 8000be8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000bea:	1d3a      	adds	r2, r7, #4
 8000bec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fd80 	bl	80006f4 <bufferAppend>
			auxFilterL = bufferFilter(buffArrL, &buffIndL);
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000bfa:	f7ff fd9b 	bl	8000734 <bufferFilter>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	85fb      	strh	r3, [r7, #46]	; 0x2e
		}

		// get right audio channel from adc
		ADC_Select_CH4();
 8000c02:	f7ff fc83 	bl	800050c <ADC_Select_CH4>
		HAL_ADC_Start(&hadc1);
 8000c06:	481d      	ldr	r0, [pc, #116]	; (8000c7c <main+0x178>)
 8000c08:	f000 fdde 	bl	80017c8 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, TIMEOUT_ADC) == HAL_OK)
 8000c0c:	2103      	movs	r1, #3
 8000c0e:	481b      	ldr	r0, [pc, #108]	; (8000c7c <main+0x178>)
 8000c10:	f000 fec1 	bl	8001996 <HAL_ADC_PollForConversion>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d114      	bne.n	8000c44 <main+0x140>
		{
			auxValR = HAL_ADC_GetValue(&hadc1);
 8000c1a:	4818      	ldr	r0, [pc, #96]	; (8000c7c <main+0x178>)
 8000c1c:	f000 ff46 	bl	8001aac <HAL_ADC_GetValue>
 8000c20:	4603      	mov	r3, r0
 8000c22:	83fb      	strh	r3, [r7, #30]
			HAL_ADC_Stop(&hadc1);
 8000c24:	4815      	ldr	r0, [pc, #84]	; (8000c7c <main+0x178>)
 8000c26:	f000 fe83 	bl	8001930 <HAL_ADC_Stop>
			// write buffer and apply filter
			bufferAppend(auxValR, buffArrR, &buffIndR);
 8000c2a:	8bfb      	ldrh	r3, [r7, #30]
 8000c2c:	463a      	mov	r2, r7
 8000c2e:	6a39      	ldr	r1, [r7, #32]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fd5f 	bl	80006f4 <bufferAppend>
			auxFilterR = bufferFilter(buffArrR, &buffIndR);
 8000c36:	463b      	mov	r3, r7
 8000c38:	4619      	mov	r1, r3
 8000c3a:	6a38      	ldr	r0, [r7, #32]
 8000c3c:	f7ff fd7a 	bl	8000734 <bufferFilter>
 8000c40:	4603      	mov	r3, r0
 8000c42:	85bb      	strh	r3, [r7, #44]	; 0x2c
		}

		// generate color and write rgb
		writeRGB(
 8000c44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fe63 	bl	8000912 <generator>
 8000c4c:	4604      	mov	r4, r0
 8000c4e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fe5e 	bl	8000912 <generator>
 8000c56:	4603      	mov	r3, r0
 8000c58:	461a      	mov	r2, r3
 8000c5a:	2105      	movs	r1, #5
 8000c5c:	4620      	mov	r0, r4
 8000c5e:	f7ff fe0f 	bl	8000880 <writeRGB>
			5,
			generator(auxFilterR)
		);

		// update in-loop ticks and wait
		ticks++;
 8000c62:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <main+0x17c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	3301      	adds	r3, #1
 8000c68:	4a05      	ldr	r2, [pc, #20]	; (8000c80 <main+0x17c>)
 8000c6a:	6013      	str	r3, [r2, #0]
		HAL_Delay(DELAY);
 8000c6c:	200a      	movs	r0, #10
 8000c6e:	f000 fd43 	bl	80016f8 <HAL_Delay>
	{
 8000c72:	e7a5      	b.n	8000bc0 <main+0xbc>
 8000c74:	20000138 	.word	0x20000138
 8000c78:	20000180 	.word	0x20000180
 8000c7c:	2000009c 	.word	0x2000009c
 8000c80:	2000008c 	.word	0x2000008c

08000c84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b094      	sub	sp, #80	; 0x50
 8000c88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8a:	f107 0320 	add.w	r3, r7, #32
 8000c8e:	2230      	movs	r2, #48	; 0x30
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f003 fcc8 	bl	8004628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	4b29      	ldr	r3, [pc, #164]	; (8000d54 <SystemClock_Config+0xd0>)
 8000cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb0:	4a28      	ldr	r2, [pc, #160]	; (8000d54 <SystemClock_Config+0xd0>)
 8000cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb8:	4b26      	ldr	r3, [pc, #152]	; (8000d54 <SystemClock_Config+0xd0>)
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	4b23      	ldr	r3, [pc, #140]	; (8000d58 <SystemClock_Config+0xd4>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cd0:	4a21      	ldr	r2, [pc, #132]	; (8000d58 <SystemClock_Config+0xd4>)
 8000cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cd6:	6013      	str	r3, [r2, #0]
 8000cd8:	4b1f      	ldr	r3, [pc, #124]	; (8000d58 <SystemClock_Config+0xd4>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cec:	2310      	movs	r3, #16
 8000cee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000cf8:	2310      	movs	r3, #16
 8000cfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cfc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d02:	2304      	movs	r3, #4
 8000d04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d06:	2307      	movs	r3, #7
 8000d08:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0a:	f107 0320 	add.w	r3, r7, #32
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 ffbc 	bl	8002c8c <HAL_RCC_OscConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d1a:	f000 f81f 	bl	8000d5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1e:	230f      	movs	r3, #15
 8000d20:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d22:	2302      	movs	r3, #2
 8000d24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	2102      	movs	r1, #2
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f002 fa1e 	bl	800317c <HAL_RCC_ClockConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000d46:	f000 f809 	bl	8000d5c <Error_Handler>
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	3750      	adds	r7, #80	; 0x50
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40007000 	.word	0x40007000

08000d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d60:	b672      	cpsid	i
}
 8000d62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <Error_Handler+0x8>
	...

08000d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	4a0f      	ldr	r2, [pc, #60]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d98:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000da6:	2007      	movs	r0, #7
 8000da8:	f001 f97c 	bl	80020a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40023800 	.word	0x40023800

08000db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <NMI_Handler+0x4>

08000dbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <HardFault_Handler+0x4>

08000dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <MemManage_Handler+0x4>

08000dca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <BusFault_Handler+0x4>

08000dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <UsageFault_Handler+0x4>

08000dd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e04:	f000 fc58 	bl	80016b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8000e10:	4802      	ldr	r0, [pc, #8]	; (8000e1c <DMA1_Stream0_IRQHandler+0x10>)
 8000e12:	f001 fa37 	bl	8002284 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000318 	.word	0x20000318

08000e20 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000e24:	4802      	ldr	r0, [pc, #8]	; (8000e30 <DMA1_Stream4_IRQHandler+0x10>)
 8000e26:	f001 fa2d 	bl	8002284 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200001c8 	.word	0x200001c8

08000e34 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8000e38:	4802      	ldr	r0, [pc, #8]	; (8000e44 <DMA1_Stream5_IRQHandler+0x10>)
 8000e3a:	f001 fa23 	bl	8002284 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000228 	.word	0x20000228

08000e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e50:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <_sbrk+0x5c>)
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <_sbrk+0x60>)
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <_sbrk+0x64>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d102      	bne.n	8000e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e64:	4b11      	ldr	r3, [pc, #68]	; (8000eac <_sbrk+0x64>)
 8000e66:	4a12      	ldr	r2, [pc, #72]	; (8000eb0 <_sbrk+0x68>)
 8000e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d207      	bcs.n	8000e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e78:	f003 fba4 	bl	80045c4 <__errno>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	220c      	movs	r2, #12
 8000e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e82:	f04f 33ff 	mov.w	r3, #4294967295
 8000e86:	e009      	b.n	8000e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <_sbrk+0x64>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e8e:	4b07      	ldr	r3, [pc, #28]	; (8000eac <_sbrk+0x64>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	4a05      	ldr	r2, [pc, #20]	; (8000eac <_sbrk+0x64>)
 8000e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20018000 	.word	0x20018000
 8000ea8:	00000400 	.word	0x00000400
 8000eac:	20000090 	.word	0x20000090
 8000eb0:	200003d0 	.word	0x200003d0

08000eb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <SystemInit+0x20>)
 8000eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ebe:	4a05      	ldr	r2, [pc, #20]	; (8000ed4 <SystemInit+0x20>)
 8000ec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim3_ch1_trig;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ede:	f107 0308 	add.w	r3, r7, #8
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eec:	463b      	mov	r3, r7
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ef4:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <MX_TIM1_Init+0x98>)
 8000ef6:	4a1f      	ldr	r2, [pc, #124]	; (8000f74 <MX_TIM1_Init+0x9c>)
 8000ef8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000efa:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <MX_TIM1_Init+0x98>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f00:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <MX_TIM1_Init+0x98>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000f06:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <MX_TIM1_Init+0x98>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f0c:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <MX_TIM1_Init+0x98>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <MX_TIM1_Init+0x98>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f18:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <MX_TIM1_Init+0x98>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f1e:	4814      	ldr	r0, [pc, #80]	; (8000f70 <MX_TIM1_Init+0x98>)
 8000f20:	f002 fb28 	bl	8003574 <HAL_TIM_Base_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000f2a:	f7ff ff17 	bl	8000d5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	4619      	mov	r1, r3
 8000f3a:	480d      	ldr	r0, [pc, #52]	; (8000f70 <MX_TIM1_Init+0x98>)
 8000f3c:	f002 fd2a 	bl	8003994 <HAL_TIM_ConfigClockSource>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000f46:	f7ff ff09 	bl	8000d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f52:	463b      	mov	r3, r7
 8000f54:	4619      	mov	r1, r3
 8000f56:	4806      	ldr	r0, [pc, #24]	; (8000f70 <MX_TIM1_Init+0x98>)
 8000f58:	f003 f8b0 	bl	80040bc <HAL_TIMEx_MasterConfigSynchronization>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000f62:	f7ff fefb 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f66:	bf00      	nop
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000288 	.word	0x20000288
 8000f74:	40010000 	.word	0x40010000

08000f78 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f94:	4b1d      	ldr	r3, [pc, #116]	; (800100c <MX_TIM2_Init+0x94>)
 8000f96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	; (800100c <MX_TIM2_Init+0x94>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	; (800100c <MX_TIM2_Init+0x94>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000fa8:	4b18      	ldr	r3, [pc, #96]	; (800100c <MX_TIM2_Init+0x94>)
 8000faa:	f04f 32ff 	mov.w	r2, #4294967295
 8000fae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <MX_TIM2_Init+0x94>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb6:	4b15      	ldr	r3, [pc, #84]	; (800100c <MX_TIM2_Init+0x94>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fbc:	4813      	ldr	r0, [pc, #76]	; (800100c <MX_TIM2_Init+0x94>)
 8000fbe:	f002 fad9 	bl	8003574 <HAL_TIM_Base_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fc8:	f7ff fec8 	bl	8000d5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fd2:	f107 0308 	add.w	r3, r7, #8
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	480c      	ldr	r0, [pc, #48]	; (800100c <MX_TIM2_Init+0x94>)
 8000fda:	f002 fcdb 	bl	8003994 <HAL_TIM_ConfigClockSource>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fe4:	f7ff feba 	bl	8000d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_TIM2_Init+0x94>)
 8000ff6:	f003 f861 	bl	80040bc <HAL_TIMEx_MasterConfigSynchronization>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001000:	f7ff feac 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200002d0 	.word	0x200002d0

08001010 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08e      	sub	sp, #56	; 0x38
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001016:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001024:	f107 0320 	add.w	r3, r7, #32
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
 800103c:	615a      	str	r2, [r3, #20]
 800103e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001040:	4b31      	ldr	r3, [pc, #196]	; (8001108 <MX_TIM3_Init+0xf8>)
 8001042:	4a32      	ldr	r2, [pc, #200]	; (800110c <MX_TIM3_Init+0xfc>)
 8001044:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001046:	4b30      	ldr	r3, [pc, #192]	; (8001108 <MX_TIM3_Init+0xf8>)
 8001048:	2253      	movs	r2, #83	; 0x53
 800104a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104c:	4b2e      	ldr	r3, [pc, #184]	; (8001108 <MX_TIM3_Init+0xf8>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255-1;
 8001052:	4b2d      	ldr	r3, [pc, #180]	; (8001108 <MX_TIM3_Init+0xf8>)
 8001054:	22fe      	movs	r2, #254	; 0xfe
 8001056:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001058:	4b2b      	ldr	r3, [pc, #172]	; (8001108 <MX_TIM3_Init+0xf8>)
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800105e:	4b2a      	ldr	r3, [pc, #168]	; (8001108 <MX_TIM3_Init+0xf8>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001064:	4828      	ldr	r0, [pc, #160]	; (8001108 <MX_TIM3_Init+0xf8>)
 8001066:	f002 fa85 	bl	8003574 <HAL_TIM_Base_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001070:	f7ff fe74 	bl	8000d5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001078:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800107a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800107e:	4619      	mov	r1, r3
 8001080:	4821      	ldr	r0, [pc, #132]	; (8001108 <MX_TIM3_Init+0xf8>)
 8001082:	f002 fc87 	bl	8003994 <HAL_TIM_ConfigClockSource>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800108c:	f7ff fe66 	bl	8000d5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001090:	481d      	ldr	r0, [pc, #116]	; (8001108 <MX_TIM3_Init+0xf8>)
 8001092:	f002 fabe 	bl	8003612 <HAL_TIM_PWM_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800109c:	f7ff fe5e 	bl	8000d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a0:	2300      	movs	r3, #0
 80010a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010a8:	f107 0320 	add.w	r3, r7, #32
 80010ac:	4619      	mov	r1, r3
 80010ae:	4816      	ldr	r0, [pc, #88]	; (8001108 <MX_TIM3_Init+0xf8>)
 80010b0:	f003 f804 	bl	80040bc <HAL_TIMEx_MasterConfigSynchronization>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80010ba:	f7ff fe4f 	bl	8000d5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010be:	2360      	movs	r3, #96	; 0x60
 80010c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 255;
 80010c2:	23ff      	movs	r3, #255	; 0xff
 80010c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	2200      	movs	r2, #0
 80010d2:	4619      	mov	r1, r3
 80010d4:	480c      	ldr	r0, [pc, #48]	; (8001108 <MX_TIM3_Init+0xf8>)
 80010d6:	f002 fb9b 	bl	8003810 <HAL_TIM_PWM_ConfigChannel>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80010e0:	f7ff fe3c 	bl	8000d5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	2204      	movs	r2, #4
 80010e8:	4619      	mov	r1, r3
 80010ea:	4807      	ldr	r0, [pc, #28]	; (8001108 <MX_TIM3_Init+0xf8>)
 80010ec:	f002 fb90 	bl	8003810 <HAL_TIM_PWM_ConfigChannel>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 80010f6:	f7ff fe31 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010fa:	4803      	ldr	r0, [pc, #12]	; (8001108 <MX_TIM3_Init+0xf8>)
 80010fc:	f000 f96e 	bl	80013dc <HAL_TIM_MspPostInit>

}
 8001100:	bf00      	nop
 8001102:	3738      	adds	r7, #56	; 0x38
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000180 	.word	0x20000180
 800110c:	40000400 	.word	0x40000400

08001110 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	; 0x28
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001116:	f107 0320 	add.w	r3, r7, #32
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]
 800112e:	615a      	str	r2, [r3, #20]
 8001130:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001132:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <MX_TIM4_Init+0xa8>)
 8001134:	4a21      	ldr	r2, [pc, #132]	; (80011bc <MX_TIM4_Init+0xac>)
 8001136:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <MX_TIM4_Init+0xa8>)
 800113a:	2253      	movs	r2, #83	; 0x53
 800113c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113e:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <MX_TIM4_Init+0xa8>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255-1;
 8001144:	4b1c      	ldr	r3, [pc, #112]	; (80011b8 <MX_TIM4_Init+0xa8>)
 8001146:	22fe      	movs	r2, #254	; 0xfe
 8001148:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800114a:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <MX_TIM4_Init+0xa8>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001150:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <MX_TIM4_Init+0xa8>)
 8001152:	2200      	movs	r2, #0
 8001154:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001156:	4818      	ldr	r0, [pc, #96]	; (80011b8 <MX_TIM4_Init+0xa8>)
 8001158:	f002 fa5b 	bl	8003612 <HAL_TIM_PWM_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001162:	f7ff fdfb 	bl	8000d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001166:	2300      	movs	r3, #0
 8001168:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800116e:	f107 0320 	add.w	r3, r7, #32
 8001172:	4619      	mov	r1, r3
 8001174:	4810      	ldr	r0, [pc, #64]	; (80011b8 <MX_TIM4_Init+0xa8>)
 8001176:	f002 ffa1 	bl	80040bc <HAL_TIMEx_MasterConfigSynchronization>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001180:	f7ff fdec 	bl	8000d5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001184:	2360      	movs	r3, #96	; 0x60
 8001186:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 255;
 8001188:	23ff      	movs	r3, #255	; 0xff
 800118a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	2200      	movs	r2, #0
 8001198:	4619      	mov	r1, r3
 800119a:	4807      	ldr	r0, [pc, #28]	; (80011b8 <MX_TIM4_Init+0xa8>)
 800119c:	f002 fb38 	bl	8003810 <HAL_TIM_PWM_ConfigChannel>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80011a6:	f7ff fdd9 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80011aa:	4803      	ldr	r0, [pc, #12]	; (80011b8 <MX_TIM4_Init+0xa8>)
 80011ac:	f000 f916 	bl	80013dc <HAL_TIM_MspPostInit>

}
 80011b0:	bf00      	nop
 80011b2:	3728      	adds	r7, #40	; 0x28
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000138 	.word	0x20000138
 80011bc:	40000800 	.word	0x40000800

080011c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a52      	ldr	r2, [pc, #328]	; (8001318 <HAL_TIM_Base_MspInit+0x158>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d10e      	bne.n	80011f0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	4b51      	ldr	r3, [pc, #324]	; (800131c <HAL_TIM_Base_MspInit+0x15c>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	4a50      	ldr	r2, [pc, #320]	; (800131c <HAL_TIM_Base_MspInit+0x15c>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6453      	str	r3, [r2, #68]	; 0x44
 80011e2:	4b4e      	ldr	r3, [pc, #312]	; (800131c <HAL_TIM_Base_MspInit+0x15c>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	697b      	ldr	r3, [r7, #20]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80011ee:	e08e      	b.n	800130e <HAL_TIM_Base_MspInit+0x14e>
  else if(tim_baseHandle->Instance==TIM2)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011f8:	d10e      	bne.n	8001218 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	4b47      	ldr	r3, [pc, #284]	; (800131c <HAL_TIM_Base_MspInit+0x15c>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	4a46      	ldr	r2, [pc, #280]	; (800131c <HAL_TIM_Base_MspInit+0x15c>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6413      	str	r3, [r2, #64]	; 0x40
 800120a:	4b44      	ldr	r3, [pc, #272]	; (800131c <HAL_TIM_Base_MspInit+0x15c>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]
}
 8001216:	e07a      	b.n	800130e <HAL_TIM_Base_MspInit+0x14e>
  else if(tim_baseHandle->Instance==TIM3)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a40      	ldr	r2, [pc, #256]	; (8001320 <HAL_TIM_Base_MspInit+0x160>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d175      	bne.n	800130e <HAL_TIM_Base_MspInit+0x14e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b3d      	ldr	r3, [pc, #244]	; (800131c <HAL_TIM_Base_MspInit+0x15c>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	4a3c      	ldr	r2, [pc, #240]	; (800131c <HAL_TIM_Base_MspInit+0x15c>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	6413      	str	r3, [r2, #64]	; 0x40
 8001232:	4b3a      	ldr	r3, [pc, #232]	; (800131c <HAL_TIM_Base_MspInit+0x15c>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 800123e:	4b39      	ldr	r3, [pc, #228]	; (8001324 <HAL_TIM_Base_MspInit+0x164>)
 8001240:	4a39      	ldr	r2, [pc, #228]	; (8001328 <HAL_TIM_Base_MspInit+0x168>)
 8001242:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 8001244:	4b37      	ldr	r3, [pc, #220]	; (8001324 <HAL_TIM_Base_MspInit+0x164>)
 8001246:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800124a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800124c:	4b35      	ldr	r3, [pc, #212]	; (8001324 <HAL_TIM_Base_MspInit+0x164>)
 800124e:	2240      	movs	r2, #64	; 0x40
 8001250:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001252:	4b34      	ldr	r3, [pc, #208]	; (8001324 <HAL_TIM_Base_MspInit+0x164>)
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001258:	4b32      	ldr	r3, [pc, #200]	; (8001324 <HAL_TIM_Base_MspInit+0x164>)
 800125a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800125e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001260:	4b30      	ldr	r3, [pc, #192]	; (8001324 <HAL_TIM_Base_MspInit+0x164>)
 8001262:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001266:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001268:	4b2e      	ldr	r3, [pc, #184]	; (8001324 <HAL_TIM_Base_MspInit+0x164>)
 800126a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800126e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8001270:	4b2c      	ldr	r3, [pc, #176]	; (8001324 <HAL_TIM_Base_MspInit+0x164>)
 8001272:	2200      	movs	r2, #0
 8001274:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8001276:	4b2b      	ldr	r3, [pc, #172]	; (8001324 <HAL_TIM_Base_MspInit+0x164>)
 8001278:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800127c:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800127e:	4b29      	ldr	r3, [pc, #164]	; (8001324 <HAL_TIM_Base_MspInit+0x164>)
 8001280:	2200      	movs	r2, #0
 8001282:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8001284:	4827      	ldr	r0, [pc, #156]	; (8001324 <HAL_TIM_Base_MspInit+0x164>)
 8001286:	f000 ff4f 	bl	8002128 <HAL_DMA_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <HAL_TIM_Base_MspInit+0xd4>
      Error_Handler();
 8001290:	f7ff fd64 	bl	8000d5c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a23      	ldr	r2, [pc, #140]	; (8001324 <HAL_TIM_Base_MspInit+0x164>)
 8001298:	629a      	str	r2, [r3, #40]	; 0x28
 800129a:	4a22      	ldr	r2, [pc, #136]	; (8001324 <HAL_TIM_Base_MspInit+0x164>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 80012a0:	4b22      	ldr	r3, [pc, #136]	; (800132c <HAL_TIM_Base_MspInit+0x16c>)
 80012a2:	4a23      	ldr	r2, [pc, #140]	; (8001330 <HAL_TIM_Base_MspInit+0x170>)
 80012a4:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 80012a6:	4b21      	ldr	r3, [pc, #132]	; (800132c <HAL_TIM_Base_MspInit+0x16c>)
 80012a8:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80012ac:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012ae:	4b1f      	ldr	r3, [pc, #124]	; (800132c <HAL_TIM_Base_MspInit+0x16c>)
 80012b0:	2240      	movs	r2, #64	; 0x40
 80012b2:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b4:	4b1d      	ldr	r3, [pc, #116]	; (800132c <HAL_TIM_Base_MspInit+0x16c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80012ba:	4b1c      	ldr	r3, [pc, #112]	; (800132c <HAL_TIM_Base_MspInit+0x16c>)
 80012bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012c0:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012c2:	4b1a      	ldr	r3, [pc, #104]	; (800132c <HAL_TIM_Base_MspInit+0x16c>)
 80012c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012c8:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012ca:	4b18      	ldr	r3, [pc, #96]	; (800132c <HAL_TIM_Base_MspInit+0x16c>)
 80012cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012d0:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80012d2:	4b16      	ldr	r3, [pc, #88]	; (800132c <HAL_TIM_Base_MspInit+0x16c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <HAL_TIM_Base_MspInit+0x16c>)
 80012da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012de:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_TIM_Base_MspInit+0x16c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80012e6:	4811      	ldr	r0, [pc, #68]	; (800132c <HAL_TIM_Base_MspInit+0x16c>)
 80012e8:	f000 ff1e 	bl	8002128 <HAL_DMA_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_TIM_Base_MspInit+0x136>
      Error_Handler();
 80012f2:	f7ff fd33 	bl	8000d5c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a0c      	ldr	r2, [pc, #48]	; (800132c <HAL_TIM_Base_MspInit+0x16c>)
 80012fa:	625a      	str	r2, [r3, #36]	; 0x24
 80012fc:	4a0b      	ldr	r2, [pc, #44]	; (800132c <HAL_TIM_Base_MspInit+0x16c>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a09      	ldr	r2, [pc, #36]	; (800132c <HAL_TIM_Base_MspInit+0x16c>)
 8001306:	639a      	str	r2, [r3, #56]	; 0x38
 8001308:	4a08      	ldr	r2, [pc, #32]	; (800132c <HAL_TIM_Base_MspInit+0x16c>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800130e:	bf00      	nop
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40010000 	.word	0x40010000
 800131c:	40023800 	.word	0x40023800
 8001320:	40000400 	.word	0x40000400
 8001324:	20000228 	.word	0x20000228
 8001328:	40026088 	.word	0x40026088
 800132c:	200001c8 	.word	0x200001c8
 8001330:	40026070 	.word	0x40026070

08001334 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a22      	ldr	r2, [pc, #136]	; (80013cc <HAL_TIM_PWM_MspInit+0x98>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d13e      	bne.n	80013c4 <HAL_TIM_PWM_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <HAL_TIM_PWM_MspInit+0x9c>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	4a20      	ldr	r2, [pc, #128]	; (80013d0 <HAL_TIM_PWM_MspInit+0x9c>)
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	6413      	str	r3, [r2, #64]	; 0x40
 8001356:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <HAL_TIM_PWM_MspInit+0x9c>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 8001362:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <HAL_TIM_PWM_MspInit+0xa0>)
 8001364:	4a1c      	ldr	r2, [pc, #112]	; (80013d8 <HAL_TIM_PWM_MspInit+0xa4>)
 8001366:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8001368:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <HAL_TIM_PWM_MspInit+0xa0>)
 800136a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800136e:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001370:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <HAL_TIM_PWM_MspInit+0xa0>)
 8001372:	2240      	movs	r2, #64	; 0x40
 8001374:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <HAL_TIM_PWM_MspInit+0xa0>)
 8001378:	2200      	movs	r2, #0
 800137a:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800137c:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <HAL_TIM_PWM_MspInit+0xa0>)
 800137e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001382:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001384:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <HAL_TIM_PWM_MspInit+0xa0>)
 8001386:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800138a:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <HAL_TIM_PWM_MspInit+0xa0>)
 800138e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001392:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <HAL_TIM_PWM_MspInit+0xa0>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <HAL_TIM_PWM_MspInit+0xa0>)
 800139c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013a0:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013a2:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <HAL_TIM_PWM_MspInit+0xa0>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 80013a8:	480a      	ldr	r0, [pc, #40]	; (80013d4 <HAL_TIM_PWM_MspInit+0xa0>)
 80013aa:	f000 febd 	bl	8002128 <HAL_DMA_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <HAL_TIM_PWM_MspInit+0x84>
    {
      Error_Handler();
 80013b4:	f7ff fcd2 	bl	8000d5c <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a06      	ldr	r2, [pc, #24]	; (80013d4 <HAL_TIM_PWM_MspInit+0xa0>)
 80013bc:	625a      	str	r2, [r3, #36]	; 0x24
 80013be:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <HAL_TIM_PWM_MspInit+0xa0>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80013c4:	bf00      	nop
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40000800 	.word	0x40000800
 80013d0:	40023800 	.word	0x40023800
 80013d4:	20000318 	.word	0x20000318
 80013d8:	40026010 	.word	0x40026010

080013dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a33      	ldr	r2, [pc, #204]	; (80014c8 <HAL_TIM_MspPostInit+0xec>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d13c      	bne.n	8001478 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	4b32      	ldr	r3, [pc, #200]	; (80014cc <HAL_TIM_MspPostInit+0xf0>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a31      	ldr	r2, [pc, #196]	; (80014cc <HAL_TIM_MspPostInit+0xf0>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b2f      	ldr	r3, [pc, #188]	; (80014cc <HAL_TIM_MspPostInit+0xf0>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b2b      	ldr	r3, [pc, #172]	; (80014cc <HAL_TIM_MspPostInit+0xf0>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a2a      	ldr	r2, [pc, #168]	; (80014cc <HAL_TIM_MspPostInit+0xf0>)
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b28      	ldr	r3, [pc, #160]	; (80014cc <HAL_TIM_MspPostInit+0xf0>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = LED_G_Pin;
 8001436:	2380      	movs	r3, #128	; 0x80
 8001438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001442:	2302      	movs	r3, #2
 8001444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001446:	2302      	movs	r3, #2
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	4619      	mov	r1, r3
 8001450:	481f      	ldr	r0, [pc, #124]	; (80014d0 <HAL_TIM_MspPostInit+0xf4>)
 8001452:	f001 f953 	bl	80026fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_B_Pin;
 8001456:	2310      	movs	r3, #16
 8001458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001462:	2302      	movs	r3, #2
 8001464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001466:	2302      	movs	r3, #2
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	4818      	ldr	r0, [pc, #96]	; (80014d4 <HAL_TIM_MspPostInit+0xf8>)
 8001472:	f001 f943 	bl	80026fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001476:	e022      	b.n	80014be <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM4)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a16      	ldr	r2, [pc, #88]	; (80014d8 <HAL_TIM_MspPostInit+0xfc>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d11d      	bne.n	80014be <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <HAL_TIM_MspPostInit+0xf0>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a10      	ldr	r2, [pc, #64]	; (80014cc <HAL_TIM_MspPostInit+0xf0>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <HAL_TIM_MspPostInit+0xf0>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LED_R_Pin;
 800149e:	2340      	movs	r3, #64	; 0x40
 80014a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014aa:	2302      	movs	r3, #2
 80014ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014ae:	2302      	movs	r3, #2
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	4619      	mov	r1, r3
 80014b8:	4806      	ldr	r0, [pc, #24]	; (80014d4 <HAL_TIM_MspPostInit+0xf8>)
 80014ba:	f001 f91f 	bl	80026fc <HAL_GPIO_Init>
}
 80014be:	bf00      	nop
 80014c0:	3728      	adds	r7, #40	; 0x28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40000400 	.word	0x40000400
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020800 	.word	0x40020800
 80014d4:	40020400 	.word	0x40020400
 80014d8:	40000800 	.word	0x40000800

080014dc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <MX_USART2_UART_Init+0x4c>)
 80014e2:	4a12      	ldr	r2, [pc, #72]	; (800152c <MX_USART2_UART_Init+0x50>)
 80014e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <MX_USART2_UART_Init+0x4c>)
 80014e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <MX_USART2_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <MX_USART2_UART_Init+0x4c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <MX_USART2_UART_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001500:	4b09      	ldr	r3, [pc, #36]	; (8001528 <MX_USART2_UART_Init+0x4c>)
 8001502:	220c      	movs	r2, #12
 8001504:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001506:	4b08      	ldr	r3, [pc, #32]	; (8001528 <MX_USART2_UART_Init+0x4c>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <MX_USART2_UART_Init+0x4c>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001512:	4805      	ldr	r0, [pc, #20]	; (8001528 <MX_USART2_UART_Init+0x4c>)
 8001514:	f002 fe40 	bl	8004198 <HAL_UART_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800151e:	f7ff fc1d 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000378 	.word	0x20000378
 800152c:	40004400 	.word	0x40004400

08001530 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a19      	ldr	r2, [pc, #100]	; (80015b4 <HAL_UART_MspInit+0x84>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d12b      	bne.n	80015aa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <HAL_UART_MspInit+0x88>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	4a17      	ldr	r2, [pc, #92]	; (80015b8 <HAL_UART_MspInit+0x88>)
 800155c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001560:	6413      	str	r3, [r2, #64]	; 0x40
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <HAL_UART_MspInit+0x88>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <HAL_UART_MspInit+0x88>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a10      	ldr	r2, [pc, #64]	; (80015b8 <HAL_UART_MspInit+0x88>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <HAL_UART_MspInit+0x88>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800158a:	230c      	movs	r3, #12
 800158c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800159a:	2307      	movs	r3, #7
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	; (80015bc <HAL_UART_MspInit+0x8c>)
 80015a6:	f001 f8a9 	bl	80026fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015aa:	bf00      	nop
 80015ac:	3728      	adds	r7, #40	; 0x28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40004400 	.word	0x40004400
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020000 	.word	0x40020000

080015c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015c4:	480d      	ldr	r0, [pc, #52]	; (80015fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015c6:	490e      	ldr	r1, [pc, #56]	; (8001600 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015c8:	4a0e      	ldr	r2, [pc, #56]	; (8001604 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015cc:	e002      	b.n	80015d4 <LoopCopyDataInit>

080015ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d2:	3304      	adds	r3, #4

080015d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d8:	d3f9      	bcc.n	80015ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015da:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015dc:	4c0b      	ldr	r4, [pc, #44]	; (800160c <LoopFillZerobss+0x26>)
  movs r3, #0
 80015de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e0:	e001      	b.n	80015e6 <LoopFillZerobss>

080015e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e4:	3204      	adds	r2, #4

080015e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e8:	d3fb      	bcc.n	80015e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015ea:	f7ff fc63 	bl	8000eb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ee:	f002 ffef 	bl	80045d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015f2:	f7ff fa87 	bl	8000b04 <main>
  bx  lr    
 80015f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001600:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001604:	08004770 	.word	0x08004770
  ldr r2, =_sbss
 8001608:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800160c:	200003d0 	.word	0x200003d0

08001610 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001610:	e7fe      	b.n	8001610 <ADC_IRQHandler>
	...

08001614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001618:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <HAL_Init+0x40>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0d      	ldr	r2, [pc, #52]	; (8001654 <HAL_Init+0x40>)
 800161e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001622:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_Init+0x40>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <HAL_Init+0x40>)
 800162a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800162e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <HAL_Init+0x40>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a07      	ldr	r2, [pc, #28]	; (8001654 <HAL_Init+0x40>)
 8001636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800163c:	2003      	movs	r0, #3
 800163e:	f000 fd31 	bl	80020a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001642:	2000      	movs	r0, #0
 8001644:	f000 f808 	bl	8001658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001648:	f7ff fb8e 	bl	8000d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023c00 	.word	0x40023c00

08001658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_InitTick+0x54>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_InitTick+0x58>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4619      	mov	r1, r3
 800166a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001672:	fbb2 f3f3 	udiv	r3, r2, r3
 8001676:	4618      	mov	r0, r3
 8001678:	f000 fd49 	bl	800210e <HAL_SYSTICK_Config>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e00e      	b.n	80016a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b0f      	cmp	r3, #15
 800168a:	d80a      	bhi.n	80016a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800168c:	2200      	movs	r2, #0
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	f04f 30ff 	mov.w	r0, #4294967295
 8001694:	f000 fd11 	bl	80020ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001698:	4a06      	ldr	r2, [pc, #24]	; (80016b4 <HAL_InitTick+0x5c>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	e000      	b.n	80016a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000000 	.word	0x20000000
 80016b0:	20000008 	.word	0x20000008
 80016b4:	20000004 	.word	0x20000004

080016b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_IncTick+0x20>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_IncTick+0x24>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4413      	add	r3, r2
 80016c8:	4a04      	ldr	r2, [pc, #16]	; (80016dc <HAL_IncTick+0x24>)
 80016ca:	6013      	str	r3, [r2, #0]
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	20000008 	.word	0x20000008
 80016dc:	200003bc 	.word	0x200003bc

080016e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return uwTick;
 80016e4:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <HAL_GetTick+0x14>)
 80016e6:	681b      	ldr	r3, [r3, #0]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	200003bc 	.word	0x200003bc

080016f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001700:	f7ff ffee 	bl	80016e0 <HAL_GetTick>
 8001704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001710:	d005      	beq.n	800171e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <HAL_Delay+0x44>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4413      	add	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800171e:	bf00      	nop
 8001720:	f7ff ffde 	bl	80016e0 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	429a      	cmp	r2, r3
 800172e:	d8f7      	bhi.n	8001720 <HAL_Delay+0x28>
  {
  }
}
 8001730:	bf00      	nop
 8001732:	bf00      	nop
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000008 	.word	0x20000008

08001740 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e033      	b.n	80017be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	2b00      	cmp	r3, #0
 800175c:	d109      	bne.n	8001772 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7fe ff38 	bl	80005d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f003 0310 	and.w	r3, r3, #16
 800177a:	2b00      	cmp	r3, #0
 800177c:	d118      	bne.n	80017b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001786:	f023 0302 	bic.w	r3, r3, #2
 800178a:	f043 0202 	orr.w	r2, r3, #2
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 faba 	bl	8001d0c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f023 0303 	bic.w	r3, r3, #3
 80017a6:	f043 0201 	orr.w	r2, r3, #1
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	641a      	str	r2, [r3, #64]	; 0x40
 80017ae:	e001      	b.n	80017b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d101      	bne.n	80017e2 <HAL_ADC_Start+0x1a>
 80017de:	2302      	movs	r3, #2
 80017e0:	e097      	b.n	8001912 <HAL_ADC_Start+0x14a>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d018      	beq.n	800182a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0201 	orr.w	r2, r2, #1
 8001806:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001808:	4b45      	ldr	r3, [pc, #276]	; (8001920 <HAL_ADC_Start+0x158>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a45      	ldr	r2, [pc, #276]	; (8001924 <HAL_ADC_Start+0x15c>)
 800180e:	fba2 2303 	umull	r2, r3, r2, r3
 8001812:	0c9a      	lsrs	r2, r3, #18
 8001814:	4613      	mov	r3, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4413      	add	r3, r2
 800181a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800181c:	e002      	b.n	8001824 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	3b01      	subs	r3, #1
 8001822:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f9      	bne.n	800181e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	2b01      	cmp	r3, #1
 8001836:	d15f      	bne.n	80018f8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001840:	f023 0301 	bic.w	r3, r3, #1
 8001844:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001856:	2b00      	cmp	r3, #0
 8001858:	d007      	beq.n	800186a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001862:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001876:	d106      	bne.n	8001886 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187c:	f023 0206 	bic.w	r2, r3, #6
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	645a      	str	r2, [r3, #68]	; 0x44
 8001884:	e002      	b.n	800188c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001894:	4b24      	ldr	r3, [pc, #144]	; (8001928 <HAL_ADC_Start+0x160>)
 8001896:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018a0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 031f 	and.w	r3, r3, #31
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10f      	bne.n	80018ce <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d129      	bne.n	8001910 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	e020      	b.n	8001910 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a16      	ldr	r2, [pc, #88]	; (800192c <HAL_ADC_Start+0x164>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d11b      	bne.n	8001910 <HAL_ADC_Start+0x148>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d114      	bne.n	8001910 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	e00b      	b.n	8001910 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	f043 0210 	orr.w	r2, r3, #16
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001908:	f043 0201 	orr.w	r2, r3, #1
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20000000 	.word	0x20000000
 8001924:	431bde83 	.word	0x431bde83
 8001928:	40012300 	.word	0x40012300
 800192c:	40012000 	.word	0x40012000

08001930 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800193e:	2b01      	cmp	r3, #1
 8001940:	d101      	bne.n	8001946 <HAL_ADC_Stop+0x16>
 8001942:	2302      	movs	r3, #2
 8001944:	e021      	b.n	800198a <HAL_ADC_Stop+0x5a>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 0201 	bic.w	r2, r2, #1
 800195c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b00      	cmp	r3, #0
 800196a:	d109      	bne.n	8001980 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001974:	f023 0301 	bic.w	r3, r3, #1
 8001978:	f043 0201 	orr.w	r2, r3, #1
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b084      	sub	sp, #16
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019b2:	d113      	bne.n	80019dc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80019be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019c2:	d10b      	bne.n	80019dc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	f043 0220 	orr.w	r2, r3, #32
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e063      	b.n	8001aa4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80019dc:	f7ff fe80 	bl	80016e0 <HAL_GetTick>
 80019e0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019e2:	e021      	b.n	8001a28 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ea:	d01d      	beq.n	8001a28 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d007      	beq.n	8001a02 <HAL_ADC_PollForConversion+0x6c>
 80019f2:	f7ff fe75 	bl	80016e0 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d212      	bcs.n	8001a28 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d00b      	beq.n	8001a28 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	f043 0204 	orr.w	r2, r3, #4
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e03d      	b.n	8001aa4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d1d6      	bne.n	80019e4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f06f 0212 	mvn.w	r2, #18
 8001a3e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d123      	bne.n	8001aa2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d11f      	bne.n	8001aa2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a68:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d006      	beq.n	8001a7e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d111      	bne.n	8001aa2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d105      	bne.n	8001aa2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f043 0201 	orr.w	r2, r3, #1
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d101      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x1c>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e105      	b.n	8001cf0 <HAL_ADC_ConfigChannel+0x228>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b09      	cmp	r3, #9
 8001af2:	d925      	bls.n	8001b40 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68d9      	ldr	r1, [r3, #12]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	461a      	mov	r2, r3
 8001b02:	4613      	mov	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	4413      	add	r3, r2
 8001b08:	3b1e      	subs	r3, #30
 8001b0a:	2207      	movs	r2, #7
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43da      	mvns	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	400a      	ands	r2, r1
 8001b18:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68d9      	ldr	r1, [r3, #12]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4403      	add	r3, r0
 8001b32:	3b1e      	subs	r3, #30
 8001b34:	409a      	lsls	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	e022      	b.n	8001b86 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6919      	ldr	r1, [r3, #16]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4613      	mov	r3, r2
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	4413      	add	r3, r2
 8001b54:	2207      	movs	r2, #7
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	400a      	ands	r2, r1
 8001b62:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6919      	ldr	r1, [r3, #16]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	4618      	mov	r0, r3
 8001b76:	4603      	mov	r3, r0
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	4403      	add	r3, r0
 8001b7c:	409a      	lsls	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b06      	cmp	r3, #6
 8001b8c:	d824      	bhi.n	8001bd8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	3b05      	subs	r3, #5
 8001ba0:	221f      	movs	r2, #31
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43da      	mvns	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	400a      	ands	r2, r1
 8001bae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3b05      	subs	r3, #5
 8001bca:	fa00 f203 	lsl.w	r2, r0, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	635a      	str	r2, [r3, #52]	; 0x34
 8001bd6:	e04c      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b0c      	cmp	r3, #12
 8001bde:	d824      	bhi.n	8001c2a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	4613      	mov	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	3b23      	subs	r3, #35	; 0x23
 8001bf2:	221f      	movs	r2, #31
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43da      	mvns	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	400a      	ands	r2, r1
 8001c00:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	4618      	mov	r0, r3
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	3b23      	subs	r3, #35	; 0x23
 8001c1c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	631a      	str	r2, [r3, #48]	; 0x30
 8001c28:	e023      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	3b41      	subs	r3, #65	; 0x41
 8001c3c:	221f      	movs	r2, #31
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43da      	mvns	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	400a      	ands	r2, r1
 8001c4a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	4618      	mov	r0, r3
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	3b41      	subs	r3, #65	; 0x41
 8001c66:	fa00 f203 	lsl.w	r2, r0, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c72:	4b22      	ldr	r3, [pc, #136]	; (8001cfc <HAL_ADC_ConfigChannel+0x234>)
 8001c74:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a21      	ldr	r2, [pc, #132]	; (8001d00 <HAL_ADC_ConfigChannel+0x238>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d109      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x1cc>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2b12      	cmp	r3, #18
 8001c86:	d105      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a19      	ldr	r2, [pc, #100]	; (8001d00 <HAL_ADC_ConfigChannel+0x238>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d123      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x21e>
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2b10      	cmp	r3, #16
 8001ca4:	d003      	beq.n	8001cae <HAL_ADC_ConfigChannel+0x1e6>
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b11      	cmp	r3, #17
 8001cac:	d11b      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2b10      	cmp	r3, #16
 8001cc0:	d111      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cc2:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <HAL_ADC_ConfigChannel+0x23c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a10      	ldr	r2, [pc, #64]	; (8001d08 <HAL_ADC_ConfigChannel+0x240>)
 8001cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ccc:	0c9a      	lsrs	r2, r3, #18
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cd8:	e002      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f9      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	40012300 	.word	0x40012300
 8001d00:	40012000 	.word	0x40012000
 8001d04:	20000000 	.word	0x20000000
 8001d08:	431bde83 	.word	0x431bde83

08001d0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d14:	4b79      	ldr	r3, [pc, #484]	; (8001efc <ADC_Init+0x1f0>)
 8001d16:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6859      	ldr	r1, [r3, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	021a      	lsls	r2, r3, #8
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6859      	ldr	r1, [r3, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6899      	ldr	r1, [r3, #8]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68da      	ldr	r2, [r3, #12]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9e:	4a58      	ldr	r2, [pc, #352]	; (8001f00 <ADC_Init+0x1f4>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d022      	beq.n	8001dea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001db2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6899      	ldr	r1, [r3, #8]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6899      	ldr	r1, [r3, #8]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	e00f      	b.n	8001e0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001df8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0202 	bic.w	r2, r2, #2
 8001e18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6899      	ldr	r1, [r3, #8]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	7e1b      	ldrb	r3, [r3, #24]
 8001e24:	005a      	lsls	r2, r3, #1
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d01b      	beq.n	8001e70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6859      	ldr	r1, [r3, #4]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	3b01      	subs	r3, #1
 8001e64:	035a      	lsls	r2, r3, #13
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	e007      	b.n	8001e80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	051a      	lsls	r2, r3, #20
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001eb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6899      	ldr	r1, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ec2:	025a      	lsls	r2, r3, #9
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6899      	ldr	r1, [r3, #8]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	029a      	lsls	r2, r3, #10
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	609a      	str	r2, [r3, #8]
}
 8001ef0:	bf00      	nop
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	40012300 	.word	0x40012300
 8001f00:	0f000001 	.word	0x0f000001

08001f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f20:	4013      	ands	r3, r2
 8001f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f36:	4a04      	ldr	r2, [pc, #16]	; (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	60d3      	str	r3, [r2, #12]
}
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f50:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <__NVIC_GetPriorityGrouping+0x18>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	f003 0307 	and.w	r3, r3, #7
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	db0b      	blt.n	8001f92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	f003 021f 	and.w	r2, r3, #31
 8001f80:	4907      	ldr	r1, [pc, #28]	; (8001fa0 <__NVIC_EnableIRQ+0x38>)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	2001      	movs	r0, #1
 8001f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000e100 	.word	0xe000e100

08001fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	6039      	str	r1, [r7, #0]
 8001fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	db0a      	blt.n	8001fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	490c      	ldr	r1, [pc, #48]	; (8001ff0 <__NVIC_SetPriority+0x4c>)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	0112      	lsls	r2, r2, #4
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fcc:	e00a      	b.n	8001fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	4908      	ldr	r1, [pc, #32]	; (8001ff4 <__NVIC_SetPriority+0x50>)
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	3b04      	subs	r3, #4
 8001fdc:	0112      	lsls	r2, r2, #4
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	761a      	strb	r2, [r3, #24]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000e100 	.word	0xe000e100
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	; 0x24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f1c3 0307 	rsb	r3, r3, #7
 8002012:	2b04      	cmp	r3, #4
 8002014:	bf28      	it	cs
 8002016:	2304      	movcs	r3, #4
 8002018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3304      	adds	r3, #4
 800201e:	2b06      	cmp	r3, #6
 8002020:	d902      	bls.n	8002028 <NVIC_EncodePriority+0x30>
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3b03      	subs	r3, #3
 8002026:	e000      	b.n	800202a <NVIC_EncodePriority+0x32>
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800202c:	f04f 32ff 	mov.w	r2, #4294967295
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43da      	mvns	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	401a      	ands	r2, r3
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002040:	f04f 31ff 	mov.w	r1, #4294967295
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	43d9      	mvns	r1, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002050:	4313      	orrs	r3, r2
         );
}
 8002052:	4618      	mov	r0, r3
 8002054:	3724      	adds	r7, #36	; 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
	...

08002060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3b01      	subs	r3, #1
 800206c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002070:	d301      	bcc.n	8002076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002072:	2301      	movs	r3, #1
 8002074:	e00f      	b.n	8002096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002076:	4a0a      	ldr	r2, [pc, #40]	; (80020a0 <SysTick_Config+0x40>)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3b01      	subs	r3, #1
 800207c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800207e:	210f      	movs	r1, #15
 8002080:	f04f 30ff 	mov.w	r0, #4294967295
 8002084:	f7ff ff8e 	bl	8001fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002088:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <SysTick_Config+0x40>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800208e:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <SysTick_Config+0x40>)
 8002090:	2207      	movs	r2, #7
 8002092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	e000e010 	.word	0xe000e010

080020a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff ff29 	bl	8001f04 <__NVIC_SetPriorityGrouping>
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b086      	sub	sp, #24
 80020be:	af00      	add	r7, sp, #0
 80020c0:	4603      	mov	r3, r0
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	607a      	str	r2, [r7, #4]
 80020c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020cc:	f7ff ff3e 	bl	8001f4c <__NVIC_GetPriorityGrouping>
 80020d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	68b9      	ldr	r1, [r7, #8]
 80020d6:	6978      	ldr	r0, [r7, #20]
 80020d8:	f7ff ff8e 	bl	8001ff8 <NVIC_EncodePriority>
 80020dc:	4602      	mov	r2, r0
 80020de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e2:	4611      	mov	r1, r2
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff ff5d 	bl	8001fa4 <__NVIC_SetPriority>
}
 80020ea:	bf00      	nop
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	4603      	mov	r3, r0
 80020fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff31 	bl	8001f68 <__NVIC_EnableIRQ>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff ffa2 	bl	8002060 <SysTick_Config>
 800211c:	4603      	mov	r3, r0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002134:	f7ff fad4 	bl	80016e0 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e099      	b.n	8002278 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2202      	movs	r2, #2
 8002148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0201 	bic.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002164:	e00f      	b.n	8002186 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002166:	f7ff fabb 	bl	80016e0 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b05      	cmp	r3, #5
 8002172:	d908      	bls.n	8002186 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2220      	movs	r2, #32
 8002178:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2203      	movs	r2, #3
 800217e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e078      	b.n	8002278 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1e8      	bne.n	8002166 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	4b38      	ldr	r3, [pc, #224]	; (8002280 <HAL_DMA_Init+0x158>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d107      	bne.n	80021f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	4313      	orrs	r3, r2
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	f023 0307 	bic.w	r3, r3, #7
 8002206:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	4313      	orrs	r3, r2
 8002210:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	2b04      	cmp	r3, #4
 8002218:	d117      	bne.n	800224a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	4313      	orrs	r3, r2
 8002222:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00e      	beq.n	800224a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 f9e9 	bl	8002604 <DMA_CheckFifoParam>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d008      	beq.n	800224a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2240      	movs	r2, #64	; 0x40
 800223c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002246:	2301      	movs	r3, #1
 8002248:	e016      	b.n	8002278 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f9a0 	bl	8002598 <DMA_CalcBaseAndBitshift>
 8002258:	4603      	mov	r3, r0
 800225a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002260:	223f      	movs	r2, #63	; 0x3f
 8002262:	409a      	lsls	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	f010803f 	.word	0xf010803f

08002284 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002290:	4b92      	ldr	r3, [pc, #584]	; (80024dc <HAL_DMA_IRQHandler+0x258>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a92      	ldr	r2, [pc, #584]	; (80024e0 <HAL_DMA_IRQHandler+0x25c>)
 8002296:	fba2 2303 	umull	r2, r3, r2, r3
 800229a:	0a9b      	lsrs	r3, r3, #10
 800229c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ae:	2208      	movs	r2, #8
 80022b0:	409a      	lsls	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4013      	ands	r3, r2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d01a      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d013      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0204 	bic.w	r2, r2, #4
 80022d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022dc:	2208      	movs	r2, #8
 80022de:	409a      	lsls	r2, r3
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e8:	f043 0201 	orr.w	r2, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f4:	2201      	movs	r2, #1
 80022f6:	409a      	lsls	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d012      	beq.n	8002326 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00b      	beq.n	8002326 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002312:	2201      	movs	r2, #1
 8002314:	409a      	lsls	r2, r3
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231e:	f043 0202 	orr.w	r2, r3, #2
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232a:	2204      	movs	r2, #4
 800232c:	409a      	lsls	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	4013      	ands	r3, r2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d012      	beq.n	800235c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00b      	beq.n	800235c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002348:	2204      	movs	r2, #4
 800234a:	409a      	lsls	r2, r3
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002354:	f043 0204 	orr.w	r2, r3, #4
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002360:	2210      	movs	r2, #16
 8002362:	409a      	lsls	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4013      	ands	r3, r2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d043      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d03c      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237e:	2210      	movs	r2, #16
 8002380:	409a      	lsls	r2, r3
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d018      	beq.n	80023c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d108      	bne.n	80023b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d024      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	4798      	blx	r3
 80023b2:	e01f      	b.n	80023f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d01b      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	4798      	blx	r3
 80023c4:	e016      	b.n	80023f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d107      	bne.n	80023e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0208 	bic.w	r2, r2, #8
 80023e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f8:	2220      	movs	r2, #32
 80023fa:	409a      	lsls	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4013      	ands	r3, r2
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 808e 	beq.w	8002522 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0310 	and.w	r3, r3, #16
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 8086 	beq.w	8002522 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241a:	2220      	movs	r2, #32
 800241c:	409a      	lsls	r2, r3
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b05      	cmp	r3, #5
 800242c:	d136      	bne.n	800249c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0216 	bic.w	r2, r2, #22
 800243c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	695a      	ldr	r2, [r3, #20]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800244c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	2b00      	cmp	r3, #0
 8002454:	d103      	bne.n	800245e <HAL_DMA_IRQHandler+0x1da>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800245a:	2b00      	cmp	r3, #0
 800245c:	d007      	beq.n	800246e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0208 	bic.w	r2, r2, #8
 800246c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002472:	223f      	movs	r2, #63	; 0x3f
 8002474:	409a      	lsls	r2, r3
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800248e:	2b00      	cmp	r3, #0
 8002490:	d07d      	beq.n	800258e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	4798      	blx	r3
        }
        return;
 800249a:	e078      	b.n	800258e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d01c      	beq.n	80024e4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d108      	bne.n	80024ca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d030      	beq.n	8002522 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	4798      	blx	r3
 80024c8:	e02b      	b.n	8002522 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d027      	beq.n	8002522 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	4798      	blx	r3
 80024da:	e022      	b.n	8002522 <HAL_DMA_IRQHandler+0x29e>
 80024dc:	20000000 	.word	0x20000000
 80024e0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10f      	bne.n	8002512 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0210 	bic.w	r2, r2, #16
 8002500:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002526:	2b00      	cmp	r3, #0
 8002528:	d032      	beq.n	8002590 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d022      	beq.n	800257c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2205      	movs	r2, #5
 800253a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0201 	bic.w	r2, r2, #1
 800254c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	3301      	adds	r3, #1
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	429a      	cmp	r2, r3
 8002558:	d307      	bcc.n	800256a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1f2      	bne.n	800254e <HAL_DMA_IRQHandler+0x2ca>
 8002568:	e000      	b.n	800256c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800256a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	4798      	blx	r3
 800258c:	e000      	b.n	8002590 <HAL_DMA_IRQHandler+0x30c>
        return;
 800258e:	bf00      	nop
    }
  }
}
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop

08002598 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	3b10      	subs	r3, #16
 80025a8:	4a14      	ldr	r2, [pc, #80]	; (80025fc <DMA_CalcBaseAndBitshift+0x64>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	091b      	lsrs	r3, r3, #4
 80025b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025b2:	4a13      	ldr	r2, [pc, #76]	; (8002600 <DMA_CalcBaseAndBitshift+0x68>)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4413      	add	r3, r2
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	d909      	bls.n	80025da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025ce:	f023 0303 	bic.w	r3, r3, #3
 80025d2:	1d1a      	adds	r2, r3, #4
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	659a      	str	r2, [r3, #88]	; 0x58
 80025d8:	e007      	b.n	80025ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025e2:	f023 0303 	bic.w	r3, r3, #3
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	aaaaaaab 	.word	0xaaaaaaab
 8002600:	08004758 	.word	0x08004758

08002604 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002614:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d11f      	bne.n	800265e <DMA_CheckFifoParam+0x5a>
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2b03      	cmp	r3, #3
 8002622:	d856      	bhi.n	80026d2 <DMA_CheckFifoParam+0xce>
 8002624:	a201      	add	r2, pc, #4	; (adr r2, 800262c <DMA_CheckFifoParam+0x28>)
 8002626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262a:	bf00      	nop
 800262c:	0800263d 	.word	0x0800263d
 8002630:	0800264f 	.word	0x0800264f
 8002634:	0800263d 	.word	0x0800263d
 8002638:	080026d3 	.word	0x080026d3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d046      	beq.n	80026d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800264c:	e043      	b.n	80026d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002652:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002656:	d140      	bne.n	80026da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800265c:	e03d      	b.n	80026da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002666:	d121      	bne.n	80026ac <DMA_CheckFifoParam+0xa8>
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b03      	cmp	r3, #3
 800266c:	d837      	bhi.n	80026de <DMA_CheckFifoParam+0xda>
 800266e:	a201      	add	r2, pc, #4	; (adr r2, 8002674 <DMA_CheckFifoParam+0x70>)
 8002670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002674:	08002685 	.word	0x08002685
 8002678:	0800268b 	.word	0x0800268b
 800267c:	08002685 	.word	0x08002685
 8002680:	0800269d 	.word	0x0800269d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	73fb      	strb	r3, [r7, #15]
      break;
 8002688:	e030      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d025      	beq.n	80026e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800269a:	e022      	b.n	80026e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026a4:	d11f      	bne.n	80026e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026aa:	e01c      	b.n	80026e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d903      	bls.n	80026ba <DMA_CheckFifoParam+0xb6>
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d003      	beq.n	80026c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026b8:	e018      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	73fb      	strb	r3, [r7, #15]
      break;
 80026be:	e015      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00e      	beq.n	80026ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
      break;
 80026d0:	e00b      	b.n	80026ea <DMA_CheckFifoParam+0xe6>
      break;
 80026d2:	bf00      	nop
 80026d4:	e00a      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
      break;
 80026d6:	bf00      	nop
 80026d8:	e008      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
      break;
 80026da:	bf00      	nop
 80026dc:	e006      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
      break;
 80026de:	bf00      	nop
 80026e0:	e004      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
      break;
 80026e2:	bf00      	nop
 80026e4:	e002      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
      break;   
 80026e6:	bf00      	nop
 80026e8:	e000      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
      break;
 80026ea:	bf00      	nop
    }
  } 
  
  return status; 
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop

080026fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b089      	sub	sp, #36	; 0x24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002706:	2300      	movs	r3, #0
 8002708:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800270a:	2300      	movs	r3, #0
 800270c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800270e:	2300      	movs	r3, #0
 8002710:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002712:	2300      	movs	r3, #0
 8002714:	61fb      	str	r3, [r7, #28]
 8002716:	e159      	b.n	80029cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002718:	2201      	movs	r2, #1
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	4013      	ands	r3, r2
 800272a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	429a      	cmp	r2, r3
 8002732:	f040 8148 	bne.w	80029c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	2b01      	cmp	r3, #1
 8002740:	d005      	beq.n	800274e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800274a:	2b02      	cmp	r3, #2
 800274c:	d130      	bne.n	80027b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	2203      	movs	r2, #3
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43db      	mvns	r3, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4013      	ands	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002784:	2201      	movs	r2, #1
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	091b      	lsrs	r3, r3, #4
 800279a:	f003 0201 	and.w	r2, r3, #1
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 0303 	and.w	r3, r3, #3
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	d017      	beq.n	80027ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	2203      	movs	r2, #3
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 0303 	and.w	r3, r3, #3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d123      	bne.n	8002840 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	08da      	lsrs	r2, r3, #3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3208      	adds	r2, #8
 8002800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002804:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	220f      	movs	r2, #15
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	691a      	ldr	r2, [r3, #16]
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	08da      	lsrs	r2, r3, #3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3208      	adds	r2, #8
 800283a:	69b9      	ldr	r1, [r7, #24]
 800283c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	2203      	movs	r2, #3
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 0203 	and.w	r2, r3, #3
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4313      	orrs	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 80a2 	beq.w	80029c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	4b57      	ldr	r3, [pc, #348]	; (80029e4 <HAL_GPIO_Init+0x2e8>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	4a56      	ldr	r2, [pc, #344]	; (80029e4 <HAL_GPIO_Init+0x2e8>)
 800288c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002890:	6453      	str	r3, [r2, #68]	; 0x44
 8002892:	4b54      	ldr	r3, [pc, #336]	; (80029e4 <HAL_GPIO_Init+0x2e8>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800289e:	4a52      	ldr	r2, [pc, #328]	; (80029e8 <HAL_GPIO_Init+0x2ec>)
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	089b      	lsrs	r3, r3, #2
 80028a4:	3302      	adds	r3, #2
 80028a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	220f      	movs	r2, #15
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43db      	mvns	r3, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4013      	ands	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a49      	ldr	r2, [pc, #292]	; (80029ec <HAL_GPIO_Init+0x2f0>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d019      	beq.n	80028fe <HAL_GPIO_Init+0x202>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a48      	ldr	r2, [pc, #288]	; (80029f0 <HAL_GPIO_Init+0x2f4>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d013      	beq.n	80028fa <HAL_GPIO_Init+0x1fe>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a47      	ldr	r2, [pc, #284]	; (80029f4 <HAL_GPIO_Init+0x2f8>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d00d      	beq.n	80028f6 <HAL_GPIO_Init+0x1fa>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a46      	ldr	r2, [pc, #280]	; (80029f8 <HAL_GPIO_Init+0x2fc>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d007      	beq.n	80028f2 <HAL_GPIO_Init+0x1f6>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a45      	ldr	r2, [pc, #276]	; (80029fc <HAL_GPIO_Init+0x300>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d101      	bne.n	80028ee <HAL_GPIO_Init+0x1f2>
 80028ea:	2304      	movs	r3, #4
 80028ec:	e008      	b.n	8002900 <HAL_GPIO_Init+0x204>
 80028ee:	2307      	movs	r3, #7
 80028f0:	e006      	b.n	8002900 <HAL_GPIO_Init+0x204>
 80028f2:	2303      	movs	r3, #3
 80028f4:	e004      	b.n	8002900 <HAL_GPIO_Init+0x204>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e002      	b.n	8002900 <HAL_GPIO_Init+0x204>
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <HAL_GPIO_Init+0x204>
 80028fe:	2300      	movs	r3, #0
 8002900:	69fa      	ldr	r2, [r7, #28]
 8002902:	f002 0203 	and.w	r2, r2, #3
 8002906:	0092      	lsls	r2, r2, #2
 8002908:	4093      	lsls	r3, r2
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4313      	orrs	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002910:	4935      	ldr	r1, [pc, #212]	; (80029e8 <HAL_GPIO_Init+0x2ec>)
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	089b      	lsrs	r3, r3, #2
 8002916:	3302      	adds	r3, #2
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800291e:	4b38      	ldr	r3, [pc, #224]	; (8002a00 <HAL_GPIO_Init+0x304>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	43db      	mvns	r3, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4013      	ands	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002942:	4a2f      	ldr	r2, [pc, #188]	; (8002a00 <HAL_GPIO_Init+0x304>)
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002948:	4b2d      	ldr	r3, [pc, #180]	; (8002a00 <HAL_GPIO_Init+0x304>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	4313      	orrs	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800296c:	4a24      	ldr	r2, [pc, #144]	; (8002a00 <HAL_GPIO_Init+0x304>)
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002972:	4b23      	ldr	r3, [pc, #140]	; (8002a00 <HAL_GPIO_Init+0x304>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	43db      	mvns	r3, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4013      	ands	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	4313      	orrs	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002996:	4a1a      	ldr	r2, [pc, #104]	; (8002a00 <HAL_GPIO_Init+0x304>)
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800299c:	4b18      	ldr	r3, [pc, #96]	; (8002a00 <HAL_GPIO_Init+0x304>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	43db      	mvns	r3, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4013      	ands	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4313      	orrs	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029c0:	4a0f      	ldr	r2, [pc, #60]	; (8002a00 <HAL_GPIO_Init+0x304>)
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	3301      	adds	r3, #1
 80029ca:	61fb      	str	r3, [r7, #28]
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	2b0f      	cmp	r3, #15
 80029d0:	f67f aea2 	bls.w	8002718 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029d4:	bf00      	nop
 80029d6:	bf00      	nop
 80029d8:	3724      	adds	r7, #36	; 0x24
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	40023800 	.word	0x40023800
 80029e8:	40013800 	.word	0x40013800
 80029ec:	40020000 	.word	0x40020000
 80029f0:	40020400 	.word	0x40020400
 80029f4:	40020800 	.word	0x40020800
 80029f8:	40020c00 	.word	0x40020c00
 80029fc:	40021000 	.word	0x40021000
 8002a00:	40013c00 	.word	0x40013c00

08002a04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e12b      	b.n	8002c6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7fe f822 	bl	8000a74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2224      	movs	r2, #36	; 0x24
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0201 	bic.w	r2, r2, #1
 8002a46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a68:	f000 fd5c 	bl	8003524 <HAL_RCC_GetPCLK1Freq>
 8002a6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	4a81      	ldr	r2, [pc, #516]	; (8002c78 <HAL_I2C_Init+0x274>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d807      	bhi.n	8002a88 <HAL_I2C_Init+0x84>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4a80      	ldr	r2, [pc, #512]	; (8002c7c <HAL_I2C_Init+0x278>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	bf94      	ite	ls
 8002a80:	2301      	movls	r3, #1
 8002a82:	2300      	movhi	r3, #0
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	e006      	b.n	8002a96 <HAL_I2C_Init+0x92>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4a7d      	ldr	r2, [pc, #500]	; (8002c80 <HAL_I2C_Init+0x27c>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	bf94      	ite	ls
 8002a90:	2301      	movls	r3, #1
 8002a92:	2300      	movhi	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e0e7      	b.n	8002c6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	4a78      	ldr	r2, [pc, #480]	; (8002c84 <HAL_I2C_Init+0x280>)
 8002aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa6:	0c9b      	lsrs	r3, r3, #18
 8002aa8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	4a6a      	ldr	r2, [pc, #424]	; (8002c78 <HAL_I2C_Init+0x274>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d802      	bhi.n	8002ad8 <HAL_I2C_Init+0xd4>
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	e009      	b.n	8002aec <HAL_I2C_Init+0xe8>
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ade:	fb02 f303 	mul.w	r3, r2, r3
 8002ae2:	4a69      	ldr	r2, [pc, #420]	; (8002c88 <HAL_I2C_Init+0x284>)
 8002ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae8:	099b      	lsrs	r3, r3, #6
 8002aea:	3301      	adds	r3, #1
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	430b      	orrs	r3, r1
 8002af2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002afe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	495c      	ldr	r1, [pc, #368]	; (8002c78 <HAL_I2C_Init+0x274>)
 8002b08:	428b      	cmp	r3, r1
 8002b0a:	d819      	bhi.n	8002b40 <HAL_I2C_Init+0x13c>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	1e59      	subs	r1, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b1a:	1c59      	adds	r1, r3, #1
 8002b1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b20:	400b      	ands	r3, r1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00a      	beq.n	8002b3c <HAL_I2C_Init+0x138>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1e59      	subs	r1, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b34:	3301      	adds	r3, #1
 8002b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b3a:	e051      	b.n	8002be0 <HAL_I2C_Init+0x1dc>
 8002b3c:	2304      	movs	r3, #4
 8002b3e:	e04f      	b.n	8002be0 <HAL_I2C_Init+0x1dc>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d111      	bne.n	8002b6c <HAL_I2C_Init+0x168>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	1e58      	subs	r0, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6859      	ldr	r1, [r3, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	440b      	add	r3, r1
 8002b56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	bf0c      	ite	eq
 8002b64:	2301      	moveq	r3, #1
 8002b66:	2300      	movne	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	e012      	b.n	8002b92 <HAL_I2C_Init+0x18e>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	1e58      	subs	r0, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6859      	ldr	r1, [r3, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	0099      	lsls	r1, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b82:	3301      	adds	r3, #1
 8002b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	bf0c      	ite	eq
 8002b8c:	2301      	moveq	r3, #1
 8002b8e:	2300      	movne	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_I2C_Init+0x196>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e022      	b.n	8002be0 <HAL_I2C_Init+0x1dc>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10e      	bne.n	8002bc0 <HAL_I2C_Init+0x1bc>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1e58      	subs	r0, r3, #1
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6859      	ldr	r1, [r3, #4]
 8002baa:	460b      	mov	r3, r1
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	440b      	add	r3, r1
 8002bb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bbe:	e00f      	b.n	8002be0 <HAL_I2C_Init+0x1dc>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	1e58      	subs	r0, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6859      	ldr	r1, [r3, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	0099      	lsls	r1, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	6809      	ldr	r1, [r1, #0]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69da      	ldr	r2, [r3, #28]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6911      	ldr	r1, [r2, #16]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68d2      	ldr	r2, [r2, #12]
 8002c1a:	4311      	orrs	r1, r2
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	430b      	orrs	r3, r1
 8002c22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695a      	ldr	r2, [r3, #20]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0201 	orr.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	000186a0 	.word	0x000186a0
 8002c7c:	001e847f 	.word	0x001e847f
 8002c80:	003d08ff 	.word	0x003d08ff
 8002c84:	431bde83 	.word	0x431bde83
 8002c88:	10624dd3 	.word	0x10624dd3

08002c8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e264      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d075      	beq.n	8002d96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002caa:	4ba3      	ldr	r3, [pc, #652]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d00c      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cb6:	4ba0      	ldr	r3, [pc, #640]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d112      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cc2:	4b9d      	ldr	r3, [pc, #628]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cce:	d10b      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd0:	4b99      	ldr	r3, [pc, #612]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d05b      	beq.n	8002d94 <HAL_RCC_OscConfig+0x108>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d157      	bne.n	8002d94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e23f      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf0:	d106      	bne.n	8002d00 <HAL_RCC_OscConfig+0x74>
 8002cf2:	4b91      	ldr	r3, [pc, #580]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a90      	ldr	r2, [pc, #576]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	e01d      	b.n	8002d3c <HAL_RCC_OscConfig+0xb0>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d08:	d10c      	bne.n	8002d24 <HAL_RCC_OscConfig+0x98>
 8002d0a:	4b8b      	ldr	r3, [pc, #556]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a8a      	ldr	r2, [pc, #552]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	4b88      	ldr	r3, [pc, #544]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a87      	ldr	r2, [pc, #540]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	e00b      	b.n	8002d3c <HAL_RCC_OscConfig+0xb0>
 8002d24:	4b84      	ldr	r3, [pc, #528]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a83      	ldr	r2, [pc, #524]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	4b81      	ldr	r3, [pc, #516]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a80      	ldr	r2, [pc, #512]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d013      	beq.n	8002d6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d44:	f7fe fccc 	bl	80016e0 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d4c:	f7fe fcc8 	bl	80016e0 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b64      	cmp	r3, #100	; 0x64
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e204      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5e:	4b76      	ldr	r3, [pc, #472]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0xc0>
 8002d6a:	e014      	b.n	8002d96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6c:	f7fe fcb8 	bl	80016e0 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d74:	f7fe fcb4 	bl	80016e0 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b64      	cmp	r3, #100	; 0x64
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e1f0      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d86:	4b6c      	ldr	r3, [pc, #432]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0xe8>
 8002d92:	e000      	b.n	8002d96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d063      	beq.n	8002e6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002da2:	4b65      	ldr	r3, [pc, #404]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00b      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dae:	4b62      	ldr	r3, [pc, #392]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d11c      	bne.n	8002df4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dba:	4b5f      	ldr	r3, [pc, #380]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d116      	bne.n	8002df4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc6:	4b5c      	ldr	r3, [pc, #368]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d005      	beq.n	8002dde <HAL_RCC_OscConfig+0x152>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d001      	beq.n	8002dde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e1c4      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dde:	4b56      	ldr	r3, [pc, #344]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	4952      	ldr	r1, [pc, #328]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002df2:	e03a      	b.n	8002e6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d020      	beq.n	8002e3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dfc:	4b4f      	ldr	r3, [pc, #316]	; (8002f3c <HAL_RCC_OscConfig+0x2b0>)
 8002dfe:	2201      	movs	r2, #1
 8002e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e02:	f7fe fc6d 	bl	80016e0 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e0a:	f7fe fc69 	bl	80016e0 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e1a5      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1c:	4b46      	ldr	r3, [pc, #280]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0f0      	beq.n	8002e0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e28:	4b43      	ldr	r3, [pc, #268]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4940      	ldr	r1, [pc, #256]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	600b      	str	r3, [r1, #0]
 8002e3c:	e015      	b.n	8002e6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e3e:	4b3f      	ldr	r3, [pc, #252]	; (8002f3c <HAL_RCC_OscConfig+0x2b0>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7fe fc4c 	bl	80016e0 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e4c:	f7fe fc48 	bl	80016e0 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e184      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5e:	4b36      	ldr	r3, [pc, #216]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d030      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d016      	beq.n	8002eac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e7e:	4b30      	ldr	r3, [pc, #192]	; (8002f40 <HAL_RCC_OscConfig+0x2b4>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e84:	f7fe fc2c 	bl	80016e0 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e8c:	f7fe fc28 	bl	80016e0 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e164      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9e:	4b26      	ldr	r3, [pc, #152]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0x200>
 8002eaa:	e015      	b.n	8002ed8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eac:	4b24      	ldr	r3, [pc, #144]	; (8002f40 <HAL_RCC_OscConfig+0x2b4>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb2:	f7fe fc15 	bl	80016e0 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eba:	f7fe fc11 	bl	80016e0 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e14d      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ecc:	4b1a      	ldr	r3, [pc, #104]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1f0      	bne.n	8002eba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 80a0 	beq.w	8003026 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eea:	4b13      	ldr	r3, [pc, #76]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10f      	bne.n	8002f16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	4b0f      	ldr	r3, [pc, #60]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	4a0e      	ldr	r2, [pc, #56]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f04:	6413      	str	r3, [r2, #64]	; 0x40
 8002f06:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f12:	2301      	movs	r3, #1
 8002f14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f16:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <HAL_RCC_OscConfig+0x2b8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d121      	bne.n	8002f66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f22:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <HAL_RCC_OscConfig+0x2b8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a07      	ldr	r2, [pc, #28]	; (8002f44 <HAL_RCC_OscConfig+0x2b8>)
 8002f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f2e:	f7fe fbd7 	bl	80016e0 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f34:	e011      	b.n	8002f5a <HAL_RCC_OscConfig+0x2ce>
 8002f36:	bf00      	nop
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	42470000 	.word	0x42470000
 8002f40:	42470e80 	.word	0x42470e80
 8002f44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f48:	f7fe fbca 	bl	80016e0 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e106      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5a:	4b85      	ldr	r3, [pc, #532]	; (8003170 <HAL_RCC_OscConfig+0x4e4>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0f0      	beq.n	8002f48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d106      	bne.n	8002f7c <HAL_RCC_OscConfig+0x2f0>
 8002f6e:	4b81      	ldr	r3, [pc, #516]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8002f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f72:	4a80      	ldr	r2, [pc, #512]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7a:	e01c      	b.n	8002fb6 <HAL_RCC_OscConfig+0x32a>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b05      	cmp	r3, #5
 8002f82:	d10c      	bne.n	8002f9e <HAL_RCC_OscConfig+0x312>
 8002f84:	4b7b      	ldr	r3, [pc, #492]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8002f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f88:	4a7a      	ldr	r2, [pc, #488]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8002f8a:	f043 0304 	orr.w	r3, r3, #4
 8002f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f90:	4b78      	ldr	r3, [pc, #480]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8002f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f94:	4a77      	ldr	r2, [pc, #476]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f9c:	e00b      	b.n	8002fb6 <HAL_RCC_OscConfig+0x32a>
 8002f9e:	4b75      	ldr	r3, [pc, #468]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa2:	4a74      	ldr	r2, [pc, #464]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8002fa4:	f023 0301 	bic.w	r3, r3, #1
 8002fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8002faa:	4b72      	ldr	r3, [pc, #456]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8002fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fae:	4a71      	ldr	r2, [pc, #452]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8002fb0:	f023 0304 	bic.w	r3, r3, #4
 8002fb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d015      	beq.n	8002fea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fbe:	f7fe fb8f 	bl	80016e0 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc4:	e00a      	b.n	8002fdc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fc6:	f7fe fb8b 	bl	80016e0 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e0c5      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fdc:	4b65      	ldr	r3, [pc, #404]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8002fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0ee      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x33a>
 8002fe8:	e014      	b.n	8003014 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fea:	f7fe fb79 	bl	80016e0 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff0:	e00a      	b.n	8003008 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ff2:	f7fe fb75 	bl	80016e0 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003000:	4293      	cmp	r3, r2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e0af      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003008:	4b5a      	ldr	r3, [pc, #360]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1ee      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003014:	7dfb      	ldrb	r3, [r7, #23]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d105      	bne.n	8003026 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800301a:	4b56      	ldr	r3, [pc, #344]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	4a55      	ldr	r2, [pc, #340]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8003020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003024:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 809b 	beq.w	8003166 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003030:	4b50      	ldr	r3, [pc, #320]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 030c 	and.w	r3, r3, #12
 8003038:	2b08      	cmp	r3, #8
 800303a:	d05c      	beq.n	80030f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d141      	bne.n	80030c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003044:	4b4c      	ldr	r3, [pc, #304]	; (8003178 <HAL_RCC_OscConfig+0x4ec>)
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304a:	f7fe fb49 	bl	80016e0 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003052:	f7fe fb45 	bl	80016e0 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e081      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003064:	4b43      	ldr	r3, [pc, #268]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1f0      	bne.n	8003052 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69da      	ldr	r2, [r3, #28]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	431a      	orrs	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	019b      	lsls	r3, r3, #6
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003086:	085b      	lsrs	r3, r3, #1
 8003088:	3b01      	subs	r3, #1
 800308a:	041b      	lsls	r3, r3, #16
 800308c:	431a      	orrs	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003092:	061b      	lsls	r3, r3, #24
 8003094:	4937      	ldr	r1, [pc, #220]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8003096:	4313      	orrs	r3, r2
 8003098:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800309a:	4b37      	ldr	r3, [pc, #220]	; (8003178 <HAL_RCC_OscConfig+0x4ec>)
 800309c:	2201      	movs	r2, #1
 800309e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a0:	f7fe fb1e 	bl	80016e0 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a8:	f7fe fb1a 	bl	80016e0 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e056      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ba:	4b2e      	ldr	r3, [pc, #184]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCC_OscConfig+0x41c>
 80030c6:	e04e      	b.n	8003166 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c8:	4b2b      	ldr	r3, [pc, #172]	; (8003178 <HAL_RCC_OscConfig+0x4ec>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ce:	f7fe fb07 	bl	80016e0 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d6:	f7fe fb03 	bl	80016e0 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e03f      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e8:	4b22      	ldr	r3, [pc, #136]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1f0      	bne.n	80030d6 <HAL_RCC_OscConfig+0x44a>
 80030f4:	e037      	b.n	8003166 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e032      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003102:	4b1c      	ldr	r3, [pc, #112]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d028      	beq.n	8003162 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800311a:	429a      	cmp	r2, r3
 800311c:	d121      	bne.n	8003162 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003128:	429a      	cmp	r2, r3
 800312a:	d11a      	bne.n	8003162 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003132:	4013      	ands	r3, r2
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003138:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800313a:	4293      	cmp	r3, r2
 800313c:	d111      	bne.n	8003162 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003148:	085b      	lsrs	r3, r3, #1
 800314a:	3b01      	subs	r3, #1
 800314c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800314e:	429a      	cmp	r2, r3
 8003150:	d107      	bne.n	8003162 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800315e:	429a      	cmp	r2, r3
 8003160:	d001      	beq.n	8003166 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40007000 	.word	0x40007000
 8003174:	40023800 	.word	0x40023800
 8003178:	42470060 	.word	0x42470060

0800317c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e0cc      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003190:	4b68      	ldr	r3, [pc, #416]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d90c      	bls.n	80031b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319e:	4b65      	ldr	r3, [pc, #404]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a6:	4b63      	ldr	r3, [pc, #396]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d001      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0b8      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d020      	beq.n	8003206 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031d0:	4b59      	ldr	r3, [pc, #356]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	4a58      	ldr	r2, [pc, #352]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031e8:	4b53      	ldr	r3, [pc, #332]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	4a52      	ldr	r2, [pc, #328]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f4:	4b50      	ldr	r3, [pc, #320]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	494d      	ldr	r1, [pc, #308]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	4313      	orrs	r3, r2
 8003204:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d044      	beq.n	800329c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d107      	bne.n	800322a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321a:	4b47      	ldr	r3, [pc, #284]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d119      	bne.n	800325a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e07f      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d003      	beq.n	800323a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003236:	2b03      	cmp	r3, #3
 8003238:	d107      	bne.n	800324a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800323a:	4b3f      	ldr	r3, [pc, #252]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e06f      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324a:	4b3b      	ldr	r3, [pc, #236]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e067      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800325a:	4b37      	ldr	r3, [pc, #220]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f023 0203 	bic.w	r2, r3, #3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	4934      	ldr	r1, [pc, #208]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	4313      	orrs	r3, r2
 800326a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800326c:	f7fe fa38 	bl	80016e0 <HAL_GetTick>
 8003270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003272:	e00a      	b.n	800328a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003274:	f7fe fa34 	bl	80016e0 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003282:	4293      	cmp	r3, r2
 8003284:	d901      	bls.n	800328a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e04f      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328a:	4b2b      	ldr	r3, [pc, #172]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 020c 	and.w	r2, r3, #12
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	429a      	cmp	r2, r3
 800329a:	d1eb      	bne.n	8003274 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800329c:	4b25      	ldr	r3, [pc, #148]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d20c      	bcs.n	80032c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032aa:	4b22      	ldr	r3, [pc, #136]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b2:	4b20      	ldr	r3, [pc, #128]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d001      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e032      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d008      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032d0:	4b19      	ldr	r3, [pc, #100]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	4916      	ldr	r1, [pc, #88]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d009      	beq.n	8003302 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ee:	4b12      	ldr	r3, [pc, #72]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	490e      	ldr	r1, [pc, #56]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003302:	f000 f821 	bl	8003348 <HAL_RCC_GetSysClockFreq>
 8003306:	4602      	mov	r2, r0
 8003308:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	091b      	lsrs	r3, r3, #4
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	490a      	ldr	r1, [pc, #40]	; (800333c <HAL_RCC_ClockConfig+0x1c0>)
 8003314:	5ccb      	ldrb	r3, [r1, r3]
 8003316:	fa22 f303 	lsr.w	r3, r2, r3
 800331a:	4a09      	ldr	r2, [pc, #36]	; (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 800331c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800331e:	4b09      	ldr	r3, [pc, #36]	; (8003344 <HAL_RCC_ClockConfig+0x1c8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f7fe f998 	bl	8001658 <HAL_InitTick>

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40023c00 	.word	0x40023c00
 8003338:	40023800 	.word	0x40023800
 800333c:	08004740 	.word	0x08004740
 8003340:	20000000 	.word	0x20000000
 8003344:	20000004 	.word	0x20000004

08003348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003348:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800334c:	b084      	sub	sp, #16
 800334e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	607b      	str	r3, [r7, #4]
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	2300      	movs	r3, #0
 800335a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003360:	4b67      	ldr	r3, [pc, #412]	; (8003500 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 030c 	and.w	r3, r3, #12
 8003368:	2b08      	cmp	r3, #8
 800336a:	d00d      	beq.n	8003388 <HAL_RCC_GetSysClockFreq+0x40>
 800336c:	2b08      	cmp	r3, #8
 800336e:	f200 80bd 	bhi.w	80034ec <HAL_RCC_GetSysClockFreq+0x1a4>
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <HAL_RCC_GetSysClockFreq+0x34>
 8003376:	2b04      	cmp	r3, #4
 8003378:	d003      	beq.n	8003382 <HAL_RCC_GetSysClockFreq+0x3a>
 800337a:	e0b7      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800337c:	4b61      	ldr	r3, [pc, #388]	; (8003504 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800337e:	60bb      	str	r3, [r7, #8]
       break;
 8003380:	e0b7      	b.n	80034f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003382:	4b61      	ldr	r3, [pc, #388]	; (8003508 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003384:	60bb      	str	r3, [r7, #8]
      break;
 8003386:	e0b4      	b.n	80034f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003388:	4b5d      	ldr	r3, [pc, #372]	; (8003500 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003390:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003392:	4b5b      	ldr	r3, [pc, #364]	; (8003500 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d04d      	beq.n	800343a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800339e:	4b58      	ldr	r3, [pc, #352]	; (8003500 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	099b      	lsrs	r3, r3, #6
 80033a4:	461a      	mov	r2, r3
 80033a6:	f04f 0300 	mov.w	r3, #0
 80033aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033ae:	f04f 0100 	mov.w	r1, #0
 80033b2:	ea02 0800 	and.w	r8, r2, r0
 80033b6:	ea03 0901 	and.w	r9, r3, r1
 80033ba:	4640      	mov	r0, r8
 80033bc:	4649      	mov	r1, r9
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	f04f 0300 	mov.w	r3, #0
 80033c6:	014b      	lsls	r3, r1, #5
 80033c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033cc:	0142      	lsls	r2, r0, #5
 80033ce:	4610      	mov	r0, r2
 80033d0:	4619      	mov	r1, r3
 80033d2:	ebb0 0008 	subs.w	r0, r0, r8
 80033d6:	eb61 0109 	sbc.w	r1, r1, r9
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	f04f 0300 	mov.w	r3, #0
 80033e2:	018b      	lsls	r3, r1, #6
 80033e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033e8:	0182      	lsls	r2, r0, #6
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	eb63 0301 	sbc.w	r3, r3, r1
 80033f0:	f04f 0000 	mov.w	r0, #0
 80033f4:	f04f 0100 	mov.w	r1, #0
 80033f8:	00d9      	lsls	r1, r3, #3
 80033fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033fe:	00d0      	lsls	r0, r2, #3
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	eb12 0208 	adds.w	r2, r2, r8
 8003408:	eb43 0309 	adc.w	r3, r3, r9
 800340c:	f04f 0000 	mov.w	r0, #0
 8003410:	f04f 0100 	mov.w	r1, #0
 8003414:	0259      	lsls	r1, r3, #9
 8003416:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800341a:	0250      	lsls	r0, r2, #9
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	4610      	mov	r0, r2
 8003422:	4619      	mov	r1, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	461a      	mov	r2, r3
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	f7fc fed2 	bl	80001d4 <__aeabi_uldivmod>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	4613      	mov	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	e04a      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800343a:	4b31      	ldr	r3, [pc, #196]	; (8003500 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	099b      	lsrs	r3, r3, #6
 8003440:	461a      	mov	r2, r3
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	f240 10ff 	movw	r0, #511	; 0x1ff
 800344a:	f04f 0100 	mov.w	r1, #0
 800344e:	ea02 0400 	and.w	r4, r2, r0
 8003452:	ea03 0501 	and.w	r5, r3, r1
 8003456:	4620      	mov	r0, r4
 8003458:	4629      	mov	r1, r5
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	f04f 0300 	mov.w	r3, #0
 8003462:	014b      	lsls	r3, r1, #5
 8003464:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003468:	0142      	lsls	r2, r0, #5
 800346a:	4610      	mov	r0, r2
 800346c:	4619      	mov	r1, r3
 800346e:	1b00      	subs	r0, r0, r4
 8003470:	eb61 0105 	sbc.w	r1, r1, r5
 8003474:	f04f 0200 	mov.w	r2, #0
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	018b      	lsls	r3, r1, #6
 800347e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003482:	0182      	lsls	r2, r0, #6
 8003484:	1a12      	subs	r2, r2, r0
 8003486:	eb63 0301 	sbc.w	r3, r3, r1
 800348a:	f04f 0000 	mov.w	r0, #0
 800348e:	f04f 0100 	mov.w	r1, #0
 8003492:	00d9      	lsls	r1, r3, #3
 8003494:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003498:	00d0      	lsls	r0, r2, #3
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	1912      	adds	r2, r2, r4
 80034a0:	eb45 0303 	adc.w	r3, r5, r3
 80034a4:	f04f 0000 	mov.w	r0, #0
 80034a8:	f04f 0100 	mov.w	r1, #0
 80034ac:	0299      	lsls	r1, r3, #10
 80034ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80034b2:	0290      	lsls	r0, r2, #10
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	4610      	mov	r0, r2
 80034ba:	4619      	mov	r1, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	461a      	mov	r2, r3
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	f7fc fe86 	bl	80001d4 <__aeabi_uldivmod>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4613      	mov	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034d0:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	0c1b      	lsrs	r3, r3, #16
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	3301      	adds	r3, #1
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e8:	60bb      	str	r3, [r7, #8]
      break;
 80034ea:	e002      	b.n	80034f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034ec:	4b05      	ldr	r3, [pc, #20]	; (8003504 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80034ee:	60bb      	str	r3, [r7, #8]
      break;
 80034f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034f2:	68bb      	ldr	r3, [r7, #8]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80034fe:	bf00      	nop
 8003500:	40023800 	.word	0x40023800
 8003504:	00f42400 	.word	0x00f42400
 8003508:	007a1200 	.word	0x007a1200

0800350c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003510:	4b03      	ldr	r3, [pc, #12]	; (8003520 <HAL_RCC_GetHCLKFreq+0x14>)
 8003512:	681b      	ldr	r3, [r3, #0]
}
 8003514:	4618      	mov	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	20000000 	.word	0x20000000

08003524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003528:	f7ff fff0 	bl	800350c <HAL_RCC_GetHCLKFreq>
 800352c:	4602      	mov	r2, r0
 800352e:	4b05      	ldr	r3, [pc, #20]	; (8003544 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	0a9b      	lsrs	r3, r3, #10
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	4903      	ldr	r1, [pc, #12]	; (8003548 <HAL_RCC_GetPCLK1Freq+0x24>)
 800353a:	5ccb      	ldrb	r3, [r1, r3]
 800353c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003540:	4618      	mov	r0, r3
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40023800 	.word	0x40023800
 8003548:	08004750 	.word	0x08004750

0800354c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003550:	f7ff ffdc 	bl	800350c <HAL_RCC_GetHCLKFreq>
 8003554:	4602      	mov	r2, r0
 8003556:	4b05      	ldr	r3, [pc, #20]	; (800356c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	0b5b      	lsrs	r3, r3, #13
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	4903      	ldr	r1, [pc, #12]	; (8003570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003562:	5ccb      	ldrb	r3, [r1, r3]
 8003564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003568:	4618      	mov	r0, r3
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40023800 	.word	0x40023800
 8003570:	08004750 	.word	0x08004750

08003574 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e041      	b.n	800360a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d106      	bne.n	80035a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7fd fe10 	bl	80011c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2202      	movs	r2, #2
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3304      	adds	r3, #4
 80035b0:	4619      	mov	r1, r3
 80035b2:	4610      	mov	r0, r2
 80035b4:	f000 fab6 	bl	8003b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b082      	sub	sp, #8
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e041      	b.n	80036a8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	d106      	bne.n	800363e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7fd fe7b 	bl	8001334 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2202      	movs	r2, #2
 8003642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3304      	adds	r3, #4
 800364e:	4619      	mov	r1, r3
 8003650:	4610      	mov	r0, r2
 8003652:	f000 fa67 	bl	8003b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d109      	bne.n	80036d4 <HAL_TIM_PWM_Start+0x24>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	bf14      	ite	ne
 80036cc:	2301      	movne	r3, #1
 80036ce:	2300      	moveq	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	e022      	b.n	800371a <HAL_TIM_PWM_Start+0x6a>
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d109      	bne.n	80036ee <HAL_TIM_PWM_Start+0x3e>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	bf14      	ite	ne
 80036e6:	2301      	movne	r3, #1
 80036e8:	2300      	moveq	r3, #0
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	e015      	b.n	800371a <HAL_TIM_PWM_Start+0x6a>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	d109      	bne.n	8003708 <HAL_TIM_PWM_Start+0x58>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	bf14      	ite	ne
 8003700:	2301      	movne	r3, #1
 8003702:	2300      	moveq	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	e008      	b.n	800371a <HAL_TIM_PWM_Start+0x6a>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b01      	cmp	r3, #1
 8003712:	bf14      	ite	ne
 8003714:	2301      	movne	r3, #1
 8003716:	2300      	moveq	r3, #0
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e068      	b.n	80037f4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d104      	bne.n	8003732 <HAL_TIM_PWM_Start+0x82>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003730:	e013      	b.n	800375a <HAL_TIM_PWM_Start+0xaa>
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	2b04      	cmp	r3, #4
 8003736:	d104      	bne.n	8003742 <HAL_TIM_PWM_Start+0x92>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003740:	e00b      	b.n	800375a <HAL_TIM_PWM_Start+0xaa>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	2b08      	cmp	r3, #8
 8003746:	d104      	bne.n	8003752 <HAL_TIM_PWM_Start+0xa2>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003750:	e003      	b.n	800375a <HAL_TIM_PWM_Start+0xaa>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2202      	movs	r2, #2
 8003756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2201      	movs	r2, #1
 8003760:	6839      	ldr	r1, [r7, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f000 fc84 	bl	8004070 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a23      	ldr	r2, [pc, #140]	; (80037fc <HAL_TIM_PWM_Start+0x14c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d107      	bne.n	8003782 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003780:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a1d      	ldr	r2, [pc, #116]	; (80037fc <HAL_TIM_PWM_Start+0x14c>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d018      	beq.n	80037be <HAL_TIM_PWM_Start+0x10e>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003794:	d013      	beq.n	80037be <HAL_TIM_PWM_Start+0x10e>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a19      	ldr	r2, [pc, #100]	; (8003800 <HAL_TIM_PWM_Start+0x150>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d00e      	beq.n	80037be <HAL_TIM_PWM_Start+0x10e>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a17      	ldr	r2, [pc, #92]	; (8003804 <HAL_TIM_PWM_Start+0x154>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d009      	beq.n	80037be <HAL_TIM_PWM_Start+0x10e>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a16      	ldr	r2, [pc, #88]	; (8003808 <HAL_TIM_PWM_Start+0x158>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d004      	beq.n	80037be <HAL_TIM_PWM_Start+0x10e>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a14      	ldr	r2, [pc, #80]	; (800380c <HAL_TIM_PWM_Start+0x15c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d111      	bne.n	80037e2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2b06      	cmp	r3, #6
 80037ce:	d010      	beq.n	80037f2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0201 	orr.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e0:	e007      	b.n	80037f2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f042 0201 	orr.w	r2, r2, #1
 80037f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40010000 	.word	0x40010000
 8003800:	40000400 	.word	0x40000400
 8003804:	40000800 	.word	0x40000800
 8003808:	40000c00 	.word	0x40000c00
 800380c:	40014000 	.word	0x40014000

08003810 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800381c:	2300      	movs	r3, #0
 800381e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800382a:	2302      	movs	r3, #2
 800382c:	e0ae      	b.n	800398c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b0c      	cmp	r3, #12
 800383a:	f200 809f 	bhi.w	800397c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800383e:	a201      	add	r2, pc, #4	; (adr r2, 8003844 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003844:	08003879 	.word	0x08003879
 8003848:	0800397d 	.word	0x0800397d
 800384c:	0800397d 	.word	0x0800397d
 8003850:	0800397d 	.word	0x0800397d
 8003854:	080038b9 	.word	0x080038b9
 8003858:	0800397d 	.word	0x0800397d
 800385c:	0800397d 	.word	0x0800397d
 8003860:	0800397d 	.word	0x0800397d
 8003864:	080038fb 	.word	0x080038fb
 8003868:	0800397d 	.word	0x0800397d
 800386c:	0800397d 	.word	0x0800397d
 8003870:	0800397d 	.word	0x0800397d
 8003874:	0800393b 	.word	0x0800393b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68b9      	ldr	r1, [r7, #8]
 800387e:	4618      	mov	r0, r3
 8003880:	f000 f9d0 	bl	8003c24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699a      	ldr	r2, [r3, #24]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0208 	orr.w	r2, r2, #8
 8003892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699a      	ldr	r2, [r3, #24]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0204 	bic.w	r2, r2, #4
 80038a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6999      	ldr	r1, [r3, #24]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	619a      	str	r2, [r3, #24]
      break;
 80038b6:	e064      	b.n	8003982 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68b9      	ldr	r1, [r7, #8]
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 fa16 	bl	8003cf0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699a      	ldr	r2, [r3, #24]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699a      	ldr	r2, [r3, #24]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6999      	ldr	r1, [r3, #24]
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	021a      	lsls	r2, r3, #8
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	619a      	str	r2, [r3, #24]
      break;
 80038f8:	e043      	b.n	8003982 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68b9      	ldr	r1, [r7, #8]
 8003900:	4618      	mov	r0, r3
 8003902:	f000 fa61 	bl	8003dc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	69da      	ldr	r2, [r3, #28]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 0208 	orr.w	r2, r2, #8
 8003914:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	69da      	ldr	r2, [r3, #28]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0204 	bic.w	r2, r2, #4
 8003924:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	69d9      	ldr	r1, [r3, #28]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	61da      	str	r2, [r3, #28]
      break;
 8003938:	e023      	b.n	8003982 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68b9      	ldr	r1, [r7, #8]
 8003940:	4618      	mov	r0, r3
 8003942:	f000 faab 	bl	8003e9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69da      	ldr	r2, [r3, #28]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003954:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69da      	ldr	r2, [r3, #28]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003964:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69d9      	ldr	r1, [r3, #28]
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	021a      	lsls	r2, r3, #8
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	61da      	str	r2, [r3, #28]
      break;
 800397a:	e002      	b.n	8003982 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	75fb      	strb	r3, [r7, #23]
      break;
 8003980:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800398a:	7dfb      	ldrb	r3, [r7, #23]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <HAL_TIM_ConfigClockSource+0x1c>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e0b4      	b.n	8003b1a <HAL_TIM_ConfigClockSource+0x186>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039e8:	d03e      	beq.n	8003a68 <HAL_TIM_ConfigClockSource+0xd4>
 80039ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ee:	f200 8087 	bhi.w	8003b00 <HAL_TIM_ConfigClockSource+0x16c>
 80039f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f6:	f000 8086 	beq.w	8003b06 <HAL_TIM_ConfigClockSource+0x172>
 80039fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039fe:	d87f      	bhi.n	8003b00 <HAL_TIM_ConfigClockSource+0x16c>
 8003a00:	2b70      	cmp	r3, #112	; 0x70
 8003a02:	d01a      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0xa6>
 8003a04:	2b70      	cmp	r3, #112	; 0x70
 8003a06:	d87b      	bhi.n	8003b00 <HAL_TIM_ConfigClockSource+0x16c>
 8003a08:	2b60      	cmp	r3, #96	; 0x60
 8003a0a:	d050      	beq.n	8003aae <HAL_TIM_ConfigClockSource+0x11a>
 8003a0c:	2b60      	cmp	r3, #96	; 0x60
 8003a0e:	d877      	bhi.n	8003b00 <HAL_TIM_ConfigClockSource+0x16c>
 8003a10:	2b50      	cmp	r3, #80	; 0x50
 8003a12:	d03c      	beq.n	8003a8e <HAL_TIM_ConfigClockSource+0xfa>
 8003a14:	2b50      	cmp	r3, #80	; 0x50
 8003a16:	d873      	bhi.n	8003b00 <HAL_TIM_ConfigClockSource+0x16c>
 8003a18:	2b40      	cmp	r3, #64	; 0x40
 8003a1a:	d058      	beq.n	8003ace <HAL_TIM_ConfigClockSource+0x13a>
 8003a1c:	2b40      	cmp	r3, #64	; 0x40
 8003a1e:	d86f      	bhi.n	8003b00 <HAL_TIM_ConfigClockSource+0x16c>
 8003a20:	2b30      	cmp	r3, #48	; 0x30
 8003a22:	d064      	beq.n	8003aee <HAL_TIM_ConfigClockSource+0x15a>
 8003a24:	2b30      	cmp	r3, #48	; 0x30
 8003a26:	d86b      	bhi.n	8003b00 <HAL_TIM_ConfigClockSource+0x16c>
 8003a28:	2b20      	cmp	r3, #32
 8003a2a:	d060      	beq.n	8003aee <HAL_TIM_ConfigClockSource+0x15a>
 8003a2c:	2b20      	cmp	r3, #32
 8003a2e:	d867      	bhi.n	8003b00 <HAL_TIM_ConfigClockSource+0x16c>
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d05c      	beq.n	8003aee <HAL_TIM_ConfigClockSource+0x15a>
 8003a34:	2b10      	cmp	r3, #16
 8003a36:	d05a      	beq.n	8003aee <HAL_TIM_ConfigClockSource+0x15a>
 8003a38:	e062      	b.n	8003b00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6818      	ldr	r0, [r3, #0]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	6899      	ldr	r1, [r3, #8]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f000 faf1 	bl	8004030 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	609a      	str	r2, [r3, #8]
      break;
 8003a66:	e04f      	b.n	8003b08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6818      	ldr	r0, [r3, #0]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	6899      	ldr	r1, [r3, #8]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f000 fada 	bl	8004030 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a8a:	609a      	str	r2, [r3, #8]
      break;
 8003a8c:	e03c      	b.n	8003b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6818      	ldr	r0, [r3, #0]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	6859      	ldr	r1, [r3, #4]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	f000 fa4e 	bl	8003f3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2150      	movs	r1, #80	; 0x50
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 faa7 	bl	8003ffa <TIM_ITRx_SetConfig>
      break;
 8003aac:	e02c      	b.n	8003b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	6859      	ldr	r1, [r3, #4]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	461a      	mov	r2, r3
 8003abc:	f000 fa6d 	bl	8003f9a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2160      	movs	r1, #96	; 0x60
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 fa97 	bl	8003ffa <TIM_ITRx_SetConfig>
      break;
 8003acc:	e01c      	b.n	8003b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	6859      	ldr	r1, [r3, #4]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	461a      	mov	r2, r3
 8003adc:	f000 fa2e 	bl	8003f3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2140      	movs	r1, #64	; 0x40
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 fa87 	bl	8003ffa <TIM_ITRx_SetConfig>
      break;
 8003aec:	e00c      	b.n	8003b08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4619      	mov	r1, r3
 8003af8:	4610      	mov	r0, r2
 8003afa:	f000 fa7e 	bl	8003ffa <TIM_ITRx_SetConfig>
      break;
 8003afe:	e003      	b.n	8003b08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	73fb      	strb	r3, [r7, #15]
      break;
 8003b04:	e000      	b.n	8003b08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a34      	ldr	r2, [pc, #208]	; (8003c08 <TIM_Base_SetConfig+0xe4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d00f      	beq.n	8003b5c <TIM_Base_SetConfig+0x38>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b42:	d00b      	beq.n	8003b5c <TIM_Base_SetConfig+0x38>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a31      	ldr	r2, [pc, #196]	; (8003c0c <TIM_Base_SetConfig+0xe8>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d007      	beq.n	8003b5c <TIM_Base_SetConfig+0x38>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a30      	ldr	r2, [pc, #192]	; (8003c10 <TIM_Base_SetConfig+0xec>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d003      	beq.n	8003b5c <TIM_Base_SetConfig+0x38>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a2f      	ldr	r2, [pc, #188]	; (8003c14 <TIM_Base_SetConfig+0xf0>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d108      	bne.n	8003b6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a25      	ldr	r2, [pc, #148]	; (8003c08 <TIM_Base_SetConfig+0xe4>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d01b      	beq.n	8003bae <TIM_Base_SetConfig+0x8a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b7c:	d017      	beq.n	8003bae <TIM_Base_SetConfig+0x8a>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a22      	ldr	r2, [pc, #136]	; (8003c0c <TIM_Base_SetConfig+0xe8>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d013      	beq.n	8003bae <TIM_Base_SetConfig+0x8a>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a21      	ldr	r2, [pc, #132]	; (8003c10 <TIM_Base_SetConfig+0xec>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00f      	beq.n	8003bae <TIM_Base_SetConfig+0x8a>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a20      	ldr	r2, [pc, #128]	; (8003c14 <TIM_Base_SetConfig+0xf0>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d00b      	beq.n	8003bae <TIM_Base_SetConfig+0x8a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a1f      	ldr	r2, [pc, #124]	; (8003c18 <TIM_Base_SetConfig+0xf4>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d007      	beq.n	8003bae <TIM_Base_SetConfig+0x8a>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a1e      	ldr	r2, [pc, #120]	; (8003c1c <TIM_Base_SetConfig+0xf8>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d003      	beq.n	8003bae <TIM_Base_SetConfig+0x8a>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a1d      	ldr	r2, [pc, #116]	; (8003c20 <TIM_Base_SetConfig+0xfc>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d108      	bne.n	8003bc0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a08      	ldr	r2, [pc, #32]	; (8003c08 <TIM_Base_SetConfig+0xe4>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d103      	bne.n	8003bf4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	615a      	str	r2, [r3, #20]
}
 8003bfa:	bf00      	nop
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	40010000 	.word	0x40010000
 8003c0c:	40000400 	.word	0x40000400
 8003c10:	40000800 	.word	0x40000800
 8003c14:	40000c00 	.word	0x40000c00
 8003c18:	40014000 	.word	0x40014000
 8003c1c:	40014400 	.word	0x40014400
 8003c20:	40014800 	.word	0x40014800

08003c24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b087      	sub	sp, #28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	f023 0201 	bic.w	r2, r3, #1
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 0303 	bic.w	r3, r3, #3
 8003c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f023 0302 	bic.w	r3, r3, #2
 8003c6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a1c      	ldr	r2, [pc, #112]	; (8003cec <TIM_OC1_SetConfig+0xc8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d10c      	bne.n	8003c9a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f023 0308 	bic.w	r3, r3, #8
 8003c86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f023 0304 	bic.w	r3, r3, #4
 8003c98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a13      	ldr	r2, [pc, #76]	; (8003cec <TIM_OC1_SetConfig+0xc8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d111      	bne.n	8003cc6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ca8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	621a      	str	r2, [r3, #32]
}
 8003ce0:	bf00      	nop
 8003ce2:	371c      	adds	r7, #28
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	40010000 	.word	0x40010000

08003cf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	f023 0210 	bic.w	r2, r3, #16
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	021b      	lsls	r3, r3, #8
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f023 0320 	bic.w	r3, r3, #32
 8003d3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	011b      	lsls	r3, r3, #4
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a1e      	ldr	r2, [pc, #120]	; (8003dc4 <TIM_OC2_SetConfig+0xd4>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d10d      	bne.n	8003d6c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a15      	ldr	r2, [pc, #84]	; (8003dc4 <TIM_OC2_SetConfig+0xd4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d113      	bne.n	8003d9c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	621a      	str	r2, [r3, #32]
}
 8003db6:	bf00      	nop
 8003db8:	371c      	adds	r7, #28
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40010000 	.word	0x40010000

08003dc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b087      	sub	sp, #28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 0303 	bic.w	r3, r3, #3
 8003dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	021b      	lsls	r3, r3, #8
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a1d      	ldr	r2, [pc, #116]	; (8003e98 <TIM_OC3_SetConfig+0xd0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d10d      	bne.n	8003e42 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	021b      	lsls	r3, r3, #8
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a14      	ldr	r2, [pc, #80]	; (8003e98 <TIM_OC3_SetConfig+0xd0>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d113      	bne.n	8003e72 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	011b      	lsls	r3, r3, #4
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	621a      	str	r2, [r3, #32]
}
 8003e8c:	bf00      	nop
 8003e8e:	371c      	adds	r7, #28
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	40010000 	.word	0x40010000

08003e9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	021b      	lsls	r3, r3, #8
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ee6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	031b      	lsls	r3, r3, #12
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a10      	ldr	r2, [pc, #64]	; (8003f38 <TIM_OC4_SetConfig+0x9c>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d109      	bne.n	8003f10 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	019b      	lsls	r3, r3, #6
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	621a      	str	r2, [r3, #32]
}
 8003f2a:	bf00      	nop
 8003f2c:	371c      	adds	r7, #28
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	40010000 	.word	0x40010000

08003f3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b087      	sub	sp, #28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	f023 0201 	bic.w	r2, r3, #1
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f023 030a 	bic.w	r3, r3, #10
 8003f78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	621a      	str	r2, [r3, #32]
}
 8003f8e:	bf00      	nop
 8003f90:	371c      	adds	r7, #28
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b087      	sub	sp, #28
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	60f8      	str	r0, [r7, #12]
 8003fa2:	60b9      	str	r1, [r7, #8]
 8003fa4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	f023 0210 	bic.w	r2, r3, #16
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	031b      	lsls	r3, r3, #12
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	621a      	str	r2, [r3, #32]
}
 8003fee:	bf00      	nop
 8003ff0:	371c      	adds	r7, #28
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b085      	sub	sp, #20
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004010:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4313      	orrs	r3, r2
 8004018:	f043 0307 	orr.w	r3, r3, #7
 800401c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	609a      	str	r2, [r3, #8]
}
 8004024:	bf00      	nop
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800404a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	021a      	lsls	r2, r3, #8
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	431a      	orrs	r2, r3
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	4313      	orrs	r3, r2
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	4313      	orrs	r3, r2
 800405c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	609a      	str	r2, [r3, #8]
}
 8004064:	bf00      	nop
 8004066:	371c      	adds	r7, #28
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f003 031f 	and.w	r3, r3, #31
 8004082:	2201      	movs	r2, #1
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6a1a      	ldr	r2, [r3, #32]
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	43db      	mvns	r3, r3
 8004092:	401a      	ands	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6a1a      	ldr	r2, [r3, #32]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f003 031f 	and.w	r3, r3, #31
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	fa01 f303 	lsl.w	r3, r1, r3
 80040a8:	431a      	orrs	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	621a      	str	r2, [r3, #32]
}
 80040ae:	bf00      	nop
 80040b0:	371c      	adds	r7, #28
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
	...

080040bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d101      	bne.n	80040d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040d0:	2302      	movs	r3, #2
 80040d2:	e050      	b.n	8004176 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	4313      	orrs	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a1c      	ldr	r2, [pc, #112]	; (8004184 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d018      	beq.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004120:	d013      	beq.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a18      	ldr	r2, [pc, #96]	; (8004188 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d00e      	beq.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a16      	ldr	r2, [pc, #88]	; (800418c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d009      	beq.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a15      	ldr	r2, [pc, #84]	; (8004190 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d004      	beq.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a13      	ldr	r2, [pc, #76]	; (8004194 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d10c      	bne.n	8004164 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004150:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	4313      	orrs	r3, r2
 800415a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	40010000 	.word	0x40010000
 8004188:	40000400 	.word	0x40000400
 800418c:	40000800 	.word	0x40000800
 8004190:	40000c00 	.word	0x40000c00
 8004194:	40014000 	.word	0x40014000

08004198 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e03f      	b.n	800422a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d106      	bne.n	80041c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fd f9b6 	bl	8001530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2224      	movs	r2, #36	; 0x24
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f829 	bl	8004234 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	695a      	ldr	r2, [r3, #20]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004200:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004210:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2220      	movs	r2, #32
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2220      	movs	r2, #32
 8004224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
	...

08004234 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004238:	b09f      	sub	sp, #124	; 0x7c
 800423a:	af00      	add	r7, sp, #0
 800423c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800423e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800424a:	68d9      	ldr	r1, [r3, #12]
 800424c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	ea40 0301 	orr.w	r3, r0, r1
 8004254:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004258:	689a      	ldr	r2, [r3, #8]
 800425a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	431a      	orrs	r2, r3
 8004260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	431a      	orrs	r2, r3
 8004266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	4313      	orrs	r3, r2
 800426c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800426e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004278:	f021 010c 	bic.w	r1, r1, #12
 800427c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004282:	430b      	orrs	r3, r1
 8004284:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004292:	6999      	ldr	r1, [r3, #24]
 8004294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	ea40 0301 	orr.w	r3, r0, r1
 800429c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800429e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	4bc5      	ldr	r3, [pc, #788]	; (80045b8 <UART_SetConfig+0x384>)
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d004      	beq.n	80042b2 <UART_SetConfig+0x7e>
 80042a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	4bc3      	ldr	r3, [pc, #780]	; (80045bc <UART_SetConfig+0x388>)
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d103      	bne.n	80042ba <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042b2:	f7ff f94b 	bl	800354c <HAL_RCC_GetPCLK2Freq>
 80042b6:	6778      	str	r0, [r7, #116]	; 0x74
 80042b8:	e002      	b.n	80042c0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042ba:	f7ff f933 	bl	8003524 <HAL_RCC_GetPCLK1Freq>
 80042be:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c8:	f040 80b6 	bne.w	8004438 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042ce:	461c      	mov	r4, r3
 80042d0:	f04f 0500 	mov.w	r5, #0
 80042d4:	4622      	mov	r2, r4
 80042d6:	462b      	mov	r3, r5
 80042d8:	1891      	adds	r1, r2, r2
 80042da:	6439      	str	r1, [r7, #64]	; 0x40
 80042dc:	415b      	adcs	r3, r3
 80042de:	647b      	str	r3, [r7, #68]	; 0x44
 80042e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042e4:	1912      	adds	r2, r2, r4
 80042e6:	eb45 0303 	adc.w	r3, r5, r3
 80042ea:	f04f 0000 	mov.w	r0, #0
 80042ee:	f04f 0100 	mov.w	r1, #0
 80042f2:	00d9      	lsls	r1, r3, #3
 80042f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042f8:	00d0      	lsls	r0, r2, #3
 80042fa:	4602      	mov	r2, r0
 80042fc:	460b      	mov	r3, r1
 80042fe:	1911      	adds	r1, r2, r4
 8004300:	6639      	str	r1, [r7, #96]	; 0x60
 8004302:	416b      	adcs	r3, r5
 8004304:	667b      	str	r3, [r7, #100]	; 0x64
 8004306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	461a      	mov	r2, r3
 800430c:	f04f 0300 	mov.w	r3, #0
 8004310:	1891      	adds	r1, r2, r2
 8004312:	63b9      	str	r1, [r7, #56]	; 0x38
 8004314:	415b      	adcs	r3, r3
 8004316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004318:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800431c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004320:	f7fb ff58 	bl	80001d4 <__aeabi_uldivmod>
 8004324:	4602      	mov	r2, r0
 8004326:	460b      	mov	r3, r1
 8004328:	4ba5      	ldr	r3, [pc, #660]	; (80045c0 <UART_SetConfig+0x38c>)
 800432a:	fba3 2302 	umull	r2, r3, r3, r2
 800432e:	095b      	lsrs	r3, r3, #5
 8004330:	011e      	lsls	r6, r3, #4
 8004332:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004334:	461c      	mov	r4, r3
 8004336:	f04f 0500 	mov.w	r5, #0
 800433a:	4622      	mov	r2, r4
 800433c:	462b      	mov	r3, r5
 800433e:	1891      	adds	r1, r2, r2
 8004340:	6339      	str	r1, [r7, #48]	; 0x30
 8004342:	415b      	adcs	r3, r3
 8004344:	637b      	str	r3, [r7, #52]	; 0x34
 8004346:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800434a:	1912      	adds	r2, r2, r4
 800434c:	eb45 0303 	adc.w	r3, r5, r3
 8004350:	f04f 0000 	mov.w	r0, #0
 8004354:	f04f 0100 	mov.w	r1, #0
 8004358:	00d9      	lsls	r1, r3, #3
 800435a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800435e:	00d0      	lsls	r0, r2, #3
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	1911      	adds	r1, r2, r4
 8004366:	65b9      	str	r1, [r7, #88]	; 0x58
 8004368:	416b      	adcs	r3, r5
 800436a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800436c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	461a      	mov	r2, r3
 8004372:	f04f 0300 	mov.w	r3, #0
 8004376:	1891      	adds	r1, r2, r2
 8004378:	62b9      	str	r1, [r7, #40]	; 0x28
 800437a:	415b      	adcs	r3, r3
 800437c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800437e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004382:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004386:	f7fb ff25 	bl	80001d4 <__aeabi_uldivmod>
 800438a:	4602      	mov	r2, r0
 800438c:	460b      	mov	r3, r1
 800438e:	4b8c      	ldr	r3, [pc, #560]	; (80045c0 <UART_SetConfig+0x38c>)
 8004390:	fba3 1302 	umull	r1, r3, r3, r2
 8004394:	095b      	lsrs	r3, r3, #5
 8004396:	2164      	movs	r1, #100	; 0x64
 8004398:	fb01 f303 	mul.w	r3, r1, r3
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	3332      	adds	r3, #50	; 0x32
 80043a2:	4a87      	ldr	r2, [pc, #540]	; (80045c0 <UART_SetConfig+0x38c>)
 80043a4:	fba2 2303 	umull	r2, r3, r2, r3
 80043a8:	095b      	lsrs	r3, r3, #5
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043b0:	441e      	add	r6, r3
 80043b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043b4:	4618      	mov	r0, r3
 80043b6:	f04f 0100 	mov.w	r1, #0
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	1894      	adds	r4, r2, r2
 80043c0:	623c      	str	r4, [r7, #32]
 80043c2:	415b      	adcs	r3, r3
 80043c4:	627b      	str	r3, [r7, #36]	; 0x24
 80043c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043ca:	1812      	adds	r2, r2, r0
 80043cc:	eb41 0303 	adc.w	r3, r1, r3
 80043d0:	f04f 0400 	mov.w	r4, #0
 80043d4:	f04f 0500 	mov.w	r5, #0
 80043d8:	00dd      	lsls	r5, r3, #3
 80043da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80043de:	00d4      	lsls	r4, r2, #3
 80043e0:	4622      	mov	r2, r4
 80043e2:	462b      	mov	r3, r5
 80043e4:	1814      	adds	r4, r2, r0
 80043e6:	653c      	str	r4, [r7, #80]	; 0x50
 80043e8:	414b      	adcs	r3, r1
 80043ea:	657b      	str	r3, [r7, #84]	; 0x54
 80043ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	461a      	mov	r2, r3
 80043f2:	f04f 0300 	mov.w	r3, #0
 80043f6:	1891      	adds	r1, r2, r2
 80043f8:	61b9      	str	r1, [r7, #24]
 80043fa:	415b      	adcs	r3, r3
 80043fc:	61fb      	str	r3, [r7, #28]
 80043fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004402:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004406:	f7fb fee5 	bl	80001d4 <__aeabi_uldivmod>
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	4b6c      	ldr	r3, [pc, #432]	; (80045c0 <UART_SetConfig+0x38c>)
 8004410:	fba3 1302 	umull	r1, r3, r3, r2
 8004414:	095b      	lsrs	r3, r3, #5
 8004416:	2164      	movs	r1, #100	; 0x64
 8004418:	fb01 f303 	mul.w	r3, r1, r3
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	3332      	adds	r3, #50	; 0x32
 8004422:	4a67      	ldr	r2, [pc, #412]	; (80045c0 <UART_SetConfig+0x38c>)
 8004424:	fba2 2303 	umull	r2, r3, r2, r3
 8004428:	095b      	lsrs	r3, r3, #5
 800442a:	f003 0207 	and.w	r2, r3, #7
 800442e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4432      	add	r2, r6
 8004434:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004436:	e0b9      	b.n	80045ac <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004438:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800443a:	461c      	mov	r4, r3
 800443c:	f04f 0500 	mov.w	r5, #0
 8004440:	4622      	mov	r2, r4
 8004442:	462b      	mov	r3, r5
 8004444:	1891      	adds	r1, r2, r2
 8004446:	6139      	str	r1, [r7, #16]
 8004448:	415b      	adcs	r3, r3
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004450:	1912      	adds	r2, r2, r4
 8004452:	eb45 0303 	adc.w	r3, r5, r3
 8004456:	f04f 0000 	mov.w	r0, #0
 800445a:	f04f 0100 	mov.w	r1, #0
 800445e:	00d9      	lsls	r1, r3, #3
 8004460:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004464:	00d0      	lsls	r0, r2, #3
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	eb12 0804 	adds.w	r8, r2, r4
 800446e:	eb43 0905 	adc.w	r9, r3, r5
 8004472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	4618      	mov	r0, r3
 8004478:	f04f 0100 	mov.w	r1, #0
 800447c:	f04f 0200 	mov.w	r2, #0
 8004480:	f04f 0300 	mov.w	r3, #0
 8004484:	008b      	lsls	r3, r1, #2
 8004486:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800448a:	0082      	lsls	r2, r0, #2
 800448c:	4640      	mov	r0, r8
 800448e:	4649      	mov	r1, r9
 8004490:	f7fb fea0 	bl	80001d4 <__aeabi_uldivmod>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	4b49      	ldr	r3, [pc, #292]	; (80045c0 <UART_SetConfig+0x38c>)
 800449a:	fba3 2302 	umull	r2, r3, r3, r2
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	011e      	lsls	r6, r3, #4
 80044a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044a4:	4618      	mov	r0, r3
 80044a6:	f04f 0100 	mov.w	r1, #0
 80044aa:	4602      	mov	r2, r0
 80044ac:	460b      	mov	r3, r1
 80044ae:	1894      	adds	r4, r2, r2
 80044b0:	60bc      	str	r4, [r7, #8]
 80044b2:	415b      	adcs	r3, r3
 80044b4:	60fb      	str	r3, [r7, #12]
 80044b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044ba:	1812      	adds	r2, r2, r0
 80044bc:	eb41 0303 	adc.w	r3, r1, r3
 80044c0:	f04f 0400 	mov.w	r4, #0
 80044c4:	f04f 0500 	mov.w	r5, #0
 80044c8:	00dd      	lsls	r5, r3, #3
 80044ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80044ce:	00d4      	lsls	r4, r2, #3
 80044d0:	4622      	mov	r2, r4
 80044d2:	462b      	mov	r3, r5
 80044d4:	1814      	adds	r4, r2, r0
 80044d6:	64bc      	str	r4, [r7, #72]	; 0x48
 80044d8:	414b      	adcs	r3, r1
 80044da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f04f 0100 	mov.w	r1, #0
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	f04f 0300 	mov.w	r3, #0
 80044ee:	008b      	lsls	r3, r1, #2
 80044f0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80044f4:	0082      	lsls	r2, r0, #2
 80044f6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80044fa:	f7fb fe6b 	bl	80001d4 <__aeabi_uldivmod>
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	4b2f      	ldr	r3, [pc, #188]	; (80045c0 <UART_SetConfig+0x38c>)
 8004504:	fba3 1302 	umull	r1, r3, r3, r2
 8004508:	095b      	lsrs	r3, r3, #5
 800450a:	2164      	movs	r1, #100	; 0x64
 800450c:	fb01 f303 	mul.w	r3, r1, r3
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	011b      	lsls	r3, r3, #4
 8004514:	3332      	adds	r3, #50	; 0x32
 8004516:	4a2a      	ldr	r2, [pc, #168]	; (80045c0 <UART_SetConfig+0x38c>)
 8004518:	fba2 2303 	umull	r2, r3, r2, r3
 800451c:	095b      	lsrs	r3, r3, #5
 800451e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004522:	441e      	add	r6, r3
 8004524:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004526:	4618      	mov	r0, r3
 8004528:	f04f 0100 	mov.w	r1, #0
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	1894      	adds	r4, r2, r2
 8004532:	603c      	str	r4, [r7, #0]
 8004534:	415b      	adcs	r3, r3
 8004536:	607b      	str	r3, [r7, #4]
 8004538:	e9d7 2300 	ldrd	r2, r3, [r7]
 800453c:	1812      	adds	r2, r2, r0
 800453e:	eb41 0303 	adc.w	r3, r1, r3
 8004542:	f04f 0400 	mov.w	r4, #0
 8004546:	f04f 0500 	mov.w	r5, #0
 800454a:	00dd      	lsls	r5, r3, #3
 800454c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004550:	00d4      	lsls	r4, r2, #3
 8004552:	4622      	mov	r2, r4
 8004554:	462b      	mov	r3, r5
 8004556:	eb12 0a00 	adds.w	sl, r2, r0
 800455a:	eb43 0b01 	adc.w	fp, r3, r1
 800455e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	4618      	mov	r0, r3
 8004564:	f04f 0100 	mov.w	r1, #0
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	008b      	lsls	r3, r1, #2
 8004572:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004576:	0082      	lsls	r2, r0, #2
 8004578:	4650      	mov	r0, sl
 800457a:	4659      	mov	r1, fp
 800457c:	f7fb fe2a 	bl	80001d4 <__aeabi_uldivmod>
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	4b0e      	ldr	r3, [pc, #56]	; (80045c0 <UART_SetConfig+0x38c>)
 8004586:	fba3 1302 	umull	r1, r3, r3, r2
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	2164      	movs	r1, #100	; 0x64
 800458e:	fb01 f303 	mul.w	r3, r1, r3
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	3332      	adds	r3, #50	; 0x32
 8004598:	4a09      	ldr	r2, [pc, #36]	; (80045c0 <UART_SetConfig+0x38c>)
 800459a:	fba2 2303 	umull	r2, r3, r2, r3
 800459e:	095b      	lsrs	r3, r3, #5
 80045a0:	f003 020f 	and.w	r2, r3, #15
 80045a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4432      	add	r2, r6
 80045aa:	609a      	str	r2, [r3, #8]
}
 80045ac:	bf00      	nop
 80045ae:	377c      	adds	r7, #124	; 0x7c
 80045b0:	46bd      	mov	sp, r7
 80045b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045b6:	bf00      	nop
 80045b8:	40011000 	.word	0x40011000
 80045bc:	40011400 	.word	0x40011400
 80045c0:	51eb851f 	.word	0x51eb851f

080045c4 <__errno>:
 80045c4:	4b01      	ldr	r3, [pc, #4]	; (80045cc <__errno+0x8>)
 80045c6:	6818      	ldr	r0, [r3, #0]
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	2000000c 	.word	0x2000000c

080045d0 <__libc_init_array>:
 80045d0:	b570      	push	{r4, r5, r6, lr}
 80045d2:	4d0d      	ldr	r5, [pc, #52]	; (8004608 <__libc_init_array+0x38>)
 80045d4:	4c0d      	ldr	r4, [pc, #52]	; (800460c <__libc_init_array+0x3c>)
 80045d6:	1b64      	subs	r4, r4, r5
 80045d8:	10a4      	asrs	r4, r4, #2
 80045da:	2600      	movs	r6, #0
 80045dc:	42a6      	cmp	r6, r4
 80045de:	d109      	bne.n	80045f4 <__libc_init_array+0x24>
 80045e0:	4d0b      	ldr	r5, [pc, #44]	; (8004610 <__libc_init_array+0x40>)
 80045e2:	4c0c      	ldr	r4, [pc, #48]	; (8004614 <__libc_init_array+0x44>)
 80045e4:	f000 f8a0 	bl	8004728 <_init>
 80045e8:	1b64      	subs	r4, r4, r5
 80045ea:	10a4      	asrs	r4, r4, #2
 80045ec:	2600      	movs	r6, #0
 80045ee:	42a6      	cmp	r6, r4
 80045f0:	d105      	bne.n	80045fe <__libc_init_array+0x2e>
 80045f2:	bd70      	pop	{r4, r5, r6, pc}
 80045f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80045f8:	4798      	blx	r3
 80045fa:	3601      	adds	r6, #1
 80045fc:	e7ee      	b.n	80045dc <__libc_init_array+0xc>
 80045fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004602:	4798      	blx	r3
 8004604:	3601      	adds	r6, #1
 8004606:	e7f2      	b.n	80045ee <__libc_init_array+0x1e>
 8004608:	08004768 	.word	0x08004768
 800460c:	08004768 	.word	0x08004768
 8004610:	08004768 	.word	0x08004768
 8004614:	0800476c 	.word	0x0800476c

08004618 <malloc>:
 8004618:	4b02      	ldr	r3, [pc, #8]	; (8004624 <malloc+0xc>)
 800461a:	4601      	mov	r1, r0
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	f000 b80b 	b.w	8004638 <_malloc_r>
 8004622:	bf00      	nop
 8004624:	2000000c 	.word	0x2000000c

08004628 <memset>:
 8004628:	4402      	add	r2, r0
 800462a:	4603      	mov	r3, r0
 800462c:	4293      	cmp	r3, r2
 800462e:	d100      	bne.n	8004632 <memset+0xa>
 8004630:	4770      	bx	lr
 8004632:	f803 1b01 	strb.w	r1, [r3], #1
 8004636:	e7f9      	b.n	800462c <memset+0x4>

08004638 <_malloc_r>:
 8004638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463a:	1ccd      	adds	r5, r1, #3
 800463c:	f025 0503 	bic.w	r5, r5, #3
 8004640:	3508      	adds	r5, #8
 8004642:	2d0c      	cmp	r5, #12
 8004644:	bf38      	it	cc
 8004646:	250c      	movcc	r5, #12
 8004648:	2d00      	cmp	r5, #0
 800464a:	4606      	mov	r6, r0
 800464c:	db01      	blt.n	8004652 <_malloc_r+0x1a>
 800464e:	42a9      	cmp	r1, r5
 8004650:	d903      	bls.n	800465a <_malloc_r+0x22>
 8004652:	230c      	movs	r3, #12
 8004654:	6033      	str	r3, [r6, #0]
 8004656:	2000      	movs	r0, #0
 8004658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800465a:	f000 f857 	bl	800470c <__malloc_lock>
 800465e:	4921      	ldr	r1, [pc, #132]	; (80046e4 <_malloc_r+0xac>)
 8004660:	680a      	ldr	r2, [r1, #0]
 8004662:	4614      	mov	r4, r2
 8004664:	b99c      	cbnz	r4, 800468e <_malloc_r+0x56>
 8004666:	4f20      	ldr	r7, [pc, #128]	; (80046e8 <_malloc_r+0xb0>)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	b923      	cbnz	r3, 8004676 <_malloc_r+0x3e>
 800466c:	4621      	mov	r1, r4
 800466e:	4630      	mov	r0, r6
 8004670:	f000 f83c 	bl	80046ec <_sbrk_r>
 8004674:	6038      	str	r0, [r7, #0]
 8004676:	4629      	mov	r1, r5
 8004678:	4630      	mov	r0, r6
 800467a:	f000 f837 	bl	80046ec <_sbrk_r>
 800467e:	1c43      	adds	r3, r0, #1
 8004680:	d123      	bne.n	80046ca <_malloc_r+0x92>
 8004682:	230c      	movs	r3, #12
 8004684:	6033      	str	r3, [r6, #0]
 8004686:	4630      	mov	r0, r6
 8004688:	f000 f846 	bl	8004718 <__malloc_unlock>
 800468c:	e7e3      	b.n	8004656 <_malloc_r+0x1e>
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	1b5b      	subs	r3, r3, r5
 8004692:	d417      	bmi.n	80046c4 <_malloc_r+0x8c>
 8004694:	2b0b      	cmp	r3, #11
 8004696:	d903      	bls.n	80046a0 <_malloc_r+0x68>
 8004698:	6023      	str	r3, [r4, #0]
 800469a:	441c      	add	r4, r3
 800469c:	6025      	str	r5, [r4, #0]
 800469e:	e004      	b.n	80046aa <_malloc_r+0x72>
 80046a0:	6863      	ldr	r3, [r4, #4]
 80046a2:	42a2      	cmp	r2, r4
 80046a4:	bf0c      	ite	eq
 80046a6:	600b      	streq	r3, [r1, #0]
 80046a8:	6053      	strne	r3, [r2, #4]
 80046aa:	4630      	mov	r0, r6
 80046ac:	f000 f834 	bl	8004718 <__malloc_unlock>
 80046b0:	f104 000b 	add.w	r0, r4, #11
 80046b4:	1d23      	adds	r3, r4, #4
 80046b6:	f020 0007 	bic.w	r0, r0, #7
 80046ba:	1ac2      	subs	r2, r0, r3
 80046bc:	d0cc      	beq.n	8004658 <_malloc_r+0x20>
 80046be:	1a1b      	subs	r3, r3, r0
 80046c0:	50a3      	str	r3, [r4, r2]
 80046c2:	e7c9      	b.n	8004658 <_malloc_r+0x20>
 80046c4:	4622      	mov	r2, r4
 80046c6:	6864      	ldr	r4, [r4, #4]
 80046c8:	e7cc      	b.n	8004664 <_malloc_r+0x2c>
 80046ca:	1cc4      	adds	r4, r0, #3
 80046cc:	f024 0403 	bic.w	r4, r4, #3
 80046d0:	42a0      	cmp	r0, r4
 80046d2:	d0e3      	beq.n	800469c <_malloc_r+0x64>
 80046d4:	1a21      	subs	r1, r4, r0
 80046d6:	4630      	mov	r0, r6
 80046d8:	f000 f808 	bl	80046ec <_sbrk_r>
 80046dc:	3001      	adds	r0, #1
 80046de:	d1dd      	bne.n	800469c <_malloc_r+0x64>
 80046e0:	e7cf      	b.n	8004682 <_malloc_r+0x4a>
 80046e2:	bf00      	nop
 80046e4:	20000094 	.word	0x20000094
 80046e8:	20000098 	.word	0x20000098

080046ec <_sbrk_r>:
 80046ec:	b538      	push	{r3, r4, r5, lr}
 80046ee:	4d06      	ldr	r5, [pc, #24]	; (8004708 <_sbrk_r+0x1c>)
 80046f0:	2300      	movs	r3, #0
 80046f2:	4604      	mov	r4, r0
 80046f4:	4608      	mov	r0, r1
 80046f6:	602b      	str	r3, [r5, #0]
 80046f8:	f7fc fba6 	bl	8000e48 <_sbrk>
 80046fc:	1c43      	adds	r3, r0, #1
 80046fe:	d102      	bne.n	8004706 <_sbrk_r+0x1a>
 8004700:	682b      	ldr	r3, [r5, #0]
 8004702:	b103      	cbz	r3, 8004706 <_sbrk_r+0x1a>
 8004704:	6023      	str	r3, [r4, #0]
 8004706:	bd38      	pop	{r3, r4, r5, pc}
 8004708:	200003c0 	.word	0x200003c0

0800470c <__malloc_lock>:
 800470c:	4801      	ldr	r0, [pc, #4]	; (8004714 <__malloc_lock+0x8>)
 800470e:	f000 b809 	b.w	8004724 <__retarget_lock_acquire_recursive>
 8004712:	bf00      	nop
 8004714:	200003c8 	.word	0x200003c8

08004718 <__malloc_unlock>:
 8004718:	4801      	ldr	r0, [pc, #4]	; (8004720 <__malloc_unlock+0x8>)
 800471a:	f000 b804 	b.w	8004726 <__retarget_lock_release_recursive>
 800471e:	bf00      	nop
 8004720:	200003c8 	.word	0x200003c8

08004724 <__retarget_lock_acquire_recursive>:
 8004724:	4770      	bx	lr

08004726 <__retarget_lock_release_recursive>:
 8004726:	4770      	bx	lr

08004728 <_init>:
 8004728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472a:	bf00      	nop
 800472c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800472e:	bc08      	pop	{r3}
 8004730:	469e      	mov	lr, r3
 8004732:	4770      	bx	lr

08004734 <_fini>:
 8004734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004736:	bf00      	nop
 8004738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800473a:	bc08      	pop	{r3}
 800473c:	469e      	mov	lr, r3
 800473e:	4770      	bx	lr
