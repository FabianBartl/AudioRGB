
AudioRGB_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005018  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080051b8  080051b8  000151b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800521c  0800521c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800521c  0800521c  0001521c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005224  08005224  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005224  08005224  00015224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005228  08005228  00015228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800522c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000070  0800529c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  0800529c  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015843  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c3b  00000000  00000000  000358e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  00038520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  00039698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019073  00000000  00000000  0003a700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017461  00000000  00000000  00053773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c462  00000000  00000000  0006abd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00107036  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d14  00000000  00000000  0010708c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080051a0 	.word	0x080051a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080051a0 	.word	0x080051a0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <ADC_Select_CH1>:

/* USER CODE BEGIN 0 */
// Copied generated code from MX_ADC1_Init(), but modified for one channel readout
// left audio channel
void ADC_Select_CH1(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800058e:	463b      	mov	r3, r7
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_1;
 800059a:	2301      	movs	r3, #1
 800059c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1; // has to be 1, because it's only one channel selected
 800059e:	2301      	movs	r3, #1
 80005a0:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a6:	463b      	mov	r3, r7
 80005a8:	4619      	mov	r1, r3
 80005aa:	4806      	ldr	r0, [pc, #24]	; (80005c4 <ADC_Select_CH1+0x3c>)
 80005ac:	f001 fb12 	bl	8001bd4 <HAL_ADC_ConfigChannel>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <ADC_Select_CH1+0x32>
	{
		Error_Handler();
 80005b6:	f000 fc57 	bl	8000e68 <Error_Handler>
	}
}
 80005ba:	bf00      	nop
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000098 	.word	0x20000098

080005c8 <ADC_Select_CH4>:
// right audio channel
void ADC_Select_CH4(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80005ce:	463b      	mov	r3, r7
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_4;
 80005da:	2304      	movs	r3, #4
 80005dc:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1; // has to be 1, because it's only one channel selected
 80005de:	2301      	movs	r3, #1
 80005e0:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e6:	463b      	mov	r3, r7
 80005e8:	4619      	mov	r1, r3
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <ADC_Select_CH4+0x3c>)
 80005ec:	f001 faf2 	bl	8001bd4 <HAL_ADC_ConfigChannel>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <ADC_Select_CH4+0x32>
	{
		Error_Handler();
 80005f6:	f000 fc37 	bl	8000e68 <Error_Handler>
	}
}
 80005fa:	bf00      	nop
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000098 	.word	0x20000098

08000608 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	463b      	mov	r3, r7
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	*/
  	// Copied from below for editing as user code and skip generated code with goto
	hadc1.Instance = ADC1;
 800061a:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <MX_ADC1_Init+0x7c>)
 800061c:	4a1a      	ldr	r2, [pc, #104]	; (8000688 <MX_ADC1_Init+0x80>)
 800061e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000620:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_ADC1_Init+0x7c>)
 8000622:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000626:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000628:	4b16      	ldr	r3, [pc, #88]	; (8000684 <MX_ADC1_Init+0x7c>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_ADC1_Init+0x7c>)
 8000630:	2201      	movs	r2, #1
 8000632:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000634:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MX_ADC1_Init+0x7c>)
 8000636:	2201      	movs	r2, #1
 8000638:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_ADC1_Init+0x7c>)
 800063c:	2200      	movs	r2, #0
 800063e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <MX_ADC1_Init+0x7c>)
 8000644:	2200      	movs	r2, #0
 8000646:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000648:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_ADC1_Init+0x7c>)
 800064a:	4a10      	ldr	r2, [pc, #64]	; (800068c <MX_ADC1_Init+0x84>)
 800064c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800064e:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <MX_ADC1_Init+0x7c>)
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;	// setup with 3 for getting rank settings, later set manually to 1
 8000654:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <MX_ADC1_Init+0x7c>)
 8000656:	2201      	movs	r2, #1
 8000658:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800065a:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <MX_ADC1_Init+0x7c>)
 800065c:	2200      	movs	r2, #0
 800065e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <MX_ADC1_Init+0x7c>)
 8000664:	2201      	movs	r2, #1
 8000666:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4806      	ldr	r0, [pc, #24]	; (8000684 <MX_ADC1_Init+0x7c>)
 800066a:	f001 f8ef 	bl	800184c <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 8000674:	f000 fbf8 	bl	8000e68 <Error_Handler>
	}

	// jump to user code ADC1_Init 2
	goto SKIP_ADC1_INIT_Generated;
 8000678:	bf00      	nop
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

	SKIP_ADC1_INIT_Generated:
	asm("nop");
 800067a:	bf00      	nop
  /* USER CODE END ADC1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000098 	.word	0x20000098
 8000688:	40012000 	.word	0x40012000
 800068c:	0f000001 	.word	0x0f000001

08000690 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a24      	ldr	r2, [pc, #144]	; (8000740 <HAL_ADC_MspInit+0xb0>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d141      	bne.n	8000736 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	4b23      	ldr	r3, [pc, #140]	; (8000744 <HAL_ADC_MspInit+0xb4>)
 80006b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ba:	4a22      	ldr	r2, [pc, #136]	; (8000744 <HAL_ADC_MspInit+0xb4>)
 80006bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c0:	6453      	str	r3, [r2, #68]	; 0x44
 80006c2:	4b20      	ldr	r3, [pc, #128]	; (8000744 <HAL_ADC_MspInit+0xb4>)
 80006c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	4b1c      	ldr	r3, [pc, #112]	; (8000744 <HAL_ADC_MspInit+0xb4>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a1b      	ldr	r2, [pc, #108]	; (8000744 <HAL_ADC_MspInit+0xb4>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b19      	ldr	r3, [pc, #100]	; (8000744 <HAL_ADC_MspInit+0xb4>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	4b15      	ldr	r3, [pc, #84]	; (8000744 <HAL_ADC_MspInit+0xb4>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a14      	ldr	r2, [pc, #80]	; (8000744 <HAL_ADC_MspInit+0xb4>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b12      	ldr	r3, [pc, #72]	; (8000744 <HAL_ADC_MspInit+0xb4>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = RNG_Pin;
 8000706:	2304      	movs	r3, #4
 8000708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800070a:	2303      	movs	r3, #3
 800070c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RNG_GPIO_Port, &GPIO_InitStruct);
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4619      	mov	r1, r3
 8000718:	480b      	ldr	r0, [pc, #44]	; (8000748 <HAL_ADC_MspInit+0xb8>)
 800071a:	f002 f875 	bl	8002808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUX_L_Pin|AUX_R_Pin;
 800071e:	2312      	movs	r3, #18
 8000720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000722:	2303      	movs	r3, #3
 8000724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	4619      	mov	r1, r3
 8000730:	4806      	ldr	r0, [pc, #24]	; (800074c <HAL_ADC_MspInit+0xbc>)
 8000732:	f002 f869 	bl	8002808 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000736:	bf00      	nop
 8000738:	3728      	adds	r7, #40	; 0x28
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40012000 	.word	0x40012000
 8000744:	40023800 	.word	0x40023800
 8000748:	40020800 	.word	0x40020800
 800074c:	40020000 	.word	0x40020000

08000750 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_DMA_Init+0x5c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a13      	ldr	r2, [pc, #76]	; (80007ac <MX_DMA_Init+0x5c>)
 8000760:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_DMA_Init+0x5c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2100      	movs	r1, #0
 8000776:	200b      	movs	r0, #11
 8000778:	f001 fd25 	bl	80021c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800077c:	200b      	movs	r0, #11
 800077e:	f001 fd3e 	bl	80021fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2100      	movs	r1, #0
 8000786:	200f      	movs	r0, #15
 8000788:	f001 fd1d 	bl	80021c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800078c:	200f      	movs	r0, #15
 800078e:	f001 fd36 	bl	80021fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	2100      	movs	r1, #0
 8000796:	2010      	movs	r0, #16
 8000798:	f001 fd15 	bl	80021c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800079c:	2010      	movs	r0, #16
 800079e:	f001 fd2e 	bl	80021fe <HAL_NVIC_EnableIRQ>

}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800

080007b0 <bufferAppend>:

// implements an append function for a circular array
// when the array is full, the values at the beginning are overwritten
// the buffer array contains the last measured ADC elements to smooth the audio signal
void bufferAppend(int val, int *arr, size_t *ind)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
	*ind = (*ind+1 > BUFFER_SIZE_AUX-1) ? 0 : *ind+1;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	3301      	adds	r3, #1
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d803      	bhi.n	80007ce <bufferAppend+0x1e>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	3301      	adds	r3, #1
 80007cc:	e000      	b.n	80007d0 <bufferAppend+0x20>
 80007ce:	2300      	movs	r3, #0
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	6013      	str	r3, [r2, #0]
	arr[*ind] = val;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	68ba      	ldr	r2, [r7, #8]
 80007dc:	4413      	add	r3, r2
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	601a      	str	r2, [r3, #0]
}
 80007e2:	bf00      	nop
 80007e4:	3714      	adds	r7, #20
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <bufferFilter>:

// apply an average-filter to the last elements of the buffer array
int bufferFilter(int *arr)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
	return arrayAvr(arr, BUFFER_SIZE_AUX);
 80007f6:	2102      	movs	r1, #2
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f000 f924 	bl	8000a46 <arrayAvr>
 80007fe:	4603      	mov	r3, r0
}
 8000800:	4618      	mov	r0, r3
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <saturateLimits>:

// ----------------------------
// saturate, transform, amplify
// ----------------------------

int saturateLimits(int val, int lowerLim, int upperLim) { return (val < lowerLim) ? lowerLim : ((val > upperLim) ? upperLim : val); }
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
 8000814:	68fa      	ldr	r2, [r7, #12]
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	429a      	cmp	r2, r3
 800081a:	db05      	blt.n	8000828 <saturateLimits+0x20>
 800081c:	68fa      	ldr	r2, [r7, #12]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4293      	cmp	r3, r2
 8000822:	bfa8      	it	ge
 8000824:	4613      	movge	r3, r2
 8000826:	e000      	b.n	800082a <saturateLimits+0x22>
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	4618      	mov	r0, r3
 800082c:	3714      	adds	r7, #20
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <saturate>:
int saturate(int val) { return saturateLimits(val, COLOR_MIN, COLOR_MAX); }
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
 800083e:	22ff      	movs	r2, #255	; 0xff
 8000840:	2100      	movs	r1, #0
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff ffe0 	bl	8000808 <saturateLimits>
 8000848:	4603      	mov	r3, r0
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <transform>:

int transform(int val, int inMin, int inMax, int outMin, int outMax)
{
 8000852:	b480      	push	{r7}
 8000854:	b087      	sub	sp, #28
 8000856:	af00      	add	r7, sp, #0
 8000858:	60f8      	str	r0, [r7, #12]
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	607a      	str	r2, [r7, #4]
 800085e:	603b      	str	r3, [r7, #0]
	int inHalf = inMin + (inMax - inMin) / 2;
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	0fda      	lsrs	r2, r3, #31
 8000868:	4413      	add	r3, r2
 800086a:	105b      	asrs	r3, r3, #1
 800086c:	461a      	mov	r2, r3
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	4413      	add	r3, r2
 8000872:	617b      	str	r3, [r7, #20]
	int outHalf = outMin + (outMax - outMin) / 2;
 8000874:	6a3a      	ldr	r2, [r7, #32]
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	0fda      	lsrs	r2, r3, #31
 800087c:	4413      	add	r3, r2
 800087e:	105b      	asrs	r3, r3, #1
 8000880:	461a      	mov	r2, r3
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	4413      	add	r3, r2
 8000886:	613b      	str	r3, [r7, #16]
	return val - (inHalf - outHalf);
 8000888:	697a      	ldr	r2, [r7, #20]
 800088a:	693b      	ldr	r3, [r7, #16]
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	68fa      	ldr	r2, [r7, #12]
 8000890:	1ad3      	subs	r3, r2, r3
}
 8000892:	4618      	mov	r0, r3
 8000894:	371c      	adds	r7, #28
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <amplifyFactor>:

int amplifyFactor(int val, int fac) { return val * fac; }
 800089e:	b480      	push	{r7}
 80008a0:	b083      	sub	sp, #12
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
 80008a6:	6039      	str	r1, [r7, #0]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	683a      	ldr	r2, [r7, #0]
 80008ac:	fb02 f303 	mul.w	r3, r2, r3
 80008b0:	4618      	mov	r0, r3
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <amplify>:
int amplify(int val) { return amplifyFactor(val, VOLUME_BOOST); }
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	2101      	movs	r1, #1
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f7ff ffe9 	bl	800089e <amplifyFactor>
 80008cc:	4603      	mov	r3, r0
 80008ce:	4618      	mov	r0, r3
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <min>:

// --------
// min, max
// --------

int min(int a, int b) { return (a < b) ? a : b; }
 80008d6:	b480      	push	{r7}
 80008d8:	b083      	sub	sp, #12
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
 80008de:	6039      	str	r1, [r7, #0]
 80008e0:	683a      	ldr	r2, [r7, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4293      	cmp	r3, r2
 80008e6:	bfa8      	it	ge
 80008e8:	4613      	movge	r3, r2
 80008ea:	4618      	mov	r0, r3
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
	...

080008f8 <writeRGB>:
// ----
// rgbs
// ----

void writeRGB(int r, int g, int b)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
	// prevent higher pulses than period
	TIM4->CCR1 = min(saturate(r), TIM4->ARR);
 8000904:	68f8      	ldr	r0, [r7, #12]
 8000906:	f7ff ff96 	bl	8000836 <saturate>
 800090a:	4603      	mov	r3, r0
 800090c:	4a13      	ldr	r2, [pc, #76]	; (800095c <writeRGB+0x64>)
 800090e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000910:	4611      	mov	r1, r2
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff ffdf 	bl	80008d6 <min>
 8000918:	4602      	mov	r2, r0
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <writeRGB+0x64>)
 800091c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = min(saturate(g), TIM3->ARR);
 800091e:	68b8      	ldr	r0, [r7, #8]
 8000920:	f7ff ff89 	bl	8000836 <saturate>
 8000924:	4603      	mov	r3, r0
 8000926:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <writeRGB+0x68>)
 8000928:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800092a:	4611      	mov	r1, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ffd2 	bl	80008d6 <min>
 8000932:	4602      	mov	r2, r0
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <writeRGB+0x68>)
 8000936:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR1 = min(saturate(b), TIM3->ARR);
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff ff7c 	bl	8000836 <saturate>
 800093e:	4603      	mov	r3, r0
 8000940:	4a07      	ldr	r2, [pc, #28]	; (8000960 <writeRGB+0x68>)
 8000942:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000944:	4611      	mov	r1, r2
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff ffc5 	bl	80008d6 <min>
 800094c:	4602      	mov	r2, r0
 800094e:	4b04      	ldr	r3, [pc, #16]	; (8000960 <writeRGB+0x68>)
 8000950:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40000800 	.word	0x40000800
 8000960:	40000400 	.word	0x40000400

08000964 <generatorLimit>:
void writeRGBArray(int *rgb) { writeRGB(rgb[0], rgb[1], rgb[2]); }

// color generator
int generatorLimit(int val, int lowerLim, int upperLim)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af02      	add	r7, sp, #8
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
	return transform(
 8000970:	23ff      	movs	r3, #255	; 0xff
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	2300      	movs	r3, #0
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	68b9      	ldr	r1, [r7, #8]
 800097a:	68f8      	ldr	r0, [r7, #12]
 800097c:	f7ff ff69 	bl	8000852 <transform>
 8000980:	4603      	mov	r3, r0
		lowerLim,
		upperLim,
		COLOR_MIN,
		COLOR_MAX
	);
}
 8000982:	4618      	mov	r0, r3
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <generator>:
int generator(int val) { return generatorLimit(amplify(val), VOLUME_MIN, VOLUME_MAX); }
 800098a:	b580      	push	{r7, lr}
 800098c:	b082      	sub	sp, #8
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f7ff ff92 	bl	80008bc <amplify>
 8000998:	4603      	mov	r3, r0
 800099a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800099e:	2164      	movs	r1, #100	; 0x64
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff ffdf 	bl	8000964 <generatorLimit>
 80009a6:	4603      	mov	r3, r0
 80009a8:	4618      	mov	r0, r3
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <fillArray>:

// ------
// arrays
// ------

void fillArray(int val, int *arr, const size_t arrLen) { for(int i=0; i < arrLen; i++) arr[i] = val; }
 80009b0:	b480      	push	{r7}
 80009b2:	b087      	sub	sp, #28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
 80009c0:	e008      	b.n	80009d4 <fillArray+0x24>
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	4413      	add	r3, r2
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	3301      	adds	r3, #1
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d8f2      	bhi.n	80009c2 <fillArray+0x12>
 80009dc:	bf00      	nop
 80009de:	bf00      	nop
 80009e0:	371c      	adds	r7, #28
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <emptyArray>:
void emptyArray(int *arr, const size_t arrLen) { fillArray(0, arr, arrLen); }
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b082      	sub	sp, #8
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
 80009f2:	6039      	str	r1, [r7, #0]
 80009f4:	683a      	ldr	r2, [r7, #0]
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	2000      	movs	r0, #0
 80009fa:	f7ff ffd9 	bl	80009b0 <fillArray>
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <arraySum>:

int arraySum(int *arr, const size_t arrLen)
{
 8000a06:	b480      	push	{r7}
 8000a08:	b085      	sub	sp, #20
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
 8000a0e:	6039      	str	r1, [r7, #0]
	int sum = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]
	for(size_t i=0; i < arrLen; i++) sum += arr[i];
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	e00a      	b.n	8000a30 <arraySum+0x2a>
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	68fa      	ldr	r2, [r7, #12]
 8000a26:	4413      	add	r3, r2
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68ba      	ldr	r2, [r7, #8]
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d3f0      	bcc.n	8000a1a <arraySum+0x14>
	return sum;
 8000a38:	68fb      	ldr	r3, [r7, #12]
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3714      	adds	r7, #20
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <arrayAvr>:
int arrayAvr(int *arr, const size_t arrLen) { return arraySum(arr, arrLen) / arrLen; }
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b082      	sub	sp, #8
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
 8000a4e:	6039      	str	r1, [r7, #0]
 8000a50:	6839      	ldr	r1, [r7, #0]
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f7ff ffd7 	bl	8000a06 <arraySum>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	4b1e      	ldr	r3, [pc, #120]	; (8000af0 <MX_GPIO_Init+0x84>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a1d      	ldr	r2, [pc, #116]	; (8000af0 <MX_GPIO_Init+0x84>)
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <MX_GPIO_Init+0x84>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0304 	and.w	r3, r3, #4
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <MX_GPIO_Init+0x84>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a16      	ldr	r2, [pc, #88]	; (8000af0 <MX_GPIO_Init+0x84>)
 8000a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <MX_GPIO_Init+0x84>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <MX_GPIO_Init+0x84>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a0f      	ldr	r2, [pc, #60]	; (8000af0 <MX_GPIO_Init+0x84>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <MX_GPIO_Init+0x84>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <MX_GPIO_Init+0x84>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a08      	ldr	r2, [pc, #32]	; (8000af0 <MX_GPIO_Init+0x84>)
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <MX_GPIO_Init+0x84>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

}
 8000ae2:	bf00      	nop
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800

08000af4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000afa:	4a13      	ldr	r2, [pc, #76]	; (8000b48 <MX_I2C1_Init+0x54>)
 8000afc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b00:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <MX_I2C1_Init+0x58>)
 8000b02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b24:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b30:	4804      	ldr	r0, [pc, #16]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b32:	f001 ffed 	bl	8002b10 <HAL_I2C_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b3c:	f000 f994 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200000e0 	.word	0x200000e0
 8000b48:	40005400 	.word	0x40005400
 8000b4c:	000186a0 	.word	0x000186a0

08000b50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a19      	ldr	r2, [pc, #100]	; (8000bd4 <HAL_I2C_MspInit+0x84>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d12c      	bne.n	8000bcc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <HAL_I2C_MspInit+0x88>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a17      	ldr	r2, [pc, #92]	; (8000bd8 <HAL_I2C_MspInit+0x88>)
 8000b7c:	f043 0302 	orr.w	r3, r3, #2
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <HAL_I2C_MspInit+0x88>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_I2C_SCL_Pin|LCD_I2C_SDA_Pin;
 8000b8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b94:	2312      	movs	r3, #18
 8000b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ba0:	2304      	movs	r3, #4
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	480c      	ldr	r0, [pc, #48]	; (8000bdc <HAL_I2C_MspInit+0x8c>)
 8000bac:	f001 fe2c 	bl	8002808 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <HAL_I2C_MspInit+0x88>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb8:	4a07      	ldr	r2, [pc, #28]	; (8000bd8 <HAL_I2C_MspInit+0x88>)
 8000bba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <HAL_I2C_MspInit+0x88>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000bcc:	bf00      	nop
 8000bce:	3728      	adds	r7, #40	; 0x28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40005400 	.word	0x40005400
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020400 	.word	0x40020400

08000be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b098      	sub	sp, #96	; 0x60
 8000be4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	// left audio channel
	int *buffArrL = (int *)malloc(BUFFER_SIZE_AUX * sizeof(int));
 8000be6:	2008      	movs	r0, #8
 8000be8:	f003 fe9c 	bl	8004924 <malloc>
 8000bec:	4603      	mov	r3, r0
 8000bee:	647b      	str	r3, [r7, #68]	; 0x44
	emptyArray(buffArrL, BUFFER_SIZE_AUX);
 8000bf0:	2102      	movs	r1, #2
 8000bf2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000bf4:	f7ff fef9 	bl	80009ea <emptyArray>
	size_t buffIndL = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61bb      	str	r3, [r7, #24]
	int auxValL = 0, auxFilterL = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	657b      	str	r3, [r7, #84]	; 0x54
 8000c00:	2300      	movs	r3, #0
 8000c02:	653b      	str	r3, [r7, #80]	; 0x50

	// right audio channel
	int *buffArrR = (int *)malloc(BUFFER_SIZE_AUX * sizeof(int));
 8000c04:	2008      	movs	r0, #8
 8000c06:	f003 fe8d 	bl	8004924 <malloc>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	643b      	str	r3, [r7, #64]	; 0x40
	emptyArray(buffArrR, BUFFER_SIZE_AUX);
 8000c0e:	2102      	movs	r1, #2
 8000c10:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000c12:	f7ff feea 	bl	80009ea <emptyArray>
	size_t buffIndR = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
	int auxValR = 0, auxFilterR = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c1e:	2300      	movs	r3, #0
 8000c20:	64fb      	str	r3, [r7, #76]	; 0x4c

	// rgb led (uint8_t doesn't work)
	int *rgbArr = (int *)malloc(CHANNEL_COUNT_RGB * sizeof(int));
 8000c22:	200c      	movs	r0, #12
 8000c24:	f003 fe7e 	bl	8004924 <malloc>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	63bb      	str	r3, [r7, #56]	; 0x38
	emptyArray(rgbArr, CHANNEL_COUNT_RGB);
 8000c2c:	2103      	movs	r1, #3
 8000c2e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000c30:	f7ff fedb 	bl	80009ea <emptyArray>
	int r = 0, g = 0, b = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	637b      	str	r3, [r7, #52]	; 0x34
 8000c38:	2300      	movs	r3, #0
 8000c3a:	633b      	str	r3, [r7, #48]	; 0x30
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	size_t colSel = 0, colSelPrev = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c44:	2300      	movs	r3, #0
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
	int colVal = 0, colValPrev = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]

	// nanokernel tick counter
	uint32_t ticks = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	64bb      	str	r3, [r7, #72]	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c54:	f000 fd64 	bl	8001720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c58:	f000 f89a 	bl	8000d90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c5c:	f7ff ff06 	bl	8000a6c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c60:	f000 fcc2 	bl	80015e8 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000c64:	f7ff fd74 	bl	8000750 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c68:	f7ff fcce 	bl	8000608 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000c6c:	f7ff ff42 	bl	8000af4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000c70:	f000 f9b8 	bl	8000fe4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c74:	f000 fa06 	bl	8001084 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c78:	f000 fa50 	bl	800111c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c7c:	f000 face 	bl	800121c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	// setup rgb led
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000c80:	2100      	movs	r1, #0
 8000c82:	483e      	ldr	r0, [pc, #248]	; (8000d7c <main+0x19c>)
 8000c84:	f002 fd9a 	bl	80037bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000c88:	2104      	movs	r1, #4
 8000c8a:	483d      	ldr	r0, [pc, #244]	; (8000d80 <main+0x1a0>)
 8000c8c:	f002 fd96 	bl	80037bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c90:	2100      	movs	r1, #0
 8000c92:	483b      	ldr	r0, [pc, #236]	; (8000d80 <main+0x1a0>)
 8000c94:	f002 fd92 	bl	80037bc <HAL_TIM_PWM_Start>
	writeRGB(r, g, b);
 8000c98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000c9c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000c9e:	f7ff fe2b 	bl	80008f8 <writeRGB>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// get left audio channel from adc
		ADC_Select_CH1();
 8000ca2:	f7ff fc71 	bl	8000588 <ADC_Select_CH1>
		HAL_ADC_Start(&hadc1);
 8000ca6:	4837      	ldr	r0, [pc, #220]	; (8000d84 <main+0x1a4>)
 8000ca8:	f000 fe14 	bl	80018d4 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, TIMEOUT_ADC) == HAL_OK)
 8000cac:	2101      	movs	r1, #1
 8000cae:	4835      	ldr	r0, [pc, #212]	; (8000d84 <main+0x1a4>)
 8000cb0:	f000 fef7 	bl	8001aa2 <HAL_ADC_PollForConversion>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d112      	bne.n	8000ce0 <main+0x100>
		{
			auxValL = HAL_ADC_GetValue(&hadc1);
 8000cba:	4832      	ldr	r0, [pc, #200]	; (8000d84 <main+0x1a4>)
 8000cbc:	f000 ff7c 	bl	8001bb8 <HAL_ADC_GetValue>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	657b      	str	r3, [r7, #84]	; 0x54
			HAL_ADC_Stop(&hadc1);
 8000cc4:	482f      	ldr	r0, [pc, #188]	; (8000d84 <main+0x1a4>)
 8000cc6:	f000 feb9 	bl	8001a3c <HAL_ADC_Stop>
			// write buffer and apply filter
			bufferAppend(auxValL, buffArrL, &buffIndL);
 8000cca:	f107 0318 	add.w	r3, r7, #24
 8000cce:	461a      	mov	r2, r3
 8000cd0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000cd2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000cd4:	f7ff fd6c 	bl	80007b0 <bufferAppend>
			auxFilterL = bufferFilter(buffArrL);
 8000cd8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000cda:	f7ff fd88 	bl	80007ee <bufferFilter>
 8000cde:	6538      	str	r0, [r7, #80]	; 0x50
		}

		// get right audio channel from adc
		ADC_Select_CH4();
 8000ce0:	f7ff fc72 	bl	80005c8 <ADC_Select_CH4>
		HAL_ADC_Start(&hadc1);
 8000ce4:	4827      	ldr	r0, [pc, #156]	; (8000d84 <main+0x1a4>)
 8000ce6:	f000 fdf5 	bl	80018d4 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, TIMEOUT_ADC) == HAL_OK)
 8000cea:	2101      	movs	r1, #1
 8000cec:	4825      	ldr	r0, [pc, #148]	; (8000d84 <main+0x1a4>)
 8000cee:	f000 fed8 	bl	8001aa2 <HAL_ADC_PollForConversion>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d112      	bne.n	8000d1e <main+0x13e>
		{
			auxValR = HAL_ADC_GetValue(&hadc1);
 8000cf8:	4822      	ldr	r0, [pc, #136]	; (8000d84 <main+0x1a4>)
 8000cfa:	f000 ff5d 	bl	8001bb8 <HAL_ADC_GetValue>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	63fb      	str	r3, [r7, #60]	; 0x3c
			HAL_ADC_Stop(&hadc1);
 8000d02:	4820      	ldr	r0, [pc, #128]	; (8000d84 <main+0x1a4>)
 8000d04:	f000 fe9a 	bl	8001a3c <HAL_ADC_Stop>
			// write buffer and apply filter
			bufferAppend(auxValR, buffArrR, &buffIndR);
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000d10:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000d12:	f7ff fd4d 	bl	80007b0 <bufferAppend>
			auxFilterR = bufferFilter(buffArrR);
 8000d16:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000d18:	f7ff fd69 	bl	80007ee <bufferFilter>
 8000d1c:	64f8      	str	r0, [r7, #76]	; 0x4c
		}

		// generate color
		r = generator(auxFilterL);
 8000d1e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000d20:	f7ff fe33 	bl	800098a <generator>
 8000d24:	6378      	str	r0, [r7, #52]	; 0x34
		g = 5;
 8000d26:	2305      	movs	r3, #5
 8000d28:	633b      	str	r3, [r7, #48]	; 0x30
		b = generator(auxFilterR);
 8000d2a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000d2c:	f7ff fe2d 	bl	800098a <generator>
 8000d30:	62f8      	str	r0, [r7, #44]	; 0x2c

		// write rgb
		writeRGB(r, g, b);
 8000d32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000d36:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000d38:	f7ff fdde 	bl	80008f8 <writeRGB>
		//writeRGB(generator(auxFilterL), 5, generator(auxFilterR));

		// debug via uart
		if (DEBUG)
		{
			sprintf(
 8000d3c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000d3e:	f7ff fd7a 	bl	8000836 <saturate>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4638      	mov	r0, r7
 8000d46:	9301      	str	r3, [sp, #4]
 8000d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000d50:	490d      	ldr	r1, [pc, #52]	; (8000d88 <main+0x1a8>)
 8000d52:	f003 feb1 	bl	8004ab8 <siprintf>
				auxValL,
				auxFilterL,
				r,
				saturate(r)
			);
			HAL_UART_Transmit(&huart2, (uint8_t *)buffMsg, strlen(buffMsg), HAL_MAX_DELAY);
 8000d56:	463b      	mov	r3, r7
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fa41 	bl	80001e0 <strlen>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	b29a      	uxth	r2, r3
 8000d62:	4639      	mov	r1, r7
 8000d64:	f04f 33ff 	mov.w	r3, #4294967295
 8000d68:	4808      	ldr	r0, [pc, #32]	; (8000d8c <main+0x1ac>)
 8000d6a:	f003 fae8 	bl	800433e <HAL_UART_Transmit>
		}

		// update nanokernel tick and wait
		ticks++;
 8000d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d70:	3301      	adds	r3, #1
 8000d72:	64bb      	str	r3, [r7, #72]	; 0x48
		HAL_Delay(DELAY);
 8000d74:	2001      	movs	r0, #1
 8000d76:	f000 fd45 	bl	8001804 <HAL_Delay>
	{
 8000d7a:	e792      	b.n	8000ca2 <main+0xc2>
 8000d7c:	20000134 	.word	0x20000134
 8000d80:	2000017c 	.word	0x2000017c
 8000d84:	20000098 	.word	0x20000098
 8000d88:	080051b8 	.word	0x080051b8
 8000d8c:	20000374 	.word	0x20000374

08000d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b094      	sub	sp, #80	; 0x50
 8000d94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d96:	f107 0320 	add.w	r3, r7, #32
 8000d9a:	2230      	movs	r2, #48	; 0x30
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f003 fdc8 	bl	8004934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db4:	2300      	movs	r3, #0
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	4b29      	ldr	r3, [pc, #164]	; (8000e60 <SystemClock_Config+0xd0>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	4a28      	ldr	r2, [pc, #160]	; (8000e60 <SystemClock_Config+0xd0>)
 8000dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc4:	4b26      	ldr	r3, [pc, #152]	; (8000e60 <SystemClock_Config+0xd0>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	4b23      	ldr	r3, [pc, #140]	; (8000e64 <SystemClock_Config+0xd4>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ddc:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <SystemClock_Config+0xd4>)
 8000dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <SystemClock_Config+0xd4>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000df0:	2302      	movs	r3, #2
 8000df2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df4:	2301      	movs	r3, #1
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000df8:	2310      	movs	r3, #16
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e00:	2300      	movs	r3, #0
 8000e02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e04:	2310      	movs	r3, #16
 8000e06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e08:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e0e:	2304      	movs	r3, #4
 8000e10:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e12:	2307      	movs	r3, #7
 8000e14:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e16:	f107 0320 	add.w	r3, r7, #32
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f001 ffbc 	bl	8002d98 <HAL_RCC_OscConfig>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e26:	f000 f81f 	bl	8000e68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2a:	230f      	movs	r3, #15
 8000e2c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	2102      	movs	r1, #2
 8000e46:	4618      	mov	r0, r3
 8000e48:	f002 fa1e 	bl	8003288 <HAL_RCC_ClockConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000e52:	f000 f809 	bl	8000e68 <Error_Handler>
  }
}
 8000e56:	bf00      	nop
 8000e58:	3750      	adds	r7, #80	; 0x50
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40007000 	.word	0x40007000

08000e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e6c:	b672      	cpsid	i
}
 8000e6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <Error_Handler+0x8>
	...

08000e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <HAL_MspInit+0x4c>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	4a0f      	ldr	r2, [pc, #60]	; (8000ec0 <HAL_MspInit+0x4c>)
 8000e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e88:	6453      	str	r3, [r2, #68]	; 0x44
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <HAL_MspInit+0x4c>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	603b      	str	r3, [r7, #0]
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <HAL_MspInit+0x4c>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	4a08      	ldr	r2, [pc, #32]	; (8000ec0 <HAL_MspInit+0x4c>)
 8000ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_MspInit+0x4c>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000eb2:	2007      	movs	r0, #7
 8000eb4:	f001 f97c 	bl	80021b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40023800 	.word	0x40023800

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <NMI_Handler+0x4>

08000eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <HardFault_Handler+0x4>

08000ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <MemManage_Handler+0x4>

08000ed6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f10:	f000 fc58 	bl	80017c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8000f1c:	4802      	ldr	r0, [pc, #8]	; (8000f28 <DMA1_Stream0_IRQHandler+0x10>)
 8000f1e:	f001 fa37 	bl	8002390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000314 	.word	0x20000314

08000f2c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <DMA1_Stream4_IRQHandler+0x10>)
 8000f32:	f001 fa2d 	bl	8002390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200001c4 	.word	0x200001c4

08000f40 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <DMA1_Stream5_IRQHandler+0x10>)
 8000f46:	f001 fa23 	bl	8002390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000224 	.word	0x20000224

08000f54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f5c:	4a14      	ldr	r2, [pc, #80]	; (8000fb0 <_sbrk+0x5c>)
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <_sbrk+0x60>)
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f68:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <_sbrk+0x64>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d102      	bne.n	8000f76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <_sbrk+0x64>)
 8000f72:	4a12      	ldr	r2, [pc, #72]	; (8000fbc <_sbrk+0x68>)
 8000f74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <_sbrk+0x64>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d207      	bcs.n	8000f94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f84:	f003 fca4 	bl	80048d0 <__errno>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f92:	e009      	b.n	8000fa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <_sbrk+0x64>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f9a:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <_sbrk+0x64>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <_sbrk+0x64>)
 8000fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20018000 	.word	0x20018000
 8000fb4:	00000400 	.word	0x00000400
 8000fb8:	2000008c 	.word	0x2000008c
 8000fbc:	200003d0 	.word	0x200003d0

08000fc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <SystemInit+0x20>)
 8000fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fca:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <SystemInit+0x20>)
 8000fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim3_ch1_trig;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001000:	4b1e      	ldr	r3, [pc, #120]	; (800107c <MX_TIM1_Init+0x98>)
 8001002:	4a1f      	ldr	r2, [pc, #124]	; (8001080 <MX_TIM1_Init+0x9c>)
 8001004:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001006:	4b1d      	ldr	r3, [pc, #116]	; (800107c <MX_TIM1_Init+0x98>)
 8001008:	2200      	movs	r2, #0
 800100a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100c:	4b1b      	ldr	r3, [pc, #108]	; (800107c <MX_TIM1_Init+0x98>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001012:	4b1a      	ldr	r3, [pc, #104]	; (800107c <MX_TIM1_Init+0x98>)
 8001014:	2200      	movs	r2, #0
 8001016:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <MX_TIM1_Init+0x98>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800101e:	4b17      	ldr	r3, [pc, #92]	; (800107c <MX_TIM1_Init+0x98>)
 8001020:	2200      	movs	r2, #0
 8001022:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001024:	4b15      	ldr	r3, [pc, #84]	; (800107c <MX_TIM1_Init+0x98>)
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800102a:	4814      	ldr	r0, [pc, #80]	; (800107c <MX_TIM1_Init+0x98>)
 800102c:	f002 fb28 	bl	8003680 <HAL_TIM_Base_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8001036:	f7ff ff17 	bl	8000e68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800103a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001040:	f107 0308 	add.w	r3, r7, #8
 8001044:	4619      	mov	r1, r3
 8001046:	480d      	ldr	r0, [pc, #52]	; (800107c <MX_TIM1_Init+0x98>)
 8001048:	f002 fd2a 	bl	8003aa0 <HAL_TIM_ConfigClockSource>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8001052:	f7ff ff09 	bl	8000e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001056:	2300      	movs	r3, #0
 8001058:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800105e:	463b      	mov	r3, r7
 8001060:	4619      	mov	r1, r3
 8001062:	4806      	ldr	r0, [pc, #24]	; (800107c <MX_TIM1_Init+0x98>)
 8001064:	f003 f8b0 	bl	80041c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800106e:	f7ff fefb 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001072:	bf00      	nop
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000284 	.word	0x20000284
 8001080:	40010000 	.word	0x40010000

08001084 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800108a:	f107 0308 	add.w	r3, r7, #8
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001098:	463b      	mov	r3, r7
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010a0:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <MX_TIM2_Init+0x94>)
 80010a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010a8:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <MX_TIM2_Init+0x94>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ae:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <MX_TIM2_Init+0x94>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80010b4:	4b18      	ldr	r3, [pc, #96]	; (8001118 <MX_TIM2_Init+0x94>)
 80010b6:	f04f 32ff 	mov.w	r2, #4294967295
 80010ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010bc:	4b16      	ldr	r3, [pc, #88]	; (8001118 <MX_TIM2_Init+0x94>)
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <MX_TIM2_Init+0x94>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010c8:	4813      	ldr	r0, [pc, #76]	; (8001118 <MX_TIM2_Init+0x94>)
 80010ca:	f002 fad9 	bl	8003680 <HAL_TIM_Base_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010d4:	f7ff fec8 	bl	8000e68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	4619      	mov	r1, r3
 80010e4:	480c      	ldr	r0, [pc, #48]	; (8001118 <MX_TIM2_Init+0x94>)
 80010e6:	f002 fcdb 	bl	8003aa0 <HAL_TIM_ConfigClockSource>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010f0:	f7ff feba 	bl	8000e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f4:	2300      	movs	r3, #0
 80010f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010fc:	463b      	mov	r3, r7
 80010fe:	4619      	mov	r1, r3
 8001100:	4805      	ldr	r0, [pc, #20]	; (8001118 <MX_TIM2_Init+0x94>)
 8001102:	f003 f861 	bl	80041c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800110c:	f7ff feac 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200002cc 	.word	0x200002cc

0800111c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08e      	sub	sp, #56	; 0x38
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001122:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001130:	f107 0320 	add.w	r3, r7, #32
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
 8001148:	615a      	str	r2, [r3, #20]
 800114a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800114c:	4b31      	ldr	r3, [pc, #196]	; (8001214 <MX_TIM3_Init+0xf8>)
 800114e:	4a32      	ldr	r2, [pc, #200]	; (8001218 <MX_TIM3_Init+0xfc>)
 8001150:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001152:	4b30      	ldr	r3, [pc, #192]	; (8001214 <MX_TIM3_Init+0xf8>)
 8001154:	2253      	movs	r2, #83	; 0x53
 8001156:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001158:	4b2e      	ldr	r3, [pc, #184]	; (8001214 <MX_TIM3_Init+0xf8>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255-1;
 800115e:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <MX_TIM3_Init+0xf8>)
 8001160:	22fe      	movs	r2, #254	; 0xfe
 8001162:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001164:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <MX_TIM3_Init+0xf8>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116a:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <MX_TIM3_Init+0xf8>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001170:	4828      	ldr	r0, [pc, #160]	; (8001214 <MX_TIM3_Init+0xf8>)
 8001172:	f002 fa85 	bl	8003680 <HAL_TIM_Base_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800117c:	f7ff fe74 	bl	8000e68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001186:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800118a:	4619      	mov	r1, r3
 800118c:	4821      	ldr	r0, [pc, #132]	; (8001214 <MX_TIM3_Init+0xf8>)
 800118e:	f002 fc87 	bl	8003aa0 <HAL_TIM_ConfigClockSource>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001198:	f7ff fe66 	bl	8000e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800119c:	481d      	ldr	r0, [pc, #116]	; (8001214 <MX_TIM3_Init+0xf8>)
 800119e:	f002 fabe 	bl	800371e <HAL_TIM_PWM_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80011a8:	f7ff fe5e 	bl	8000e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ac:	2300      	movs	r3, #0
 80011ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011b4:	f107 0320 	add.w	r3, r7, #32
 80011b8:	4619      	mov	r1, r3
 80011ba:	4816      	ldr	r0, [pc, #88]	; (8001214 <MX_TIM3_Init+0xf8>)
 80011bc:	f003 f804 	bl	80041c8 <HAL_TIMEx_MasterConfigSynchronization>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80011c6:	f7ff fe4f 	bl	8000e68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ca:	2360      	movs	r3, #96	; 0x60
 80011cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 255;
 80011ce:	23ff      	movs	r3, #255	; 0xff
 80011d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	2200      	movs	r2, #0
 80011de:	4619      	mov	r1, r3
 80011e0:	480c      	ldr	r0, [pc, #48]	; (8001214 <MX_TIM3_Init+0xf8>)
 80011e2:	f002 fb9b 	bl	800391c <HAL_TIM_PWM_ConfigChannel>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80011ec:	f7ff fe3c 	bl	8000e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	2204      	movs	r2, #4
 80011f4:	4619      	mov	r1, r3
 80011f6:	4807      	ldr	r0, [pc, #28]	; (8001214 <MX_TIM3_Init+0xf8>)
 80011f8:	f002 fb90 	bl	800391c <HAL_TIM_PWM_ConfigChannel>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8001202:	f7ff fe31 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001206:	4803      	ldr	r0, [pc, #12]	; (8001214 <MX_TIM3_Init+0xf8>)
 8001208:	f000 f96e 	bl	80014e8 <HAL_TIM_MspPostInit>

}
 800120c:	bf00      	nop
 800120e:	3738      	adds	r7, #56	; 0x38
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	2000017c 	.word	0x2000017c
 8001218:	40000400 	.word	0x40000400

0800121c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001222:	f107 0320 	add.w	r3, r7, #32
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
 8001238:	611a      	str	r2, [r3, #16]
 800123a:	615a      	str	r2, [r3, #20]
 800123c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800123e:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <MX_TIM4_Init+0xa8>)
 8001240:	4a21      	ldr	r2, [pc, #132]	; (80012c8 <MX_TIM4_Init+0xac>)
 8001242:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8001244:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <MX_TIM4_Init+0xa8>)
 8001246:	2253      	movs	r2, #83	; 0x53
 8001248:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124a:	4b1e      	ldr	r3, [pc, #120]	; (80012c4 <MX_TIM4_Init+0xa8>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255-1;
 8001250:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <MX_TIM4_Init+0xa8>)
 8001252:	22fe      	movs	r2, #254	; 0xfe
 8001254:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001256:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <MX_TIM4_Init+0xa8>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125c:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <MX_TIM4_Init+0xa8>)
 800125e:	2200      	movs	r2, #0
 8001260:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001262:	4818      	ldr	r0, [pc, #96]	; (80012c4 <MX_TIM4_Init+0xa8>)
 8001264:	f002 fa5b 	bl	800371e <HAL_TIM_PWM_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800126e:	f7ff fdfb 	bl	8000e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001272:	2300      	movs	r3, #0
 8001274:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800127a:	f107 0320 	add.w	r3, r7, #32
 800127e:	4619      	mov	r1, r3
 8001280:	4810      	ldr	r0, [pc, #64]	; (80012c4 <MX_TIM4_Init+0xa8>)
 8001282:	f002 ffa1 	bl	80041c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 800128c:	f7ff fdec 	bl	8000e68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001290:	2360      	movs	r3, #96	; 0x60
 8001292:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 255;
 8001294:	23ff      	movs	r3, #255	; 0xff
 8001296:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	2200      	movs	r2, #0
 80012a4:	4619      	mov	r1, r3
 80012a6:	4807      	ldr	r0, [pc, #28]	; (80012c4 <MX_TIM4_Init+0xa8>)
 80012a8:	f002 fb38 	bl	800391c <HAL_TIM_PWM_ConfigChannel>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80012b2:	f7ff fdd9 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80012b6:	4803      	ldr	r0, [pc, #12]	; (80012c4 <MX_TIM4_Init+0xa8>)
 80012b8:	f000 f916 	bl	80014e8 <HAL_TIM_MspPostInit>

}
 80012bc:	bf00      	nop
 80012be:	3728      	adds	r7, #40	; 0x28
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000134 	.word	0x20000134
 80012c8:	40000800 	.word	0x40000800

080012cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a52      	ldr	r2, [pc, #328]	; (8001424 <HAL_TIM_Base_MspInit+0x158>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d10e      	bne.n	80012fc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	4b51      	ldr	r3, [pc, #324]	; (8001428 <HAL_TIM_Base_MspInit+0x15c>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	4a50      	ldr	r2, [pc, #320]	; (8001428 <HAL_TIM_Base_MspInit+0x15c>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6453      	str	r3, [r2, #68]	; 0x44
 80012ee:	4b4e      	ldr	r3, [pc, #312]	; (8001428 <HAL_TIM_Base_MspInit+0x15c>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	697b      	ldr	r3, [r7, #20]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80012fa:	e08e      	b.n	800141a <HAL_TIM_Base_MspInit+0x14e>
  else if(tim_baseHandle->Instance==TIM2)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001304:	d10e      	bne.n	8001324 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	4b47      	ldr	r3, [pc, #284]	; (8001428 <HAL_TIM_Base_MspInit+0x15c>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	4a46      	ldr	r2, [pc, #280]	; (8001428 <HAL_TIM_Base_MspInit+0x15c>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6413      	str	r3, [r2, #64]	; 0x40
 8001316:	4b44      	ldr	r3, [pc, #272]	; (8001428 <HAL_TIM_Base_MspInit+0x15c>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]
}
 8001322:	e07a      	b.n	800141a <HAL_TIM_Base_MspInit+0x14e>
  else if(tim_baseHandle->Instance==TIM3)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a40      	ldr	r2, [pc, #256]	; (800142c <HAL_TIM_Base_MspInit+0x160>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d175      	bne.n	800141a <HAL_TIM_Base_MspInit+0x14e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	4b3d      	ldr	r3, [pc, #244]	; (8001428 <HAL_TIM_Base_MspInit+0x15c>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	4a3c      	ldr	r2, [pc, #240]	; (8001428 <HAL_TIM_Base_MspInit+0x15c>)
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	6413      	str	r3, [r2, #64]	; 0x40
 800133e:	4b3a      	ldr	r3, [pc, #232]	; (8001428 <HAL_TIM_Base_MspInit+0x15c>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 800134a:	4b39      	ldr	r3, [pc, #228]	; (8001430 <HAL_TIM_Base_MspInit+0x164>)
 800134c:	4a39      	ldr	r2, [pc, #228]	; (8001434 <HAL_TIM_Base_MspInit+0x168>)
 800134e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 8001350:	4b37      	ldr	r3, [pc, #220]	; (8001430 <HAL_TIM_Base_MspInit+0x164>)
 8001352:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001356:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001358:	4b35      	ldr	r3, [pc, #212]	; (8001430 <HAL_TIM_Base_MspInit+0x164>)
 800135a:	2240      	movs	r2, #64	; 0x40
 800135c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800135e:	4b34      	ldr	r3, [pc, #208]	; (8001430 <HAL_TIM_Base_MspInit+0x164>)
 8001360:	2200      	movs	r2, #0
 8001362:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001364:	4b32      	ldr	r3, [pc, #200]	; (8001430 <HAL_TIM_Base_MspInit+0x164>)
 8001366:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800136a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800136c:	4b30      	ldr	r3, [pc, #192]	; (8001430 <HAL_TIM_Base_MspInit+0x164>)
 800136e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001372:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001374:	4b2e      	ldr	r3, [pc, #184]	; (8001430 <HAL_TIM_Base_MspInit+0x164>)
 8001376:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800137a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 800137c:	4b2c      	ldr	r3, [pc, #176]	; (8001430 <HAL_TIM_Base_MspInit+0x164>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8001382:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <HAL_TIM_Base_MspInit+0x164>)
 8001384:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001388:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800138a:	4b29      	ldr	r3, [pc, #164]	; (8001430 <HAL_TIM_Base_MspInit+0x164>)
 800138c:	2200      	movs	r2, #0
 800138e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8001390:	4827      	ldr	r0, [pc, #156]	; (8001430 <HAL_TIM_Base_MspInit+0x164>)
 8001392:	f000 ff4f 	bl	8002234 <HAL_DMA_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <HAL_TIM_Base_MspInit+0xd4>
      Error_Handler();
 800139c:	f7ff fd64 	bl	8000e68 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a23      	ldr	r2, [pc, #140]	; (8001430 <HAL_TIM_Base_MspInit+0x164>)
 80013a4:	629a      	str	r2, [r3, #40]	; 0x28
 80013a6:	4a22      	ldr	r2, [pc, #136]	; (8001430 <HAL_TIM_Base_MspInit+0x164>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 80013ac:	4b22      	ldr	r3, [pc, #136]	; (8001438 <HAL_TIM_Base_MspInit+0x16c>)
 80013ae:	4a23      	ldr	r2, [pc, #140]	; (800143c <HAL_TIM_Base_MspInit+0x170>)
 80013b0:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 80013b2:	4b21      	ldr	r3, [pc, #132]	; (8001438 <HAL_TIM_Base_MspInit+0x16c>)
 80013b4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80013b8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013ba:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <HAL_TIM_Base_MspInit+0x16c>)
 80013bc:	2240      	movs	r2, #64	; 0x40
 80013be:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c0:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <HAL_TIM_Base_MspInit+0x16c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80013c6:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <HAL_TIM_Base_MspInit+0x16c>)
 80013c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013cc:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013ce:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <HAL_TIM_Base_MspInit+0x16c>)
 80013d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013d4:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013d6:	4b18      	ldr	r3, [pc, #96]	; (8001438 <HAL_TIM_Base_MspInit+0x16c>)
 80013d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013dc:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80013de:	4b16      	ldr	r3, [pc, #88]	; (8001438 <HAL_TIM_Base_MspInit+0x16c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 80013e4:	4b14      	ldr	r3, [pc, #80]	; (8001438 <HAL_TIM_Base_MspInit+0x16c>)
 80013e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013ea:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <HAL_TIM_Base_MspInit+0x16c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80013f2:	4811      	ldr	r0, [pc, #68]	; (8001438 <HAL_TIM_Base_MspInit+0x16c>)
 80013f4:	f000 ff1e 	bl	8002234 <HAL_DMA_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_TIM_Base_MspInit+0x136>
      Error_Handler();
 80013fe:	f7ff fd33 	bl	8000e68 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a0c      	ldr	r2, [pc, #48]	; (8001438 <HAL_TIM_Base_MspInit+0x16c>)
 8001406:	625a      	str	r2, [r3, #36]	; 0x24
 8001408:	4a0b      	ldr	r2, [pc, #44]	; (8001438 <HAL_TIM_Base_MspInit+0x16c>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a09      	ldr	r2, [pc, #36]	; (8001438 <HAL_TIM_Base_MspInit+0x16c>)
 8001412:	639a      	str	r2, [r3, #56]	; 0x38
 8001414:	4a08      	ldr	r2, [pc, #32]	; (8001438 <HAL_TIM_Base_MspInit+0x16c>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6393      	str	r3, [r2, #56]	; 0x38
}
 800141a:	bf00      	nop
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40010000 	.word	0x40010000
 8001428:	40023800 	.word	0x40023800
 800142c:	40000400 	.word	0x40000400
 8001430:	20000224 	.word	0x20000224
 8001434:	40026088 	.word	0x40026088
 8001438:	200001c4 	.word	0x200001c4
 800143c:	40026070 	.word	0x40026070

08001440 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a22      	ldr	r2, [pc, #136]	; (80014d8 <HAL_TIM_PWM_MspInit+0x98>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d13e      	bne.n	80014d0 <HAL_TIM_PWM_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b21      	ldr	r3, [pc, #132]	; (80014dc <HAL_TIM_PWM_MspInit+0x9c>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	4a20      	ldr	r2, [pc, #128]	; (80014dc <HAL_TIM_PWM_MspInit+0x9c>)
 800145c:	f043 0304 	orr.w	r3, r3, #4
 8001460:	6413      	str	r3, [r2, #64]	; 0x40
 8001462:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <HAL_TIM_PWM_MspInit+0x9c>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f003 0304 	and.w	r3, r3, #4
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 800146e:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <HAL_TIM_PWM_MspInit+0xa0>)
 8001470:	4a1c      	ldr	r2, [pc, #112]	; (80014e4 <HAL_TIM_PWM_MspInit+0xa4>)
 8001472:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8001474:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <HAL_TIM_PWM_MspInit+0xa0>)
 8001476:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800147a:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800147c:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <HAL_TIM_PWM_MspInit+0xa0>)
 800147e:	2240      	movs	r2, #64	; 0x40
 8001480:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001482:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <HAL_TIM_PWM_MspInit+0xa0>)
 8001484:	2200      	movs	r2, #0
 8001486:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001488:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <HAL_TIM_PWM_MspInit+0xa0>)
 800148a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800148e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001490:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <HAL_TIM_PWM_MspInit+0xa0>)
 8001492:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001496:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_TIM_PWM_MspInit+0xa0>)
 800149a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800149e:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <HAL_TIM_PWM_MspInit+0xa0>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <HAL_TIM_PWM_MspInit+0xa0>)
 80014a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014ac:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <HAL_TIM_PWM_MspInit+0xa0>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 80014b4:	480a      	ldr	r0, [pc, #40]	; (80014e0 <HAL_TIM_PWM_MspInit+0xa0>)
 80014b6:	f000 febd 	bl	8002234 <HAL_DMA_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <HAL_TIM_PWM_MspInit+0x84>
    {
      Error_Handler();
 80014c0:	f7ff fcd2 	bl	8000e68 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a06      	ldr	r2, [pc, #24]	; (80014e0 <HAL_TIM_PWM_MspInit+0xa0>)
 80014c8:	625a      	str	r2, [r3, #36]	; 0x24
 80014ca:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <HAL_TIM_PWM_MspInit+0xa0>)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40000800 	.word	0x40000800
 80014dc:	40023800 	.word	0x40023800
 80014e0:	20000314 	.word	0x20000314
 80014e4:	40026010 	.word	0x40026010

080014e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a33      	ldr	r2, [pc, #204]	; (80015d4 <HAL_TIM_MspPostInit+0xec>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d13c      	bne.n	8001584 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	4b32      	ldr	r3, [pc, #200]	; (80015d8 <HAL_TIM_MspPostInit+0xf0>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a31      	ldr	r2, [pc, #196]	; (80015d8 <HAL_TIM_MspPostInit+0xf0>)
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b2f      	ldr	r3, [pc, #188]	; (80015d8 <HAL_TIM_MspPostInit+0xf0>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0304 	and.w	r3, r3, #4
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <HAL_TIM_MspPostInit+0xf0>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a2a      	ldr	r2, [pc, #168]	; (80015d8 <HAL_TIM_MspPostInit+0xf0>)
 8001530:	f043 0302 	orr.w	r3, r3, #2
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b28      	ldr	r3, [pc, #160]	; (80015d8 <HAL_TIM_MspPostInit+0xf0>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = LED_G_Pin;
 8001542:	2380      	movs	r3, #128	; 0x80
 8001544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800154a:	2302      	movs	r3, #2
 800154c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800154e:	2302      	movs	r3, #2
 8001550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001552:	2302      	movs	r3, #2
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	481f      	ldr	r0, [pc, #124]	; (80015dc <HAL_TIM_MspPostInit+0xf4>)
 800155e:	f001 f953 	bl	8002808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_B_Pin;
 8001562:	2310      	movs	r3, #16
 8001564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800156a:	2302      	movs	r3, #2
 800156c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800156e:	2302      	movs	r3, #2
 8001570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001572:	2302      	movs	r3, #2
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4619      	mov	r1, r3
 800157c:	4818      	ldr	r0, [pc, #96]	; (80015e0 <HAL_TIM_MspPostInit+0xf8>)
 800157e:	f001 f943 	bl	8002808 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001582:	e022      	b.n	80015ca <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM4)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a16      	ldr	r2, [pc, #88]	; (80015e4 <HAL_TIM_MspPostInit+0xfc>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d11d      	bne.n	80015ca <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <HAL_TIM_MspPostInit+0xf0>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <HAL_TIM_MspPostInit+0xf0>)
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <HAL_TIM_MspPostInit+0xf0>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LED_R_Pin;
 80015aa:	2340      	movs	r3, #64	; 0x40
 80015ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ae:	2302      	movs	r3, #2
 80015b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015b2:	2302      	movs	r3, #2
 80015b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015b6:	2302      	movs	r3, #2
 80015b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015ba:	2302      	movs	r3, #2
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	4806      	ldr	r0, [pc, #24]	; (80015e0 <HAL_TIM_MspPostInit+0xf8>)
 80015c6:	f001 f91f 	bl	8002808 <HAL_GPIO_Init>
}
 80015ca:	bf00      	nop
 80015cc:	3728      	adds	r7, #40	; 0x28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40000400 	.word	0x40000400
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020800 	.word	0x40020800
 80015e0:	40020400 	.word	0x40020400
 80015e4:	40000800 	.word	0x40000800

080015e8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015ec:	4b11      	ldr	r3, [pc, #68]	; (8001634 <MX_USART2_UART_Init+0x4c>)
 80015ee:	4a12      	ldr	r2, [pc, #72]	; (8001638 <MX_USART2_UART_Init+0x50>)
 80015f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <MX_USART2_UART_Init+0x4c>)
 80015f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <MX_USART2_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <MX_USART2_UART_Init+0x4c>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001606:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <MX_USART2_UART_Init+0x4c>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800160c:	4b09      	ldr	r3, [pc, #36]	; (8001634 <MX_USART2_UART_Init+0x4c>)
 800160e:	220c      	movs	r2, #12
 8001610:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <MX_USART2_UART_Init+0x4c>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <MX_USART2_UART_Init+0x4c>)
 800161a:	2200      	movs	r2, #0
 800161c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800161e:	4805      	ldr	r0, [pc, #20]	; (8001634 <MX_USART2_UART_Init+0x4c>)
 8001620:	f002 fe40 	bl	80042a4 <HAL_UART_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800162a:	f7ff fc1d 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000374 	.word	0x20000374
 8001638:	40004400 	.word	0x40004400

0800163c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	; 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a19      	ldr	r2, [pc, #100]	; (80016c0 <HAL_UART_MspInit+0x84>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d12b      	bne.n	80016b6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <HAL_UART_MspInit+0x88>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a17      	ldr	r2, [pc, #92]	; (80016c4 <HAL_UART_MspInit+0x88>)
 8001668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <HAL_UART_MspInit+0x88>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <HAL_UART_MspInit+0x88>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a10      	ldr	r2, [pc, #64]	; (80016c4 <HAL_UART_MspInit+0x88>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <HAL_UART_MspInit+0x88>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001696:	230c      	movs	r3, #12
 8001698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a2:	2300      	movs	r3, #0
 80016a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016a6:	2307      	movs	r3, #7
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	4619      	mov	r1, r3
 80016b0:	4805      	ldr	r0, [pc, #20]	; (80016c8 <HAL_UART_MspInit+0x8c>)
 80016b2:	f001 f8a9 	bl	8002808 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016b6:	bf00      	nop
 80016b8:	3728      	adds	r7, #40	; 0x28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40004400 	.word	0x40004400
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40020000 	.word	0x40020000

080016cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001704 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016d0:	480d      	ldr	r0, [pc, #52]	; (8001708 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016d2:	490e      	ldr	r1, [pc, #56]	; (800170c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016d4:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d8:	e002      	b.n	80016e0 <LoopCopyDataInit>

080016da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016de:	3304      	adds	r3, #4

080016e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e4:	d3f9      	bcc.n	80016da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016e6:	4a0b      	ldr	r2, [pc, #44]	; (8001714 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016e8:	4c0b      	ldr	r4, [pc, #44]	; (8001718 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ec:	e001      	b.n	80016f2 <LoopFillZerobss>

080016ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f0:	3204      	adds	r2, #4

080016f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f4:	d3fb      	bcc.n	80016ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016f6:	f7ff fc63 	bl	8000fc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016fa:	f003 f8ef 	bl	80048dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016fe:	f7ff fa6f 	bl	8000be0 <main>
  bx  lr    
 8001702:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001704:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800170c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001710:	0800522c 	.word	0x0800522c
  ldr r2, =_sbss
 8001714:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001718:	200003cc 	.word	0x200003cc

0800171c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800171c:	e7fe      	b.n	800171c <ADC_IRQHandler>
	...

08001720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001724:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <HAL_Init+0x40>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a0d      	ldr	r2, [pc, #52]	; (8001760 <HAL_Init+0x40>)
 800172a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800172e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001730:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <HAL_Init+0x40>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <HAL_Init+0x40>)
 8001736:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800173a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <HAL_Init+0x40>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a07      	ldr	r2, [pc, #28]	; (8001760 <HAL_Init+0x40>)
 8001742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001746:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001748:	2003      	movs	r0, #3
 800174a:	f000 fd31 	bl	80021b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800174e:	2000      	movs	r0, #0
 8001750:	f000 f808 	bl	8001764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001754:	f7ff fb8e 	bl	8000e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40023c00 	.word	0x40023c00

08001764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800176c:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <HAL_InitTick+0x54>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <HAL_InitTick+0x58>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4619      	mov	r1, r3
 8001776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800177a:	fbb3 f3f1 	udiv	r3, r3, r1
 800177e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001782:	4618      	mov	r0, r3
 8001784:	f000 fd49 	bl	800221a <HAL_SYSTICK_Config>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e00e      	b.n	80017b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b0f      	cmp	r3, #15
 8001796:	d80a      	bhi.n	80017ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001798:	2200      	movs	r2, #0
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	f04f 30ff 	mov.w	r0, #4294967295
 80017a0:	f000 fd11 	bl	80021c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017a4:	4a06      	ldr	r2, [pc, #24]	; (80017c0 <HAL_InitTick+0x5c>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
 80017ac:	e000      	b.n	80017b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000000 	.word	0x20000000
 80017bc:	20000008 	.word	0x20000008
 80017c0:	20000004 	.word	0x20000004

080017c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_IncTick+0x20>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_IncTick+0x24>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4413      	add	r3, r2
 80017d4:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <HAL_IncTick+0x24>)
 80017d6:	6013      	str	r3, [r2, #0]
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20000008 	.word	0x20000008
 80017e8:	200003b8 	.word	0x200003b8

080017ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return uwTick;
 80017f0:	4b03      	ldr	r3, [pc, #12]	; (8001800 <HAL_GetTick+0x14>)
 80017f2:	681b      	ldr	r3, [r3, #0]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	200003b8 	.word	0x200003b8

08001804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800180c:	f7ff ffee 	bl	80017ec <HAL_GetTick>
 8001810:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800181c:	d005      	beq.n	800182a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800181e:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <HAL_Delay+0x44>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4413      	add	r3, r2
 8001828:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800182a:	bf00      	nop
 800182c:	f7ff ffde 	bl	80017ec <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	429a      	cmp	r2, r3
 800183a:	d8f7      	bhi.n	800182c <HAL_Delay+0x28>
  {
  }
}
 800183c:	bf00      	nop
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000008 	.word	0x20000008

0800184c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001854:	2300      	movs	r3, #0
 8001856:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e033      	b.n	80018ca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	2b00      	cmp	r3, #0
 8001868:	d109      	bne.n	800187e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7fe ff10 	bl	8000690 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	f003 0310 	and.w	r3, r3, #16
 8001886:	2b00      	cmp	r3, #0
 8001888:	d118      	bne.n	80018bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001892:	f023 0302 	bic.w	r3, r3, #2
 8001896:	f043 0202 	orr.w	r2, r3, #2
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 faba 	bl	8001e18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f023 0303 	bic.w	r3, r3, #3
 80018b2:	f043 0201 	orr.w	r2, r3, #1
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	641a      	str	r2, [r3, #64]	; 0x40
 80018ba:	e001      	b.n	80018c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80018dc:	2300      	movs	r3, #0
 80018de:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d101      	bne.n	80018ee <HAL_ADC_Start+0x1a>
 80018ea:	2302      	movs	r3, #2
 80018ec:	e097      	b.n	8001a1e <HAL_ADC_Start+0x14a>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b01      	cmp	r3, #1
 8001902:	d018      	beq.n	8001936 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f042 0201 	orr.w	r2, r2, #1
 8001912:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001914:	4b45      	ldr	r3, [pc, #276]	; (8001a2c <HAL_ADC_Start+0x158>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a45      	ldr	r2, [pc, #276]	; (8001a30 <HAL_ADC_Start+0x15c>)
 800191a:	fba2 2303 	umull	r2, r3, r2, r3
 800191e:	0c9a      	lsrs	r2, r3, #18
 8001920:	4613      	mov	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	4413      	add	r3, r2
 8001926:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001928:	e002      	b.n	8001930 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	3b01      	subs	r3, #1
 800192e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f9      	bne.n	800192a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b01      	cmp	r3, #1
 8001942:	d15f      	bne.n	8001a04 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800194c:	f023 0301 	bic.w	r3, r3, #1
 8001950:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001962:	2b00      	cmp	r3, #0
 8001964:	d007      	beq.n	8001976 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800196e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800197e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001982:	d106      	bne.n	8001992 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001988:	f023 0206 	bic.w	r2, r3, #6
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	645a      	str	r2, [r3, #68]	; 0x44
 8001990:	e002      	b.n	8001998 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019a0:	4b24      	ldr	r3, [pc, #144]	; (8001a34 <HAL_ADC_Start+0x160>)
 80019a2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80019ac:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 031f 	and.w	r3, r3, #31
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10f      	bne.n	80019da <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d129      	bne.n	8001a1c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	e020      	b.n	8001a1c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a16      	ldr	r2, [pc, #88]	; (8001a38 <HAL_ADC_Start+0x164>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d11b      	bne.n	8001a1c <HAL_ADC_Start+0x148>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d114      	bne.n	8001a1c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	e00b      	b.n	8001a1c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	f043 0210 	orr.w	r2, r3, #16
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a14:	f043 0201 	orr.w	r2, r3, #1
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	431bde83 	.word	0x431bde83
 8001a34:	40012300 	.word	0x40012300
 8001a38:	40012000 	.word	0x40012000

08001a3c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d101      	bne.n	8001a52 <HAL_ADC_Stop+0x16>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e021      	b.n	8001a96 <HAL_ADC_Stop+0x5a>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 0201 	bic.w	r2, r2, #1
 8001a68:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d109      	bne.n	8001a8c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	f043 0201 	orr.w	r2, r3, #1
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b084      	sub	sp, #16
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001abe:	d113      	bne.n	8001ae8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ace:	d10b      	bne.n	8001ae8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	f043 0220 	orr.w	r2, r3, #32
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e063      	b.n	8001bb0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001ae8:	f7ff fe80 	bl	80017ec <HAL_GetTick>
 8001aec:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001aee:	e021      	b.n	8001b34 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af6:	d01d      	beq.n	8001b34 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d007      	beq.n	8001b0e <HAL_ADC_PollForConversion+0x6c>
 8001afe:	f7ff fe75 	bl	80017ec <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d212      	bcs.n	8001b34 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d00b      	beq.n	8001b34 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	f043 0204 	orr.w	r2, r3, #4
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e03d      	b.n	8001bb0 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d1d6      	bne.n	8001af0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f06f 0212 	mvn.w	r2, #18
 8001b4a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d123      	bne.n	8001bae <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d11f      	bne.n	8001bae <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b74:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d006      	beq.n	8001b8a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d111      	bne.n	8001bae <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d105      	bne.n	8001bae <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f043 0201 	orr.w	r2, r3, #1
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d101      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x1c>
 8001bec:	2302      	movs	r3, #2
 8001bee:	e105      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x228>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b09      	cmp	r3, #9
 8001bfe:	d925      	bls.n	8001c4c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68d9      	ldr	r1, [r3, #12]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4613      	mov	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4413      	add	r3, r2
 8001c14:	3b1e      	subs	r3, #30
 8001c16:	2207      	movs	r2, #7
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43da      	mvns	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	400a      	ands	r2, r1
 8001c24:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68d9      	ldr	r1, [r3, #12]
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	4618      	mov	r0, r3
 8001c38:	4603      	mov	r3, r0
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4403      	add	r3, r0
 8001c3e:	3b1e      	subs	r3, #30
 8001c40:	409a      	lsls	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	e022      	b.n	8001c92 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6919      	ldr	r1, [r3, #16]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	2207      	movs	r2, #7
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43da      	mvns	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	400a      	ands	r2, r1
 8001c6e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6919      	ldr	r1, [r3, #16]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	4618      	mov	r0, r3
 8001c82:	4603      	mov	r3, r0
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	4403      	add	r3, r0
 8001c88:	409a      	lsls	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b06      	cmp	r3, #6
 8001c98:	d824      	bhi.n	8001ce4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	3b05      	subs	r3, #5
 8001cac:	221f      	movs	r2, #31
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	400a      	ands	r2, r1
 8001cba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	4618      	mov	r0, r3
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3b05      	subs	r3, #5
 8001cd6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ce2:	e04c      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b0c      	cmp	r3, #12
 8001cea:	d824      	bhi.n	8001d36 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	3b23      	subs	r3, #35	; 0x23
 8001cfe:	221f      	movs	r2, #31
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43da      	mvns	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	400a      	ands	r2, r1
 8001d0c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	4613      	mov	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	3b23      	subs	r3, #35	; 0x23
 8001d28:	fa00 f203 	lsl.w	r2, r0, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	430a      	orrs	r2, r1
 8001d32:	631a      	str	r2, [r3, #48]	; 0x30
 8001d34:	e023      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	3b41      	subs	r3, #65	; 0x41
 8001d48:	221f      	movs	r2, #31
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	400a      	ands	r2, r1
 8001d56:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	4618      	mov	r0, r3
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	3b41      	subs	r3, #65	; 0x41
 8001d72:	fa00 f203 	lsl.w	r2, r0, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d7e:	4b22      	ldr	r3, [pc, #136]	; (8001e08 <HAL_ADC_ConfigChannel+0x234>)
 8001d80:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a21      	ldr	r2, [pc, #132]	; (8001e0c <HAL_ADC_ConfigChannel+0x238>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d109      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x1cc>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b12      	cmp	r3, #18
 8001d92:	d105      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a19      	ldr	r2, [pc, #100]	; (8001e0c <HAL_ADC_ConfigChannel+0x238>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d123      	bne.n	8001df2 <HAL_ADC_ConfigChannel+0x21e>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b10      	cmp	r3, #16
 8001db0:	d003      	beq.n	8001dba <HAL_ADC_ConfigChannel+0x1e6>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2b11      	cmp	r3, #17
 8001db8:	d11b      	bne.n	8001df2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2b10      	cmp	r3, #16
 8001dcc:	d111      	bne.n	8001df2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dce:	4b10      	ldr	r3, [pc, #64]	; (8001e10 <HAL_ADC_ConfigChannel+0x23c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a10      	ldr	r2, [pc, #64]	; (8001e14 <HAL_ADC_ConfigChannel+0x240>)
 8001dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd8:	0c9a      	lsrs	r2, r3, #18
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001de4:	e002      	b.n	8001dec <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f9      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	40012300 	.word	0x40012300
 8001e0c:	40012000 	.word	0x40012000
 8001e10:	20000000 	.word	0x20000000
 8001e14:	431bde83 	.word	0x431bde83

08001e18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e20:	4b79      	ldr	r3, [pc, #484]	; (8002008 <ADC_Init+0x1f0>)
 8001e22:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6859      	ldr	r1, [r3, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	021a      	lsls	r2, r3, #8
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6859      	ldr	r1, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6899      	ldr	r1, [r3, #8]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eaa:	4a58      	ldr	r2, [pc, #352]	; (800200c <ADC_Init+0x1f4>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d022      	beq.n	8001ef6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ebe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6899      	ldr	r1, [r3, #8]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ee0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6899      	ldr	r1, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	e00f      	b.n	8001f16 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f14:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0202 	bic.w	r2, r2, #2
 8001f24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6899      	ldr	r1, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	7e1b      	ldrb	r3, [r3, #24]
 8001f30:	005a      	lsls	r2, r3, #1
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d01b      	beq.n	8001f7c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f52:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6859      	ldr	r1, [r3, #4]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	035a      	lsls	r2, r3, #13
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	e007      	b.n	8001f8c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	051a      	lsls	r2, r3, #20
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6899      	ldr	r1, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fce:	025a      	lsls	r2, r3, #9
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fe6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6899      	ldr	r1, [r3, #8]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	029a      	lsls	r2, r3, #10
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	609a      	str	r2, [r3, #8]
}
 8001ffc:	bf00      	nop
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	40012300 	.word	0x40012300
 800200c:	0f000001 	.word	0x0f000001

08002010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <__NVIC_SetPriorityGrouping+0x44>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800202c:	4013      	ands	r3, r2
 800202e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800203c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002042:	4a04      	ldr	r2, [pc, #16]	; (8002054 <__NVIC_SetPriorityGrouping+0x44>)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	60d3      	str	r3, [r2, #12]
}
 8002048:	bf00      	nop
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <__NVIC_GetPriorityGrouping+0x18>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	0a1b      	lsrs	r3, r3, #8
 8002062:	f003 0307 	and.w	r3, r3, #7
}
 8002066:	4618      	mov	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800207e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002082:	2b00      	cmp	r3, #0
 8002084:	db0b      	blt.n	800209e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	f003 021f 	and.w	r2, r3, #31
 800208c:	4907      	ldr	r1, [pc, #28]	; (80020ac <__NVIC_EnableIRQ+0x38>)
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	095b      	lsrs	r3, r3, #5
 8002094:	2001      	movs	r0, #1
 8002096:	fa00 f202 	lsl.w	r2, r0, r2
 800209a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	e000e100 	.word	0xe000e100

080020b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	6039      	str	r1, [r7, #0]
 80020ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	db0a      	blt.n	80020da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	490c      	ldr	r1, [pc, #48]	; (80020fc <__NVIC_SetPriority+0x4c>)
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	0112      	lsls	r2, r2, #4
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	440b      	add	r3, r1
 80020d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d8:	e00a      	b.n	80020f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	4908      	ldr	r1, [pc, #32]	; (8002100 <__NVIC_SetPriority+0x50>)
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	3b04      	subs	r3, #4
 80020e8:	0112      	lsls	r2, r2, #4
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	440b      	add	r3, r1
 80020ee:	761a      	strb	r2, [r3, #24]
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	e000e100 	.word	0xe000e100
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002104:	b480      	push	{r7}
 8002106:	b089      	sub	sp, #36	; 0x24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f1c3 0307 	rsb	r3, r3, #7
 800211e:	2b04      	cmp	r3, #4
 8002120:	bf28      	it	cs
 8002122:	2304      	movcs	r3, #4
 8002124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3304      	adds	r3, #4
 800212a:	2b06      	cmp	r3, #6
 800212c:	d902      	bls.n	8002134 <NVIC_EncodePriority+0x30>
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3b03      	subs	r3, #3
 8002132:	e000      	b.n	8002136 <NVIC_EncodePriority+0x32>
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002138:	f04f 32ff 	mov.w	r2, #4294967295
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43da      	mvns	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	401a      	ands	r2, r3
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800214c:	f04f 31ff 	mov.w	r1, #4294967295
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	43d9      	mvns	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800215c:	4313      	orrs	r3, r2
         );
}
 800215e:	4618      	mov	r0, r3
 8002160:	3724      	adds	r7, #36	; 0x24
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
	...

0800216c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3b01      	subs	r3, #1
 8002178:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800217c:	d301      	bcc.n	8002182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800217e:	2301      	movs	r3, #1
 8002180:	e00f      	b.n	80021a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002182:	4a0a      	ldr	r2, [pc, #40]	; (80021ac <SysTick_Config+0x40>)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3b01      	subs	r3, #1
 8002188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800218a:	210f      	movs	r1, #15
 800218c:	f04f 30ff 	mov.w	r0, #4294967295
 8002190:	f7ff ff8e 	bl	80020b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002194:	4b05      	ldr	r3, [pc, #20]	; (80021ac <SysTick_Config+0x40>)
 8002196:	2200      	movs	r2, #0
 8002198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800219a:	4b04      	ldr	r3, [pc, #16]	; (80021ac <SysTick_Config+0x40>)
 800219c:	2207      	movs	r2, #7
 800219e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	e000e010 	.word	0xe000e010

080021b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7ff ff29 	bl	8002010 <__NVIC_SetPriorityGrouping>
}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b086      	sub	sp, #24
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	4603      	mov	r3, r0
 80021ce:	60b9      	str	r1, [r7, #8]
 80021d0:	607a      	str	r2, [r7, #4]
 80021d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021d8:	f7ff ff3e 	bl	8002058 <__NVIC_GetPriorityGrouping>
 80021dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	68b9      	ldr	r1, [r7, #8]
 80021e2:	6978      	ldr	r0, [r7, #20]
 80021e4:	f7ff ff8e 	bl	8002104 <NVIC_EncodePriority>
 80021e8:	4602      	mov	r2, r0
 80021ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ee:	4611      	mov	r1, r2
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff ff5d 	bl	80020b0 <__NVIC_SetPriority>
}
 80021f6:	bf00      	nop
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b082      	sub	sp, #8
 8002202:	af00      	add	r7, sp, #0
 8002204:	4603      	mov	r3, r0
 8002206:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ff31 	bl	8002074 <__NVIC_EnableIRQ>
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7ff ffa2 	bl	800216c <SysTick_Config>
 8002228:	4603      	mov	r3, r0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002240:	f7ff fad4 	bl	80017ec <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e099      	b.n	8002384 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2202      	movs	r2, #2
 8002254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0201 	bic.w	r2, r2, #1
 800226e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002270:	e00f      	b.n	8002292 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002272:	f7ff fabb 	bl	80017ec <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b05      	cmp	r3, #5
 800227e:	d908      	bls.n	8002292 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2220      	movs	r2, #32
 8002284:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2203      	movs	r2, #3
 800228a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e078      	b.n	8002384 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1e8      	bne.n	8002272 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	4b38      	ldr	r3, [pc, #224]	; (800238c <HAL_DMA_Init+0x158>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d107      	bne.n	80022fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f4:	4313      	orrs	r3, r2
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f023 0307 	bic.w	r3, r3, #7
 8002312:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	4313      	orrs	r3, r2
 800231c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	2b04      	cmp	r3, #4
 8002324:	d117      	bne.n	8002356 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	4313      	orrs	r3, r2
 800232e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00e      	beq.n	8002356 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f9e9 	bl	8002710 <DMA_CheckFifoParam>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2240      	movs	r2, #64	; 0x40
 8002348:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002352:	2301      	movs	r3, #1
 8002354:	e016      	b.n	8002384 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f9a0 	bl	80026a4 <DMA_CalcBaseAndBitshift>
 8002364:	4603      	mov	r3, r0
 8002366:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236c:	223f      	movs	r2, #63	; 0x3f
 800236e:	409a      	lsls	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	f010803f 	.word	0xf010803f

08002390 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800239c:	4b92      	ldr	r3, [pc, #584]	; (80025e8 <HAL_DMA_IRQHandler+0x258>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a92      	ldr	r2, [pc, #584]	; (80025ec <HAL_DMA_IRQHandler+0x25c>)
 80023a2:	fba2 2303 	umull	r2, r3, r2, r3
 80023a6:	0a9b      	lsrs	r3, r3, #10
 80023a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ba:	2208      	movs	r2, #8
 80023bc:	409a      	lsls	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d01a      	beq.n	80023fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d013      	beq.n	80023fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0204 	bic.w	r2, r2, #4
 80023e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e8:	2208      	movs	r2, #8
 80023ea:	409a      	lsls	r2, r3
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f4:	f043 0201 	orr.w	r2, r3, #1
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002400:	2201      	movs	r2, #1
 8002402:	409a      	lsls	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4013      	ands	r3, r2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d012      	beq.n	8002432 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00b      	beq.n	8002432 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241e:	2201      	movs	r2, #1
 8002420:	409a      	lsls	r2, r3
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242a:	f043 0202 	orr.w	r2, r3, #2
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002436:	2204      	movs	r2, #4
 8002438:	409a      	lsls	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	4013      	ands	r3, r2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d012      	beq.n	8002468 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00b      	beq.n	8002468 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002454:	2204      	movs	r2, #4
 8002456:	409a      	lsls	r2, r3
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002460:	f043 0204 	orr.w	r2, r3, #4
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246c:	2210      	movs	r2, #16
 800246e:	409a      	lsls	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4013      	ands	r3, r2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d043      	beq.n	8002500 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d03c      	beq.n	8002500 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248a:	2210      	movs	r2, #16
 800248c:	409a      	lsls	r2, r3
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d018      	beq.n	80024d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d108      	bne.n	80024c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d024      	beq.n	8002500 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	4798      	blx	r3
 80024be:	e01f      	b.n	8002500 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d01b      	beq.n	8002500 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	4798      	blx	r3
 80024d0:	e016      	b.n	8002500 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d107      	bne.n	80024f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0208 	bic.w	r2, r2, #8
 80024ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002504:	2220      	movs	r2, #32
 8002506:	409a      	lsls	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4013      	ands	r3, r2
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 808e 	beq.w	800262e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 8086 	beq.w	800262e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002526:	2220      	movs	r2, #32
 8002528:	409a      	lsls	r2, r3
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b05      	cmp	r3, #5
 8002538:	d136      	bne.n	80025a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0216 	bic.w	r2, r2, #22
 8002548:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695a      	ldr	r2, [r3, #20]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002558:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	2b00      	cmp	r3, #0
 8002560:	d103      	bne.n	800256a <HAL_DMA_IRQHandler+0x1da>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002566:	2b00      	cmp	r3, #0
 8002568:	d007      	beq.n	800257a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0208 	bic.w	r2, r2, #8
 8002578:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257e:	223f      	movs	r2, #63	; 0x3f
 8002580:	409a      	lsls	r2, r3
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800259a:	2b00      	cmp	r3, #0
 800259c:	d07d      	beq.n	800269a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	4798      	blx	r3
        }
        return;
 80025a6:	e078      	b.n	800269a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d01c      	beq.n	80025f0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d108      	bne.n	80025d6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d030      	beq.n	800262e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	4798      	blx	r3
 80025d4:	e02b      	b.n	800262e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d027      	beq.n	800262e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	4798      	blx	r3
 80025e6:	e022      	b.n	800262e <HAL_DMA_IRQHandler+0x29e>
 80025e8:	20000000 	.word	0x20000000
 80025ec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10f      	bne.n	800261e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0210 	bic.w	r2, r2, #16
 800260c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002632:	2b00      	cmp	r3, #0
 8002634:	d032      	beq.n	800269c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d022      	beq.n	8002688 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2205      	movs	r2, #5
 8002646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0201 	bic.w	r2, r2, #1
 8002658:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	3301      	adds	r3, #1
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	429a      	cmp	r2, r3
 8002664:	d307      	bcc.n	8002676 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f2      	bne.n	800265a <HAL_DMA_IRQHandler+0x2ca>
 8002674:	e000      	b.n	8002678 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002676:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	4798      	blx	r3
 8002698:	e000      	b.n	800269c <HAL_DMA_IRQHandler+0x30c>
        return;
 800269a:	bf00      	nop
    }
  }
}
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop

080026a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	3b10      	subs	r3, #16
 80026b4:	4a14      	ldr	r2, [pc, #80]	; (8002708 <DMA_CalcBaseAndBitshift+0x64>)
 80026b6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ba:	091b      	lsrs	r3, r3, #4
 80026bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026be:	4a13      	ldr	r2, [pc, #76]	; (800270c <DMA_CalcBaseAndBitshift+0x68>)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4413      	add	r3, r2
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2b03      	cmp	r3, #3
 80026d0:	d909      	bls.n	80026e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026da:	f023 0303 	bic.w	r3, r3, #3
 80026de:	1d1a      	adds	r2, r3, #4
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	659a      	str	r2, [r3, #88]	; 0x58
 80026e4:	e007      	b.n	80026f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026ee:	f023 0303 	bic.w	r3, r3, #3
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	aaaaaaab 	.word	0xaaaaaaab
 800270c:	080051e0 	.word	0x080051e0

08002710 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002720:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d11f      	bne.n	800276a <DMA_CheckFifoParam+0x5a>
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2b03      	cmp	r3, #3
 800272e:	d856      	bhi.n	80027de <DMA_CheckFifoParam+0xce>
 8002730:	a201      	add	r2, pc, #4	; (adr r2, 8002738 <DMA_CheckFifoParam+0x28>)
 8002732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002736:	bf00      	nop
 8002738:	08002749 	.word	0x08002749
 800273c:	0800275b 	.word	0x0800275b
 8002740:	08002749 	.word	0x08002749
 8002744:	080027df 	.word	0x080027df
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d046      	beq.n	80027e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002758:	e043      	b.n	80027e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002762:	d140      	bne.n	80027e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002768:	e03d      	b.n	80027e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002772:	d121      	bne.n	80027b8 <DMA_CheckFifoParam+0xa8>
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2b03      	cmp	r3, #3
 8002778:	d837      	bhi.n	80027ea <DMA_CheckFifoParam+0xda>
 800277a:	a201      	add	r2, pc, #4	; (adr r2, 8002780 <DMA_CheckFifoParam+0x70>)
 800277c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002780:	08002791 	.word	0x08002791
 8002784:	08002797 	.word	0x08002797
 8002788:	08002791 	.word	0x08002791
 800278c:	080027a9 	.word	0x080027a9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
      break;
 8002794:	e030      	b.n	80027f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d025      	beq.n	80027ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027a6:	e022      	b.n	80027ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027b0:	d11f      	bne.n	80027f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027b6:	e01c      	b.n	80027f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d903      	bls.n	80027c6 <DMA_CheckFifoParam+0xb6>
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	d003      	beq.n	80027cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027c4:	e018      	b.n	80027f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	73fb      	strb	r3, [r7, #15]
      break;
 80027ca:	e015      	b.n	80027f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00e      	beq.n	80027f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	73fb      	strb	r3, [r7, #15]
      break;
 80027dc:	e00b      	b.n	80027f6 <DMA_CheckFifoParam+0xe6>
      break;
 80027de:	bf00      	nop
 80027e0:	e00a      	b.n	80027f8 <DMA_CheckFifoParam+0xe8>
      break;
 80027e2:	bf00      	nop
 80027e4:	e008      	b.n	80027f8 <DMA_CheckFifoParam+0xe8>
      break;
 80027e6:	bf00      	nop
 80027e8:	e006      	b.n	80027f8 <DMA_CheckFifoParam+0xe8>
      break;
 80027ea:	bf00      	nop
 80027ec:	e004      	b.n	80027f8 <DMA_CheckFifoParam+0xe8>
      break;
 80027ee:	bf00      	nop
 80027f0:	e002      	b.n	80027f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80027f2:	bf00      	nop
 80027f4:	e000      	b.n	80027f8 <DMA_CheckFifoParam+0xe8>
      break;
 80027f6:	bf00      	nop
    }
  } 
  
  return status; 
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop

08002808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002808:	b480      	push	{r7}
 800280a:	b089      	sub	sp, #36	; 0x24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002816:	2300      	movs	r3, #0
 8002818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800281a:	2300      	movs	r3, #0
 800281c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800281e:	2300      	movs	r3, #0
 8002820:	61fb      	str	r3, [r7, #28]
 8002822:	e159      	b.n	8002ad8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002824:	2201      	movs	r2, #1
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	4013      	ands	r3, r2
 8002836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	429a      	cmp	r2, r3
 800283e:	f040 8148 	bne.w	8002ad2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	2b01      	cmp	r3, #1
 800284c:	d005      	beq.n	800285a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002856:	2b02      	cmp	r3, #2
 8002858:	d130      	bne.n	80028bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	2203      	movs	r2, #3
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4013      	ands	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4313      	orrs	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002890:	2201      	movs	r2, #1
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	091b      	lsrs	r3, r3, #4
 80028a6:	f003 0201 	and.w	r2, r3, #1
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	2b03      	cmp	r3, #3
 80028c6:	d017      	beq.n	80028f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	2203      	movs	r2, #3
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d123      	bne.n	800294c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	08da      	lsrs	r2, r3, #3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3208      	adds	r2, #8
 800290c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002910:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	220f      	movs	r2, #15
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4313      	orrs	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	08da      	lsrs	r2, r3, #3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3208      	adds	r2, #8
 8002946:	69b9      	ldr	r1, [r7, #24]
 8002948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	2203      	movs	r2, #3
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 0203 	and.w	r2, r3, #3
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	4313      	orrs	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 80a2 	beq.w	8002ad2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	4b57      	ldr	r3, [pc, #348]	; (8002af0 <HAL_GPIO_Init+0x2e8>)
 8002994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002996:	4a56      	ldr	r2, [pc, #344]	; (8002af0 <HAL_GPIO_Init+0x2e8>)
 8002998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800299c:	6453      	str	r3, [r2, #68]	; 0x44
 800299e:	4b54      	ldr	r3, [pc, #336]	; (8002af0 <HAL_GPIO_Init+0x2e8>)
 80029a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029aa:	4a52      	ldr	r2, [pc, #328]	; (8002af4 <HAL_GPIO_Init+0x2ec>)
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	089b      	lsrs	r3, r3, #2
 80029b0:	3302      	adds	r3, #2
 80029b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	220f      	movs	r2, #15
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	43db      	mvns	r3, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4013      	ands	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a49      	ldr	r2, [pc, #292]	; (8002af8 <HAL_GPIO_Init+0x2f0>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d019      	beq.n	8002a0a <HAL_GPIO_Init+0x202>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a48      	ldr	r2, [pc, #288]	; (8002afc <HAL_GPIO_Init+0x2f4>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d013      	beq.n	8002a06 <HAL_GPIO_Init+0x1fe>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a47      	ldr	r2, [pc, #284]	; (8002b00 <HAL_GPIO_Init+0x2f8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00d      	beq.n	8002a02 <HAL_GPIO_Init+0x1fa>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a46      	ldr	r2, [pc, #280]	; (8002b04 <HAL_GPIO_Init+0x2fc>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d007      	beq.n	80029fe <HAL_GPIO_Init+0x1f6>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a45      	ldr	r2, [pc, #276]	; (8002b08 <HAL_GPIO_Init+0x300>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d101      	bne.n	80029fa <HAL_GPIO_Init+0x1f2>
 80029f6:	2304      	movs	r3, #4
 80029f8:	e008      	b.n	8002a0c <HAL_GPIO_Init+0x204>
 80029fa:	2307      	movs	r3, #7
 80029fc:	e006      	b.n	8002a0c <HAL_GPIO_Init+0x204>
 80029fe:	2303      	movs	r3, #3
 8002a00:	e004      	b.n	8002a0c <HAL_GPIO_Init+0x204>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e002      	b.n	8002a0c <HAL_GPIO_Init+0x204>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <HAL_GPIO_Init+0x204>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	69fa      	ldr	r2, [r7, #28]
 8002a0e:	f002 0203 	and.w	r2, r2, #3
 8002a12:	0092      	lsls	r2, r2, #2
 8002a14:	4093      	lsls	r3, r2
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a1c:	4935      	ldr	r1, [pc, #212]	; (8002af4 <HAL_GPIO_Init+0x2ec>)
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	089b      	lsrs	r3, r3, #2
 8002a22:	3302      	adds	r3, #2
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a2a:	4b38      	ldr	r3, [pc, #224]	; (8002b0c <HAL_GPIO_Init+0x304>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	43db      	mvns	r3, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4013      	ands	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a4e:	4a2f      	ldr	r2, [pc, #188]	; (8002b0c <HAL_GPIO_Init+0x304>)
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a54:	4b2d      	ldr	r3, [pc, #180]	; (8002b0c <HAL_GPIO_Init+0x304>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a78:	4a24      	ldr	r2, [pc, #144]	; (8002b0c <HAL_GPIO_Init+0x304>)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a7e:	4b23      	ldr	r3, [pc, #140]	; (8002b0c <HAL_GPIO_Init+0x304>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	43db      	mvns	r3, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aa2:	4a1a      	ldr	r2, [pc, #104]	; (8002b0c <HAL_GPIO_Init+0x304>)
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aa8:	4b18      	ldr	r3, [pc, #96]	; (8002b0c <HAL_GPIO_Init+0x304>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002acc:	4a0f      	ldr	r2, [pc, #60]	; (8002b0c <HAL_GPIO_Init+0x304>)
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	61fb      	str	r3, [r7, #28]
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	2b0f      	cmp	r3, #15
 8002adc:	f67f aea2 	bls.w	8002824 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	bf00      	nop
 8002ae4:	3724      	adds	r7, #36	; 0x24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40013800 	.word	0x40013800
 8002af8:	40020000 	.word	0x40020000
 8002afc:	40020400 	.word	0x40020400
 8002b00:	40020800 	.word	0x40020800
 8002b04:	40020c00 	.word	0x40020c00
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40013c00 	.word	0x40013c00

08002b10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e12b      	b.n	8002d7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d106      	bne.n	8002b3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7fe f80a 	bl	8000b50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2224      	movs	r2, #36	; 0x24
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0201 	bic.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b74:	f000 fd5c 	bl	8003630 <HAL_RCC_GetPCLK1Freq>
 8002b78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	4a81      	ldr	r2, [pc, #516]	; (8002d84 <HAL_I2C_Init+0x274>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d807      	bhi.n	8002b94 <HAL_I2C_Init+0x84>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4a80      	ldr	r2, [pc, #512]	; (8002d88 <HAL_I2C_Init+0x278>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	bf94      	ite	ls
 8002b8c:	2301      	movls	r3, #1
 8002b8e:	2300      	movhi	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	e006      	b.n	8002ba2 <HAL_I2C_Init+0x92>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4a7d      	ldr	r2, [pc, #500]	; (8002d8c <HAL_I2C_Init+0x27c>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	bf94      	ite	ls
 8002b9c:	2301      	movls	r3, #1
 8002b9e:	2300      	movhi	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e0e7      	b.n	8002d7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	4a78      	ldr	r2, [pc, #480]	; (8002d90 <HAL_I2C_Init+0x280>)
 8002bae:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb2:	0c9b      	lsrs	r3, r3, #18
 8002bb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	4a6a      	ldr	r2, [pc, #424]	; (8002d84 <HAL_I2C_Init+0x274>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d802      	bhi.n	8002be4 <HAL_I2C_Init+0xd4>
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	3301      	adds	r3, #1
 8002be2:	e009      	b.n	8002bf8 <HAL_I2C_Init+0xe8>
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bea:	fb02 f303 	mul.w	r3, r2, r3
 8002bee:	4a69      	ldr	r2, [pc, #420]	; (8002d94 <HAL_I2C_Init+0x284>)
 8002bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf4:	099b      	lsrs	r3, r3, #6
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6812      	ldr	r2, [r2, #0]
 8002bfc:	430b      	orrs	r3, r1
 8002bfe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	495c      	ldr	r1, [pc, #368]	; (8002d84 <HAL_I2C_Init+0x274>)
 8002c14:	428b      	cmp	r3, r1
 8002c16:	d819      	bhi.n	8002c4c <HAL_I2C_Init+0x13c>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	1e59      	subs	r1, r3, #1
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c26:	1c59      	adds	r1, r3, #1
 8002c28:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c2c:	400b      	ands	r3, r1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00a      	beq.n	8002c48 <HAL_I2C_Init+0x138>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	1e59      	subs	r1, r3, #1
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c40:	3301      	adds	r3, #1
 8002c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c46:	e051      	b.n	8002cec <HAL_I2C_Init+0x1dc>
 8002c48:	2304      	movs	r3, #4
 8002c4a:	e04f      	b.n	8002cec <HAL_I2C_Init+0x1dc>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d111      	bne.n	8002c78 <HAL_I2C_Init+0x168>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	1e58      	subs	r0, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6859      	ldr	r1, [r3, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	440b      	add	r3, r1
 8002c62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c66:	3301      	adds	r3, #1
 8002c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	bf0c      	ite	eq
 8002c70:	2301      	moveq	r3, #1
 8002c72:	2300      	movne	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	e012      	b.n	8002c9e <HAL_I2C_Init+0x18e>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	1e58      	subs	r0, r3, #1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6859      	ldr	r1, [r3, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	0099      	lsls	r1, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c8e:	3301      	adds	r3, #1
 8002c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	bf0c      	ite	eq
 8002c98:	2301      	moveq	r3, #1
 8002c9a:	2300      	movne	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_I2C_Init+0x196>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e022      	b.n	8002cec <HAL_I2C_Init+0x1dc>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10e      	bne.n	8002ccc <HAL_I2C_Init+0x1bc>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	1e58      	subs	r0, r3, #1
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6859      	ldr	r1, [r3, #4]
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	440b      	add	r3, r1
 8002cbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cca:	e00f      	b.n	8002cec <HAL_I2C_Init+0x1dc>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	1e58      	subs	r0, r3, #1
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6859      	ldr	r1, [r3, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	0099      	lsls	r1, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	6809      	ldr	r1, [r1, #0]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69da      	ldr	r2, [r3, #28]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	431a      	orrs	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	6911      	ldr	r1, [r2, #16]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	68d2      	ldr	r2, [r2, #12]
 8002d26:	4311      	orrs	r1, r2
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6812      	ldr	r2, [r2, #0]
 8002d2c:	430b      	orrs	r3, r1
 8002d2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695a      	ldr	r2, [r3, #20]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 0201 	orr.w	r2, r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	000186a0 	.word	0x000186a0
 8002d88:	001e847f 	.word	0x001e847f
 8002d8c:	003d08ff 	.word	0x003d08ff
 8002d90:	431bde83 	.word	0x431bde83
 8002d94:	10624dd3 	.word	0x10624dd3

08002d98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e264      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d075      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002db6:	4ba3      	ldr	r3, [pc, #652]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 030c 	and.w	r3, r3, #12
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d00c      	beq.n	8002ddc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dc2:	4ba0      	ldr	r3, [pc, #640]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d112      	bne.n	8002df4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dce:	4b9d      	ldr	r3, [pc, #628]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dda:	d10b      	bne.n	8002df4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ddc:	4b99      	ldr	r3, [pc, #612]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d05b      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x108>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d157      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e23f      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dfc:	d106      	bne.n	8002e0c <HAL_RCC_OscConfig+0x74>
 8002dfe:	4b91      	ldr	r3, [pc, #580]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a90      	ldr	r2, [pc, #576]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	e01d      	b.n	8002e48 <HAL_RCC_OscConfig+0xb0>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e14:	d10c      	bne.n	8002e30 <HAL_RCC_OscConfig+0x98>
 8002e16:	4b8b      	ldr	r3, [pc, #556]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a8a      	ldr	r2, [pc, #552]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	4b88      	ldr	r3, [pc, #544]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a87      	ldr	r2, [pc, #540]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	e00b      	b.n	8002e48 <HAL_RCC_OscConfig+0xb0>
 8002e30:	4b84      	ldr	r3, [pc, #528]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a83      	ldr	r2, [pc, #524]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	4b81      	ldr	r3, [pc, #516]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a80      	ldr	r2, [pc, #512]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d013      	beq.n	8002e78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e50:	f7fe fccc 	bl	80017ec <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e58:	f7fe fcc8 	bl	80017ec <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b64      	cmp	r3, #100	; 0x64
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e204      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6a:	4b76      	ldr	r3, [pc, #472]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f0      	beq.n	8002e58 <HAL_RCC_OscConfig+0xc0>
 8002e76:	e014      	b.n	8002ea2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e78:	f7fe fcb8 	bl	80017ec <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e80:	f7fe fcb4 	bl	80017ec <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b64      	cmp	r3, #100	; 0x64
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e1f0      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e92:	4b6c      	ldr	r3, [pc, #432]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f0      	bne.n	8002e80 <HAL_RCC_OscConfig+0xe8>
 8002e9e:	e000      	b.n	8002ea2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d063      	beq.n	8002f76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eae:	4b65      	ldr	r3, [pc, #404]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 030c 	and.w	r3, r3, #12
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00b      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eba:	4b62      	ldr	r3, [pc, #392]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ec2:	2b08      	cmp	r3, #8
 8002ec4:	d11c      	bne.n	8002f00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ec6:	4b5f      	ldr	r3, [pc, #380]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d116      	bne.n	8002f00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ed2:	4b5c      	ldr	r3, [pc, #368]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d005      	beq.n	8002eea <HAL_RCC_OscConfig+0x152>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d001      	beq.n	8002eea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e1c4      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eea:	4b56      	ldr	r3, [pc, #344]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	4952      	ldr	r1, [pc, #328]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002efe:	e03a      	b.n	8002f76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d020      	beq.n	8002f4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f08:	4b4f      	ldr	r3, [pc, #316]	; (8003048 <HAL_RCC_OscConfig+0x2b0>)
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0e:	f7fe fc6d 	bl	80017ec <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f16:	f7fe fc69 	bl	80017ec <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e1a5      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f28:	4b46      	ldr	r3, [pc, #280]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0f0      	beq.n	8002f16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f34:	4b43      	ldr	r3, [pc, #268]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	4940      	ldr	r1, [pc, #256]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	600b      	str	r3, [r1, #0]
 8002f48:	e015      	b.n	8002f76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f4a:	4b3f      	ldr	r3, [pc, #252]	; (8003048 <HAL_RCC_OscConfig+0x2b0>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f50:	f7fe fc4c 	bl	80017ec <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f58:	f7fe fc48 	bl	80017ec <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e184      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f6a:	4b36      	ldr	r3, [pc, #216]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0308 	and.w	r3, r3, #8
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d030      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d016      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f8a:	4b30      	ldr	r3, [pc, #192]	; (800304c <HAL_RCC_OscConfig+0x2b4>)
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f90:	f7fe fc2c 	bl	80017ec <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f98:	f7fe fc28 	bl	80017ec <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e164      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002faa:	4b26      	ldr	r3, [pc, #152]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0f0      	beq.n	8002f98 <HAL_RCC_OscConfig+0x200>
 8002fb6:	e015      	b.n	8002fe4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fb8:	4b24      	ldr	r3, [pc, #144]	; (800304c <HAL_RCC_OscConfig+0x2b4>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fbe:	f7fe fc15 	bl	80017ec <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fc6:	f7fe fc11 	bl	80017ec <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e14d      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd8:	4b1a      	ldr	r3, [pc, #104]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1f0      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 80a0 	beq.w	8003132 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ff6:	4b13      	ldr	r3, [pc, #76]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10f      	bne.n	8003022 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003002:	2300      	movs	r3, #0
 8003004:	60bb      	str	r3, [r7, #8]
 8003006:	4b0f      	ldr	r3, [pc, #60]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	4a0e      	ldr	r2, [pc, #56]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 800300c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003010:	6413      	str	r3, [r2, #64]	; 0x40
 8003012:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301a:	60bb      	str	r3, [r7, #8]
 800301c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800301e:	2301      	movs	r3, #1
 8003020:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003022:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <HAL_RCC_OscConfig+0x2b8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302a:	2b00      	cmp	r3, #0
 800302c:	d121      	bne.n	8003072 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800302e:	4b08      	ldr	r3, [pc, #32]	; (8003050 <HAL_RCC_OscConfig+0x2b8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a07      	ldr	r2, [pc, #28]	; (8003050 <HAL_RCC_OscConfig+0x2b8>)
 8003034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800303a:	f7fe fbd7 	bl	80017ec <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003040:	e011      	b.n	8003066 <HAL_RCC_OscConfig+0x2ce>
 8003042:	bf00      	nop
 8003044:	40023800 	.word	0x40023800
 8003048:	42470000 	.word	0x42470000
 800304c:	42470e80 	.word	0x42470e80
 8003050:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003054:	f7fe fbca 	bl	80017ec <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e106      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003066:	4b85      	ldr	r3, [pc, #532]	; (800327c <HAL_RCC_OscConfig+0x4e4>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d106      	bne.n	8003088 <HAL_RCC_OscConfig+0x2f0>
 800307a:	4b81      	ldr	r3, [pc, #516]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307e:	4a80      	ldr	r2, [pc, #512]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	6713      	str	r3, [r2, #112]	; 0x70
 8003086:	e01c      	b.n	80030c2 <HAL_RCC_OscConfig+0x32a>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	2b05      	cmp	r3, #5
 800308e:	d10c      	bne.n	80030aa <HAL_RCC_OscConfig+0x312>
 8003090:	4b7b      	ldr	r3, [pc, #492]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 8003092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003094:	4a7a      	ldr	r2, [pc, #488]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 8003096:	f043 0304 	orr.w	r3, r3, #4
 800309a:	6713      	str	r3, [r2, #112]	; 0x70
 800309c:	4b78      	ldr	r3, [pc, #480]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 800309e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a0:	4a77      	ldr	r2, [pc, #476]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 80030a2:	f043 0301 	orr.w	r3, r3, #1
 80030a6:	6713      	str	r3, [r2, #112]	; 0x70
 80030a8:	e00b      	b.n	80030c2 <HAL_RCC_OscConfig+0x32a>
 80030aa:	4b75      	ldr	r3, [pc, #468]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 80030ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ae:	4a74      	ldr	r2, [pc, #464]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 80030b0:	f023 0301 	bic.w	r3, r3, #1
 80030b4:	6713      	str	r3, [r2, #112]	; 0x70
 80030b6:	4b72      	ldr	r3, [pc, #456]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 80030b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ba:	4a71      	ldr	r2, [pc, #452]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 80030bc:	f023 0304 	bic.w	r3, r3, #4
 80030c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d015      	beq.n	80030f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ca:	f7fe fb8f 	bl	80017ec <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d0:	e00a      	b.n	80030e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d2:	f7fe fb8b 	bl	80017ec <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e0c5      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e8:	4b65      	ldr	r3, [pc, #404]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 80030ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0ee      	beq.n	80030d2 <HAL_RCC_OscConfig+0x33a>
 80030f4:	e014      	b.n	8003120 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f6:	f7fe fb79 	bl	80017ec <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030fc:	e00a      	b.n	8003114 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030fe:	f7fe fb75 	bl	80017ec <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	f241 3288 	movw	r2, #5000	; 0x1388
 800310c:	4293      	cmp	r3, r2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e0af      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003114:	4b5a      	ldr	r3, [pc, #360]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 8003116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1ee      	bne.n	80030fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003120:	7dfb      	ldrb	r3, [r7, #23]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d105      	bne.n	8003132 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003126:	4b56      	ldr	r3, [pc, #344]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	4a55      	ldr	r2, [pc, #340]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 800312c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003130:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 809b 	beq.w	8003272 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800313c:	4b50      	ldr	r3, [pc, #320]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 030c 	and.w	r3, r3, #12
 8003144:	2b08      	cmp	r3, #8
 8003146:	d05c      	beq.n	8003202 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	2b02      	cmp	r3, #2
 800314e:	d141      	bne.n	80031d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003150:	4b4c      	ldr	r3, [pc, #304]	; (8003284 <HAL_RCC_OscConfig+0x4ec>)
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003156:	f7fe fb49 	bl	80017ec <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800315e:	f7fe fb45 	bl	80017ec <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e081      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003170:	4b43      	ldr	r3, [pc, #268]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1f0      	bne.n	800315e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	69da      	ldr	r2, [r3, #28]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	019b      	lsls	r3, r3, #6
 800318c:	431a      	orrs	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003192:	085b      	lsrs	r3, r3, #1
 8003194:	3b01      	subs	r3, #1
 8003196:	041b      	lsls	r3, r3, #16
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319e:	061b      	lsls	r3, r3, #24
 80031a0:	4937      	ldr	r1, [pc, #220]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031a6:	4b37      	ldr	r3, [pc, #220]	; (8003284 <HAL_RCC_OscConfig+0x4ec>)
 80031a8:	2201      	movs	r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ac:	f7fe fb1e 	bl	80017ec <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b4:	f7fe fb1a 	bl	80017ec <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e056      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c6:	4b2e      	ldr	r3, [pc, #184]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0f0      	beq.n	80031b4 <HAL_RCC_OscConfig+0x41c>
 80031d2:	e04e      	b.n	8003272 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d4:	4b2b      	ldr	r3, [pc, #172]	; (8003284 <HAL_RCC_OscConfig+0x4ec>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031da:	f7fe fb07 	bl	80017ec <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e2:	f7fe fb03 	bl	80017ec <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e03f      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f4:	4b22      	ldr	r3, [pc, #136]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1f0      	bne.n	80031e2 <HAL_RCC_OscConfig+0x44a>
 8003200:	e037      	b.n	8003272 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e032      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800320e:	4b1c      	ldr	r3, [pc, #112]	; (8003280 <HAL_RCC_OscConfig+0x4e8>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d028      	beq.n	800326e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003226:	429a      	cmp	r2, r3
 8003228:	d121      	bne.n	800326e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003234:	429a      	cmp	r2, r3
 8003236:	d11a      	bne.n	800326e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800323e:	4013      	ands	r3, r2
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003244:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003246:	4293      	cmp	r3, r2
 8003248:	d111      	bne.n	800326e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003254:	085b      	lsrs	r3, r3, #1
 8003256:	3b01      	subs	r3, #1
 8003258:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800325a:	429a      	cmp	r2, r3
 800325c:	d107      	bne.n	800326e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003268:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800326a:	429a      	cmp	r2, r3
 800326c:	d001      	beq.n	8003272 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40007000 	.word	0x40007000
 8003280:	40023800 	.word	0x40023800
 8003284:	42470060 	.word	0x42470060

08003288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e0cc      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800329c:	4b68      	ldr	r3, [pc, #416]	; (8003440 <HAL_RCC_ClockConfig+0x1b8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d90c      	bls.n	80032c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032aa:	4b65      	ldr	r3, [pc, #404]	; (8003440 <HAL_RCC_ClockConfig+0x1b8>)
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b2:	4b63      	ldr	r3, [pc, #396]	; (8003440 <HAL_RCC_ClockConfig+0x1b8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d001      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e0b8      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d020      	beq.n	8003312 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032dc:	4b59      	ldr	r3, [pc, #356]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	4a58      	ldr	r2, [pc, #352]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d005      	beq.n	8003300 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032f4:	4b53      	ldr	r3, [pc, #332]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	4a52      	ldr	r2, [pc, #328]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80032fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003300:	4b50      	ldr	r3, [pc, #320]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	494d      	ldr	r1, [pc, #308]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	4313      	orrs	r3, r2
 8003310:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d044      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d107      	bne.n	8003336 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003326:	4b47      	ldr	r3, [pc, #284]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d119      	bne.n	8003366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e07f      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d003      	beq.n	8003346 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003342:	2b03      	cmp	r3, #3
 8003344:	d107      	bne.n	8003356 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003346:	4b3f      	ldr	r3, [pc, #252]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d109      	bne.n	8003366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e06f      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003356:	4b3b      	ldr	r3, [pc, #236]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e067      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003366:	4b37      	ldr	r3, [pc, #220]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f023 0203 	bic.w	r2, r3, #3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	4934      	ldr	r1, [pc, #208]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003374:	4313      	orrs	r3, r2
 8003376:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003378:	f7fe fa38 	bl	80017ec <HAL_GetTick>
 800337c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800337e:	e00a      	b.n	8003396 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003380:	f7fe fa34 	bl	80017ec <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	f241 3288 	movw	r2, #5000	; 0x1388
 800338e:	4293      	cmp	r3, r2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e04f      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003396:	4b2b      	ldr	r3, [pc, #172]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 020c 	and.w	r2, r3, #12
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d1eb      	bne.n	8003380 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033a8:	4b25      	ldr	r3, [pc, #148]	; (8003440 <HAL_RCC_ClockConfig+0x1b8>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d20c      	bcs.n	80033d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b6:	4b22      	ldr	r3, [pc, #136]	; (8003440 <HAL_RCC_ClockConfig+0x1b8>)
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033be:	4b20      	ldr	r3, [pc, #128]	; (8003440 <HAL_RCC_ClockConfig+0x1b8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d001      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e032      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033dc:	4b19      	ldr	r3, [pc, #100]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	4916      	ldr	r1, [pc, #88]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d009      	beq.n	800340e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033fa:	4b12      	ldr	r3, [pc, #72]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	490e      	ldr	r1, [pc, #56]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	4313      	orrs	r3, r2
 800340c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800340e:	f000 f821 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 8003412:	4602      	mov	r2, r0
 8003414:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	490a      	ldr	r1, [pc, #40]	; (8003448 <HAL_RCC_ClockConfig+0x1c0>)
 8003420:	5ccb      	ldrb	r3, [r1, r3]
 8003422:	fa22 f303 	lsr.w	r3, r2, r3
 8003426:	4a09      	ldr	r2, [pc, #36]	; (800344c <HAL_RCC_ClockConfig+0x1c4>)
 8003428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800342a:	4b09      	ldr	r3, [pc, #36]	; (8003450 <HAL_RCC_ClockConfig+0x1c8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f7fe f998 	bl	8001764 <HAL_InitTick>

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40023c00 	.word	0x40023c00
 8003444:	40023800 	.word	0x40023800
 8003448:	080051c8 	.word	0x080051c8
 800344c:	20000000 	.word	0x20000000
 8003450:	20000004 	.word	0x20000004

08003454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003454:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003458:	b084      	sub	sp, #16
 800345a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	607b      	str	r3, [r7, #4]
 8003460:	2300      	movs	r3, #0
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	2300      	movs	r3, #0
 8003466:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800346c:	4b67      	ldr	r3, [pc, #412]	; (800360c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 030c 	and.w	r3, r3, #12
 8003474:	2b08      	cmp	r3, #8
 8003476:	d00d      	beq.n	8003494 <HAL_RCC_GetSysClockFreq+0x40>
 8003478:	2b08      	cmp	r3, #8
 800347a:	f200 80bd 	bhi.w	80035f8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800347e:	2b00      	cmp	r3, #0
 8003480:	d002      	beq.n	8003488 <HAL_RCC_GetSysClockFreq+0x34>
 8003482:	2b04      	cmp	r3, #4
 8003484:	d003      	beq.n	800348e <HAL_RCC_GetSysClockFreq+0x3a>
 8003486:	e0b7      	b.n	80035f8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003488:	4b61      	ldr	r3, [pc, #388]	; (8003610 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800348a:	60bb      	str	r3, [r7, #8]
       break;
 800348c:	e0b7      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800348e:	4b61      	ldr	r3, [pc, #388]	; (8003614 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003490:	60bb      	str	r3, [r7, #8]
      break;
 8003492:	e0b4      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003494:	4b5d      	ldr	r3, [pc, #372]	; (800360c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800349c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800349e:	4b5b      	ldr	r3, [pc, #364]	; (800360c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d04d      	beq.n	8003546 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034aa:	4b58      	ldr	r3, [pc, #352]	; (800360c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	099b      	lsrs	r3, r3, #6
 80034b0:	461a      	mov	r2, r3
 80034b2:	f04f 0300 	mov.w	r3, #0
 80034b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80034ba:	f04f 0100 	mov.w	r1, #0
 80034be:	ea02 0800 	and.w	r8, r2, r0
 80034c2:	ea03 0901 	and.w	r9, r3, r1
 80034c6:	4640      	mov	r0, r8
 80034c8:	4649      	mov	r1, r9
 80034ca:	f04f 0200 	mov.w	r2, #0
 80034ce:	f04f 0300 	mov.w	r3, #0
 80034d2:	014b      	lsls	r3, r1, #5
 80034d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034d8:	0142      	lsls	r2, r0, #5
 80034da:	4610      	mov	r0, r2
 80034dc:	4619      	mov	r1, r3
 80034de:	ebb0 0008 	subs.w	r0, r0, r8
 80034e2:	eb61 0109 	sbc.w	r1, r1, r9
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	f04f 0300 	mov.w	r3, #0
 80034ee:	018b      	lsls	r3, r1, #6
 80034f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034f4:	0182      	lsls	r2, r0, #6
 80034f6:	1a12      	subs	r2, r2, r0
 80034f8:	eb63 0301 	sbc.w	r3, r3, r1
 80034fc:	f04f 0000 	mov.w	r0, #0
 8003500:	f04f 0100 	mov.w	r1, #0
 8003504:	00d9      	lsls	r1, r3, #3
 8003506:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800350a:	00d0      	lsls	r0, r2, #3
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	eb12 0208 	adds.w	r2, r2, r8
 8003514:	eb43 0309 	adc.w	r3, r3, r9
 8003518:	f04f 0000 	mov.w	r0, #0
 800351c:	f04f 0100 	mov.w	r1, #0
 8003520:	0259      	lsls	r1, r3, #9
 8003522:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003526:	0250      	lsls	r0, r2, #9
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4610      	mov	r0, r2
 800352e:	4619      	mov	r1, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	461a      	mov	r2, r3
 8003534:	f04f 0300 	mov.w	r3, #0
 8003538:	f7fc feaa 	bl	8000290 <__aeabi_uldivmod>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4613      	mov	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	e04a      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003546:	4b31      	ldr	r3, [pc, #196]	; (800360c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	099b      	lsrs	r3, r3, #6
 800354c:	461a      	mov	r2, r3
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003556:	f04f 0100 	mov.w	r1, #0
 800355a:	ea02 0400 	and.w	r4, r2, r0
 800355e:	ea03 0501 	and.w	r5, r3, r1
 8003562:	4620      	mov	r0, r4
 8003564:	4629      	mov	r1, r5
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	f04f 0300 	mov.w	r3, #0
 800356e:	014b      	lsls	r3, r1, #5
 8003570:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003574:	0142      	lsls	r2, r0, #5
 8003576:	4610      	mov	r0, r2
 8003578:	4619      	mov	r1, r3
 800357a:	1b00      	subs	r0, r0, r4
 800357c:	eb61 0105 	sbc.w	r1, r1, r5
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	018b      	lsls	r3, r1, #6
 800358a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800358e:	0182      	lsls	r2, r0, #6
 8003590:	1a12      	subs	r2, r2, r0
 8003592:	eb63 0301 	sbc.w	r3, r3, r1
 8003596:	f04f 0000 	mov.w	r0, #0
 800359a:	f04f 0100 	mov.w	r1, #0
 800359e:	00d9      	lsls	r1, r3, #3
 80035a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035a4:	00d0      	lsls	r0, r2, #3
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	1912      	adds	r2, r2, r4
 80035ac:	eb45 0303 	adc.w	r3, r5, r3
 80035b0:	f04f 0000 	mov.w	r0, #0
 80035b4:	f04f 0100 	mov.w	r1, #0
 80035b8:	0299      	lsls	r1, r3, #10
 80035ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80035be:	0290      	lsls	r0, r2, #10
 80035c0:	4602      	mov	r2, r0
 80035c2:	460b      	mov	r3, r1
 80035c4:	4610      	mov	r0, r2
 80035c6:	4619      	mov	r1, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	461a      	mov	r2, r3
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	f7fc fe5e 	bl	8000290 <__aeabi_uldivmod>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4613      	mov	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035dc:	4b0b      	ldr	r3, [pc, #44]	; (800360c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	0c1b      	lsrs	r3, r3, #16
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	3301      	adds	r3, #1
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f4:	60bb      	str	r3, [r7, #8]
      break;
 80035f6:	e002      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035f8:	4b05      	ldr	r3, [pc, #20]	; (8003610 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035fa:	60bb      	str	r3, [r7, #8]
      break;
 80035fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035fe:	68bb      	ldr	r3, [r7, #8]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800360a:	bf00      	nop
 800360c:	40023800 	.word	0x40023800
 8003610:	00f42400 	.word	0x00f42400
 8003614:	007a1200 	.word	0x007a1200

08003618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800361c:	4b03      	ldr	r3, [pc, #12]	; (800362c <HAL_RCC_GetHCLKFreq+0x14>)
 800361e:	681b      	ldr	r3, [r3, #0]
}
 8003620:	4618      	mov	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	20000000 	.word	0x20000000

08003630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003634:	f7ff fff0 	bl	8003618 <HAL_RCC_GetHCLKFreq>
 8003638:	4602      	mov	r2, r0
 800363a:	4b05      	ldr	r3, [pc, #20]	; (8003650 <HAL_RCC_GetPCLK1Freq+0x20>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	0a9b      	lsrs	r3, r3, #10
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	4903      	ldr	r1, [pc, #12]	; (8003654 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003646:	5ccb      	ldrb	r3, [r1, r3]
 8003648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800364c:	4618      	mov	r0, r3
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40023800 	.word	0x40023800
 8003654:	080051d8 	.word	0x080051d8

08003658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800365c:	f7ff ffdc 	bl	8003618 <HAL_RCC_GetHCLKFreq>
 8003660:	4602      	mov	r2, r0
 8003662:	4b05      	ldr	r3, [pc, #20]	; (8003678 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	0b5b      	lsrs	r3, r3, #13
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	4903      	ldr	r1, [pc, #12]	; (800367c <HAL_RCC_GetPCLK2Freq+0x24>)
 800366e:	5ccb      	ldrb	r3, [r1, r3]
 8003670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003674:	4618      	mov	r0, r3
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40023800 	.word	0x40023800
 800367c:	080051d8 	.word	0x080051d8

08003680 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e041      	b.n	8003716 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d106      	bne.n	80036ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7fd fe10 	bl	80012cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3304      	adds	r3, #4
 80036bc:	4619      	mov	r1, r3
 80036be:	4610      	mov	r0, r2
 80036c0:	f000 fab6 	bl	8003c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b082      	sub	sp, #8
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e041      	b.n	80037b4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d106      	bne.n	800374a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7fd fe7b 	bl	8001440 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2202      	movs	r2, #2
 800374e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3304      	adds	r3, #4
 800375a:	4619      	mov	r1, r3
 800375c:	4610      	mov	r0, r2
 800375e:	f000 fa67 	bl	8003c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d109      	bne.n	80037e0 <HAL_TIM_PWM_Start+0x24>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	bf14      	ite	ne
 80037d8:	2301      	movne	r3, #1
 80037da:	2300      	moveq	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	e022      	b.n	8003826 <HAL_TIM_PWM_Start+0x6a>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d109      	bne.n	80037fa <HAL_TIM_PWM_Start+0x3e>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	bf14      	ite	ne
 80037f2:	2301      	movne	r3, #1
 80037f4:	2300      	moveq	r3, #0
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	e015      	b.n	8003826 <HAL_TIM_PWM_Start+0x6a>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d109      	bne.n	8003814 <HAL_TIM_PWM_Start+0x58>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b01      	cmp	r3, #1
 800380a:	bf14      	ite	ne
 800380c:	2301      	movne	r3, #1
 800380e:	2300      	moveq	r3, #0
 8003810:	b2db      	uxtb	r3, r3
 8003812:	e008      	b.n	8003826 <HAL_TIM_PWM_Start+0x6a>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b01      	cmp	r3, #1
 800381e:	bf14      	ite	ne
 8003820:	2301      	movne	r3, #1
 8003822:	2300      	moveq	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e068      	b.n	8003900 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d104      	bne.n	800383e <HAL_TIM_PWM_Start+0x82>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2202      	movs	r2, #2
 8003838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800383c:	e013      	b.n	8003866 <HAL_TIM_PWM_Start+0xaa>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b04      	cmp	r3, #4
 8003842:	d104      	bne.n	800384e <HAL_TIM_PWM_Start+0x92>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800384c:	e00b      	b.n	8003866 <HAL_TIM_PWM_Start+0xaa>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b08      	cmp	r3, #8
 8003852:	d104      	bne.n	800385e <HAL_TIM_PWM_Start+0xa2>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800385c:	e003      	b.n	8003866 <HAL_TIM_PWM_Start+0xaa>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2202      	movs	r2, #2
 8003862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2201      	movs	r2, #1
 800386c:	6839      	ldr	r1, [r7, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f000 fc84 	bl	800417c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a23      	ldr	r2, [pc, #140]	; (8003908 <HAL_TIM_PWM_Start+0x14c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d107      	bne.n	800388e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800388c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a1d      	ldr	r2, [pc, #116]	; (8003908 <HAL_TIM_PWM_Start+0x14c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d018      	beq.n	80038ca <HAL_TIM_PWM_Start+0x10e>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a0:	d013      	beq.n	80038ca <HAL_TIM_PWM_Start+0x10e>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a19      	ldr	r2, [pc, #100]	; (800390c <HAL_TIM_PWM_Start+0x150>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d00e      	beq.n	80038ca <HAL_TIM_PWM_Start+0x10e>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a17      	ldr	r2, [pc, #92]	; (8003910 <HAL_TIM_PWM_Start+0x154>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d009      	beq.n	80038ca <HAL_TIM_PWM_Start+0x10e>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a16      	ldr	r2, [pc, #88]	; (8003914 <HAL_TIM_PWM_Start+0x158>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d004      	beq.n	80038ca <HAL_TIM_PWM_Start+0x10e>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a14      	ldr	r2, [pc, #80]	; (8003918 <HAL_TIM_PWM_Start+0x15c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d111      	bne.n	80038ee <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2b06      	cmp	r3, #6
 80038da:	d010      	beq.n	80038fe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0201 	orr.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ec:	e007      	b.n	80038fe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f042 0201 	orr.w	r2, r2, #1
 80038fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40010000 	.word	0x40010000
 800390c:	40000400 	.word	0x40000400
 8003910:	40000800 	.word	0x40000800
 8003914:	40000c00 	.word	0x40000c00
 8003918:	40014000 	.word	0x40014000

0800391c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003936:	2302      	movs	r3, #2
 8003938:	e0ae      	b.n	8003a98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b0c      	cmp	r3, #12
 8003946:	f200 809f 	bhi.w	8003a88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800394a:	a201      	add	r2, pc, #4	; (adr r2, 8003950 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800394c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003950:	08003985 	.word	0x08003985
 8003954:	08003a89 	.word	0x08003a89
 8003958:	08003a89 	.word	0x08003a89
 800395c:	08003a89 	.word	0x08003a89
 8003960:	080039c5 	.word	0x080039c5
 8003964:	08003a89 	.word	0x08003a89
 8003968:	08003a89 	.word	0x08003a89
 800396c:	08003a89 	.word	0x08003a89
 8003970:	08003a07 	.word	0x08003a07
 8003974:	08003a89 	.word	0x08003a89
 8003978:	08003a89 	.word	0x08003a89
 800397c:	08003a89 	.word	0x08003a89
 8003980:	08003a47 	.word	0x08003a47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68b9      	ldr	r1, [r7, #8]
 800398a:	4618      	mov	r0, r3
 800398c:	f000 f9d0 	bl	8003d30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699a      	ldr	r2, [r3, #24]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0208 	orr.w	r2, r2, #8
 800399e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699a      	ldr	r2, [r3, #24]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0204 	bic.w	r2, r2, #4
 80039ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6999      	ldr	r1, [r3, #24]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	691a      	ldr	r2, [r3, #16]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	619a      	str	r2, [r3, #24]
      break;
 80039c2:	e064      	b.n	8003a8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68b9      	ldr	r1, [r7, #8]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 fa16 	bl	8003dfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	699a      	ldr	r2, [r3, #24]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699a      	ldr	r2, [r3, #24]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6999      	ldr	r1, [r3, #24]
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	021a      	lsls	r2, r3, #8
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	619a      	str	r2, [r3, #24]
      break;
 8003a04:	e043      	b.n	8003a8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68b9      	ldr	r1, [r7, #8]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fa61 	bl	8003ed4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	69da      	ldr	r2, [r3, #28]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f042 0208 	orr.w	r2, r2, #8
 8003a20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	69da      	ldr	r2, [r3, #28]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0204 	bic.w	r2, r2, #4
 8003a30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	69d9      	ldr	r1, [r3, #28]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	61da      	str	r2, [r3, #28]
      break;
 8003a44:	e023      	b.n	8003a8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68b9      	ldr	r1, [r7, #8]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 faab 	bl	8003fa8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	69da      	ldr	r2, [r3, #28]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	69da      	ldr	r2, [r3, #28]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	69d9      	ldr	r1, [r3, #28]
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	021a      	lsls	r2, r3, #8
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	61da      	str	r2, [r3, #28]
      break;
 8003a86:	e002      	b.n	8003a8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_TIM_ConfigClockSource+0x1c>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e0b4      	b.n	8003c26 <HAL_TIM_ConfigClockSource+0x186>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ada:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ae2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003af4:	d03e      	beq.n	8003b74 <HAL_TIM_ConfigClockSource+0xd4>
 8003af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003afa:	f200 8087 	bhi.w	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
 8003afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b02:	f000 8086 	beq.w	8003c12 <HAL_TIM_ConfigClockSource+0x172>
 8003b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b0a:	d87f      	bhi.n	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
 8003b0c:	2b70      	cmp	r3, #112	; 0x70
 8003b0e:	d01a      	beq.n	8003b46 <HAL_TIM_ConfigClockSource+0xa6>
 8003b10:	2b70      	cmp	r3, #112	; 0x70
 8003b12:	d87b      	bhi.n	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
 8003b14:	2b60      	cmp	r3, #96	; 0x60
 8003b16:	d050      	beq.n	8003bba <HAL_TIM_ConfigClockSource+0x11a>
 8003b18:	2b60      	cmp	r3, #96	; 0x60
 8003b1a:	d877      	bhi.n	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
 8003b1c:	2b50      	cmp	r3, #80	; 0x50
 8003b1e:	d03c      	beq.n	8003b9a <HAL_TIM_ConfigClockSource+0xfa>
 8003b20:	2b50      	cmp	r3, #80	; 0x50
 8003b22:	d873      	bhi.n	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
 8003b24:	2b40      	cmp	r3, #64	; 0x40
 8003b26:	d058      	beq.n	8003bda <HAL_TIM_ConfigClockSource+0x13a>
 8003b28:	2b40      	cmp	r3, #64	; 0x40
 8003b2a:	d86f      	bhi.n	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
 8003b2c:	2b30      	cmp	r3, #48	; 0x30
 8003b2e:	d064      	beq.n	8003bfa <HAL_TIM_ConfigClockSource+0x15a>
 8003b30:	2b30      	cmp	r3, #48	; 0x30
 8003b32:	d86b      	bhi.n	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
 8003b34:	2b20      	cmp	r3, #32
 8003b36:	d060      	beq.n	8003bfa <HAL_TIM_ConfigClockSource+0x15a>
 8003b38:	2b20      	cmp	r3, #32
 8003b3a:	d867      	bhi.n	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d05c      	beq.n	8003bfa <HAL_TIM_ConfigClockSource+0x15a>
 8003b40:	2b10      	cmp	r3, #16
 8003b42:	d05a      	beq.n	8003bfa <HAL_TIM_ConfigClockSource+0x15a>
 8003b44:	e062      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6818      	ldr	r0, [r3, #0]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	6899      	ldr	r1, [r3, #8]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f000 faf1 	bl	800413c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	609a      	str	r2, [r3, #8]
      break;
 8003b72:	e04f      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6818      	ldr	r0, [r3, #0]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	6899      	ldr	r1, [r3, #8]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f000 fada 	bl	800413c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b96:	609a      	str	r2, [r3, #8]
      break;
 8003b98:	e03c      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	6859      	ldr	r1, [r3, #4]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	f000 fa4e 	bl	8004048 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2150      	movs	r1, #80	; 0x50
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 faa7 	bl	8004106 <TIM_ITRx_SetConfig>
      break;
 8003bb8:	e02c      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6818      	ldr	r0, [r3, #0]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	6859      	ldr	r1, [r3, #4]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	f000 fa6d 	bl	80040a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2160      	movs	r1, #96	; 0x60
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 fa97 	bl	8004106 <TIM_ITRx_SetConfig>
      break;
 8003bd8:	e01c      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6818      	ldr	r0, [r3, #0]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	6859      	ldr	r1, [r3, #4]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	461a      	mov	r2, r3
 8003be8:	f000 fa2e 	bl	8004048 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2140      	movs	r1, #64	; 0x40
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 fa87 	bl	8004106 <TIM_ITRx_SetConfig>
      break;
 8003bf8:	e00c      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4619      	mov	r1, r3
 8003c04:	4610      	mov	r0, r2
 8003c06:	f000 fa7e 	bl	8004106 <TIM_ITRx_SetConfig>
      break;
 8003c0a:	e003      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c10:	e000      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
	...

08003c30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a34      	ldr	r2, [pc, #208]	; (8003d14 <TIM_Base_SetConfig+0xe4>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d00f      	beq.n	8003c68 <TIM_Base_SetConfig+0x38>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c4e:	d00b      	beq.n	8003c68 <TIM_Base_SetConfig+0x38>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a31      	ldr	r2, [pc, #196]	; (8003d18 <TIM_Base_SetConfig+0xe8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d007      	beq.n	8003c68 <TIM_Base_SetConfig+0x38>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a30      	ldr	r2, [pc, #192]	; (8003d1c <TIM_Base_SetConfig+0xec>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d003      	beq.n	8003c68 <TIM_Base_SetConfig+0x38>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a2f      	ldr	r2, [pc, #188]	; (8003d20 <TIM_Base_SetConfig+0xf0>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d108      	bne.n	8003c7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a25      	ldr	r2, [pc, #148]	; (8003d14 <TIM_Base_SetConfig+0xe4>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d01b      	beq.n	8003cba <TIM_Base_SetConfig+0x8a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c88:	d017      	beq.n	8003cba <TIM_Base_SetConfig+0x8a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a22      	ldr	r2, [pc, #136]	; (8003d18 <TIM_Base_SetConfig+0xe8>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d013      	beq.n	8003cba <TIM_Base_SetConfig+0x8a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a21      	ldr	r2, [pc, #132]	; (8003d1c <TIM_Base_SetConfig+0xec>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00f      	beq.n	8003cba <TIM_Base_SetConfig+0x8a>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a20      	ldr	r2, [pc, #128]	; (8003d20 <TIM_Base_SetConfig+0xf0>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00b      	beq.n	8003cba <TIM_Base_SetConfig+0x8a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a1f      	ldr	r2, [pc, #124]	; (8003d24 <TIM_Base_SetConfig+0xf4>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d007      	beq.n	8003cba <TIM_Base_SetConfig+0x8a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a1e      	ldr	r2, [pc, #120]	; (8003d28 <TIM_Base_SetConfig+0xf8>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d003      	beq.n	8003cba <TIM_Base_SetConfig+0x8a>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a1d      	ldr	r2, [pc, #116]	; (8003d2c <TIM_Base_SetConfig+0xfc>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d108      	bne.n	8003ccc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a08      	ldr	r2, [pc, #32]	; (8003d14 <TIM_Base_SetConfig+0xe4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d103      	bne.n	8003d00 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	615a      	str	r2, [r3, #20]
}
 8003d06:	bf00      	nop
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	40010000 	.word	0x40010000
 8003d18:	40000400 	.word	0x40000400
 8003d1c:	40000800 	.word	0x40000800
 8003d20:	40000c00 	.word	0x40000c00
 8003d24:	40014000 	.word	0x40014000
 8003d28:	40014400 	.word	0x40014400
 8003d2c:	40014800 	.word	0x40014800

08003d30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	f023 0201 	bic.w	r2, r3, #1
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f023 0303 	bic.w	r3, r3, #3
 8003d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f023 0302 	bic.w	r3, r3, #2
 8003d78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a1c      	ldr	r2, [pc, #112]	; (8003df8 <TIM_OC1_SetConfig+0xc8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d10c      	bne.n	8003da6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f023 0308 	bic.w	r3, r3, #8
 8003d92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f023 0304 	bic.w	r3, r3, #4
 8003da4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a13      	ldr	r2, [pc, #76]	; (8003df8 <TIM_OC1_SetConfig+0xc8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d111      	bne.n	8003dd2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003db4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	621a      	str	r2, [r3, #32]
}
 8003dec:	bf00      	nop
 8003dee:	371c      	adds	r7, #28
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	40010000 	.word	0x40010000

08003dfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	f023 0210 	bic.w	r2, r3, #16
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	021b      	lsls	r3, r3, #8
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f023 0320 	bic.w	r3, r3, #32
 8003e46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a1e      	ldr	r2, [pc, #120]	; (8003ed0 <TIM_OC2_SetConfig+0xd4>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d10d      	bne.n	8003e78 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a15      	ldr	r2, [pc, #84]	; (8003ed0 <TIM_OC2_SetConfig+0xd4>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d113      	bne.n	8003ea8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	621a      	str	r2, [r3, #32]
}
 8003ec2:	bf00      	nop
 8003ec4:	371c      	adds	r7, #28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	40010000 	.word	0x40010000

08003ed4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 0303 	bic.w	r3, r3, #3
 8003f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	021b      	lsls	r3, r3, #8
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a1d      	ldr	r2, [pc, #116]	; (8003fa4 <TIM_OC3_SetConfig+0xd0>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d10d      	bne.n	8003f4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	021b      	lsls	r3, r3, #8
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a14      	ldr	r2, [pc, #80]	; (8003fa4 <TIM_OC3_SetConfig+0xd0>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d113      	bne.n	8003f7e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	011b      	lsls	r3, r3, #4
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	621a      	str	r2, [r3, #32]
}
 8003f98:	bf00      	nop
 8003f9a:	371c      	adds	r7, #28
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	40010000 	.word	0x40010000

08003fa8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	021b      	lsls	r3, r3, #8
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ff2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	031b      	lsls	r3, r3, #12
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a10      	ldr	r2, [pc, #64]	; (8004044 <TIM_OC4_SetConfig+0x9c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d109      	bne.n	800401c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800400e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	019b      	lsls	r3, r3, #6
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	4313      	orrs	r3, r2
 800401a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	621a      	str	r2, [r3, #32]
}
 8004036:	bf00      	nop
 8004038:	371c      	adds	r7, #28
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	40010000 	.word	0x40010000

08004048 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004048:	b480      	push	{r7}
 800404a:	b087      	sub	sp, #28
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	f023 0201 	bic.w	r2, r3, #1
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004072:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f023 030a 	bic.w	r3, r3, #10
 8004084:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	4313      	orrs	r3, r2
 800408c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	621a      	str	r2, [r3, #32]
}
 800409a:	bf00      	nop
 800409c:	371c      	adds	r7, #28
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b087      	sub	sp, #28
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	60f8      	str	r0, [r7, #12]
 80040ae:	60b9      	str	r1, [r7, #8]
 80040b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	f023 0210 	bic.w	r2, r3, #16
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	031b      	lsls	r3, r3, #12
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	4313      	orrs	r3, r2
 80040da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	011b      	lsls	r3, r3, #4
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	621a      	str	r2, [r3, #32]
}
 80040fa:	bf00      	nop
 80040fc:	371c      	adds	r7, #28
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004106:	b480      	push	{r7}
 8004108:	b085      	sub	sp, #20
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
 800410e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4313      	orrs	r3, r2
 8004124:	f043 0307 	orr.w	r3, r3, #7
 8004128:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	609a      	str	r2, [r3, #8]
}
 8004130:	bf00      	nop
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
 8004148:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004156:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	021a      	lsls	r2, r3, #8
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	431a      	orrs	r2, r3
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4313      	orrs	r3, r2
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	4313      	orrs	r3, r2
 8004168:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	609a      	str	r2, [r3, #8]
}
 8004170:	bf00      	nop
 8004172:	371c      	adds	r7, #28
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800417c:	b480      	push	{r7}
 800417e:	b087      	sub	sp, #28
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f003 031f 	and.w	r3, r3, #31
 800418e:	2201      	movs	r2, #1
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a1a      	ldr	r2, [r3, #32]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	43db      	mvns	r3, r3
 800419e:	401a      	ands	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a1a      	ldr	r2, [r3, #32]
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	f003 031f 	and.w	r3, r3, #31
 80041ae:	6879      	ldr	r1, [r7, #4]
 80041b0:	fa01 f303 	lsl.w	r3, r1, r3
 80041b4:	431a      	orrs	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	621a      	str	r2, [r3, #32]
}
 80041ba:	bf00      	nop
 80041bc:	371c      	adds	r7, #28
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
	...

080041c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041dc:	2302      	movs	r3, #2
 80041de:	e050      	b.n	8004282 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004206:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4313      	orrs	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a1c      	ldr	r2, [pc, #112]	; (8004290 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d018      	beq.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800422c:	d013      	beq.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a18      	ldr	r2, [pc, #96]	; (8004294 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d00e      	beq.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a16      	ldr	r2, [pc, #88]	; (8004298 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d009      	beq.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a15      	ldr	r2, [pc, #84]	; (800429c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d004      	beq.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a13      	ldr	r2, [pc, #76]	; (80042a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d10c      	bne.n	8004270 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800425c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	4313      	orrs	r3, r2
 8004266:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	40010000 	.word	0x40010000
 8004294:	40000400 	.word	0x40000400
 8004298:	40000800 	.word	0x40000800
 800429c:	40000c00 	.word	0x40000c00
 80042a0:	40014000 	.word	0x40014000

080042a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e03f      	b.n	8004336 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7fd f9b6 	bl	800163c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2224      	movs	r2, #36	; 0x24
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f929 	bl	8004540 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	691a      	ldr	r2, [r3, #16]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695a      	ldr	r2, [r3, #20]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800430c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800431c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2220      	movs	r2, #32
 8004330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b08a      	sub	sp, #40	; 0x28
 8004342:	af02      	add	r7, sp, #8
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	60b9      	str	r1, [r7, #8]
 8004348:	603b      	str	r3, [r7, #0]
 800434a:	4613      	mov	r3, r2
 800434c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800434e:	2300      	movs	r3, #0
 8004350:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b20      	cmp	r3, #32
 800435c:	d17c      	bne.n	8004458 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d002      	beq.n	800436a <HAL_UART_Transmit+0x2c>
 8004364:	88fb      	ldrh	r3, [r7, #6]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e075      	b.n	800445a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_UART_Transmit+0x3e>
 8004378:	2302      	movs	r3, #2
 800437a:	e06e      	b.n	800445a <HAL_UART_Transmit+0x11c>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2221      	movs	r2, #33	; 0x21
 800438e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004392:	f7fd fa2b 	bl	80017ec <HAL_GetTick>
 8004396:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	88fa      	ldrh	r2, [r7, #6]
 800439c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	88fa      	ldrh	r2, [r7, #6]
 80043a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ac:	d108      	bne.n	80043c0 <HAL_UART_Transmit+0x82>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d104      	bne.n	80043c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80043b6:	2300      	movs	r3, #0
 80043b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	61bb      	str	r3, [r7, #24]
 80043be:	e003      	b.n	80043c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043c4:	2300      	movs	r3, #0
 80043c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80043d0:	e02a      	b.n	8004428 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2200      	movs	r2, #0
 80043da:	2180      	movs	r1, #128	; 0x80
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 f840 	bl	8004462 <UART_WaitOnFlagUntilTimeout>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e036      	b.n	800445a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10b      	bne.n	800440a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	881b      	ldrh	r3, [r3, #0]
 80043f6:	461a      	mov	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004400:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	3302      	adds	r3, #2
 8004406:	61bb      	str	r3, [r7, #24]
 8004408:	e007      	b.n	800441a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	781a      	ldrb	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	3301      	adds	r3, #1
 8004418:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800441e:	b29b      	uxth	r3, r3
 8004420:	3b01      	subs	r3, #1
 8004422:	b29a      	uxth	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800442c:	b29b      	uxth	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1cf      	bne.n	80043d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2200      	movs	r2, #0
 800443a:	2140      	movs	r1, #64	; 0x40
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 f810 	bl	8004462 <UART_WaitOnFlagUntilTimeout>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e006      	b.n	800445a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004454:	2300      	movs	r3, #0
 8004456:	e000      	b.n	800445a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004458:	2302      	movs	r3, #2
  }
}
 800445a:	4618      	mov	r0, r3
 800445c:	3720      	adds	r7, #32
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b090      	sub	sp, #64	; 0x40
 8004466:	af00      	add	r7, sp, #0
 8004468:	60f8      	str	r0, [r7, #12]
 800446a:	60b9      	str	r1, [r7, #8]
 800446c:	603b      	str	r3, [r7, #0]
 800446e:	4613      	mov	r3, r2
 8004470:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004472:	e050      	b.n	8004516 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447a:	d04c      	beq.n	8004516 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800447c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800447e:	2b00      	cmp	r3, #0
 8004480:	d007      	beq.n	8004492 <UART_WaitOnFlagUntilTimeout+0x30>
 8004482:	f7fd f9b3 	bl	80017ec <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800448e:	429a      	cmp	r2, r3
 8004490:	d241      	bcs.n	8004516 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	330c      	adds	r3, #12
 8004498:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449c:	e853 3f00 	ldrex	r3, [r3]
 80044a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	330c      	adds	r3, #12
 80044b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044b2:	637a      	str	r2, [r7, #52]	; 0x34
 80044b4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044ba:	e841 2300 	strex	r3, r2, [r1]
 80044be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1e5      	bne.n	8004492 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3314      	adds	r3, #20
 80044cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	e853 3f00 	ldrex	r3, [r3]
 80044d4:	613b      	str	r3, [r7, #16]
   return(result);
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f023 0301 	bic.w	r3, r3, #1
 80044dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3314      	adds	r3, #20
 80044e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044e6:	623a      	str	r2, [r7, #32]
 80044e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ea:	69f9      	ldr	r1, [r7, #28]
 80044ec:	6a3a      	ldr	r2, [r7, #32]
 80044ee:	e841 2300 	strex	r3, r2, [r1]
 80044f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1e5      	bne.n	80044c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2220      	movs	r2, #32
 80044fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2220      	movs	r2, #32
 8004506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e00f      	b.n	8004536 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	4013      	ands	r3, r2
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	429a      	cmp	r2, r3
 8004524:	bf0c      	ite	eq
 8004526:	2301      	moveq	r3, #1
 8004528:	2300      	movne	r3, #0
 800452a:	b2db      	uxtb	r3, r3
 800452c:	461a      	mov	r2, r3
 800452e:	79fb      	ldrb	r3, [r7, #7]
 8004530:	429a      	cmp	r2, r3
 8004532:	d09f      	beq.n	8004474 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3740      	adds	r7, #64	; 0x40
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
	...

08004540 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004544:	b09f      	sub	sp, #124	; 0x7c
 8004546:	af00      	add	r7, sp, #0
 8004548:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800454a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004556:	68d9      	ldr	r1, [r3, #12]
 8004558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	ea40 0301 	orr.w	r3, r0, r1
 8004560:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004564:	689a      	ldr	r2, [r3, #8]
 8004566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	431a      	orrs	r2, r3
 800456c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	431a      	orrs	r2, r3
 8004572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	4313      	orrs	r3, r2
 8004578:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800457a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004584:	f021 010c 	bic.w	r1, r1, #12
 8004588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800458e:	430b      	orrs	r3, r1
 8004590:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800459c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800459e:	6999      	ldr	r1, [r3, #24]
 80045a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	ea40 0301 	orr.w	r3, r0, r1
 80045a8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	4bc5      	ldr	r3, [pc, #788]	; (80048c4 <UART_SetConfig+0x384>)
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d004      	beq.n	80045be <UART_SetConfig+0x7e>
 80045b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	4bc3      	ldr	r3, [pc, #780]	; (80048c8 <UART_SetConfig+0x388>)
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d103      	bne.n	80045c6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045be:	f7ff f84b 	bl	8003658 <HAL_RCC_GetPCLK2Freq>
 80045c2:	6778      	str	r0, [r7, #116]	; 0x74
 80045c4:	e002      	b.n	80045cc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045c6:	f7ff f833 	bl	8003630 <HAL_RCC_GetPCLK1Freq>
 80045ca:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045d4:	f040 80b6 	bne.w	8004744 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045da:	461c      	mov	r4, r3
 80045dc:	f04f 0500 	mov.w	r5, #0
 80045e0:	4622      	mov	r2, r4
 80045e2:	462b      	mov	r3, r5
 80045e4:	1891      	adds	r1, r2, r2
 80045e6:	6439      	str	r1, [r7, #64]	; 0x40
 80045e8:	415b      	adcs	r3, r3
 80045ea:	647b      	str	r3, [r7, #68]	; 0x44
 80045ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045f0:	1912      	adds	r2, r2, r4
 80045f2:	eb45 0303 	adc.w	r3, r5, r3
 80045f6:	f04f 0000 	mov.w	r0, #0
 80045fa:	f04f 0100 	mov.w	r1, #0
 80045fe:	00d9      	lsls	r1, r3, #3
 8004600:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004604:	00d0      	lsls	r0, r2, #3
 8004606:	4602      	mov	r2, r0
 8004608:	460b      	mov	r3, r1
 800460a:	1911      	adds	r1, r2, r4
 800460c:	6639      	str	r1, [r7, #96]	; 0x60
 800460e:	416b      	adcs	r3, r5
 8004610:	667b      	str	r3, [r7, #100]	; 0x64
 8004612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	461a      	mov	r2, r3
 8004618:	f04f 0300 	mov.w	r3, #0
 800461c:	1891      	adds	r1, r2, r2
 800461e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004620:	415b      	adcs	r3, r3
 8004622:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004624:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004628:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800462c:	f7fb fe30 	bl	8000290 <__aeabi_uldivmod>
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
 8004634:	4ba5      	ldr	r3, [pc, #660]	; (80048cc <UART_SetConfig+0x38c>)
 8004636:	fba3 2302 	umull	r2, r3, r3, r2
 800463a:	095b      	lsrs	r3, r3, #5
 800463c:	011e      	lsls	r6, r3, #4
 800463e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004640:	461c      	mov	r4, r3
 8004642:	f04f 0500 	mov.w	r5, #0
 8004646:	4622      	mov	r2, r4
 8004648:	462b      	mov	r3, r5
 800464a:	1891      	adds	r1, r2, r2
 800464c:	6339      	str	r1, [r7, #48]	; 0x30
 800464e:	415b      	adcs	r3, r3
 8004650:	637b      	str	r3, [r7, #52]	; 0x34
 8004652:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004656:	1912      	adds	r2, r2, r4
 8004658:	eb45 0303 	adc.w	r3, r5, r3
 800465c:	f04f 0000 	mov.w	r0, #0
 8004660:	f04f 0100 	mov.w	r1, #0
 8004664:	00d9      	lsls	r1, r3, #3
 8004666:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800466a:	00d0      	lsls	r0, r2, #3
 800466c:	4602      	mov	r2, r0
 800466e:	460b      	mov	r3, r1
 8004670:	1911      	adds	r1, r2, r4
 8004672:	65b9      	str	r1, [r7, #88]	; 0x58
 8004674:	416b      	adcs	r3, r5
 8004676:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	461a      	mov	r2, r3
 800467e:	f04f 0300 	mov.w	r3, #0
 8004682:	1891      	adds	r1, r2, r2
 8004684:	62b9      	str	r1, [r7, #40]	; 0x28
 8004686:	415b      	adcs	r3, r3
 8004688:	62fb      	str	r3, [r7, #44]	; 0x2c
 800468a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800468e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004692:	f7fb fdfd 	bl	8000290 <__aeabi_uldivmod>
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	4b8c      	ldr	r3, [pc, #560]	; (80048cc <UART_SetConfig+0x38c>)
 800469c:	fba3 1302 	umull	r1, r3, r3, r2
 80046a0:	095b      	lsrs	r3, r3, #5
 80046a2:	2164      	movs	r1, #100	; 0x64
 80046a4:	fb01 f303 	mul.w	r3, r1, r3
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	3332      	adds	r3, #50	; 0x32
 80046ae:	4a87      	ldr	r2, [pc, #540]	; (80048cc <UART_SetConfig+0x38c>)
 80046b0:	fba2 2303 	umull	r2, r3, r2, r3
 80046b4:	095b      	lsrs	r3, r3, #5
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046bc:	441e      	add	r6, r3
 80046be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046c0:	4618      	mov	r0, r3
 80046c2:	f04f 0100 	mov.w	r1, #0
 80046c6:	4602      	mov	r2, r0
 80046c8:	460b      	mov	r3, r1
 80046ca:	1894      	adds	r4, r2, r2
 80046cc:	623c      	str	r4, [r7, #32]
 80046ce:	415b      	adcs	r3, r3
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24
 80046d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046d6:	1812      	adds	r2, r2, r0
 80046d8:	eb41 0303 	adc.w	r3, r1, r3
 80046dc:	f04f 0400 	mov.w	r4, #0
 80046e0:	f04f 0500 	mov.w	r5, #0
 80046e4:	00dd      	lsls	r5, r3, #3
 80046e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80046ea:	00d4      	lsls	r4, r2, #3
 80046ec:	4622      	mov	r2, r4
 80046ee:	462b      	mov	r3, r5
 80046f0:	1814      	adds	r4, r2, r0
 80046f2:	653c      	str	r4, [r7, #80]	; 0x50
 80046f4:	414b      	adcs	r3, r1
 80046f6:	657b      	str	r3, [r7, #84]	; 0x54
 80046f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	461a      	mov	r2, r3
 80046fe:	f04f 0300 	mov.w	r3, #0
 8004702:	1891      	adds	r1, r2, r2
 8004704:	61b9      	str	r1, [r7, #24]
 8004706:	415b      	adcs	r3, r3
 8004708:	61fb      	str	r3, [r7, #28]
 800470a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800470e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004712:	f7fb fdbd 	bl	8000290 <__aeabi_uldivmod>
 8004716:	4602      	mov	r2, r0
 8004718:	460b      	mov	r3, r1
 800471a:	4b6c      	ldr	r3, [pc, #432]	; (80048cc <UART_SetConfig+0x38c>)
 800471c:	fba3 1302 	umull	r1, r3, r3, r2
 8004720:	095b      	lsrs	r3, r3, #5
 8004722:	2164      	movs	r1, #100	; 0x64
 8004724:	fb01 f303 	mul.w	r3, r1, r3
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	3332      	adds	r3, #50	; 0x32
 800472e:	4a67      	ldr	r2, [pc, #412]	; (80048cc <UART_SetConfig+0x38c>)
 8004730:	fba2 2303 	umull	r2, r3, r2, r3
 8004734:	095b      	lsrs	r3, r3, #5
 8004736:	f003 0207 	and.w	r2, r3, #7
 800473a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4432      	add	r2, r6
 8004740:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004742:	e0b9      	b.n	80048b8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004744:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004746:	461c      	mov	r4, r3
 8004748:	f04f 0500 	mov.w	r5, #0
 800474c:	4622      	mov	r2, r4
 800474e:	462b      	mov	r3, r5
 8004750:	1891      	adds	r1, r2, r2
 8004752:	6139      	str	r1, [r7, #16]
 8004754:	415b      	adcs	r3, r3
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800475c:	1912      	adds	r2, r2, r4
 800475e:	eb45 0303 	adc.w	r3, r5, r3
 8004762:	f04f 0000 	mov.w	r0, #0
 8004766:	f04f 0100 	mov.w	r1, #0
 800476a:	00d9      	lsls	r1, r3, #3
 800476c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004770:	00d0      	lsls	r0, r2, #3
 8004772:	4602      	mov	r2, r0
 8004774:	460b      	mov	r3, r1
 8004776:	eb12 0804 	adds.w	r8, r2, r4
 800477a:	eb43 0905 	adc.w	r9, r3, r5
 800477e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	4618      	mov	r0, r3
 8004784:	f04f 0100 	mov.w	r1, #0
 8004788:	f04f 0200 	mov.w	r2, #0
 800478c:	f04f 0300 	mov.w	r3, #0
 8004790:	008b      	lsls	r3, r1, #2
 8004792:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004796:	0082      	lsls	r2, r0, #2
 8004798:	4640      	mov	r0, r8
 800479a:	4649      	mov	r1, r9
 800479c:	f7fb fd78 	bl	8000290 <__aeabi_uldivmod>
 80047a0:	4602      	mov	r2, r0
 80047a2:	460b      	mov	r3, r1
 80047a4:	4b49      	ldr	r3, [pc, #292]	; (80048cc <UART_SetConfig+0x38c>)
 80047a6:	fba3 2302 	umull	r2, r3, r3, r2
 80047aa:	095b      	lsrs	r3, r3, #5
 80047ac:	011e      	lsls	r6, r3, #4
 80047ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047b0:	4618      	mov	r0, r3
 80047b2:	f04f 0100 	mov.w	r1, #0
 80047b6:	4602      	mov	r2, r0
 80047b8:	460b      	mov	r3, r1
 80047ba:	1894      	adds	r4, r2, r2
 80047bc:	60bc      	str	r4, [r7, #8]
 80047be:	415b      	adcs	r3, r3
 80047c0:	60fb      	str	r3, [r7, #12]
 80047c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047c6:	1812      	adds	r2, r2, r0
 80047c8:	eb41 0303 	adc.w	r3, r1, r3
 80047cc:	f04f 0400 	mov.w	r4, #0
 80047d0:	f04f 0500 	mov.w	r5, #0
 80047d4:	00dd      	lsls	r5, r3, #3
 80047d6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80047da:	00d4      	lsls	r4, r2, #3
 80047dc:	4622      	mov	r2, r4
 80047de:	462b      	mov	r3, r5
 80047e0:	1814      	adds	r4, r2, r0
 80047e2:	64bc      	str	r4, [r7, #72]	; 0x48
 80047e4:	414b      	adcs	r3, r1
 80047e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f04f 0100 	mov.w	r1, #0
 80047f2:	f04f 0200 	mov.w	r2, #0
 80047f6:	f04f 0300 	mov.w	r3, #0
 80047fa:	008b      	lsls	r3, r1, #2
 80047fc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004800:	0082      	lsls	r2, r0, #2
 8004802:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004806:	f7fb fd43 	bl	8000290 <__aeabi_uldivmod>
 800480a:	4602      	mov	r2, r0
 800480c:	460b      	mov	r3, r1
 800480e:	4b2f      	ldr	r3, [pc, #188]	; (80048cc <UART_SetConfig+0x38c>)
 8004810:	fba3 1302 	umull	r1, r3, r3, r2
 8004814:	095b      	lsrs	r3, r3, #5
 8004816:	2164      	movs	r1, #100	; 0x64
 8004818:	fb01 f303 	mul.w	r3, r1, r3
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	011b      	lsls	r3, r3, #4
 8004820:	3332      	adds	r3, #50	; 0x32
 8004822:	4a2a      	ldr	r2, [pc, #168]	; (80048cc <UART_SetConfig+0x38c>)
 8004824:	fba2 2303 	umull	r2, r3, r2, r3
 8004828:	095b      	lsrs	r3, r3, #5
 800482a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800482e:	441e      	add	r6, r3
 8004830:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004832:	4618      	mov	r0, r3
 8004834:	f04f 0100 	mov.w	r1, #0
 8004838:	4602      	mov	r2, r0
 800483a:	460b      	mov	r3, r1
 800483c:	1894      	adds	r4, r2, r2
 800483e:	603c      	str	r4, [r7, #0]
 8004840:	415b      	adcs	r3, r3
 8004842:	607b      	str	r3, [r7, #4]
 8004844:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004848:	1812      	adds	r2, r2, r0
 800484a:	eb41 0303 	adc.w	r3, r1, r3
 800484e:	f04f 0400 	mov.w	r4, #0
 8004852:	f04f 0500 	mov.w	r5, #0
 8004856:	00dd      	lsls	r5, r3, #3
 8004858:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800485c:	00d4      	lsls	r4, r2, #3
 800485e:	4622      	mov	r2, r4
 8004860:	462b      	mov	r3, r5
 8004862:	eb12 0a00 	adds.w	sl, r2, r0
 8004866:	eb43 0b01 	adc.w	fp, r3, r1
 800486a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	4618      	mov	r0, r3
 8004870:	f04f 0100 	mov.w	r1, #0
 8004874:	f04f 0200 	mov.w	r2, #0
 8004878:	f04f 0300 	mov.w	r3, #0
 800487c:	008b      	lsls	r3, r1, #2
 800487e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004882:	0082      	lsls	r2, r0, #2
 8004884:	4650      	mov	r0, sl
 8004886:	4659      	mov	r1, fp
 8004888:	f7fb fd02 	bl	8000290 <__aeabi_uldivmod>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4b0e      	ldr	r3, [pc, #56]	; (80048cc <UART_SetConfig+0x38c>)
 8004892:	fba3 1302 	umull	r1, r3, r3, r2
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	2164      	movs	r1, #100	; 0x64
 800489a:	fb01 f303 	mul.w	r3, r1, r3
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	011b      	lsls	r3, r3, #4
 80048a2:	3332      	adds	r3, #50	; 0x32
 80048a4:	4a09      	ldr	r2, [pc, #36]	; (80048cc <UART_SetConfig+0x38c>)
 80048a6:	fba2 2303 	umull	r2, r3, r2, r3
 80048aa:	095b      	lsrs	r3, r3, #5
 80048ac:	f003 020f 	and.w	r2, r3, #15
 80048b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4432      	add	r2, r6
 80048b6:	609a      	str	r2, [r3, #8]
}
 80048b8:	bf00      	nop
 80048ba:	377c      	adds	r7, #124	; 0x7c
 80048bc:	46bd      	mov	sp, r7
 80048be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048c2:	bf00      	nop
 80048c4:	40011000 	.word	0x40011000
 80048c8:	40011400 	.word	0x40011400
 80048cc:	51eb851f 	.word	0x51eb851f

080048d0 <__errno>:
 80048d0:	4b01      	ldr	r3, [pc, #4]	; (80048d8 <__errno+0x8>)
 80048d2:	6818      	ldr	r0, [r3, #0]
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	2000000c 	.word	0x2000000c

080048dc <__libc_init_array>:
 80048dc:	b570      	push	{r4, r5, r6, lr}
 80048de:	4d0d      	ldr	r5, [pc, #52]	; (8004914 <__libc_init_array+0x38>)
 80048e0:	4c0d      	ldr	r4, [pc, #52]	; (8004918 <__libc_init_array+0x3c>)
 80048e2:	1b64      	subs	r4, r4, r5
 80048e4:	10a4      	asrs	r4, r4, #2
 80048e6:	2600      	movs	r6, #0
 80048e8:	42a6      	cmp	r6, r4
 80048ea:	d109      	bne.n	8004900 <__libc_init_array+0x24>
 80048ec:	4d0b      	ldr	r5, [pc, #44]	; (800491c <__libc_init_array+0x40>)
 80048ee:	4c0c      	ldr	r4, [pc, #48]	; (8004920 <__libc_init_array+0x44>)
 80048f0:	f000 fc56 	bl	80051a0 <_init>
 80048f4:	1b64      	subs	r4, r4, r5
 80048f6:	10a4      	asrs	r4, r4, #2
 80048f8:	2600      	movs	r6, #0
 80048fa:	42a6      	cmp	r6, r4
 80048fc:	d105      	bne.n	800490a <__libc_init_array+0x2e>
 80048fe:	bd70      	pop	{r4, r5, r6, pc}
 8004900:	f855 3b04 	ldr.w	r3, [r5], #4
 8004904:	4798      	blx	r3
 8004906:	3601      	adds	r6, #1
 8004908:	e7ee      	b.n	80048e8 <__libc_init_array+0xc>
 800490a:	f855 3b04 	ldr.w	r3, [r5], #4
 800490e:	4798      	blx	r3
 8004910:	3601      	adds	r6, #1
 8004912:	e7f2      	b.n	80048fa <__libc_init_array+0x1e>
 8004914:	08005224 	.word	0x08005224
 8004918:	08005224 	.word	0x08005224
 800491c:	08005224 	.word	0x08005224
 8004920:	08005228 	.word	0x08005228

08004924 <malloc>:
 8004924:	4b02      	ldr	r3, [pc, #8]	; (8004930 <malloc+0xc>)
 8004926:	4601      	mov	r1, r0
 8004928:	6818      	ldr	r0, [r3, #0]
 800492a:	f000 b85b 	b.w	80049e4 <_malloc_r>
 800492e:	bf00      	nop
 8004930:	2000000c 	.word	0x2000000c

08004934 <memset>:
 8004934:	4402      	add	r2, r0
 8004936:	4603      	mov	r3, r0
 8004938:	4293      	cmp	r3, r2
 800493a:	d100      	bne.n	800493e <memset+0xa>
 800493c:	4770      	bx	lr
 800493e:	f803 1b01 	strb.w	r1, [r3], #1
 8004942:	e7f9      	b.n	8004938 <memset+0x4>

08004944 <_free_r>:
 8004944:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004946:	2900      	cmp	r1, #0
 8004948:	d048      	beq.n	80049dc <_free_r+0x98>
 800494a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800494e:	9001      	str	r0, [sp, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	f1a1 0404 	sub.w	r4, r1, #4
 8004956:	bfb8      	it	lt
 8004958:	18e4      	addlt	r4, r4, r3
 800495a:	f000 f8cd 	bl	8004af8 <__malloc_lock>
 800495e:	4a20      	ldr	r2, [pc, #128]	; (80049e0 <_free_r+0x9c>)
 8004960:	9801      	ldr	r0, [sp, #4]
 8004962:	6813      	ldr	r3, [r2, #0]
 8004964:	4615      	mov	r5, r2
 8004966:	b933      	cbnz	r3, 8004976 <_free_r+0x32>
 8004968:	6063      	str	r3, [r4, #4]
 800496a:	6014      	str	r4, [r2, #0]
 800496c:	b003      	add	sp, #12
 800496e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004972:	f000 b8c7 	b.w	8004b04 <__malloc_unlock>
 8004976:	42a3      	cmp	r3, r4
 8004978:	d90b      	bls.n	8004992 <_free_r+0x4e>
 800497a:	6821      	ldr	r1, [r4, #0]
 800497c:	1862      	adds	r2, r4, r1
 800497e:	4293      	cmp	r3, r2
 8004980:	bf04      	itt	eq
 8004982:	681a      	ldreq	r2, [r3, #0]
 8004984:	685b      	ldreq	r3, [r3, #4]
 8004986:	6063      	str	r3, [r4, #4]
 8004988:	bf04      	itt	eq
 800498a:	1852      	addeq	r2, r2, r1
 800498c:	6022      	streq	r2, [r4, #0]
 800498e:	602c      	str	r4, [r5, #0]
 8004990:	e7ec      	b.n	800496c <_free_r+0x28>
 8004992:	461a      	mov	r2, r3
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	b10b      	cbz	r3, 800499c <_free_r+0x58>
 8004998:	42a3      	cmp	r3, r4
 800499a:	d9fa      	bls.n	8004992 <_free_r+0x4e>
 800499c:	6811      	ldr	r1, [r2, #0]
 800499e:	1855      	adds	r5, r2, r1
 80049a0:	42a5      	cmp	r5, r4
 80049a2:	d10b      	bne.n	80049bc <_free_r+0x78>
 80049a4:	6824      	ldr	r4, [r4, #0]
 80049a6:	4421      	add	r1, r4
 80049a8:	1854      	adds	r4, r2, r1
 80049aa:	42a3      	cmp	r3, r4
 80049ac:	6011      	str	r1, [r2, #0]
 80049ae:	d1dd      	bne.n	800496c <_free_r+0x28>
 80049b0:	681c      	ldr	r4, [r3, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	6053      	str	r3, [r2, #4]
 80049b6:	4421      	add	r1, r4
 80049b8:	6011      	str	r1, [r2, #0]
 80049ba:	e7d7      	b.n	800496c <_free_r+0x28>
 80049bc:	d902      	bls.n	80049c4 <_free_r+0x80>
 80049be:	230c      	movs	r3, #12
 80049c0:	6003      	str	r3, [r0, #0]
 80049c2:	e7d3      	b.n	800496c <_free_r+0x28>
 80049c4:	6825      	ldr	r5, [r4, #0]
 80049c6:	1961      	adds	r1, r4, r5
 80049c8:	428b      	cmp	r3, r1
 80049ca:	bf04      	itt	eq
 80049cc:	6819      	ldreq	r1, [r3, #0]
 80049ce:	685b      	ldreq	r3, [r3, #4]
 80049d0:	6063      	str	r3, [r4, #4]
 80049d2:	bf04      	itt	eq
 80049d4:	1949      	addeq	r1, r1, r5
 80049d6:	6021      	streq	r1, [r4, #0]
 80049d8:	6054      	str	r4, [r2, #4]
 80049da:	e7c7      	b.n	800496c <_free_r+0x28>
 80049dc:	b003      	add	sp, #12
 80049de:	bd30      	pop	{r4, r5, pc}
 80049e0:	20000090 	.word	0x20000090

080049e4 <_malloc_r>:
 80049e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e6:	1ccd      	adds	r5, r1, #3
 80049e8:	f025 0503 	bic.w	r5, r5, #3
 80049ec:	3508      	adds	r5, #8
 80049ee:	2d0c      	cmp	r5, #12
 80049f0:	bf38      	it	cc
 80049f2:	250c      	movcc	r5, #12
 80049f4:	2d00      	cmp	r5, #0
 80049f6:	4606      	mov	r6, r0
 80049f8:	db01      	blt.n	80049fe <_malloc_r+0x1a>
 80049fa:	42a9      	cmp	r1, r5
 80049fc:	d903      	bls.n	8004a06 <_malloc_r+0x22>
 80049fe:	230c      	movs	r3, #12
 8004a00:	6033      	str	r3, [r6, #0]
 8004a02:	2000      	movs	r0, #0
 8004a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a06:	f000 f877 	bl	8004af8 <__malloc_lock>
 8004a0a:	4921      	ldr	r1, [pc, #132]	; (8004a90 <_malloc_r+0xac>)
 8004a0c:	680a      	ldr	r2, [r1, #0]
 8004a0e:	4614      	mov	r4, r2
 8004a10:	b99c      	cbnz	r4, 8004a3a <_malloc_r+0x56>
 8004a12:	4f20      	ldr	r7, [pc, #128]	; (8004a94 <_malloc_r+0xb0>)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	b923      	cbnz	r3, 8004a22 <_malloc_r+0x3e>
 8004a18:	4621      	mov	r1, r4
 8004a1a:	4630      	mov	r0, r6
 8004a1c:	f000 f83c 	bl	8004a98 <_sbrk_r>
 8004a20:	6038      	str	r0, [r7, #0]
 8004a22:	4629      	mov	r1, r5
 8004a24:	4630      	mov	r0, r6
 8004a26:	f000 f837 	bl	8004a98 <_sbrk_r>
 8004a2a:	1c43      	adds	r3, r0, #1
 8004a2c:	d123      	bne.n	8004a76 <_malloc_r+0x92>
 8004a2e:	230c      	movs	r3, #12
 8004a30:	6033      	str	r3, [r6, #0]
 8004a32:	4630      	mov	r0, r6
 8004a34:	f000 f866 	bl	8004b04 <__malloc_unlock>
 8004a38:	e7e3      	b.n	8004a02 <_malloc_r+0x1e>
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	1b5b      	subs	r3, r3, r5
 8004a3e:	d417      	bmi.n	8004a70 <_malloc_r+0x8c>
 8004a40:	2b0b      	cmp	r3, #11
 8004a42:	d903      	bls.n	8004a4c <_malloc_r+0x68>
 8004a44:	6023      	str	r3, [r4, #0]
 8004a46:	441c      	add	r4, r3
 8004a48:	6025      	str	r5, [r4, #0]
 8004a4a:	e004      	b.n	8004a56 <_malloc_r+0x72>
 8004a4c:	6863      	ldr	r3, [r4, #4]
 8004a4e:	42a2      	cmp	r2, r4
 8004a50:	bf0c      	ite	eq
 8004a52:	600b      	streq	r3, [r1, #0]
 8004a54:	6053      	strne	r3, [r2, #4]
 8004a56:	4630      	mov	r0, r6
 8004a58:	f000 f854 	bl	8004b04 <__malloc_unlock>
 8004a5c:	f104 000b 	add.w	r0, r4, #11
 8004a60:	1d23      	adds	r3, r4, #4
 8004a62:	f020 0007 	bic.w	r0, r0, #7
 8004a66:	1ac2      	subs	r2, r0, r3
 8004a68:	d0cc      	beq.n	8004a04 <_malloc_r+0x20>
 8004a6a:	1a1b      	subs	r3, r3, r0
 8004a6c:	50a3      	str	r3, [r4, r2]
 8004a6e:	e7c9      	b.n	8004a04 <_malloc_r+0x20>
 8004a70:	4622      	mov	r2, r4
 8004a72:	6864      	ldr	r4, [r4, #4]
 8004a74:	e7cc      	b.n	8004a10 <_malloc_r+0x2c>
 8004a76:	1cc4      	adds	r4, r0, #3
 8004a78:	f024 0403 	bic.w	r4, r4, #3
 8004a7c:	42a0      	cmp	r0, r4
 8004a7e:	d0e3      	beq.n	8004a48 <_malloc_r+0x64>
 8004a80:	1a21      	subs	r1, r4, r0
 8004a82:	4630      	mov	r0, r6
 8004a84:	f000 f808 	bl	8004a98 <_sbrk_r>
 8004a88:	3001      	adds	r0, #1
 8004a8a:	d1dd      	bne.n	8004a48 <_malloc_r+0x64>
 8004a8c:	e7cf      	b.n	8004a2e <_malloc_r+0x4a>
 8004a8e:	bf00      	nop
 8004a90:	20000090 	.word	0x20000090
 8004a94:	20000094 	.word	0x20000094

08004a98 <_sbrk_r>:
 8004a98:	b538      	push	{r3, r4, r5, lr}
 8004a9a:	4d06      	ldr	r5, [pc, #24]	; (8004ab4 <_sbrk_r+0x1c>)
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	4604      	mov	r4, r0
 8004aa0:	4608      	mov	r0, r1
 8004aa2:	602b      	str	r3, [r5, #0]
 8004aa4:	f7fc fa56 	bl	8000f54 <_sbrk>
 8004aa8:	1c43      	adds	r3, r0, #1
 8004aaa:	d102      	bne.n	8004ab2 <_sbrk_r+0x1a>
 8004aac:	682b      	ldr	r3, [r5, #0]
 8004aae:	b103      	cbz	r3, 8004ab2 <_sbrk_r+0x1a>
 8004ab0:	6023      	str	r3, [r4, #0]
 8004ab2:	bd38      	pop	{r3, r4, r5, pc}
 8004ab4:	200003bc 	.word	0x200003bc

08004ab8 <siprintf>:
 8004ab8:	b40e      	push	{r1, r2, r3}
 8004aba:	b500      	push	{lr}
 8004abc:	b09c      	sub	sp, #112	; 0x70
 8004abe:	ab1d      	add	r3, sp, #116	; 0x74
 8004ac0:	9002      	str	r0, [sp, #8]
 8004ac2:	9006      	str	r0, [sp, #24]
 8004ac4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ac8:	4809      	ldr	r0, [pc, #36]	; (8004af0 <siprintf+0x38>)
 8004aca:	9107      	str	r1, [sp, #28]
 8004acc:	9104      	str	r1, [sp, #16]
 8004ace:	4909      	ldr	r1, [pc, #36]	; (8004af4 <siprintf+0x3c>)
 8004ad0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ad4:	9105      	str	r1, [sp, #20]
 8004ad6:	6800      	ldr	r0, [r0, #0]
 8004ad8:	9301      	str	r3, [sp, #4]
 8004ada:	a902      	add	r1, sp, #8
 8004adc:	f000 f874 	bl	8004bc8 <_svfiprintf_r>
 8004ae0:	9b02      	ldr	r3, [sp, #8]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	701a      	strb	r2, [r3, #0]
 8004ae6:	b01c      	add	sp, #112	; 0x70
 8004ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004aec:	b003      	add	sp, #12
 8004aee:	4770      	bx	lr
 8004af0:	2000000c 	.word	0x2000000c
 8004af4:	ffff0208 	.word	0xffff0208

08004af8 <__malloc_lock>:
 8004af8:	4801      	ldr	r0, [pc, #4]	; (8004b00 <__malloc_lock+0x8>)
 8004afa:	f000 baf9 	b.w	80050f0 <__retarget_lock_acquire_recursive>
 8004afe:	bf00      	nop
 8004b00:	200003c4 	.word	0x200003c4

08004b04 <__malloc_unlock>:
 8004b04:	4801      	ldr	r0, [pc, #4]	; (8004b0c <__malloc_unlock+0x8>)
 8004b06:	f000 baf4 	b.w	80050f2 <__retarget_lock_release_recursive>
 8004b0a:	bf00      	nop
 8004b0c:	200003c4 	.word	0x200003c4

08004b10 <__ssputs_r>:
 8004b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b14:	688e      	ldr	r6, [r1, #8]
 8004b16:	429e      	cmp	r6, r3
 8004b18:	4682      	mov	sl, r0
 8004b1a:	460c      	mov	r4, r1
 8004b1c:	4690      	mov	r8, r2
 8004b1e:	461f      	mov	r7, r3
 8004b20:	d838      	bhi.n	8004b94 <__ssputs_r+0x84>
 8004b22:	898a      	ldrh	r2, [r1, #12]
 8004b24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b28:	d032      	beq.n	8004b90 <__ssputs_r+0x80>
 8004b2a:	6825      	ldr	r5, [r4, #0]
 8004b2c:	6909      	ldr	r1, [r1, #16]
 8004b2e:	eba5 0901 	sub.w	r9, r5, r1
 8004b32:	6965      	ldr	r5, [r4, #20]
 8004b34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	444b      	add	r3, r9
 8004b40:	106d      	asrs	r5, r5, #1
 8004b42:	429d      	cmp	r5, r3
 8004b44:	bf38      	it	cc
 8004b46:	461d      	movcc	r5, r3
 8004b48:	0553      	lsls	r3, r2, #21
 8004b4a:	d531      	bpl.n	8004bb0 <__ssputs_r+0xa0>
 8004b4c:	4629      	mov	r1, r5
 8004b4e:	f7ff ff49 	bl	80049e4 <_malloc_r>
 8004b52:	4606      	mov	r6, r0
 8004b54:	b950      	cbnz	r0, 8004b6c <__ssputs_r+0x5c>
 8004b56:	230c      	movs	r3, #12
 8004b58:	f8ca 3000 	str.w	r3, [sl]
 8004b5c:	89a3      	ldrh	r3, [r4, #12]
 8004b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b62:	81a3      	strh	r3, [r4, #12]
 8004b64:	f04f 30ff 	mov.w	r0, #4294967295
 8004b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b6c:	6921      	ldr	r1, [r4, #16]
 8004b6e:	464a      	mov	r2, r9
 8004b70:	f000 fac0 	bl	80050f4 <memcpy>
 8004b74:	89a3      	ldrh	r3, [r4, #12]
 8004b76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b7e:	81a3      	strh	r3, [r4, #12]
 8004b80:	6126      	str	r6, [r4, #16]
 8004b82:	6165      	str	r5, [r4, #20]
 8004b84:	444e      	add	r6, r9
 8004b86:	eba5 0509 	sub.w	r5, r5, r9
 8004b8a:	6026      	str	r6, [r4, #0]
 8004b8c:	60a5      	str	r5, [r4, #8]
 8004b8e:	463e      	mov	r6, r7
 8004b90:	42be      	cmp	r6, r7
 8004b92:	d900      	bls.n	8004b96 <__ssputs_r+0x86>
 8004b94:	463e      	mov	r6, r7
 8004b96:	4632      	mov	r2, r6
 8004b98:	6820      	ldr	r0, [r4, #0]
 8004b9a:	4641      	mov	r1, r8
 8004b9c:	f000 fab8 	bl	8005110 <memmove>
 8004ba0:	68a3      	ldr	r3, [r4, #8]
 8004ba2:	6822      	ldr	r2, [r4, #0]
 8004ba4:	1b9b      	subs	r3, r3, r6
 8004ba6:	4432      	add	r2, r6
 8004ba8:	60a3      	str	r3, [r4, #8]
 8004baa:	6022      	str	r2, [r4, #0]
 8004bac:	2000      	movs	r0, #0
 8004bae:	e7db      	b.n	8004b68 <__ssputs_r+0x58>
 8004bb0:	462a      	mov	r2, r5
 8004bb2:	f000 fac7 	bl	8005144 <_realloc_r>
 8004bb6:	4606      	mov	r6, r0
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	d1e1      	bne.n	8004b80 <__ssputs_r+0x70>
 8004bbc:	6921      	ldr	r1, [r4, #16]
 8004bbe:	4650      	mov	r0, sl
 8004bc0:	f7ff fec0 	bl	8004944 <_free_r>
 8004bc4:	e7c7      	b.n	8004b56 <__ssputs_r+0x46>
	...

08004bc8 <_svfiprintf_r>:
 8004bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bcc:	4698      	mov	r8, r3
 8004bce:	898b      	ldrh	r3, [r1, #12]
 8004bd0:	061b      	lsls	r3, r3, #24
 8004bd2:	b09d      	sub	sp, #116	; 0x74
 8004bd4:	4607      	mov	r7, r0
 8004bd6:	460d      	mov	r5, r1
 8004bd8:	4614      	mov	r4, r2
 8004bda:	d50e      	bpl.n	8004bfa <_svfiprintf_r+0x32>
 8004bdc:	690b      	ldr	r3, [r1, #16]
 8004bde:	b963      	cbnz	r3, 8004bfa <_svfiprintf_r+0x32>
 8004be0:	2140      	movs	r1, #64	; 0x40
 8004be2:	f7ff feff 	bl	80049e4 <_malloc_r>
 8004be6:	6028      	str	r0, [r5, #0]
 8004be8:	6128      	str	r0, [r5, #16]
 8004bea:	b920      	cbnz	r0, 8004bf6 <_svfiprintf_r+0x2e>
 8004bec:	230c      	movs	r3, #12
 8004bee:	603b      	str	r3, [r7, #0]
 8004bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf4:	e0d1      	b.n	8004d9a <_svfiprintf_r+0x1d2>
 8004bf6:	2340      	movs	r3, #64	; 0x40
 8004bf8:	616b      	str	r3, [r5, #20]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8004bfe:	2320      	movs	r3, #32
 8004c00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c04:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c08:	2330      	movs	r3, #48	; 0x30
 8004c0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004db4 <_svfiprintf_r+0x1ec>
 8004c0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c12:	f04f 0901 	mov.w	r9, #1
 8004c16:	4623      	mov	r3, r4
 8004c18:	469a      	mov	sl, r3
 8004c1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c1e:	b10a      	cbz	r2, 8004c24 <_svfiprintf_r+0x5c>
 8004c20:	2a25      	cmp	r2, #37	; 0x25
 8004c22:	d1f9      	bne.n	8004c18 <_svfiprintf_r+0x50>
 8004c24:	ebba 0b04 	subs.w	fp, sl, r4
 8004c28:	d00b      	beq.n	8004c42 <_svfiprintf_r+0x7a>
 8004c2a:	465b      	mov	r3, fp
 8004c2c:	4622      	mov	r2, r4
 8004c2e:	4629      	mov	r1, r5
 8004c30:	4638      	mov	r0, r7
 8004c32:	f7ff ff6d 	bl	8004b10 <__ssputs_r>
 8004c36:	3001      	adds	r0, #1
 8004c38:	f000 80aa 	beq.w	8004d90 <_svfiprintf_r+0x1c8>
 8004c3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c3e:	445a      	add	r2, fp
 8004c40:	9209      	str	r2, [sp, #36]	; 0x24
 8004c42:	f89a 3000 	ldrb.w	r3, [sl]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f000 80a2 	beq.w	8004d90 <_svfiprintf_r+0x1c8>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c56:	f10a 0a01 	add.w	sl, sl, #1
 8004c5a:	9304      	str	r3, [sp, #16]
 8004c5c:	9307      	str	r3, [sp, #28]
 8004c5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c62:	931a      	str	r3, [sp, #104]	; 0x68
 8004c64:	4654      	mov	r4, sl
 8004c66:	2205      	movs	r2, #5
 8004c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c6c:	4851      	ldr	r0, [pc, #324]	; (8004db4 <_svfiprintf_r+0x1ec>)
 8004c6e:	f7fb fabf 	bl	80001f0 <memchr>
 8004c72:	9a04      	ldr	r2, [sp, #16]
 8004c74:	b9d8      	cbnz	r0, 8004cae <_svfiprintf_r+0xe6>
 8004c76:	06d0      	lsls	r0, r2, #27
 8004c78:	bf44      	itt	mi
 8004c7a:	2320      	movmi	r3, #32
 8004c7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c80:	0711      	lsls	r1, r2, #28
 8004c82:	bf44      	itt	mi
 8004c84:	232b      	movmi	r3, #43	; 0x2b
 8004c86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8004c8e:	2b2a      	cmp	r3, #42	; 0x2a
 8004c90:	d015      	beq.n	8004cbe <_svfiprintf_r+0xf6>
 8004c92:	9a07      	ldr	r2, [sp, #28]
 8004c94:	4654      	mov	r4, sl
 8004c96:	2000      	movs	r0, #0
 8004c98:	f04f 0c0a 	mov.w	ip, #10
 8004c9c:	4621      	mov	r1, r4
 8004c9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ca2:	3b30      	subs	r3, #48	; 0x30
 8004ca4:	2b09      	cmp	r3, #9
 8004ca6:	d94e      	bls.n	8004d46 <_svfiprintf_r+0x17e>
 8004ca8:	b1b0      	cbz	r0, 8004cd8 <_svfiprintf_r+0x110>
 8004caa:	9207      	str	r2, [sp, #28]
 8004cac:	e014      	b.n	8004cd8 <_svfiprintf_r+0x110>
 8004cae:	eba0 0308 	sub.w	r3, r0, r8
 8004cb2:	fa09 f303 	lsl.w	r3, r9, r3
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	9304      	str	r3, [sp, #16]
 8004cba:	46a2      	mov	sl, r4
 8004cbc:	e7d2      	b.n	8004c64 <_svfiprintf_r+0x9c>
 8004cbe:	9b03      	ldr	r3, [sp, #12]
 8004cc0:	1d19      	adds	r1, r3, #4
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	9103      	str	r1, [sp, #12]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	bfbb      	ittet	lt
 8004cca:	425b      	neglt	r3, r3
 8004ccc:	f042 0202 	orrlt.w	r2, r2, #2
 8004cd0:	9307      	strge	r3, [sp, #28]
 8004cd2:	9307      	strlt	r3, [sp, #28]
 8004cd4:	bfb8      	it	lt
 8004cd6:	9204      	strlt	r2, [sp, #16]
 8004cd8:	7823      	ldrb	r3, [r4, #0]
 8004cda:	2b2e      	cmp	r3, #46	; 0x2e
 8004cdc:	d10c      	bne.n	8004cf8 <_svfiprintf_r+0x130>
 8004cde:	7863      	ldrb	r3, [r4, #1]
 8004ce0:	2b2a      	cmp	r3, #42	; 0x2a
 8004ce2:	d135      	bne.n	8004d50 <_svfiprintf_r+0x188>
 8004ce4:	9b03      	ldr	r3, [sp, #12]
 8004ce6:	1d1a      	adds	r2, r3, #4
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	9203      	str	r2, [sp, #12]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	bfb8      	it	lt
 8004cf0:	f04f 33ff 	movlt.w	r3, #4294967295
 8004cf4:	3402      	adds	r4, #2
 8004cf6:	9305      	str	r3, [sp, #20]
 8004cf8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004dc4 <_svfiprintf_r+0x1fc>
 8004cfc:	7821      	ldrb	r1, [r4, #0]
 8004cfe:	2203      	movs	r2, #3
 8004d00:	4650      	mov	r0, sl
 8004d02:	f7fb fa75 	bl	80001f0 <memchr>
 8004d06:	b140      	cbz	r0, 8004d1a <_svfiprintf_r+0x152>
 8004d08:	2340      	movs	r3, #64	; 0x40
 8004d0a:	eba0 000a 	sub.w	r0, r0, sl
 8004d0e:	fa03 f000 	lsl.w	r0, r3, r0
 8004d12:	9b04      	ldr	r3, [sp, #16]
 8004d14:	4303      	orrs	r3, r0
 8004d16:	3401      	adds	r4, #1
 8004d18:	9304      	str	r3, [sp, #16]
 8004d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d1e:	4826      	ldr	r0, [pc, #152]	; (8004db8 <_svfiprintf_r+0x1f0>)
 8004d20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d24:	2206      	movs	r2, #6
 8004d26:	f7fb fa63 	bl	80001f0 <memchr>
 8004d2a:	2800      	cmp	r0, #0
 8004d2c:	d038      	beq.n	8004da0 <_svfiprintf_r+0x1d8>
 8004d2e:	4b23      	ldr	r3, [pc, #140]	; (8004dbc <_svfiprintf_r+0x1f4>)
 8004d30:	bb1b      	cbnz	r3, 8004d7a <_svfiprintf_r+0x1b2>
 8004d32:	9b03      	ldr	r3, [sp, #12]
 8004d34:	3307      	adds	r3, #7
 8004d36:	f023 0307 	bic.w	r3, r3, #7
 8004d3a:	3308      	adds	r3, #8
 8004d3c:	9303      	str	r3, [sp, #12]
 8004d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d40:	4433      	add	r3, r6
 8004d42:	9309      	str	r3, [sp, #36]	; 0x24
 8004d44:	e767      	b.n	8004c16 <_svfiprintf_r+0x4e>
 8004d46:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d4a:	460c      	mov	r4, r1
 8004d4c:	2001      	movs	r0, #1
 8004d4e:	e7a5      	b.n	8004c9c <_svfiprintf_r+0xd4>
 8004d50:	2300      	movs	r3, #0
 8004d52:	3401      	adds	r4, #1
 8004d54:	9305      	str	r3, [sp, #20]
 8004d56:	4619      	mov	r1, r3
 8004d58:	f04f 0c0a 	mov.w	ip, #10
 8004d5c:	4620      	mov	r0, r4
 8004d5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d62:	3a30      	subs	r2, #48	; 0x30
 8004d64:	2a09      	cmp	r2, #9
 8004d66:	d903      	bls.n	8004d70 <_svfiprintf_r+0x1a8>
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d0c5      	beq.n	8004cf8 <_svfiprintf_r+0x130>
 8004d6c:	9105      	str	r1, [sp, #20]
 8004d6e:	e7c3      	b.n	8004cf8 <_svfiprintf_r+0x130>
 8004d70:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d74:	4604      	mov	r4, r0
 8004d76:	2301      	movs	r3, #1
 8004d78:	e7f0      	b.n	8004d5c <_svfiprintf_r+0x194>
 8004d7a:	ab03      	add	r3, sp, #12
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	462a      	mov	r2, r5
 8004d80:	4b0f      	ldr	r3, [pc, #60]	; (8004dc0 <_svfiprintf_r+0x1f8>)
 8004d82:	a904      	add	r1, sp, #16
 8004d84:	4638      	mov	r0, r7
 8004d86:	f3af 8000 	nop.w
 8004d8a:	1c42      	adds	r2, r0, #1
 8004d8c:	4606      	mov	r6, r0
 8004d8e:	d1d6      	bne.n	8004d3e <_svfiprintf_r+0x176>
 8004d90:	89ab      	ldrh	r3, [r5, #12]
 8004d92:	065b      	lsls	r3, r3, #25
 8004d94:	f53f af2c 	bmi.w	8004bf0 <_svfiprintf_r+0x28>
 8004d98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d9a:	b01d      	add	sp, #116	; 0x74
 8004d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004da0:	ab03      	add	r3, sp, #12
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	462a      	mov	r2, r5
 8004da6:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <_svfiprintf_r+0x1f8>)
 8004da8:	a904      	add	r1, sp, #16
 8004daa:	4638      	mov	r0, r7
 8004dac:	f000 f87a 	bl	8004ea4 <_printf_i>
 8004db0:	e7eb      	b.n	8004d8a <_svfiprintf_r+0x1c2>
 8004db2:	bf00      	nop
 8004db4:	080051e8 	.word	0x080051e8
 8004db8:	080051f2 	.word	0x080051f2
 8004dbc:	00000000 	.word	0x00000000
 8004dc0:	08004b11 	.word	0x08004b11
 8004dc4:	080051ee 	.word	0x080051ee

08004dc8 <_printf_common>:
 8004dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dcc:	4616      	mov	r6, r2
 8004dce:	4699      	mov	r9, r3
 8004dd0:	688a      	ldr	r2, [r1, #8]
 8004dd2:	690b      	ldr	r3, [r1, #16]
 8004dd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	bfb8      	it	lt
 8004ddc:	4613      	movlt	r3, r2
 8004dde:	6033      	str	r3, [r6, #0]
 8004de0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004de4:	4607      	mov	r7, r0
 8004de6:	460c      	mov	r4, r1
 8004de8:	b10a      	cbz	r2, 8004dee <_printf_common+0x26>
 8004dea:	3301      	adds	r3, #1
 8004dec:	6033      	str	r3, [r6, #0]
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	0699      	lsls	r1, r3, #26
 8004df2:	bf42      	ittt	mi
 8004df4:	6833      	ldrmi	r3, [r6, #0]
 8004df6:	3302      	addmi	r3, #2
 8004df8:	6033      	strmi	r3, [r6, #0]
 8004dfa:	6825      	ldr	r5, [r4, #0]
 8004dfc:	f015 0506 	ands.w	r5, r5, #6
 8004e00:	d106      	bne.n	8004e10 <_printf_common+0x48>
 8004e02:	f104 0a19 	add.w	sl, r4, #25
 8004e06:	68e3      	ldr	r3, [r4, #12]
 8004e08:	6832      	ldr	r2, [r6, #0]
 8004e0a:	1a9b      	subs	r3, r3, r2
 8004e0c:	42ab      	cmp	r3, r5
 8004e0e:	dc26      	bgt.n	8004e5e <_printf_common+0x96>
 8004e10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e14:	1e13      	subs	r3, r2, #0
 8004e16:	6822      	ldr	r2, [r4, #0]
 8004e18:	bf18      	it	ne
 8004e1a:	2301      	movne	r3, #1
 8004e1c:	0692      	lsls	r2, r2, #26
 8004e1e:	d42b      	bmi.n	8004e78 <_printf_common+0xb0>
 8004e20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e24:	4649      	mov	r1, r9
 8004e26:	4638      	mov	r0, r7
 8004e28:	47c0      	blx	r8
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	d01e      	beq.n	8004e6c <_printf_common+0xa4>
 8004e2e:	6823      	ldr	r3, [r4, #0]
 8004e30:	68e5      	ldr	r5, [r4, #12]
 8004e32:	6832      	ldr	r2, [r6, #0]
 8004e34:	f003 0306 	and.w	r3, r3, #6
 8004e38:	2b04      	cmp	r3, #4
 8004e3a:	bf08      	it	eq
 8004e3c:	1aad      	subeq	r5, r5, r2
 8004e3e:	68a3      	ldr	r3, [r4, #8]
 8004e40:	6922      	ldr	r2, [r4, #16]
 8004e42:	bf0c      	ite	eq
 8004e44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e48:	2500      	movne	r5, #0
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	bfc4      	itt	gt
 8004e4e:	1a9b      	subgt	r3, r3, r2
 8004e50:	18ed      	addgt	r5, r5, r3
 8004e52:	2600      	movs	r6, #0
 8004e54:	341a      	adds	r4, #26
 8004e56:	42b5      	cmp	r5, r6
 8004e58:	d11a      	bne.n	8004e90 <_printf_common+0xc8>
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	e008      	b.n	8004e70 <_printf_common+0xa8>
 8004e5e:	2301      	movs	r3, #1
 8004e60:	4652      	mov	r2, sl
 8004e62:	4649      	mov	r1, r9
 8004e64:	4638      	mov	r0, r7
 8004e66:	47c0      	blx	r8
 8004e68:	3001      	adds	r0, #1
 8004e6a:	d103      	bne.n	8004e74 <_printf_common+0xac>
 8004e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e74:	3501      	adds	r5, #1
 8004e76:	e7c6      	b.n	8004e06 <_printf_common+0x3e>
 8004e78:	18e1      	adds	r1, r4, r3
 8004e7a:	1c5a      	adds	r2, r3, #1
 8004e7c:	2030      	movs	r0, #48	; 0x30
 8004e7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e82:	4422      	add	r2, r4
 8004e84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e8c:	3302      	adds	r3, #2
 8004e8e:	e7c7      	b.n	8004e20 <_printf_common+0x58>
 8004e90:	2301      	movs	r3, #1
 8004e92:	4622      	mov	r2, r4
 8004e94:	4649      	mov	r1, r9
 8004e96:	4638      	mov	r0, r7
 8004e98:	47c0      	blx	r8
 8004e9a:	3001      	adds	r0, #1
 8004e9c:	d0e6      	beq.n	8004e6c <_printf_common+0xa4>
 8004e9e:	3601      	adds	r6, #1
 8004ea0:	e7d9      	b.n	8004e56 <_printf_common+0x8e>
	...

08004ea4 <_printf_i>:
 8004ea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ea8:	460c      	mov	r4, r1
 8004eaa:	4691      	mov	r9, r2
 8004eac:	7e27      	ldrb	r7, [r4, #24]
 8004eae:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004eb0:	2f78      	cmp	r7, #120	; 0x78
 8004eb2:	4680      	mov	r8, r0
 8004eb4:	469a      	mov	sl, r3
 8004eb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004eba:	d807      	bhi.n	8004ecc <_printf_i+0x28>
 8004ebc:	2f62      	cmp	r7, #98	; 0x62
 8004ebe:	d80a      	bhi.n	8004ed6 <_printf_i+0x32>
 8004ec0:	2f00      	cmp	r7, #0
 8004ec2:	f000 80d8 	beq.w	8005076 <_printf_i+0x1d2>
 8004ec6:	2f58      	cmp	r7, #88	; 0x58
 8004ec8:	f000 80a3 	beq.w	8005012 <_printf_i+0x16e>
 8004ecc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ed0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ed4:	e03a      	b.n	8004f4c <_printf_i+0xa8>
 8004ed6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004eda:	2b15      	cmp	r3, #21
 8004edc:	d8f6      	bhi.n	8004ecc <_printf_i+0x28>
 8004ede:	a001      	add	r0, pc, #4	; (adr r0, 8004ee4 <_printf_i+0x40>)
 8004ee0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004ee4:	08004f3d 	.word	0x08004f3d
 8004ee8:	08004f51 	.word	0x08004f51
 8004eec:	08004ecd 	.word	0x08004ecd
 8004ef0:	08004ecd 	.word	0x08004ecd
 8004ef4:	08004ecd 	.word	0x08004ecd
 8004ef8:	08004ecd 	.word	0x08004ecd
 8004efc:	08004f51 	.word	0x08004f51
 8004f00:	08004ecd 	.word	0x08004ecd
 8004f04:	08004ecd 	.word	0x08004ecd
 8004f08:	08004ecd 	.word	0x08004ecd
 8004f0c:	08004ecd 	.word	0x08004ecd
 8004f10:	0800505d 	.word	0x0800505d
 8004f14:	08004f81 	.word	0x08004f81
 8004f18:	0800503f 	.word	0x0800503f
 8004f1c:	08004ecd 	.word	0x08004ecd
 8004f20:	08004ecd 	.word	0x08004ecd
 8004f24:	0800507f 	.word	0x0800507f
 8004f28:	08004ecd 	.word	0x08004ecd
 8004f2c:	08004f81 	.word	0x08004f81
 8004f30:	08004ecd 	.word	0x08004ecd
 8004f34:	08004ecd 	.word	0x08004ecd
 8004f38:	08005047 	.word	0x08005047
 8004f3c:	680b      	ldr	r3, [r1, #0]
 8004f3e:	1d1a      	adds	r2, r3, #4
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	600a      	str	r2, [r1, #0]
 8004f44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e0a3      	b.n	8005098 <_printf_i+0x1f4>
 8004f50:	6825      	ldr	r5, [r4, #0]
 8004f52:	6808      	ldr	r0, [r1, #0]
 8004f54:	062e      	lsls	r6, r5, #24
 8004f56:	f100 0304 	add.w	r3, r0, #4
 8004f5a:	d50a      	bpl.n	8004f72 <_printf_i+0xce>
 8004f5c:	6805      	ldr	r5, [r0, #0]
 8004f5e:	600b      	str	r3, [r1, #0]
 8004f60:	2d00      	cmp	r5, #0
 8004f62:	da03      	bge.n	8004f6c <_printf_i+0xc8>
 8004f64:	232d      	movs	r3, #45	; 0x2d
 8004f66:	426d      	negs	r5, r5
 8004f68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f6c:	485e      	ldr	r0, [pc, #376]	; (80050e8 <_printf_i+0x244>)
 8004f6e:	230a      	movs	r3, #10
 8004f70:	e019      	b.n	8004fa6 <_printf_i+0x102>
 8004f72:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004f76:	6805      	ldr	r5, [r0, #0]
 8004f78:	600b      	str	r3, [r1, #0]
 8004f7a:	bf18      	it	ne
 8004f7c:	b22d      	sxthne	r5, r5
 8004f7e:	e7ef      	b.n	8004f60 <_printf_i+0xbc>
 8004f80:	680b      	ldr	r3, [r1, #0]
 8004f82:	6825      	ldr	r5, [r4, #0]
 8004f84:	1d18      	adds	r0, r3, #4
 8004f86:	6008      	str	r0, [r1, #0]
 8004f88:	0628      	lsls	r0, r5, #24
 8004f8a:	d501      	bpl.n	8004f90 <_printf_i+0xec>
 8004f8c:	681d      	ldr	r5, [r3, #0]
 8004f8e:	e002      	b.n	8004f96 <_printf_i+0xf2>
 8004f90:	0669      	lsls	r1, r5, #25
 8004f92:	d5fb      	bpl.n	8004f8c <_printf_i+0xe8>
 8004f94:	881d      	ldrh	r5, [r3, #0]
 8004f96:	4854      	ldr	r0, [pc, #336]	; (80050e8 <_printf_i+0x244>)
 8004f98:	2f6f      	cmp	r7, #111	; 0x6f
 8004f9a:	bf0c      	ite	eq
 8004f9c:	2308      	moveq	r3, #8
 8004f9e:	230a      	movne	r3, #10
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fa6:	6866      	ldr	r6, [r4, #4]
 8004fa8:	60a6      	str	r6, [r4, #8]
 8004faa:	2e00      	cmp	r6, #0
 8004fac:	bfa2      	ittt	ge
 8004fae:	6821      	ldrge	r1, [r4, #0]
 8004fb0:	f021 0104 	bicge.w	r1, r1, #4
 8004fb4:	6021      	strge	r1, [r4, #0]
 8004fb6:	b90d      	cbnz	r5, 8004fbc <_printf_i+0x118>
 8004fb8:	2e00      	cmp	r6, #0
 8004fba:	d04d      	beq.n	8005058 <_printf_i+0x1b4>
 8004fbc:	4616      	mov	r6, r2
 8004fbe:	fbb5 f1f3 	udiv	r1, r5, r3
 8004fc2:	fb03 5711 	mls	r7, r3, r1, r5
 8004fc6:	5dc7      	ldrb	r7, [r0, r7]
 8004fc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004fcc:	462f      	mov	r7, r5
 8004fce:	42bb      	cmp	r3, r7
 8004fd0:	460d      	mov	r5, r1
 8004fd2:	d9f4      	bls.n	8004fbe <_printf_i+0x11a>
 8004fd4:	2b08      	cmp	r3, #8
 8004fd6:	d10b      	bne.n	8004ff0 <_printf_i+0x14c>
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	07df      	lsls	r7, r3, #31
 8004fdc:	d508      	bpl.n	8004ff0 <_printf_i+0x14c>
 8004fde:	6923      	ldr	r3, [r4, #16]
 8004fe0:	6861      	ldr	r1, [r4, #4]
 8004fe2:	4299      	cmp	r1, r3
 8004fe4:	bfde      	ittt	le
 8004fe6:	2330      	movle	r3, #48	; 0x30
 8004fe8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004fec:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ff0:	1b92      	subs	r2, r2, r6
 8004ff2:	6122      	str	r2, [r4, #16]
 8004ff4:	f8cd a000 	str.w	sl, [sp]
 8004ff8:	464b      	mov	r3, r9
 8004ffa:	aa03      	add	r2, sp, #12
 8004ffc:	4621      	mov	r1, r4
 8004ffe:	4640      	mov	r0, r8
 8005000:	f7ff fee2 	bl	8004dc8 <_printf_common>
 8005004:	3001      	adds	r0, #1
 8005006:	d14c      	bne.n	80050a2 <_printf_i+0x1fe>
 8005008:	f04f 30ff 	mov.w	r0, #4294967295
 800500c:	b004      	add	sp, #16
 800500e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005012:	4835      	ldr	r0, [pc, #212]	; (80050e8 <_printf_i+0x244>)
 8005014:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005018:	6823      	ldr	r3, [r4, #0]
 800501a:	680e      	ldr	r6, [r1, #0]
 800501c:	061f      	lsls	r7, r3, #24
 800501e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005022:	600e      	str	r6, [r1, #0]
 8005024:	d514      	bpl.n	8005050 <_printf_i+0x1ac>
 8005026:	07d9      	lsls	r1, r3, #31
 8005028:	bf44      	itt	mi
 800502a:	f043 0320 	orrmi.w	r3, r3, #32
 800502e:	6023      	strmi	r3, [r4, #0]
 8005030:	b91d      	cbnz	r5, 800503a <_printf_i+0x196>
 8005032:	6823      	ldr	r3, [r4, #0]
 8005034:	f023 0320 	bic.w	r3, r3, #32
 8005038:	6023      	str	r3, [r4, #0]
 800503a:	2310      	movs	r3, #16
 800503c:	e7b0      	b.n	8004fa0 <_printf_i+0xfc>
 800503e:	6823      	ldr	r3, [r4, #0]
 8005040:	f043 0320 	orr.w	r3, r3, #32
 8005044:	6023      	str	r3, [r4, #0]
 8005046:	2378      	movs	r3, #120	; 0x78
 8005048:	4828      	ldr	r0, [pc, #160]	; (80050ec <_printf_i+0x248>)
 800504a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800504e:	e7e3      	b.n	8005018 <_printf_i+0x174>
 8005050:	065e      	lsls	r6, r3, #25
 8005052:	bf48      	it	mi
 8005054:	b2ad      	uxthmi	r5, r5
 8005056:	e7e6      	b.n	8005026 <_printf_i+0x182>
 8005058:	4616      	mov	r6, r2
 800505a:	e7bb      	b.n	8004fd4 <_printf_i+0x130>
 800505c:	680b      	ldr	r3, [r1, #0]
 800505e:	6826      	ldr	r6, [r4, #0]
 8005060:	6960      	ldr	r0, [r4, #20]
 8005062:	1d1d      	adds	r5, r3, #4
 8005064:	600d      	str	r5, [r1, #0]
 8005066:	0635      	lsls	r5, r6, #24
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	d501      	bpl.n	8005070 <_printf_i+0x1cc>
 800506c:	6018      	str	r0, [r3, #0]
 800506e:	e002      	b.n	8005076 <_printf_i+0x1d2>
 8005070:	0671      	lsls	r1, r6, #25
 8005072:	d5fb      	bpl.n	800506c <_printf_i+0x1c8>
 8005074:	8018      	strh	r0, [r3, #0]
 8005076:	2300      	movs	r3, #0
 8005078:	6123      	str	r3, [r4, #16]
 800507a:	4616      	mov	r6, r2
 800507c:	e7ba      	b.n	8004ff4 <_printf_i+0x150>
 800507e:	680b      	ldr	r3, [r1, #0]
 8005080:	1d1a      	adds	r2, r3, #4
 8005082:	600a      	str	r2, [r1, #0]
 8005084:	681e      	ldr	r6, [r3, #0]
 8005086:	6862      	ldr	r2, [r4, #4]
 8005088:	2100      	movs	r1, #0
 800508a:	4630      	mov	r0, r6
 800508c:	f7fb f8b0 	bl	80001f0 <memchr>
 8005090:	b108      	cbz	r0, 8005096 <_printf_i+0x1f2>
 8005092:	1b80      	subs	r0, r0, r6
 8005094:	6060      	str	r0, [r4, #4]
 8005096:	6863      	ldr	r3, [r4, #4]
 8005098:	6123      	str	r3, [r4, #16]
 800509a:	2300      	movs	r3, #0
 800509c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050a0:	e7a8      	b.n	8004ff4 <_printf_i+0x150>
 80050a2:	6923      	ldr	r3, [r4, #16]
 80050a4:	4632      	mov	r2, r6
 80050a6:	4649      	mov	r1, r9
 80050a8:	4640      	mov	r0, r8
 80050aa:	47d0      	blx	sl
 80050ac:	3001      	adds	r0, #1
 80050ae:	d0ab      	beq.n	8005008 <_printf_i+0x164>
 80050b0:	6823      	ldr	r3, [r4, #0]
 80050b2:	079b      	lsls	r3, r3, #30
 80050b4:	d413      	bmi.n	80050de <_printf_i+0x23a>
 80050b6:	68e0      	ldr	r0, [r4, #12]
 80050b8:	9b03      	ldr	r3, [sp, #12]
 80050ba:	4298      	cmp	r0, r3
 80050bc:	bfb8      	it	lt
 80050be:	4618      	movlt	r0, r3
 80050c0:	e7a4      	b.n	800500c <_printf_i+0x168>
 80050c2:	2301      	movs	r3, #1
 80050c4:	4632      	mov	r2, r6
 80050c6:	4649      	mov	r1, r9
 80050c8:	4640      	mov	r0, r8
 80050ca:	47d0      	blx	sl
 80050cc:	3001      	adds	r0, #1
 80050ce:	d09b      	beq.n	8005008 <_printf_i+0x164>
 80050d0:	3501      	adds	r5, #1
 80050d2:	68e3      	ldr	r3, [r4, #12]
 80050d4:	9903      	ldr	r1, [sp, #12]
 80050d6:	1a5b      	subs	r3, r3, r1
 80050d8:	42ab      	cmp	r3, r5
 80050da:	dcf2      	bgt.n	80050c2 <_printf_i+0x21e>
 80050dc:	e7eb      	b.n	80050b6 <_printf_i+0x212>
 80050de:	2500      	movs	r5, #0
 80050e0:	f104 0619 	add.w	r6, r4, #25
 80050e4:	e7f5      	b.n	80050d2 <_printf_i+0x22e>
 80050e6:	bf00      	nop
 80050e8:	080051f9 	.word	0x080051f9
 80050ec:	0800520a 	.word	0x0800520a

080050f0 <__retarget_lock_acquire_recursive>:
 80050f0:	4770      	bx	lr

080050f2 <__retarget_lock_release_recursive>:
 80050f2:	4770      	bx	lr

080050f4 <memcpy>:
 80050f4:	440a      	add	r2, r1
 80050f6:	4291      	cmp	r1, r2
 80050f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80050fc:	d100      	bne.n	8005100 <memcpy+0xc>
 80050fe:	4770      	bx	lr
 8005100:	b510      	push	{r4, lr}
 8005102:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005106:	f803 4f01 	strb.w	r4, [r3, #1]!
 800510a:	4291      	cmp	r1, r2
 800510c:	d1f9      	bne.n	8005102 <memcpy+0xe>
 800510e:	bd10      	pop	{r4, pc}

08005110 <memmove>:
 8005110:	4288      	cmp	r0, r1
 8005112:	b510      	push	{r4, lr}
 8005114:	eb01 0402 	add.w	r4, r1, r2
 8005118:	d902      	bls.n	8005120 <memmove+0x10>
 800511a:	4284      	cmp	r4, r0
 800511c:	4623      	mov	r3, r4
 800511e:	d807      	bhi.n	8005130 <memmove+0x20>
 8005120:	1e43      	subs	r3, r0, #1
 8005122:	42a1      	cmp	r1, r4
 8005124:	d008      	beq.n	8005138 <memmove+0x28>
 8005126:	f811 2b01 	ldrb.w	r2, [r1], #1
 800512a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800512e:	e7f8      	b.n	8005122 <memmove+0x12>
 8005130:	4402      	add	r2, r0
 8005132:	4601      	mov	r1, r0
 8005134:	428a      	cmp	r2, r1
 8005136:	d100      	bne.n	800513a <memmove+0x2a>
 8005138:	bd10      	pop	{r4, pc}
 800513a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800513e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005142:	e7f7      	b.n	8005134 <memmove+0x24>

08005144 <_realloc_r>:
 8005144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005146:	4607      	mov	r7, r0
 8005148:	4614      	mov	r4, r2
 800514a:	460e      	mov	r6, r1
 800514c:	b921      	cbnz	r1, 8005158 <_realloc_r+0x14>
 800514e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005152:	4611      	mov	r1, r2
 8005154:	f7ff bc46 	b.w	80049e4 <_malloc_r>
 8005158:	b922      	cbnz	r2, 8005164 <_realloc_r+0x20>
 800515a:	f7ff fbf3 	bl	8004944 <_free_r>
 800515e:	4625      	mov	r5, r4
 8005160:	4628      	mov	r0, r5
 8005162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005164:	f000 f814 	bl	8005190 <_malloc_usable_size_r>
 8005168:	42a0      	cmp	r0, r4
 800516a:	d20f      	bcs.n	800518c <_realloc_r+0x48>
 800516c:	4621      	mov	r1, r4
 800516e:	4638      	mov	r0, r7
 8005170:	f7ff fc38 	bl	80049e4 <_malloc_r>
 8005174:	4605      	mov	r5, r0
 8005176:	2800      	cmp	r0, #0
 8005178:	d0f2      	beq.n	8005160 <_realloc_r+0x1c>
 800517a:	4631      	mov	r1, r6
 800517c:	4622      	mov	r2, r4
 800517e:	f7ff ffb9 	bl	80050f4 <memcpy>
 8005182:	4631      	mov	r1, r6
 8005184:	4638      	mov	r0, r7
 8005186:	f7ff fbdd 	bl	8004944 <_free_r>
 800518a:	e7e9      	b.n	8005160 <_realloc_r+0x1c>
 800518c:	4635      	mov	r5, r6
 800518e:	e7e7      	b.n	8005160 <_realloc_r+0x1c>

08005190 <_malloc_usable_size_r>:
 8005190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005194:	1f18      	subs	r0, r3, #4
 8005196:	2b00      	cmp	r3, #0
 8005198:	bfbc      	itt	lt
 800519a:	580b      	ldrlt	r3, [r1, r0]
 800519c:	18c0      	addlt	r0, r0, r3
 800519e:	4770      	bx	lr

080051a0 <_init>:
 80051a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a2:	bf00      	nop
 80051a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051a6:	bc08      	pop	{r3}
 80051a8:	469e      	mov	lr, r3
 80051aa:	4770      	bx	lr

080051ac <_fini>:
 80051ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ae:	bf00      	nop
 80051b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051b2:	bc08      	pop	{r3}
 80051b4:	469e      	mov	lr, r3
 80051b6:	4770      	bx	lr
