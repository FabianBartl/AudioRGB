
AudioRGB_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005320  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080054c0  080054c0  000154c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005588  08005588  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005588  08005588  00015588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005590  08005590  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005590  08005590  00015590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005594  08005594  00015594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005598  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000070  08005608  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08005608  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016664  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f41  00000000  00000000  00036704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  00039648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a8  00000000  00000000  0003a810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d4e  00000000  00000000  0003b8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ce8  00000000  00000000  00055606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d5fa  00000000  00000000  0006d2ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010a8e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000521c  00000000  00000000  0010a93c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080054a8 	.word	0x080054a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080054a8 	.word	0x080054a8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800057e:	463b      	mov	r3, r7
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800058a:	4b28      	ldr	r3, [pc, #160]	; (800062c <MX_ADC1_Init+0xb4>)
 800058c:	4a28      	ldr	r2, [pc, #160]	; (8000630 <MX_ADC1_Init+0xb8>)
 800058e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000590:	4b26      	ldr	r3, [pc, #152]	; (800062c <MX_ADC1_Init+0xb4>)
 8000592:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000596:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000598:	4b24      	ldr	r3, [pc, #144]	; (800062c <MX_ADC1_Init+0xb4>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800059e:	4b23      	ldr	r3, [pc, #140]	; (800062c <MX_ADC1_Init+0xb4>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005a4:	4b21      	ldr	r3, [pc, #132]	; (800062c <MX_ADC1_Init+0xb4>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005aa:	4b20      	ldr	r3, [pc, #128]	; (800062c <MX_ADC1_Init+0xb4>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005b2:	4b1e      	ldr	r3, [pc, #120]	; (800062c <MX_ADC1_Init+0xb4>)
 80005b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80005ba:	4b1c      	ldr	r3, [pc, #112]	; (800062c <MX_ADC1_Init+0xb4>)
 80005bc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80005c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c2:	4b1a      	ldr	r3, [pc, #104]	; (800062c <MX_ADC1_Init+0xb4>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80005c8:	4b18      	ldr	r3, [pc, #96]	; (800062c <MX_ADC1_Init+0xb4>)
 80005ca:	2202      	movs	r2, #2
 80005cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005ce:	4b17      	ldr	r3, [pc, #92]	; (800062c <MX_ADC1_Init+0xb4>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <MX_ADC1_Init+0xb4>)
 80005d8:	2201      	movs	r2, #1
 80005da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005dc:	4813      	ldr	r0, [pc, #76]	; (800062c <MX_ADC1_Init+0xb4>)
 80005de:	f000 ffd7 	bl	8001590 <HAL_ADC_Init>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80005e8:	f000 fbd6 	bl	8000d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005ec:	2301      	movs	r3, #1
 80005ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005f0:	2301      	movs	r3, #1
 80005f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f8:	463b      	mov	r3, r7
 80005fa:	4619      	mov	r1, r3
 80005fc:	480b      	ldr	r0, [pc, #44]	; (800062c <MX_ADC1_Init+0xb4>)
 80005fe:	f001 f919 	bl	8001834 <HAL_ADC_ConfigChannel>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000608:	f000 fbc6 	bl	8000d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 800060c:	2302      	movs	r3, #2
 800060e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000610:	463b      	mov	r3, r7
 8000612:	4619      	mov	r1, r3
 8000614:	4805      	ldr	r0, [pc, #20]	; (800062c <MX_ADC1_Init+0xb4>)
 8000616:	f001 f90d 	bl	8001834 <HAL_ADC_ConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000620:	f000 fbba 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	200000a4 	.word	0x200000a4
 8000630:	40012000 	.word	0x40012000

08000634 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08a      	sub	sp, #40	; 0x28
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a3c      	ldr	r2, [pc, #240]	; (8000744 <HAL_ADC_MspInit+0x110>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d172      	bne.n	800073c <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	613b      	str	r3, [r7, #16]
 800065a:	4b3b      	ldr	r3, [pc, #236]	; (8000748 <HAL_ADC_MspInit+0x114>)
 800065c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800065e:	4a3a      	ldr	r2, [pc, #232]	; (8000748 <HAL_ADC_MspInit+0x114>)
 8000660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000664:	6453      	str	r3, [r2, #68]	; 0x44
 8000666:	4b38      	ldr	r3, [pc, #224]	; (8000748 <HAL_ADC_MspInit+0x114>)
 8000668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800066e:	613b      	str	r3, [r7, #16]
 8000670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	4b34      	ldr	r3, [pc, #208]	; (8000748 <HAL_ADC_MspInit+0x114>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a33      	ldr	r2, [pc, #204]	; (8000748 <HAL_ADC_MspInit+0x114>)
 800067c:	f043 0304 	orr.w	r3, r3, #4
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b31      	ldr	r3, [pc, #196]	; (8000748 <HAL_ADC_MspInit+0x114>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0304 	and.w	r3, r3, #4
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	4b2d      	ldr	r3, [pc, #180]	; (8000748 <HAL_ADC_MspInit+0x114>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a2c      	ldr	r2, [pc, #176]	; (8000748 <HAL_ADC_MspInit+0x114>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b2a      	ldr	r3, [pc, #168]	; (8000748 <HAL_ADC_MspInit+0x114>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = RNG_Pin;
 80006aa:	2304      	movs	r3, #4
 80006ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ae:	2303      	movs	r3, #3
 80006b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RNG_GPIO_Port, &GPIO_InitStruct);
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	4619      	mov	r1, r3
 80006bc:	4823      	ldr	r0, [pc, #140]	; (800074c <HAL_ADC_MspInit+0x118>)
 80006be:	f001 ffdb 	bl	8002678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUX_Pin;
 80006c2:	2302      	movs	r3, #2
 80006c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c6:	2303      	movs	r3, #3
 80006c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AUX_GPIO_Port, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	481e      	ldr	r0, [pc, #120]	; (8000750 <HAL_ADC_MspInit+0x11c>)
 80006d6:	f001 ffcf 	bl	8002678 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006da:	4b1e      	ldr	r3, [pc, #120]	; (8000754 <HAL_ADC_MspInit+0x120>)
 80006dc:	4a1e      	ldr	r2, [pc, #120]	; (8000758 <HAL_ADC_MspInit+0x124>)
 80006de:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006e0:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <HAL_ADC_MspInit+0x120>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006e6:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <HAL_ADC_MspInit+0x120>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006ec:	4b19      	ldr	r3, [pc, #100]	; (8000754 <HAL_ADC_MspInit+0x120>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006f2:	4b18      	ldr	r3, [pc, #96]	; (8000754 <HAL_ADC_MspInit+0x120>)
 80006f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006f8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006fa:	4b16      	ldr	r3, [pc, #88]	; (8000754 <HAL_ADC_MspInit+0x120>)
 80006fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000700:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <HAL_ADC_MspInit+0x120>)
 8000704:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000708:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <HAL_ADC_MspInit+0x120>)
 800070c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000710:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <HAL_ADC_MspInit+0x120>)
 8000714:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000718:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <HAL_ADC_MspInit+0x120>)
 800071c:	2200      	movs	r2, #0
 800071e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000720:	480c      	ldr	r0, [pc, #48]	; (8000754 <HAL_ADC_MspInit+0x120>)
 8000722:	f001 fc39 	bl	8001f98 <HAL_DMA_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 800072c:	f000 fb34 	bl	8000d98 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4a08      	ldr	r2, [pc, #32]	; (8000754 <HAL_ADC_MspInit+0x120>)
 8000734:	639a      	str	r2, [r3, #56]	; 0x38
 8000736:	4a07      	ldr	r2, [pc, #28]	; (8000754 <HAL_ADC_MspInit+0x120>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800073c:	bf00      	nop
 800073e:	3728      	adds	r7, #40	; 0x28
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40012000 	.word	0x40012000
 8000748:	40023800 	.word	0x40023800
 800074c:	40020800 	.word	0x40020800
 8000750:	40020000 	.word	0x40020000
 8000754:	200000ec 	.word	0x200000ec
 8000758:	40026410 	.word	0x40026410

0800075c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_DMA_Init+0x3c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a0b      	ldr	r2, [pc, #44]	; (8000798 <MX_DMA_Init+0x3c>)
 800076c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_DMA_Init+0x3c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2100      	movs	r1, #0
 8000782:	2038      	movs	r0, #56	; 0x38
 8000784:	f001 fbd1 	bl	8001f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000788:	2038      	movs	r0, #56	; 0x38
 800078a:	f001 fbea 	bl	8001f62 <HAL_NVIC_EnableIRQ>

}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800

0800079c <saturate>:

// ----------------------------
// saturate, transform, amplify
// ----------------------------

int saturate(int val) { return saturateLimits(val, COLOR_MIN, COLOR_MAX); }
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	22ff      	movs	r2, #255	; 0xff
 80007a6:	2100      	movs	r1, #0
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f000 f805 	bl	80007b8 <saturateLimits>
 80007ae:	4603      	mov	r3, r0
 80007b0:	4618      	mov	r0, r3
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <saturateLimits>:
int saturateLimits(int val, int lowerLim, int upperLim) { return (val < lowerLim) ? lowerLim : ((val > upperLim) ? upperLim : val); }
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
 80007c4:	68fa      	ldr	r2, [r7, #12]
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	db05      	blt.n	80007d8 <saturateLimits+0x20>
 80007cc:	68fa      	ldr	r2, [r7, #12]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4293      	cmp	r3, r2
 80007d2:	bfa8      	it	ge
 80007d4:	4613      	movge	r3, r2
 80007d6:	e000      	b.n	80007da <saturateLimits+0x22>
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	4618      	mov	r0, r3
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <transform>:

int transform(int val, int inMin, int inMax, int outMin, int outMax)
{
 80007e6:	b480      	push	{r7}
 80007e8:	b087      	sub	sp, #28
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	60f8      	str	r0, [r7, #12]
 80007ee:	60b9      	str	r1, [r7, #8]
 80007f0:	607a      	str	r2, [r7, #4]
 80007f2:	603b      	str	r3, [r7, #0]
	int inHalf = inMin + (inMax - inMin) / 2;
 80007f4:	687a      	ldr	r2, [r7, #4]
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	1ad3      	subs	r3, r2, r3
 80007fa:	0fda      	lsrs	r2, r3, #31
 80007fc:	4413      	add	r3, r2
 80007fe:	105b      	asrs	r3, r3, #1
 8000800:	461a      	mov	r2, r3
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	4413      	add	r3, r2
 8000806:	617b      	str	r3, [r7, #20]
	int outHalf = outMin + (outMax - outMin) / 2;
 8000808:	6a3a      	ldr	r2, [r7, #32]
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	0fda      	lsrs	r2, r3, #31
 8000810:	4413      	add	r3, r2
 8000812:	105b      	asrs	r3, r3, #1
 8000814:	461a      	mov	r2, r3
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	4413      	add	r3, r2
 800081a:	613b      	str	r3, [r7, #16]
	return val - (inHalf - outHalf);
 800081c:	697a      	ldr	r2, [r7, #20]
 800081e:	693b      	ldr	r3, [r7, #16]
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	68fa      	ldr	r2, [r7, #12]
 8000824:	1ad3      	subs	r3, r2, r3
}
 8000826:	4618      	mov	r0, r3
 8000828:	371c      	adds	r7, #28
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <writeRGBArray>:

// ----
// rgbs
// ----

void writeRGBArray(int *rgb) { writeRGB(rgb[0], rgb[1], rgb[2]); }
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6818      	ldr	r0, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	3304      	adds	r3, #4
 8000842:	6819      	ldr	r1, [r3, #0]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3308      	adds	r3, #8
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	461a      	mov	r2, r3
 800084c:	f000 f804 	bl	8000858 <writeRGB>
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <writeRGB>:
void writeRGB(int r, int g, int b)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
	TIM3->CCR3 = saturate(r);
 8000864:	68f8      	ldr	r0, [r7, #12]
 8000866:	f7ff ff99 	bl	800079c <saturate>
 800086a:	4602      	mov	r2, r0
 800086c:	4b08      	ldr	r3, [pc, #32]	; (8000890 <writeRGB+0x38>)
 800086e:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR1 = saturate(g);
 8000870:	68b8      	ldr	r0, [r7, #8]
 8000872:	f7ff ff93 	bl	800079c <saturate>
 8000876:	4602      	mov	r2, r0
 8000878:	4b05      	ldr	r3, [pc, #20]	; (8000890 <writeRGB+0x38>)
 800087a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = saturate(g);
 800087c:	68b8      	ldr	r0, [r7, #8]
 800087e:	f7ff ff8d 	bl	800079c <saturate>
 8000882:	4602      	mov	r2, r0
 8000884:	4b02      	ldr	r3, [pc, #8]	; (8000890 <writeRGB+0x38>)
 8000886:	639a      	str	r2, [r3, #56]	; 0x38
	// prevent higher pulses than period
	if (TIM3->CCR3 > TIM3->ARR) TIM3->CCR3 = 0;
	if (TIM3->CCR1 > TIM3->ARR) TIM3->CCR1 = 0;
	if (TIM3->CCR2 > TIM3->ARR) TIM3->CCR2 = 0;
*/
}
 8000888:	bf00      	nop
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40000400 	.word	0x40000400

08000894 <emptyArray>:

// ------
// arrays
// ------

void emptyArray(int *arr, const size_t arrLen) { fillArray(0, arr, arrLen); }
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
 800089e:	683a      	ldr	r2, [r7, #0]
 80008a0:	6879      	ldr	r1, [r7, #4]
 80008a2:	2000      	movs	r0, #0
 80008a4:	f000 f804 	bl	80008b0 <fillArray>
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <fillArray>:
void fillArray(int val, int *arr, const size_t arrLen) { for(int i=0; i < arrLen; i++) arr[i] = val; }
 80008b0:	b480      	push	{r7}
 80008b2:	b087      	sub	sp, #28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	e008      	b.n	80008d4 <fillArray+0x24>
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	68ba      	ldr	r2, [r7, #8]
 80008c8:	4413      	add	r3, r2
 80008ca:	68fa      	ldr	r2, [r7, #12]
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	3301      	adds	r3, #1
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	429a      	cmp	r2, r3
 80008da:	d8f2      	bhi.n	80008c2 <fillArray+0x12>
 80008dc:	bf00      	nop
 80008de:	bf00      	nop
 80008e0:	371c      	adds	r7, #28
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
	...

080008ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	4b39      	ldr	r3, [pc, #228]	; (80009ec <MX_GPIO_Init+0x100>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a38      	ldr	r2, [pc, #224]	; (80009ec <MX_GPIO_Init+0x100>)
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b36      	ldr	r3, [pc, #216]	; (80009ec <MX_GPIO_Init+0x100>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0304 	and.w	r3, r3, #4
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	4b32      	ldr	r3, [pc, #200]	; (80009ec <MX_GPIO_Init+0x100>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a31      	ldr	r2, [pc, #196]	; (80009ec <MX_GPIO_Init+0x100>)
 8000928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b2f      	ldr	r3, [pc, #188]	; (80009ec <MX_GPIO_Init+0x100>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <MX_GPIO_Init+0x100>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a2a      	ldr	r2, [pc, #168]	; (80009ec <MX_GPIO_Init+0x100>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b28      	ldr	r3, [pc, #160]	; (80009ec <MX_GPIO_Init+0x100>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b24      	ldr	r3, [pc, #144]	; (80009ec <MX_GPIO_Init+0x100>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a23      	ldr	r2, [pc, #140]	; (80009ec <MX_GPIO_Init+0x100>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b21      	ldr	r3, [pc, #132]	; (80009ec <MX_GPIO_Init+0x100>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OB_GPIO_Port, LED_OB_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	2120      	movs	r1, #32
 8000976:	481e      	ldr	r0, [pc, #120]	; (80009f0 <MX_GPIO_Init+0x104>)
 8000978:	f002 f802 	bl	8002980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_OB_Pin;
 800097c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000982:	2300      	movs	r3, #0
 8000984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000986:	2302      	movs	r3, #2
 8000988:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_OB_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	4818      	ldr	r0, [pc, #96]	; (80009f4 <MX_GPIO_Init+0x108>)
 8000992:	f001 fe71 	bl	8002678 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_OB_Pin;
 8000996:	2320      	movs	r3, #32
 8000998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800099e:	2302      	movs	r3, #2
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_OB_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4619      	mov	r1, r3
 80009ac:	4810      	ldr	r0, [pc, #64]	; (80009f0 <MX_GPIO_Init+0x104>)
 80009ae:	f001 fe63 	bl	8002678 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = TCH_3_Pin|TCH_4_Pin|TCH_1_Pin;
 80009b2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80009b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009bc:	2302      	movs	r3, #2
 80009be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	480a      	ldr	r0, [pc, #40]	; (80009f0 <MX_GPIO_Init+0x104>)
 80009c8:	f001 fe56 	bl	8002678 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TCH_2_Pin;
 80009cc:	2320      	movs	r3, #32
 80009ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009d4:	2302      	movs	r3, #2
 80009d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TCH_2_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	4806      	ldr	r0, [pc, #24]	; (80009f8 <MX_GPIO_Init+0x10c>)
 80009e0:	f001 fe4a 	bl	8002678 <HAL_GPIO_Init>

}
 80009e4:	bf00      	nop
 80009e6:	3728      	adds	r7, #40	; 0x28
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40020000 	.word	0x40020000
 80009f4:	40020800 	.word	0x40020800
 80009f8:	40020400 	.word	0x40020400

080009fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a02:	4a13      	ldr	r2, [pc, #76]	; (8000a50 <MX_I2C1_Init+0x54>)
 8000a04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a08:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <MX_I2C1_Init+0x58>)
 8000a0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a3a:	f001 ffbb 	bl	80029b4 <HAL_I2C_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a44:	f000 f9a8 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	2000014c 	.word	0x2000014c
 8000a50:	40005400 	.word	0x40005400
 8000a54:	000186a0 	.word	0x000186a0

08000a58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	; 0x28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a19      	ldr	r2, [pc, #100]	; (8000adc <HAL_I2C_MspInit+0x84>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d12c      	bne.n	8000ad4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <HAL_I2C_MspInit+0x88>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a17      	ldr	r2, [pc, #92]	; (8000ae0 <HAL_I2C_MspInit+0x88>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <HAL_I2C_MspInit+0x88>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_I2C_SCL_Pin|LCD_I2C_SDA_Pin;
 8000a96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9c:	2312      	movs	r3, #18
 8000a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <HAL_I2C_MspInit+0x8c>)
 8000ab4:	f001 fde0 	bl	8002678 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <HAL_I2C_MspInit+0x88>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac0:	4a07      	ldr	r2, [pc, #28]	; (8000ae0 <HAL_I2C_MspInit+0x88>)
 8000ac2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ac6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <HAL_I2C_MspInit+0x88>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ad4:	bf00      	nop
 8000ad6:	3728      	adds	r7, #40	; 0x28
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40005400 	.word	0x40005400
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020400 	.word	0x40020400

08000ae8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000af0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000af4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000af8:	f003 0301 	and.w	r3, r3, #1
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d013      	beq.n	8000b28 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000b00:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b04:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000b08:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d00b      	beq.n	8000b28 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000b10:	e000      	b.n	8000b14 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000b12:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000b14:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d0f9      	beq.n	8000b12 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000b1e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	b2d2      	uxtb	r2, r2
 8000b26:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000b28:	687b      	ldr	r3, [r7, #4]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void _write(int file, char *ptr, int len) // used by printf()
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b086      	sub	sp, #24
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	60f8      	str	r0, [r7, #12]
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
  for (int i=0; i < len; i++)
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
 8000b46:	e009      	b.n	8000b5c <_write+0x26>
	ITM_SendChar((*ptr++));
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	1c5a      	adds	r2, r3, #1
 8000b4c:	60ba      	str	r2, [r7, #8]
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ffc9 	bl	8000ae8 <ITM_SendChar>
  for (int i=0; i < len; i++)
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	697a      	ldr	r2, [r7, #20]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	dbf1      	blt.n	8000b48 <_write+0x12>
}
 8000b64:	bf00      	nop
 8000b66:	bf00      	nop
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08c      	sub	sp, #48	; 0x30
 8000b74:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  // audio channel
  int *bufArr = (int *)malloc(BUFFER_SIZE_AUX * sizeof(int));
 8000b76:	2008      	movs	r0, #8
 8000b78:	f003 fd30 	bl	80045dc <malloc>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	61fb      	str	r3, [r7, #28]
  emptyArray(bufArr, BUFFER_SIZE_AUX);
 8000b80:	2102      	movs	r1, #2
 8000b82:	69f8      	ldr	r0, [r7, #28]
 8000b84:	f7ff fe86 	bl	8000894 <emptyArray>
  const size_t bufInd = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61bb      	str	r3, [r7, #24]
  //int aux = 0, aux_filter = 0;

  // rgb led
  int *rgbArr = (int *)malloc(ARRAY_SIZE_RGB * sizeof(int));
 8000b8c:	200c      	movs	r0, #12
 8000b8e:	f003 fd25 	bl	80045dc <malloc>
 8000b92:	4603      	mov	r3, r0
 8000b94:	617b      	str	r3, [r7, #20]
  emptyArray(rgbArr, ARRAY_SIZE_RGB);
 8000b96:	2103      	movs	r1, #3
 8000b98:	6978      	ldr	r0, [r7, #20]
 8000b9a:	f7ff fe7b 	bl	8000894 <emptyArray>
  const size_t colSel = 0, colSelPrev = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
  int colVal = COLOR_HALF, colValPrev = COLOR_HALF;
 8000ba6:	237f      	movs	r3, #127	; 0x7f
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	237f      	movs	r3, #127	; 0x7f
 8000bac:	607b      	str	r3, [r7, #4]

  // touch sensor
  int *touchArr = (int *)malloc(CHANNEL_COUNT_TCH * sizeof(int));
 8000bae:	2010      	movs	r0, #16
 8000bb0:	f003 fd14 	bl	80045dc <malloc>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb8:	f000 fc54 	bl	8001464 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bbc:	f000 f880 	bl	8000cc0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init(); // must called before MX_ADC1_Init() !
 8000bc0:	f7ff fdcc 	bl	800075c <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc4:	f7ff fe92 	bl	80008ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bc8:	f000 fbb0 	bl	800132c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000bcc:	f7ff fcd4 	bl	8000578 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000bd0:	f7ff ff14 	bl	80009fc <MX_I2C1_Init>
  MX_TIM1_Init();
 8000bd4:	f000 f9dc 	bl	8000f90 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000bd8:	f000 fa2a 	bl	8001030 <MX_TIM2_Init>
  MX_DMA_Init();
 8000bdc:	f7ff fdbe 	bl	800075c <MX_DMA_Init>
  MX_TIM3_Init();
 8000be0:	f000 fa72 	bl	80010c8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // start pwm timer for rgb led
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000be4:	2108      	movs	r1, #8
 8000be6:	482e      	ldr	r0, [pc, #184]	; (8000ca0 <main+0x130>)
 8000be8:	f002 fd44 	bl	8003674 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000bec:	2104      	movs	r1, #4
 8000bee:	482c      	ldr	r0, [pc, #176]	; (8000ca0 <main+0x130>)
 8000bf0:	f002 fd40 	bl	8003674 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	482a      	ldr	r0, [pc, #168]	; (8000ca0 <main+0x130>)
 8000bf8:	f002 fd3c 	bl	8003674 <HAL_TIM_PWM_Start>
  writeRGBArray(rgbArr);
 8000bfc:	6978      	ldr	r0, [r7, #20]
 8000bfe:	f7ff fe18 	bl	8000832 <writeRGBArray>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i = 0, fadeIn = 1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
 8000c06:	2301      	movs	r3, #1
 8000c08:	623b      	str	r3, [r7, #32]
  while (1)
  {
	// get adc from dma
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcResultsDMA, CHANNEL_COUNT_ADC);
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	4925      	ldr	r1, [pc, #148]	; (8000ca4 <main+0x134>)
 8000c0e:	4826      	ldr	r0, [pc, #152]	; (8000ca8 <main+0x138>)
 8000c10:	f000 fd02 	bl	8001618 <HAL_ADC_Start_DMA>
	while (adcConversionComplete == 0);
 8000c14:	bf00      	nop
 8000c16:	4b25      	ldr	r3, [pc, #148]	; (8000cac <main+0x13c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d0fb      	beq.n	8000c16 <main+0xa6>
	adcConversionComplete = 0;
 8000c1e:	4b23      	ldr	r3, [pc, #140]	; (8000cac <main+0x13c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]

	aux = transform(0, VOLUME_MIN, VOLUME_MAX, COLOR_MIN, COLOR_MAX);
 8000c24:	23ff      	movs	r3, #255	; 0xff
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000c2e:	4920      	ldr	r1, [pc, #128]	; (8000cb0 <main+0x140>)
 8000c30:	2000      	movs	r0, #0
 8000c32:	f7ff fdd8 	bl	80007e6 <transform>
 8000c36:	4603      	mov	r3, r0
 8000c38:	4a1e      	ldr	r2, [pc, #120]	; (8000cb4 <main+0x144>)
 8000c3a:	6013      	str	r3, [r2, #0]

	// toggle and apply fade direction
	if (i > COLOR_MAX) fadeIn = 0;
 8000c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3e:	2bff      	cmp	r3, #255	; 0xff
 8000c40:	dd02      	ble.n	8000c48 <main+0xd8>
 8000c42:	2300      	movs	r3, #0
 8000c44:	623b      	str	r3, [r7, #32]
 8000c46:	e004      	b.n	8000c52 <main+0xe2>
	else if (i < COLOR_MIN) fadeIn = 1;
 8000c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	da01      	bge.n	8000c52 <main+0xe2>
 8000c4e:	2301      	movs	r3, #1
 8000c50:	623b      	str	r3, [r7, #32]
	fadeIn ? i++ : i--;
 8000c52:	6a3b      	ldr	r3, [r7, #32]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d003      	beq.n	8000c60 <main+0xf0>
 8000c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8000c5e:	e002      	b.n	8000c66 <main+0xf6>
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c62:	3b01      	subs	r3, #1
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24

	// set rgb led
	writeRGB(i, 0, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2100      	movs	r1, #0
 8000c6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c6c:	f7ff fdf4 	bl	8000858 <writeRGB>

	// serial debug
	if (DEBUG)
	{
		aux = adcResultsDMA[0];
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <main+0x134>)
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	461a      	mov	r2, r3
 8000c78:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <main+0x144>)
 8000c7a:	601a      	str	r2, [r3, #0]
		rng = adcResultsDMA[1];
 8000c7c:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <main+0x134>)
 8000c7e:	885b      	ldrh	r3, [r3, #2]
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	461a      	mov	r2, r3
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <main+0x148>)
 8000c86:	601a      	str	r2, [r3, #0]
		printf("aux=%d,rng=%d", aux, rng);
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <main+0x144>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <main+0x148>)
 8000c8e:	6812      	ldr	r2, [r2, #0]
 8000c90:	4619      	mov	r1, r3
 8000c92:	480a      	ldr	r0, [pc, #40]	; (8000cbc <main+0x14c>)
 8000c94:	f003 fd5c 	bl	8004750 <iprintf>
	}

	// wait
	HAL_Delay(DELAY);
 8000c98:	20fa      	movs	r0, #250	; 0xfa
 8000c9a:	f000 fc55 	bl	8001548 <HAL_Delay>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcResultsDMA, CHANNEL_COUNT_ADC);
 8000c9e:	e7b4      	b.n	8000c0a <main+0x9a>
 8000ca0:	200001a4 	.word	0x200001a4
 8000ca4:	200001a0 	.word	0x200001a0
 8000ca8:	200000a4 	.word	0x200000a4
 8000cac:	2000008c 	.word	0x2000008c
 8000cb0:	fffff800 	.word	0xfffff800
 8000cb4:	20000090 	.word	0x20000090
 8000cb8:	20000094 	.word	0x20000094
 8000cbc:	080054c0 	.word	0x080054c0

08000cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b094      	sub	sp, #80	; 0x50
 8000cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc6:	f107 0320 	add.w	r3, r7, #32
 8000cca:	2230      	movs	r2, #48	; 0x30
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f003 fc8c 	bl	80045ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	4b29      	ldr	r3, [pc, #164]	; (8000d90 <SystemClock_Config+0xd0>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	4a28      	ldr	r2, [pc, #160]	; (8000d90 <SystemClock_Config+0xd0>)
 8000cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf4:	4b26      	ldr	r3, [pc, #152]	; (8000d90 <SystemClock_Config+0xd0>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d00:	2300      	movs	r3, #0
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	4b23      	ldr	r3, [pc, #140]	; (8000d94 <SystemClock_Config+0xd4>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d0c:	4a21      	ldr	r2, [pc, #132]	; (8000d94 <SystemClock_Config+0xd4>)
 8000d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d12:	6013      	str	r3, [r2, #0]
 8000d14:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <SystemClock_Config+0xd4>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d20:	2302      	movs	r3, #2
 8000d22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d24:	2301      	movs	r3, #1
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d28:	2310      	movs	r3, #16
 8000d2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d30:	2300      	movs	r3, #0
 8000d32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000d34:	2310      	movs	r3, #16
 8000d36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d38:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d3e:	2304      	movs	r3, #4
 8000d40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d42:	2307      	movs	r3, #7
 8000d44:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d46:	f107 0320 	add.w	r3, r7, #32
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f001 ff76 	bl	8002c3c <HAL_RCC_OscConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d56:	f000 f81f 	bl	8000d98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d5a:	230f      	movs	r3, #15
 8000d5c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	2102      	movs	r1, #2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f002 f9d8 	bl	800312c <HAL_RCC_ClockConfig>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000d82:	f000 f809 	bl	8000d98 <Error_Handler>
  }
}
 8000d86:	bf00      	nop
 8000d88:	3750      	adds	r7, #80	; 0x50
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40007000 	.word	0x40007000

08000d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d9c:	b672      	cpsid	i
}
 8000d9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <Error_Handler+0x8>
	...

08000da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <HAL_MspInit+0x4c>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	4a0f      	ldr	r2, [pc, #60]	; (8000df0 <HAL_MspInit+0x4c>)
 8000db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dba:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	603b      	str	r3, [r7, #0]
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	4a08      	ldr	r2, [pc, #32]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000de2:	2007      	movs	r0, #7
 8000de4:	f001 f896 	bl	8001f14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40023800 	.word	0x40023800

08000df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <NMI_Handler+0x4>

08000dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <HardFault_Handler+0x4>

08000e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <MemManage_Handler+0x4>

08000e06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <BusFault_Handler+0x4>

08000e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <UsageFault_Handler+0x4>

08000e12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e40:	f000 fb62 	bl	8001508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e4c:	4802      	ldr	r0, [pc, #8]	; (8000e58 <DMA2_Stream0_IRQHandler+0x10>)
 8000e4e:	f001 f9a9 	bl	80021a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200000ec 	.word	0x200000ec

08000e5c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	e00a      	b.n	8000e84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e6e:	f3af 8000 	nop.w
 8000e72:	4601      	mov	r1, r0
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	1c5a      	adds	r2, r3, #1
 8000e78:	60ba      	str	r2, [r7, #8]
 8000e7a:	b2ca      	uxtb	r2, r1
 8000e7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	3301      	adds	r3, #1
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	dbf0      	blt.n	8000e6e <_read+0x12>
	}

return len;
 8000e8c:	687b      	ldr	r3, [r7, #4]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
	return -1;
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ebe:	605a      	str	r2, [r3, #4]
	return 0;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <_isatty>:

int _isatty(int file)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
	return 1;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
	return 0;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f08:	4a14      	ldr	r2, [pc, #80]	; (8000f5c <_sbrk+0x5c>)
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <_sbrk+0x60>)
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <_sbrk+0x64>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d102      	bne.n	8000f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <_sbrk+0x64>)
 8000f1e:	4a12      	ldr	r2, [pc, #72]	; (8000f68 <_sbrk+0x68>)
 8000f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <_sbrk+0x64>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d207      	bcs.n	8000f40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f30:	f003 fb2a 	bl	8004588 <__errno>
 8000f34:	4603      	mov	r3, r0
 8000f36:	220c      	movs	r2, #12
 8000f38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3e:	e009      	b.n	8000f54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <_sbrk+0x64>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f46:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <_sbrk+0x64>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <_sbrk+0x64>)
 8000f50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f52:	68fb      	ldr	r3, [r7, #12]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20018000 	.word	0x20018000
 8000f60:	00000400 	.word	0x00000400
 8000f64:	20000098 	.word	0x20000098
 8000f68:	200002d8 	.word	0x200002d8

08000f6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <SystemInit+0x20>)
 8000f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f76:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <SystemInit+0x20>)
 8000f78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f96:	f107 0308 	add.w	r3, r7, #8
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa4:	463b      	mov	r3, r7
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fac:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <MX_TIM1_Init+0x98>)
 8000fae:	4a1f      	ldr	r2, [pc, #124]	; (800102c <MX_TIM1_Init+0x9c>)
 8000fb0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <MX_TIM1_Init+0x98>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <MX_TIM1_Init+0x98>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000fbe:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <MX_TIM1_Init+0x98>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc4:	4b18      	ldr	r3, [pc, #96]	; (8001028 <MX_TIM1_Init+0x98>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fca:	4b17      	ldr	r3, [pc, #92]	; (8001028 <MX_TIM1_Init+0x98>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd0:	4b15      	ldr	r3, [pc, #84]	; (8001028 <MX_TIM1_Init+0x98>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fd6:	4814      	ldr	r0, [pc, #80]	; (8001028 <MX_TIM1_Init+0x98>)
 8000fd8:	f002 faa4 	bl	8003524 <HAL_TIM_Base_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000fe2:	f7ff fed9 	bl	8000d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fec:	f107 0308 	add.w	r3, r7, #8
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	480d      	ldr	r0, [pc, #52]	; (8001028 <MX_TIM1_Init+0x98>)
 8000ff4:	f002 fcb0 	bl	8003958 <HAL_TIM_ConfigClockSource>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000ffe:	f7ff fecb 	bl	8000d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001002:	2300      	movs	r3, #0
 8001004:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800100a:	463b      	mov	r3, r7
 800100c:	4619      	mov	r1, r3
 800100e:	4806      	ldr	r0, [pc, #24]	; (8001028 <MX_TIM1_Init+0x98>)
 8001010:	f003 f836 	bl	8004080 <HAL_TIMEx_MasterConfigSynchronization>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800101a:	f7ff febd 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200001ec 	.word	0x200001ec
 800102c:	40010000 	.word	0x40010000

08001030 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001044:	463b      	mov	r3, r7
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800104c:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <MX_TIM2_Init+0x94>)
 800104e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001052:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001054:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <MX_TIM2_Init+0x94>)
 8001056:	2200      	movs	r2, #0
 8001058:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <MX_TIM2_Init+0x94>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001060:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <MX_TIM2_Init+0x94>)
 8001062:	f04f 32ff 	mov.w	r2, #4294967295
 8001066:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <MX_TIM2_Init+0x94>)
 800106a:	2200      	movs	r2, #0
 800106c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <MX_TIM2_Init+0x94>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001074:	4813      	ldr	r0, [pc, #76]	; (80010c4 <MX_TIM2_Init+0x94>)
 8001076:	f002 fa55 	bl	8003524 <HAL_TIM_Base_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001080:	f7ff fe8a 	bl	8000d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001088:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800108a:	f107 0308 	add.w	r3, r7, #8
 800108e:	4619      	mov	r1, r3
 8001090:	480c      	ldr	r0, [pc, #48]	; (80010c4 <MX_TIM2_Init+0x94>)
 8001092:	f002 fc61 	bl	8003958 <HAL_TIM_ConfigClockSource>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800109c:	f7ff fe7c 	bl	8000d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a0:	2300      	movs	r3, #0
 80010a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010a8:	463b      	mov	r3, r7
 80010aa:	4619      	mov	r1, r3
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_TIM2_Init+0x94>)
 80010ae:	f002 ffe7 	bl	8004080 <HAL_TIMEx_MasterConfigSynchronization>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010b8:	f7ff fe6e 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000234 	.word	0x20000234

080010c8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08e      	sub	sp, #56	; 0x38
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010dc:	f107 0320 	add.w	r3, r7, #32
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
 80010f4:	615a      	str	r2, [r3, #20]
 80010f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010f8:	4b37      	ldr	r3, [pc, #220]	; (80011d8 <MX_TIM3_Init+0x110>)
 80010fa:	4a38      	ldr	r2, [pc, #224]	; (80011dc <MX_TIM3_Init+0x114>)
 80010fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80010fe:	4b36      	ldr	r3, [pc, #216]	; (80011d8 <MX_TIM3_Init+0x110>)
 8001100:	2253      	movs	r2, #83	; 0x53
 8001102:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001104:	4b34      	ldr	r3, [pc, #208]	; (80011d8 <MX_TIM3_Init+0x110>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255-1;
 800110a:	4b33      	ldr	r3, [pc, #204]	; (80011d8 <MX_TIM3_Init+0x110>)
 800110c:	22fe      	movs	r2, #254	; 0xfe
 800110e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001110:	4b31      	ldr	r3, [pc, #196]	; (80011d8 <MX_TIM3_Init+0x110>)
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001116:	4b30      	ldr	r3, [pc, #192]	; (80011d8 <MX_TIM3_Init+0x110>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800111c:	482e      	ldr	r0, [pc, #184]	; (80011d8 <MX_TIM3_Init+0x110>)
 800111e:	f002 fa01 	bl	8003524 <HAL_TIM_Base_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001128:	f7ff fe36 	bl	8000d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800112c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001130:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001132:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001136:	4619      	mov	r1, r3
 8001138:	4827      	ldr	r0, [pc, #156]	; (80011d8 <MX_TIM3_Init+0x110>)
 800113a:	f002 fc0d 	bl	8003958 <HAL_TIM_ConfigClockSource>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001144:	f7ff fe28 	bl	8000d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001148:	4823      	ldr	r0, [pc, #140]	; (80011d8 <MX_TIM3_Init+0x110>)
 800114a:	f002 fa3a 	bl	80035c2 <HAL_TIM_PWM_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001154:	f7ff fe20 	bl	8000d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001158:	2300      	movs	r3, #0
 800115a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115c:	2300      	movs	r3, #0
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001160:	f107 0320 	add.w	r3, r7, #32
 8001164:	4619      	mov	r1, r3
 8001166:	481c      	ldr	r0, [pc, #112]	; (80011d8 <MX_TIM3_Init+0x110>)
 8001168:	f002 ff8a 	bl	8004080 <HAL_TIMEx_MasterConfigSynchronization>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001172:	f7ff fe11 	bl	8000d98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001176:	2360      	movs	r3, #96	; 0x60
 8001178:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 255;
 800117a:	23ff      	movs	r3, #255	; 0xff
 800117c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	2200      	movs	r2, #0
 800118a:	4619      	mov	r1, r3
 800118c:	4812      	ldr	r0, [pc, #72]	; (80011d8 <MX_TIM3_Init+0x110>)
 800118e:	f002 fb21 	bl	80037d4 <HAL_TIM_PWM_ConfigChannel>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001198:	f7ff fdfe 	bl	8000d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	2204      	movs	r2, #4
 80011a0:	4619      	mov	r1, r3
 80011a2:	480d      	ldr	r0, [pc, #52]	; (80011d8 <MX_TIM3_Init+0x110>)
 80011a4:	f002 fb16 	bl	80037d4 <HAL_TIM_PWM_ConfigChannel>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 80011ae:	f7ff fdf3 	bl	8000d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	2208      	movs	r2, #8
 80011b6:	4619      	mov	r1, r3
 80011b8:	4807      	ldr	r0, [pc, #28]	; (80011d8 <MX_TIM3_Init+0x110>)
 80011ba:	f002 fb0b 	bl	80037d4 <HAL_TIM_PWM_ConfigChannel>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 80011c4:	f7ff fde8 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011c8:	4803      	ldr	r0, [pc, #12]	; (80011d8 <MX_TIM3_Init+0x110>)
 80011ca:	f000 f855 	bl	8001278 <HAL_TIM_MspPostInit>

}
 80011ce:	bf00      	nop
 80011d0:	3738      	adds	r7, #56	; 0x38
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200001a4 	.word	0x200001a4
 80011dc:	40000400 	.word	0x40000400

080011e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b087      	sub	sp, #28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a1f      	ldr	r2, [pc, #124]	; (800126c <HAL_TIM_Base_MspInit+0x8c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d10e      	bne.n	8001210 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <HAL_TIM_Base_MspInit+0x90>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	4a1d      	ldr	r2, [pc, #116]	; (8001270 <HAL_TIM_Base_MspInit+0x90>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6453      	str	r3, [r2, #68]	; 0x44
 8001202:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <HAL_TIM_Base_MspInit+0x90>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800120e:	e026      	b.n	800125e <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM2)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001218:	d10e      	bne.n	8001238 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <HAL_TIM_Base_MspInit+0x90>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	4a13      	ldr	r2, [pc, #76]	; (8001270 <HAL_TIM_Base_MspInit+0x90>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6413      	str	r3, [r2, #64]	; 0x40
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <HAL_TIM_Base_MspInit+0x90>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]
}
 8001236:	e012      	b.n	800125e <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM3)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0d      	ldr	r2, [pc, #52]	; (8001274 <HAL_TIM_Base_MspInit+0x94>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d10d      	bne.n	800125e <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <HAL_TIM_Base_MspInit+0x90>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	4a09      	ldr	r2, [pc, #36]	; (8001270 <HAL_TIM_Base_MspInit+0x90>)
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	6413      	str	r3, [r2, #64]	; 0x40
 8001252:	4b07      	ldr	r3, [pc, #28]	; (8001270 <HAL_TIM_Base_MspInit+0x90>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
}
 800125e:	bf00      	nop
 8001260:	371c      	adds	r7, #28
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	40010000 	.word	0x40010000
 8001270:	40023800 	.word	0x40023800
 8001274:	40000400 	.word	0x40000400

08001278 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a21      	ldr	r2, [pc, #132]	; (800131c <HAL_TIM_MspPostInit+0xa4>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d13b      	bne.n	8001312 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	4b20      	ldr	r3, [pc, #128]	; (8001320 <HAL_TIM_MspPostInit+0xa8>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a1f      	ldr	r2, [pc, #124]	; (8001320 <HAL_TIM_MspPostInit+0xa8>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <HAL_TIM_MspPostInit+0xa8>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	4b19      	ldr	r3, [pc, #100]	; (8001320 <HAL_TIM_MspPostInit+0xa8>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a18      	ldr	r2, [pc, #96]	; (8001320 <HAL_TIM_MspPostInit+0xa8>)
 80012c0:	f043 0304 	orr.w	r3, r3, #4
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b16      	ldr	r3, [pc, #88]	; (8001320 <HAL_TIM_MspPostInit+0xa8>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0304 	and.w	r3, r3, #4
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PC7     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin;
 80012d2:	2311      	movs	r3, #17
 80012d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012de:	2302      	movs	r3, #2
 80012e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012e2:	2302      	movs	r3, #2
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4619      	mov	r1, r3
 80012ec:	480d      	ldr	r0, [pc, #52]	; (8001324 <HAL_TIM_MspPostInit+0xac>)
 80012ee:	f001 f9c3 	bl	8002678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_B_Pin;
 80012f2:	2380      	movs	r3, #128	; 0x80
 80012f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012fe:	2302      	movs	r3, #2
 8001300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001302:	2302      	movs	r3, #2
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	4806      	ldr	r0, [pc, #24]	; (8001328 <HAL_TIM_MspPostInit+0xb0>)
 800130e:	f001 f9b3 	bl	8002678 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001312:	bf00      	nop
 8001314:	3728      	adds	r7, #40	; 0x28
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40000400 	.word	0x40000400
 8001320:	40023800 	.word	0x40023800
 8001324:	40020400 	.word	0x40020400
 8001328:	40020800 	.word	0x40020800

0800132c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001332:	4a12      	ldr	r2, [pc, #72]	; (800137c <MX_USART2_UART_Init+0x50>)
 8001334:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001338:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800133c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001352:	220c      	movs	r2, #12
 8001354:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001364:	f002 fefa 	bl	800415c <HAL_UART_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800136e:	f7ff fd13 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	2000027c 	.word	0x2000027c
 800137c:	40004400 	.word	0x40004400

08001380 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a19      	ldr	r2, [pc, #100]	; (8001404 <HAL_UART_MspInit+0x84>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d12b      	bne.n	80013fa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	4b18      	ldr	r3, [pc, #96]	; (8001408 <HAL_UART_MspInit+0x88>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	4a17      	ldr	r2, [pc, #92]	; (8001408 <HAL_UART_MspInit+0x88>)
 80013ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b0:	6413      	str	r3, [r2, #64]	; 0x40
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <HAL_UART_MspInit+0x88>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	4b11      	ldr	r3, [pc, #68]	; (8001408 <HAL_UART_MspInit+0x88>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a10      	ldr	r2, [pc, #64]	; (8001408 <HAL_UART_MspInit+0x88>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <HAL_UART_MspInit+0x88>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013da:	230c      	movs	r3, #12
 80013dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ea:	2307      	movs	r3, #7
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	; (800140c <HAL_UART_MspInit+0x8c>)
 80013f6:	f001 f93f 	bl	8002678 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80013fa:	bf00      	nop
 80013fc:	3728      	adds	r7, #40	; 0x28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40004400 	.word	0x40004400
 8001408:	40023800 	.word	0x40023800
 800140c:	40020000 	.word	0x40020000

08001410 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001410:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001448 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001414:	480d      	ldr	r0, [pc, #52]	; (800144c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001416:	490e      	ldr	r1, [pc, #56]	; (8001450 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001418:	4a0e      	ldr	r2, [pc, #56]	; (8001454 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800141c:	e002      	b.n	8001424 <LoopCopyDataInit>

0800141e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800141e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001422:	3304      	adds	r3, #4

08001424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001428:	d3f9      	bcc.n	800141e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142a:	4a0b      	ldr	r2, [pc, #44]	; (8001458 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800142c:	4c0b      	ldr	r4, [pc, #44]	; (800145c <LoopFillZerobss+0x26>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001430:	e001      	b.n	8001436 <LoopFillZerobss>

08001432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001434:	3204      	adds	r2, #4

08001436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001438:	d3fb      	bcc.n	8001432 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800143a:	f7ff fd97 	bl	8000f6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800143e:	f003 f8a9 	bl	8004594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001442:	f7ff fb95 	bl	8000b70 <main>
  bx  lr    
 8001446:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001448:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800144c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001450:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001454:	08005598 	.word	0x08005598
  ldr r2, =_sbss
 8001458:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800145c:	200002d4 	.word	0x200002d4

08001460 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001460:	e7fe      	b.n	8001460 <ADC_IRQHandler>
	...

08001464 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <HAL_Init+0x40>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0d      	ldr	r2, [pc, #52]	; (80014a4 <HAL_Init+0x40>)
 800146e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001472:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001474:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <HAL_Init+0x40>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <HAL_Init+0x40>)
 800147a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800147e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <HAL_Init+0x40>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <HAL_Init+0x40>)
 8001486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148c:	2003      	movs	r0, #3
 800148e:	f000 fd41 	bl	8001f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001492:	2000      	movs	r0, #0
 8001494:	f000 f808 	bl	80014a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001498:	f7ff fc84 	bl	8000da4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023c00 	.word	0x40023c00

080014a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_InitTick+0x54>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <HAL_InitTick+0x58>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014be:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 fd59 	bl	8001f7e <HAL_SYSTICK_Config>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00e      	b.n	80014f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b0f      	cmp	r3, #15
 80014da:	d80a      	bhi.n	80014f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014dc:	2200      	movs	r2, #0
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295
 80014e4:	f000 fd21 	bl	8001f2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e8:	4a06      	ldr	r2, [pc, #24]	; (8001504 <HAL_InitTick+0x5c>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e000      	b.n	80014f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000000 	.word	0x20000000
 8001500:	20000008 	.word	0x20000008
 8001504:	20000004 	.word	0x20000004

08001508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_IncTick+0x20>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_IncTick+0x24>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4413      	add	r3, r2
 8001518:	4a04      	ldr	r2, [pc, #16]	; (800152c <HAL_IncTick+0x24>)
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	20000008 	.word	0x20000008
 800152c:	200002c0 	.word	0x200002c0

08001530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return uwTick;
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <HAL_GetTick+0x14>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	200002c0 	.word	0x200002c0

08001548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001550:	f7ff ffee 	bl	8001530 <HAL_GetTick>
 8001554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001560:	d005      	beq.n	800156e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <HAL_Delay+0x44>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4413      	add	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800156e:	bf00      	nop
 8001570:	f7ff ffde 	bl	8001530 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	429a      	cmp	r2, r3
 800157e:	d8f7      	bhi.n	8001570 <HAL_Delay+0x28>
  {
  }
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000008 	.word	0x20000008

08001590 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e033      	b.n	800160e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d109      	bne.n	80015c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff f840 	bl	8000634 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f003 0310 	and.w	r3, r3, #16
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d118      	bne.n	8001600 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015d6:	f023 0302 	bic.w	r3, r3, #2
 80015da:	f043 0202 	orr.w	r2, r3, #2
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 fa48 	bl	8001a78 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f023 0303 	bic.w	r3, r3, #3
 80015f6:	f043 0201 	orr.w	r2, r3, #1
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	641a      	str	r2, [r3, #64]	; 0x40
 80015fe:	e001      	b.n	8001604 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800160c:	7bfb      	ldrb	r3, [r7, #15]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800162e:	2b01      	cmp	r3, #1
 8001630:	d101      	bne.n	8001636 <HAL_ADC_Start_DMA+0x1e>
 8001632:	2302      	movs	r3, #2
 8001634:	e0ce      	b.n	80017d4 <HAL_ADC_Start_DMA+0x1bc>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	2b01      	cmp	r3, #1
 800164a:	d018      	beq.n	800167e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f042 0201 	orr.w	r2, r2, #1
 800165a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800165c:	4b5f      	ldr	r3, [pc, #380]	; (80017dc <HAL_ADC_Start_DMA+0x1c4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a5f      	ldr	r2, [pc, #380]	; (80017e0 <HAL_ADC_Start_DMA+0x1c8>)
 8001662:	fba2 2303 	umull	r2, r3, r2, r3
 8001666:	0c9a      	lsrs	r2, r3, #18
 8001668:	4613      	mov	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	4413      	add	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001670:	e002      	b.n	8001678 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	3b01      	subs	r3, #1
 8001676:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f9      	bne.n	8001672 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001688:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800168c:	d107      	bne.n	800169e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800169c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	f040 8086 	bne.w	80017ba <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016b6:	f023 0301 	bic.w	r3, r3, #1
 80016ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d007      	beq.n	80016e0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016ec:	d106      	bne.n	80016fc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	f023 0206 	bic.w	r2, r3, #6
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	645a      	str	r2, [r3, #68]	; 0x44
 80016fa:	e002      	b.n	8001702 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2200      	movs	r2, #0
 8001700:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800170a:	4b36      	ldr	r3, [pc, #216]	; (80017e4 <HAL_ADC_Start_DMA+0x1cc>)
 800170c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001712:	4a35      	ldr	r2, [pc, #212]	; (80017e8 <HAL_ADC_Start_DMA+0x1d0>)
 8001714:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800171a:	4a34      	ldr	r2, [pc, #208]	; (80017ec <HAL_ADC_Start_DMA+0x1d4>)
 800171c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001722:	4a33      	ldr	r2, [pc, #204]	; (80017f0 <HAL_ADC_Start_DMA+0x1d8>)
 8001724:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800172e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800173e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800174e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	334c      	adds	r3, #76	; 0x4c
 800175a:	4619      	mov	r1, r3
 800175c:	68ba      	ldr	r2, [r7, #8]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f000 fcc8 	bl	80020f4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 031f 	and.w	r3, r3, #31
 800176c:	2b00      	cmp	r3, #0
 800176e:	d10f      	bne.n	8001790 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d129      	bne.n	80017d2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	e020      	b.n	80017d2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a17      	ldr	r2, [pc, #92]	; (80017f4 <HAL_ADC_Start_DMA+0x1dc>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d11b      	bne.n	80017d2 <HAL_ADC_Start_DMA+0x1ba>
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d114      	bne.n	80017d2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	e00b      	b.n	80017d2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f043 0210 	orr.w	r2, r3, #16
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ca:	f043 0201 	orr.w	r2, r3, #1
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000000 	.word	0x20000000
 80017e0:	431bde83 	.word	0x431bde83
 80017e4:	40012300 	.word	0x40012300
 80017e8:	08001c71 	.word	0x08001c71
 80017ec:	08001d2b 	.word	0x08001d2b
 80017f0:	08001d47 	.word	0x08001d47
 80017f4:	40012000 	.word	0x40012000

080017f8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800183e:	2300      	movs	r3, #0
 8001840:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001848:	2b01      	cmp	r3, #1
 800184a:	d101      	bne.n	8001850 <HAL_ADC_ConfigChannel+0x1c>
 800184c:	2302      	movs	r3, #2
 800184e:	e105      	b.n	8001a5c <HAL_ADC_ConfigChannel+0x228>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b09      	cmp	r3, #9
 800185e:	d925      	bls.n	80018ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68d9      	ldr	r1, [r3, #12]
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	b29b      	uxth	r3, r3
 800186c:	461a      	mov	r2, r3
 800186e:	4613      	mov	r3, r2
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	4413      	add	r3, r2
 8001874:	3b1e      	subs	r3, #30
 8001876:	2207      	movs	r2, #7
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43da      	mvns	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	400a      	ands	r2, r1
 8001884:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68d9      	ldr	r1, [r3, #12]
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	b29b      	uxth	r3, r3
 8001896:	4618      	mov	r0, r3
 8001898:	4603      	mov	r3, r0
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	4403      	add	r3, r0
 800189e:	3b1e      	subs	r3, #30
 80018a0:	409a      	lsls	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	e022      	b.n	80018f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6919      	ldr	r1, [r3, #16]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	461a      	mov	r2, r3
 80018ba:	4613      	mov	r3, r2
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	4413      	add	r3, r2
 80018c0:	2207      	movs	r2, #7
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43da      	mvns	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	400a      	ands	r2, r1
 80018ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6919      	ldr	r1, [r3, #16]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	4618      	mov	r0, r3
 80018e2:	4603      	mov	r3, r0
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	4403      	add	r3, r0
 80018e8:	409a      	lsls	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b06      	cmp	r3, #6
 80018f8:	d824      	bhi.n	8001944 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685a      	ldr	r2, [r3, #4]
 8001904:	4613      	mov	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	3b05      	subs	r3, #5
 800190c:	221f      	movs	r2, #31
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43da      	mvns	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	400a      	ands	r2, r1
 800191a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	b29b      	uxth	r3, r3
 8001928:	4618      	mov	r0, r3
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	3b05      	subs	r3, #5
 8001936:	fa00 f203 	lsl.w	r2, r0, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	430a      	orrs	r2, r1
 8001940:	635a      	str	r2, [r3, #52]	; 0x34
 8001942:	e04c      	b.n	80019de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	2b0c      	cmp	r3, #12
 800194a:	d824      	bhi.n	8001996 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	3b23      	subs	r3, #35	; 0x23
 800195e:	221f      	movs	r2, #31
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43da      	mvns	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	400a      	ands	r2, r1
 800196c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	b29b      	uxth	r3, r3
 800197a:	4618      	mov	r0, r3
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	3b23      	subs	r3, #35	; 0x23
 8001988:	fa00 f203 	lsl.w	r2, r0, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	631a      	str	r2, [r3, #48]	; 0x30
 8001994:	e023      	b.n	80019de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	4613      	mov	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	3b41      	subs	r3, #65	; 0x41
 80019a8:	221f      	movs	r2, #31
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43da      	mvns	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	400a      	ands	r2, r1
 80019b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	4618      	mov	r0, r3
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	3b41      	subs	r3, #65	; 0x41
 80019d2:	fa00 f203 	lsl.w	r2, r0, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	430a      	orrs	r2, r1
 80019dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019de:	4b22      	ldr	r3, [pc, #136]	; (8001a68 <HAL_ADC_ConfigChannel+0x234>)
 80019e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a21      	ldr	r2, [pc, #132]	; (8001a6c <HAL_ADC_ConfigChannel+0x238>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d109      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x1cc>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b12      	cmp	r3, #18
 80019f2:	d105      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a19      	ldr	r2, [pc, #100]	; (8001a6c <HAL_ADC_ConfigChannel+0x238>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d123      	bne.n	8001a52 <HAL_ADC_ConfigChannel+0x21e>
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b10      	cmp	r3, #16
 8001a10:	d003      	beq.n	8001a1a <HAL_ADC_ConfigChannel+0x1e6>
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2b11      	cmp	r3, #17
 8001a18:	d11b      	bne.n	8001a52 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2b10      	cmp	r3, #16
 8001a2c:	d111      	bne.n	8001a52 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <HAL_ADC_ConfigChannel+0x23c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a10      	ldr	r2, [pc, #64]	; (8001a74 <HAL_ADC_ConfigChannel+0x240>)
 8001a34:	fba2 2303 	umull	r2, r3, r2, r3
 8001a38:	0c9a      	lsrs	r2, r3, #18
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a44:	e002      	b.n	8001a4c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f9      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	40012300 	.word	0x40012300
 8001a6c:	40012000 	.word	0x40012000
 8001a70:	20000000 	.word	0x20000000
 8001a74:	431bde83 	.word	0x431bde83

08001a78 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a80:	4b79      	ldr	r3, [pc, #484]	; (8001c68 <ADC_Init+0x1f0>)
 8001a82:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001aac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6859      	ldr	r1, [r3, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	021a      	lsls	r2, r3, #8
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ad0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6859      	ldr	r1, [r3, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001af2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6899      	ldr	r1, [r3, #8]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68da      	ldr	r2, [r3, #12]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	430a      	orrs	r2, r1
 8001b04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0a:	4a58      	ldr	r2, [pc, #352]	; (8001c6c <ADC_Init+0x1f4>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d022      	beq.n	8001b56 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6899      	ldr	r1, [r3, #8]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6899      	ldr	r1, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	e00f      	b.n	8001b76 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b74:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 0202 	bic.w	r2, r2, #2
 8001b84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6899      	ldr	r1, [r3, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	7e1b      	ldrb	r3, [r3, #24]
 8001b90:	005a      	lsls	r2, r3, #1
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d01b      	beq.n	8001bdc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bb2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001bc2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6859      	ldr	r1, [r3, #4]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	035a      	lsls	r2, r3, #13
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	e007      	b.n	8001bec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	051a      	lsls	r2, r3, #20
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6899      	ldr	r1, [r3, #8]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c2e:	025a      	lsls	r2, r3, #9
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6899      	ldr	r1, [r3, #8]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	029a      	lsls	r2, r3, #10
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	609a      	str	r2, [r3, #8]
}
 8001c5c:	bf00      	nop
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	40012300 	.word	0x40012300
 8001c6c:	0f000001 	.word	0x0f000001

08001c70 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d13c      	bne.n	8001d04 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d12b      	bne.n	8001cfc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d127      	bne.n	8001cfc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d006      	beq.n	8001cc8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d119      	bne.n	8001cfc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 0220 	bic.w	r2, r2, #32
 8001cd6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d105      	bne.n	8001cfc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	f043 0201 	orr.w	r2, r3, #1
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	f7ff fd7b 	bl	80017f8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d02:	e00e      	b.n	8001d22 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	f003 0310 	and.w	r3, r3, #16
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001d10:	68f8      	ldr	r0, [r7, #12]
 8001d12:	f7ff fd85 	bl	8001820 <HAL_ADC_ErrorCallback>
}
 8001d16:	e004      	b.n	8001d22 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	4798      	blx	r3
}
 8001d22:	bf00      	nop
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b084      	sub	sp, #16
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d36:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f7ff fd67 	bl	800180c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d3e:	bf00      	nop
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b084      	sub	sp, #16
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d52:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2240      	movs	r2, #64	; 0x40
 8001d58:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	f043 0204 	orr.w	r2, r3, #4
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f7ff fd5a 	bl	8001820 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d6c:	bf00      	nop
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <__NVIC_SetPriorityGrouping>:
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d90:	4013      	ands	r3, r2
 8001d92:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001da6:	4a04      	ldr	r2, [pc, #16]	; (8001db8 <__NVIC_SetPriorityGrouping+0x44>)
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	60d3      	str	r3, [r2, #12]
}
 8001dac:	bf00      	nop
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <__NVIC_GetPriorityGrouping>:
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc0:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	0a1b      	lsrs	r3, r3, #8
 8001dc6:	f003 0307 	and.w	r3, r3, #7
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <__NVIC_EnableIRQ>:
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	db0b      	blt.n	8001e02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	f003 021f 	and.w	r2, r3, #31
 8001df0:	4907      	ldr	r1, [pc, #28]	; (8001e10 <__NVIC_EnableIRQ+0x38>)
 8001df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df6:	095b      	lsrs	r3, r3, #5
 8001df8:	2001      	movs	r0, #1
 8001dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8001dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000e100 	.word	0xe000e100

08001e14 <__NVIC_SetPriority>:
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	6039      	str	r1, [r7, #0]
 8001e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	db0a      	blt.n	8001e3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	490c      	ldr	r1, [pc, #48]	; (8001e60 <__NVIC_SetPriority+0x4c>)
 8001e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e32:	0112      	lsls	r2, r2, #4
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	440b      	add	r3, r1
 8001e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e3c:	e00a      	b.n	8001e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	4908      	ldr	r1, [pc, #32]	; (8001e64 <__NVIC_SetPriority+0x50>)
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	3b04      	subs	r3, #4
 8001e4c:	0112      	lsls	r2, r2, #4
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	440b      	add	r3, r1
 8001e52:	761a      	strb	r2, [r3, #24]
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	e000e100 	.word	0xe000e100
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <NVIC_EncodePriority>:
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b089      	sub	sp, #36	; 0x24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f1c3 0307 	rsb	r3, r3, #7
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	bf28      	it	cs
 8001e86:	2304      	movcs	r3, #4
 8001e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3304      	adds	r3, #4
 8001e8e:	2b06      	cmp	r3, #6
 8001e90:	d902      	bls.n	8001e98 <NVIC_EncodePriority+0x30>
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3b03      	subs	r3, #3
 8001e96:	e000      	b.n	8001e9a <NVIC_EncodePriority+0x32>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43da      	mvns	r2, r3
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	401a      	ands	r2, r3
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eba:	43d9      	mvns	r1, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec0:	4313      	orrs	r3, r2
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3724      	adds	r7, #36	; 0x24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
	...

08001ed0 <SysTick_Config>:
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee0:	d301      	bcc.n	8001ee6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e00f      	b.n	8001f06 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ee6:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <SysTick_Config+0x40>)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eee:	210f      	movs	r1, #15
 8001ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef4:	f7ff ff8e 	bl	8001e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <SysTick_Config+0x40>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001efe:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <SysTick_Config+0x40>)
 8001f00:	2207      	movs	r2, #7
 8001f02:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	e000e010 	.word	0xe000e010

08001f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff ff29 	bl	8001d74 <__NVIC_SetPriorityGrouping>
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b086      	sub	sp, #24
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	4603      	mov	r3, r0
 8001f32:	60b9      	str	r1, [r7, #8]
 8001f34:	607a      	str	r2, [r7, #4]
 8001f36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f3c:	f7ff ff3e 	bl	8001dbc <__NVIC_GetPriorityGrouping>
 8001f40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	68b9      	ldr	r1, [r7, #8]
 8001f46:	6978      	ldr	r0, [r7, #20]
 8001f48:	f7ff ff8e 	bl	8001e68 <NVIC_EncodePriority>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f52:	4611      	mov	r1, r2
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff ff5d 	bl	8001e14 <__NVIC_SetPriority>
}
 8001f5a:	bf00      	nop
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	4603      	mov	r3, r0
 8001f6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ff31 	bl	8001dd8 <__NVIC_EnableIRQ>
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff ffa2 	bl	8001ed0 <SysTick_Config>
 8001f8c:	4603      	mov	r3, r0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fa4:	f7ff fac4 	bl	8001530 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e099      	b.n	80020e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0201 	bic.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fd4:	e00f      	b.n	8001ff6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fd6:	f7ff faab 	bl	8001530 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b05      	cmp	r3, #5
 8001fe2:	d908      	bls.n	8001ff6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2203      	movs	r2, #3
 8001fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e078      	b.n	80020e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1e8      	bne.n	8001fd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	4b38      	ldr	r3, [pc, #224]	; (80020f0 <HAL_DMA_Init+0x158>)
 8002010:	4013      	ands	r3, r2
 8002012:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002022:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800202e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800203a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	4313      	orrs	r3, r2
 8002046:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	2b04      	cmp	r3, #4
 800204e:	d107      	bne.n	8002060 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002058:	4313      	orrs	r3, r2
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	4313      	orrs	r3, r2
 800205e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f023 0307 	bic.w	r3, r3, #7
 8002076:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	4313      	orrs	r3, r2
 8002080:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002086:	2b04      	cmp	r3, #4
 8002088:	d117      	bne.n	80020ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	4313      	orrs	r3, r2
 8002092:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00e      	beq.n	80020ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 fa6f 	bl	8002580 <DMA_CheckFifoParam>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d008      	beq.n	80020ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2240      	movs	r2, #64	; 0x40
 80020ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80020b6:	2301      	movs	r3, #1
 80020b8:	e016      	b.n	80020e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 fa26 	bl	8002514 <DMA_CalcBaseAndBitshift>
 80020c8:	4603      	mov	r3, r0
 80020ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d0:	223f      	movs	r2, #63	; 0x3f
 80020d2:	409a      	lsls	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	f010803f 	.word	0xf010803f

080020f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
 8002100:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002112:	2b01      	cmp	r3, #1
 8002114:	d101      	bne.n	800211a <HAL_DMA_Start_IT+0x26>
 8002116:	2302      	movs	r3, #2
 8002118:	e040      	b.n	800219c <HAL_DMA_Start_IT+0xa8>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b01      	cmp	r3, #1
 800212c:	d12f      	bne.n	800218e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2202      	movs	r2, #2
 8002132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	68b9      	ldr	r1, [r7, #8]
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 f9b8 	bl	80024b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214c:	223f      	movs	r2, #63	; 0x3f
 800214e:	409a      	lsls	r2, r3
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0216 	orr.w	r2, r2, #22
 8002162:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	2b00      	cmp	r3, #0
 800216a:	d007      	beq.n	800217c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0208 	orr.w	r2, r2, #8
 800217a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0201 	orr.w	r2, r2, #1
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	e005      	b.n	800219a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002196:	2302      	movs	r3, #2
 8002198:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800219a:	7dfb      	ldrb	r3, [r7, #23]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021b0:	4b92      	ldr	r3, [pc, #584]	; (80023fc <HAL_DMA_IRQHandler+0x258>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a92      	ldr	r2, [pc, #584]	; (8002400 <HAL_DMA_IRQHandler+0x25c>)
 80021b6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ba:	0a9b      	lsrs	r3, r3, #10
 80021bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ce:	2208      	movs	r2, #8
 80021d0:	409a      	lsls	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4013      	ands	r3, r2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d01a      	beq.n	8002210 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d013      	beq.n	8002210 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0204 	bic.w	r2, r2, #4
 80021f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fc:	2208      	movs	r2, #8
 80021fe:	409a      	lsls	r2, r3
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002208:	f043 0201 	orr.w	r2, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002214:	2201      	movs	r2, #1
 8002216:	409a      	lsls	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4013      	ands	r3, r2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d012      	beq.n	8002246 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00b      	beq.n	8002246 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002232:	2201      	movs	r2, #1
 8002234:	409a      	lsls	r2, r3
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223e:	f043 0202 	orr.w	r2, r3, #2
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224a:	2204      	movs	r2, #4
 800224c:	409a      	lsls	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4013      	ands	r3, r2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d012      	beq.n	800227c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00b      	beq.n	800227c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002268:	2204      	movs	r2, #4
 800226a:	409a      	lsls	r2, r3
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002274:	f043 0204 	orr.w	r2, r3, #4
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002280:	2210      	movs	r2, #16
 8002282:	409a      	lsls	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4013      	ands	r3, r2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d043      	beq.n	8002314 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d03c      	beq.n	8002314 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229e:	2210      	movs	r2, #16
 80022a0:	409a      	lsls	r2, r3
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d018      	beq.n	80022e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d108      	bne.n	80022d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d024      	beq.n	8002314 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	4798      	blx	r3
 80022d2:	e01f      	b.n	8002314 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d01b      	beq.n	8002314 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	4798      	blx	r3
 80022e4:	e016      	b.n	8002314 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d107      	bne.n	8002304 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0208 	bic.w	r2, r2, #8
 8002302:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002318:	2220      	movs	r2, #32
 800231a:	409a      	lsls	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4013      	ands	r3, r2
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 808e 	beq.w	8002442 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0310 	and.w	r3, r3, #16
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 8086 	beq.w	8002442 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233a:	2220      	movs	r2, #32
 800233c:	409a      	lsls	r2, r3
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b05      	cmp	r3, #5
 800234c:	d136      	bne.n	80023bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 0216 	bic.w	r2, r2, #22
 800235c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	695a      	ldr	r2, [r3, #20]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800236c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	2b00      	cmp	r3, #0
 8002374:	d103      	bne.n	800237e <HAL_DMA_IRQHandler+0x1da>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800237a:	2b00      	cmp	r3, #0
 800237c:	d007      	beq.n	800238e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0208 	bic.w	r2, r2, #8
 800238c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002392:	223f      	movs	r2, #63	; 0x3f
 8002394:	409a      	lsls	r2, r3
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d07d      	beq.n	80024ae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	4798      	blx	r3
        }
        return;
 80023ba:	e078      	b.n	80024ae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d01c      	beq.n	8002404 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d108      	bne.n	80023ea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d030      	beq.n	8002442 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	4798      	blx	r3
 80023e8:	e02b      	b.n	8002442 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d027      	beq.n	8002442 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	4798      	blx	r3
 80023fa:	e022      	b.n	8002442 <HAL_DMA_IRQHandler+0x29e>
 80023fc:	20000000 	.word	0x20000000
 8002400:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10f      	bne.n	8002432 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0210 	bic.w	r2, r2, #16
 8002420:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002446:	2b00      	cmp	r3, #0
 8002448:	d032      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d022      	beq.n	800249c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2205      	movs	r2, #5
 800245a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0201 	bic.w	r2, r2, #1
 800246c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	3301      	adds	r3, #1
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	429a      	cmp	r2, r3
 8002478:	d307      	bcc.n	800248a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f2      	bne.n	800246e <HAL_DMA_IRQHandler+0x2ca>
 8002488:	e000      	b.n	800248c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800248a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	4798      	blx	r3
 80024ac:	e000      	b.n	80024b0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80024ae:	bf00      	nop
    }
  }
}
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop

080024b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	2b40      	cmp	r3, #64	; 0x40
 80024e4:	d108      	bne.n	80024f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024f6:	e007      	b.n	8002508 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	60da      	str	r2, [r3, #12]
}
 8002508:	bf00      	nop
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	3b10      	subs	r3, #16
 8002524:	4a14      	ldr	r2, [pc, #80]	; (8002578 <DMA_CalcBaseAndBitshift+0x64>)
 8002526:	fba2 2303 	umull	r2, r3, r2, r3
 800252a:	091b      	lsrs	r3, r3, #4
 800252c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800252e:	4a13      	ldr	r2, [pc, #76]	; (800257c <DMA_CalcBaseAndBitshift+0x68>)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4413      	add	r3, r2
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2b03      	cmp	r3, #3
 8002540:	d909      	bls.n	8002556 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800254a:	f023 0303 	bic.w	r3, r3, #3
 800254e:	1d1a      	adds	r2, r3, #4
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	659a      	str	r2, [r3, #88]	; 0x58
 8002554:	e007      	b.n	8002566 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800255e:	f023 0303 	bic.w	r3, r3, #3
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800256a:	4618      	mov	r0, r3
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	aaaaaaab 	.word	0xaaaaaaab
 800257c:	080054e8 	.word	0x080054e8

08002580 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002590:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d11f      	bne.n	80025da <DMA_CheckFifoParam+0x5a>
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2b03      	cmp	r3, #3
 800259e:	d856      	bhi.n	800264e <DMA_CheckFifoParam+0xce>
 80025a0:	a201      	add	r2, pc, #4	; (adr r2, 80025a8 <DMA_CheckFifoParam+0x28>)
 80025a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a6:	bf00      	nop
 80025a8:	080025b9 	.word	0x080025b9
 80025ac:	080025cb 	.word	0x080025cb
 80025b0:	080025b9 	.word	0x080025b9
 80025b4:	0800264f 	.word	0x0800264f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d046      	beq.n	8002652 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025c8:	e043      	b.n	8002652 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025d2:	d140      	bne.n	8002656 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025d8:	e03d      	b.n	8002656 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025e2:	d121      	bne.n	8002628 <DMA_CheckFifoParam+0xa8>
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d837      	bhi.n	800265a <DMA_CheckFifoParam+0xda>
 80025ea:	a201      	add	r2, pc, #4	; (adr r2, 80025f0 <DMA_CheckFifoParam+0x70>)
 80025ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f0:	08002601 	.word	0x08002601
 80025f4:	08002607 	.word	0x08002607
 80025f8:	08002601 	.word	0x08002601
 80025fc:	08002619 	.word	0x08002619
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
      break;
 8002604:	e030      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d025      	beq.n	800265e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002616:	e022      	b.n	800265e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002620:	d11f      	bne.n	8002662 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002626:	e01c      	b.n	8002662 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d903      	bls.n	8002636 <DMA_CheckFifoParam+0xb6>
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	2b03      	cmp	r3, #3
 8002632:	d003      	beq.n	800263c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002634:	e018      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	73fb      	strb	r3, [r7, #15]
      break;
 800263a:	e015      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00e      	beq.n	8002666 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
      break;
 800264c:	e00b      	b.n	8002666 <DMA_CheckFifoParam+0xe6>
      break;
 800264e:	bf00      	nop
 8002650:	e00a      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
      break;
 8002652:	bf00      	nop
 8002654:	e008      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
      break;
 8002656:	bf00      	nop
 8002658:	e006      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
      break;
 800265a:	bf00      	nop
 800265c:	e004      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
      break;
 800265e:	bf00      	nop
 8002660:	e002      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
      break;   
 8002662:	bf00      	nop
 8002664:	e000      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
      break;
 8002666:	bf00      	nop
    }
  } 
  
  return status; 
 8002668:	7bfb      	ldrb	r3, [r7, #15]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop

08002678 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002678:	b480      	push	{r7}
 800267a:	b089      	sub	sp, #36	; 0x24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002686:	2300      	movs	r3, #0
 8002688:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800268a:	2300      	movs	r3, #0
 800268c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	e159      	b.n	8002948 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002694:	2201      	movs	r2, #1
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	4013      	ands	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	f040 8148 	bne.w	8002942 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d005      	beq.n	80026ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d130      	bne.n	800272c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	2203      	movs	r2, #3
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43db      	mvns	r3, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4013      	ands	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002700:	2201      	movs	r2, #1
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	091b      	lsrs	r3, r3, #4
 8002716:	f003 0201 	and.w	r2, r3, #1
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	2b03      	cmp	r3, #3
 8002736:	d017      	beq.n	8002768 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	2203      	movs	r2, #3
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d123      	bne.n	80027bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	08da      	lsrs	r2, r3, #3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3208      	adds	r2, #8
 800277c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002780:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	220f      	movs	r2, #15
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	691a      	ldr	r2, [r3, #16]
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	08da      	lsrs	r2, r3, #3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3208      	adds	r2, #8
 80027b6:	69b9      	ldr	r1, [r7, #24]
 80027b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	2203      	movs	r2, #3
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0203 	and.w	r2, r3, #3
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 80a2 	beq.w	8002942 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	4b57      	ldr	r3, [pc, #348]	; (8002960 <HAL_GPIO_Init+0x2e8>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002806:	4a56      	ldr	r2, [pc, #344]	; (8002960 <HAL_GPIO_Init+0x2e8>)
 8002808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800280c:	6453      	str	r3, [r2, #68]	; 0x44
 800280e:	4b54      	ldr	r3, [pc, #336]	; (8002960 <HAL_GPIO_Init+0x2e8>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800281a:	4a52      	ldr	r2, [pc, #328]	; (8002964 <HAL_GPIO_Init+0x2ec>)
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	089b      	lsrs	r3, r3, #2
 8002820:	3302      	adds	r3, #2
 8002822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	220f      	movs	r2, #15
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43db      	mvns	r3, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4013      	ands	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a49      	ldr	r2, [pc, #292]	; (8002968 <HAL_GPIO_Init+0x2f0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d019      	beq.n	800287a <HAL_GPIO_Init+0x202>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a48      	ldr	r2, [pc, #288]	; (800296c <HAL_GPIO_Init+0x2f4>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d013      	beq.n	8002876 <HAL_GPIO_Init+0x1fe>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a47      	ldr	r2, [pc, #284]	; (8002970 <HAL_GPIO_Init+0x2f8>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d00d      	beq.n	8002872 <HAL_GPIO_Init+0x1fa>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a46      	ldr	r2, [pc, #280]	; (8002974 <HAL_GPIO_Init+0x2fc>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d007      	beq.n	800286e <HAL_GPIO_Init+0x1f6>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a45      	ldr	r2, [pc, #276]	; (8002978 <HAL_GPIO_Init+0x300>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d101      	bne.n	800286a <HAL_GPIO_Init+0x1f2>
 8002866:	2304      	movs	r3, #4
 8002868:	e008      	b.n	800287c <HAL_GPIO_Init+0x204>
 800286a:	2307      	movs	r3, #7
 800286c:	e006      	b.n	800287c <HAL_GPIO_Init+0x204>
 800286e:	2303      	movs	r3, #3
 8002870:	e004      	b.n	800287c <HAL_GPIO_Init+0x204>
 8002872:	2302      	movs	r3, #2
 8002874:	e002      	b.n	800287c <HAL_GPIO_Init+0x204>
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <HAL_GPIO_Init+0x204>
 800287a:	2300      	movs	r3, #0
 800287c:	69fa      	ldr	r2, [r7, #28]
 800287e:	f002 0203 	and.w	r2, r2, #3
 8002882:	0092      	lsls	r2, r2, #2
 8002884:	4093      	lsls	r3, r2
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800288c:	4935      	ldr	r1, [pc, #212]	; (8002964 <HAL_GPIO_Init+0x2ec>)
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	089b      	lsrs	r3, r3, #2
 8002892:	3302      	adds	r3, #2
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800289a:	4b38      	ldr	r3, [pc, #224]	; (800297c <HAL_GPIO_Init+0x304>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028be:	4a2f      	ldr	r2, [pc, #188]	; (800297c <HAL_GPIO_Init+0x304>)
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028c4:	4b2d      	ldr	r3, [pc, #180]	; (800297c <HAL_GPIO_Init+0x304>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028e8:	4a24      	ldr	r2, [pc, #144]	; (800297c <HAL_GPIO_Init+0x304>)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ee:	4b23      	ldr	r3, [pc, #140]	; (800297c <HAL_GPIO_Init+0x304>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	43db      	mvns	r3, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4013      	ands	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002912:	4a1a      	ldr	r2, [pc, #104]	; (800297c <HAL_GPIO_Init+0x304>)
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002918:	4b18      	ldr	r3, [pc, #96]	; (800297c <HAL_GPIO_Init+0x304>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800293c:	4a0f      	ldr	r2, [pc, #60]	; (800297c <HAL_GPIO_Init+0x304>)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3301      	adds	r3, #1
 8002946:	61fb      	str	r3, [r7, #28]
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	2b0f      	cmp	r3, #15
 800294c:	f67f aea2 	bls.w	8002694 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002950:	bf00      	nop
 8002952:	bf00      	nop
 8002954:	3724      	adds	r7, #36	; 0x24
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40023800 	.word	0x40023800
 8002964:	40013800 	.word	0x40013800
 8002968:	40020000 	.word	0x40020000
 800296c:	40020400 	.word	0x40020400
 8002970:	40020800 	.word	0x40020800
 8002974:	40020c00 	.word	0x40020c00
 8002978:	40021000 	.word	0x40021000
 800297c:	40013c00 	.word	0x40013c00

08002980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	807b      	strh	r3, [r7, #2]
 800298c:	4613      	mov	r3, r2
 800298e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002990:	787b      	ldrb	r3, [r7, #1]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002996:	887a      	ldrh	r2, [r7, #2]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800299c:	e003      	b.n	80029a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800299e:	887b      	ldrh	r3, [r7, #2]
 80029a0:	041a      	lsls	r2, r3, #16
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	619a      	str	r2, [r3, #24]
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
	...

080029b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e12b      	b.n	8002c1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d106      	bne.n	80029e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7fe f83c 	bl	8000a58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2224      	movs	r2, #36	; 0x24
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0201 	bic.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a18:	f000 fd5c 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 8002a1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	4a81      	ldr	r2, [pc, #516]	; (8002c28 <HAL_I2C_Init+0x274>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d807      	bhi.n	8002a38 <HAL_I2C_Init+0x84>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4a80      	ldr	r2, [pc, #512]	; (8002c2c <HAL_I2C_Init+0x278>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	bf94      	ite	ls
 8002a30:	2301      	movls	r3, #1
 8002a32:	2300      	movhi	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	e006      	b.n	8002a46 <HAL_I2C_Init+0x92>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4a7d      	ldr	r2, [pc, #500]	; (8002c30 <HAL_I2C_Init+0x27c>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	bf94      	ite	ls
 8002a40:	2301      	movls	r3, #1
 8002a42:	2300      	movhi	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e0e7      	b.n	8002c1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	4a78      	ldr	r2, [pc, #480]	; (8002c34 <HAL_I2C_Init+0x280>)
 8002a52:	fba2 2303 	umull	r2, r3, r2, r3
 8002a56:	0c9b      	lsrs	r3, r3, #18
 8002a58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68ba      	ldr	r2, [r7, #8]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	4a6a      	ldr	r2, [pc, #424]	; (8002c28 <HAL_I2C_Init+0x274>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d802      	bhi.n	8002a88 <HAL_I2C_Init+0xd4>
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	3301      	adds	r3, #1
 8002a86:	e009      	b.n	8002a9c <HAL_I2C_Init+0xe8>
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a8e:	fb02 f303 	mul.w	r3, r2, r3
 8002a92:	4a69      	ldr	r2, [pc, #420]	; (8002c38 <HAL_I2C_Init+0x284>)
 8002a94:	fba2 2303 	umull	r2, r3, r2, r3
 8002a98:	099b      	lsrs	r3, r3, #6
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6812      	ldr	r2, [r2, #0]
 8002aa0:	430b      	orrs	r3, r1
 8002aa2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002aae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	495c      	ldr	r1, [pc, #368]	; (8002c28 <HAL_I2C_Init+0x274>)
 8002ab8:	428b      	cmp	r3, r1
 8002aba:	d819      	bhi.n	8002af0 <HAL_I2C_Init+0x13c>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	1e59      	subs	r1, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aca:	1c59      	adds	r1, r3, #1
 8002acc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ad0:	400b      	ands	r3, r1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00a      	beq.n	8002aec <HAL_I2C_Init+0x138>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	1e59      	subs	r1, r3, #1
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aea:	e051      	b.n	8002b90 <HAL_I2C_Init+0x1dc>
 8002aec:	2304      	movs	r3, #4
 8002aee:	e04f      	b.n	8002b90 <HAL_I2C_Init+0x1dc>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d111      	bne.n	8002b1c <HAL_I2C_Init+0x168>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	1e58      	subs	r0, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6859      	ldr	r1, [r3, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	440b      	add	r3, r1
 8002b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	bf0c      	ite	eq
 8002b14:	2301      	moveq	r3, #1
 8002b16:	2300      	movne	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	e012      	b.n	8002b42 <HAL_I2C_Init+0x18e>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	1e58      	subs	r0, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6859      	ldr	r1, [r3, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	0099      	lsls	r1, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b32:	3301      	adds	r3, #1
 8002b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	bf0c      	ite	eq
 8002b3c:	2301      	moveq	r3, #1
 8002b3e:	2300      	movne	r3, #0
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_I2C_Init+0x196>
 8002b46:	2301      	movs	r3, #1
 8002b48:	e022      	b.n	8002b90 <HAL_I2C_Init+0x1dc>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10e      	bne.n	8002b70 <HAL_I2C_Init+0x1bc>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	1e58      	subs	r0, r3, #1
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6859      	ldr	r1, [r3, #4]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	440b      	add	r3, r1
 8002b60:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b64:	3301      	adds	r3, #1
 8002b66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b6e:	e00f      	b.n	8002b90 <HAL_I2C_Init+0x1dc>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	1e58      	subs	r0, r3, #1
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6859      	ldr	r1, [r3, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	0099      	lsls	r1, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b86:	3301      	adds	r3, #1
 8002b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	6809      	ldr	r1, [r1, #0]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69da      	ldr	r2, [r3, #28]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6911      	ldr	r1, [r2, #16]
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	68d2      	ldr	r2, [r2, #12]
 8002bca:	4311      	orrs	r1, r2
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6812      	ldr	r2, [r2, #0]
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695a      	ldr	r2, [r3, #20]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0201 	orr.w	r2, r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2220      	movs	r2, #32
 8002c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	000186a0 	.word	0x000186a0
 8002c2c:	001e847f 	.word	0x001e847f
 8002c30:	003d08ff 	.word	0x003d08ff
 8002c34:	431bde83 	.word	0x431bde83
 8002c38:	10624dd3 	.word	0x10624dd3

08002c3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e264      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d075      	beq.n	8002d46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c5a:	4ba3      	ldr	r3, [pc, #652]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d00c      	beq.n	8002c80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c66:	4ba0      	ldr	r3, [pc, #640]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d112      	bne.n	8002c98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c72:	4b9d      	ldr	r3, [pc, #628]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c7e:	d10b      	bne.n	8002c98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c80:	4b99      	ldr	r3, [pc, #612]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d05b      	beq.n	8002d44 <HAL_RCC_OscConfig+0x108>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d157      	bne.n	8002d44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e23f      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ca0:	d106      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x74>
 8002ca2:	4b91      	ldr	r3, [pc, #580]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a90      	ldr	r2, [pc, #576]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	e01d      	b.n	8002cec <HAL_RCC_OscConfig+0xb0>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x98>
 8002cba:	4b8b      	ldr	r3, [pc, #556]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a8a      	ldr	r2, [pc, #552]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	4b88      	ldr	r3, [pc, #544]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a87      	ldr	r2, [pc, #540]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	e00b      	b.n	8002cec <HAL_RCC_OscConfig+0xb0>
 8002cd4:	4b84      	ldr	r3, [pc, #528]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a83      	ldr	r2, [pc, #524]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cde:	6013      	str	r3, [r2, #0]
 8002ce0:	4b81      	ldr	r3, [pc, #516]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a80      	ldr	r2, [pc, #512]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d013      	beq.n	8002d1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf4:	f7fe fc1c 	bl	8001530 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cfc:	f7fe fc18 	bl	8001530 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b64      	cmp	r3, #100	; 0x64
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e204      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0e:	4b76      	ldr	r3, [pc, #472]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCC_OscConfig+0xc0>
 8002d1a:	e014      	b.n	8002d46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1c:	f7fe fc08 	bl	8001530 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d24:	f7fe fc04 	bl	8001530 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b64      	cmp	r3, #100	; 0x64
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e1f0      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d36:	4b6c      	ldr	r3, [pc, #432]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0xe8>
 8002d42:	e000      	b.n	8002d46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d063      	beq.n	8002e1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d52:	4b65      	ldr	r3, [pc, #404]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 030c 	and.w	r3, r3, #12
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00b      	beq.n	8002d76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d5e:	4b62      	ldr	r3, [pc, #392]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d11c      	bne.n	8002da4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d6a:	4b5f      	ldr	r3, [pc, #380]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d116      	bne.n	8002da4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d76:	4b5c      	ldr	r3, [pc, #368]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d005      	beq.n	8002d8e <HAL_RCC_OscConfig+0x152>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d001      	beq.n	8002d8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e1c4      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d8e:	4b56      	ldr	r3, [pc, #344]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4952      	ldr	r1, [pc, #328]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002da2:	e03a      	b.n	8002e1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d020      	beq.n	8002dee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dac:	4b4f      	ldr	r3, [pc, #316]	; (8002eec <HAL_RCC_OscConfig+0x2b0>)
 8002dae:	2201      	movs	r2, #1
 8002db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db2:	f7fe fbbd 	bl	8001530 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dba:	f7fe fbb9 	bl	8001530 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e1a5      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dcc:	4b46      	ldr	r3, [pc, #280]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0f0      	beq.n	8002dba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd8:	4b43      	ldr	r3, [pc, #268]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	4940      	ldr	r1, [pc, #256]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	600b      	str	r3, [r1, #0]
 8002dec:	e015      	b.n	8002e1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dee:	4b3f      	ldr	r3, [pc, #252]	; (8002eec <HAL_RCC_OscConfig+0x2b0>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df4:	f7fe fb9c 	bl	8001530 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dfc:	f7fe fb98 	bl	8001530 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e184      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e0e:	4b36      	ldr	r3, [pc, #216]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f0      	bne.n	8002dfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0308 	and.w	r3, r3, #8
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d030      	beq.n	8002e88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d016      	beq.n	8002e5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e2e:	4b30      	ldr	r3, [pc, #192]	; (8002ef0 <HAL_RCC_OscConfig+0x2b4>)
 8002e30:	2201      	movs	r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e34:	f7fe fb7c 	bl	8001530 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e3c:	f7fe fb78 	bl	8001530 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e164      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e4e:	4b26      	ldr	r3, [pc, #152]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f0      	beq.n	8002e3c <HAL_RCC_OscConfig+0x200>
 8002e5a:	e015      	b.n	8002e88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e5c:	4b24      	ldr	r3, [pc, #144]	; (8002ef0 <HAL_RCC_OscConfig+0x2b4>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e62:	f7fe fb65 	bl	8001530 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e6a:	f7fe fb61 	bl	8001530 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e14d      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1f0      	bne.n	8002e6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 80a0 	beq.w	8002fd6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e96:	2300      	movs	r3, #0
 8002e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e9a:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10f      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60bb      	str	r3, [r7, #8]
 8002eaa:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	4a0e      	ldr	r2, [pc, #56]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ebe:	60bb      	str	r3, [r7, #8]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec6:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <HAL_RCC_OscConfig+0x2b8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d121      	bne.n	8002f16 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ed2:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <HAL_RCC_OscConfig+0x2b8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a07      	ldr	r2, [pc, #28]	; (8002ef4 <HAL_RCC_OscConfig+0x2b8>)
 8002ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ede:	f7fe fb27 	bl	8001530 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee4:	e011      	b.n	8002f0a <HAL_RCC_OscConfig+0x2ce>
 8002ee6:	bf00      	nop
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	42470000 	.word	0x42470000
 8002ef0:	42470e80 	.word	0x42470e80
 8002ef4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef8:	f7fe fb1a 	bl	8001530 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e106      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0a:	4b85      	ldr	r3, [pc, #532]	; (8003120 <HAL_RCC_OscConfig+0x4e4>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0f0      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d106      	bne.n	8002f2c <HAL_RCC_OscConfig+0x2f0>
 8002f1e:	4b81      	ldr	r3, [pc, #516]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8002f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f22:	4a80      	ldr	r2, [pc, #512]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8002f24:	f043 0301 	orr.w	r3, r3, #1
 8002f28:	6713      	str	r3, [r2, #112]	; 0x70
 8002f2a:	e01c      	b.n	8002f66 <HAL_RCC_OscConfig+0x32a>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	2b05      	cmp	r3, #5
 8002f32:	d10c      	bne.n	8002f4e <HAL_RCC_OscConfig+0x312>
 8002f34:	4b7b      	ldr	r3, [pc, #492]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8002f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f38:	4a7a      	ldr	r2, [pc, #488]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8002f3a:	f043 0304 	orr.w	r3, r3, #4
 8002f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f40:	4b78      	ldr	r3, [pc, #480]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8002f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f44:	4a77      	ldr	r2, [pc, #476]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8002f46:	f043 0301 	orr.w	r3, r3, #1
 8002f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f4c:	e00b      	b.n	8002f66 <HAL_RCC_OscConfig+0x32a>
 8002f4e:	4b75      	ldr	r3, [pc, #468]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8002f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f52:	4a74      	ldr	r2, [pc, #464]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8002f54:	f023 0301 	bic.w	r3, r3, #1
 8002f58:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5a:	4b72      	ldr	r3, [pc, #456]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5e:	4a71      	ldr	r2, [pc, #452]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8002f60:	f023 0304 	bic.w	r3, r3, #4
 8002f64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d015      	beq.n	8002f9a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6e:	f7fe fadf 	bl	8001530 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f74:	e00a      	b.n	8002f8c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f76:	f7fe fadb 	bl	8001530 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e0c5      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f8c:	4b65      	ldr	r3, [pc, #404]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0ee      	beq.n	8002f76 <HAL_RCC_OscConfig+0x33a>
 8002f98:	e014      	b.n	8002fc4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f9a:	f7fe fac9 	bl	8001530 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa0:	e00a      	b.n	8002fb8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa2:	f7fe fac5 	bl	8001530 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e0af      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb8:	4b5a      	ldr	r3, [pc, #360]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8002fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1ee      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fc4:	7dfb      	ldrb	r3, [r7, #23]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d105      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fca:	4b56      	ldr	r3, [pc, #344]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	4a55      	ldr	r2, [pc, #340]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8002fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 809b 	beq.w	8003116 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fe0:	4b50      	ldr	r3, [pc, #320]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 030c 	and.w	r3, r3, #12
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d05c      	beq.n	80030a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d141      	bne.n	8003078 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff4:	4b4c      	ldr	r3, [pc, #304]	; (8003128 <HAL_RCC_OscConfig+0x4ec>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffa:	f7fe fa99 	bl	8001530 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003002:	f7fe fa95 	bl	8001530 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e081      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003014:	4b43      	ldr	r3, [pc, #268]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1f0      	bne.n	8003002 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	69da      	ldr	r2, [r3, #28]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	019b      	lsls	r3, r3, #6
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003036:	085b      	lsrs	r3, r3, #1
 8003038:	3b01      	subs	r3, #1
 800303a:	041b      	lsls	r3, r3, #16
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003042:	061b      	lsls	r3, r3, #24
 8003044:	4937      	ldr	r1, [pc, #220]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8003046:	4313      	orrs	r3, r2
 8003048:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800304a:	4b37      	ldr	r3, [pc, #220]	; (8003128 <HAL_RCC_OscConfig+0x4ec>)
 800304c:	2201      	movs	r2, #1
 800304e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003050:	f7fe fa6e 	bl	8001530 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003058:	f7fe fa6a 	bl	8001530 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e056      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800306a:	4b2e      	ldr	r3, [pc, #184]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0f0      	beq.n	8003058 <HAL_RCC_OscConfig+0x41c>
 8003076:	e04e      	b.n	8003116 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003078:	4b2b      	ldr	r3, [pc, #172]	; (8003128 <HAL_RCC_OscConfig+0x4ec>)
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307e:	f7fe fa57 	bl	8001530 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003086:	f7fe fa53 	bl	8001530 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e03f      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003098:	4b22      	ldr	r3, [pc, #136]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1f0      	bne.n	8003086 <HAL_RCC_OscConfig+0x44a>
 80030a4:	e037      	b.n	8003116 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d101      	bne.n	80030b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e032      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030b2:	4b1c      	ldr	r3, [pc, #112]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d028      	beq.n	8003112 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d121      	bne.n	8003112 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d8:	429a      	cmp	r2, r3
 80030da:	d11a      	bne.n	8003112 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030e2:	4013      	ands	r3, r2
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030e8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d111      	bne.n	8003112 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f8:	085b      	lsrs	r3, r3, #1
 80030fa:	3b01      	subs	r3, #1
 80030fc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030fe:	429a      	cmp	r2, r3
 8003100:	d107      	bne.n	8003112 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800310e:	429a      	cmp	r2, r3
 8003110:	d001      	beq.n	8003116 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40007000 	.word	0x40007000
 8003124:	40023800 	.word	0x40023800
 8003128:	42470060 	.word	0x42470060

0800312c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0cc      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003140:	4b68      	ldr	r3, [pc, #416]	; (80032e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d90c      	bls.n	8003168 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314e:	4b65      	ldr	r3, [pc, #404]	; (80032e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003156:	4b63      	ldr	r3, [pc, #396]	; (80032e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d001      	beq.n	8003168 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0b8      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d020      	beq.n	80031b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003180:	4b59      	ldr	r3, [pc, #356]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	4a58      	ldr	r2, [pc, #352]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800318a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0308 	and.w	r3, r3, #8
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003198:	4b53      	ldr	r3, [pc, #332]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	4a52      	ldr	r2, [pc, #328]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a4:	4b50      	ldr	r3, [pc, #320]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	494d      	ldr	r1, [pc, #308]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d044      	beq.n	800324c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d107      	bne.n	80031da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ca:	4b47      	ldr	r3, [pc, #284]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d119      	bne.n	800320a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e07f      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d003      	beq.n	80031ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031e6:	2b03      	cmp	r3, #3
 80031e8:	d107      	bne.n	80031fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ea:	4b3f      	ldr	r3, [pc, #252]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d109      	bne.n	800320a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e06f      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fa:	4b3b      	ldr	r3, [pc, #236]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e067      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800320a:	4b37      	ldr	r3, [pc, #220]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f023 0203 	bic.w	r2, r3, #3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	4934      	ldr	r1, [pc, #208]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	4313      	orrs	r3, r2
 800321a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800321c:	f7fe f988 	bl	8001530 <HAL_GetTick>
 8003220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003222:	e00a      	b.n	800323a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003224:	f7fe f984 	bl	8001530 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003232:	4293      	cmp	r3, r2
 8003234:	d901      	bls.n	800323a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e04f      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323a:	4b2b      	ldr	r3, [pc, #172]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 020c 	and.w	r2, r3, #12
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	429a      	cmp	r2, r3
 800324a:	d1eb      	bne.n	8003224 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800324c:	4b25      	ldr	r3, [pc, #148]	; (80032e4 <HAL_RCC_ClockConfig+0x1b8>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d20c      	bcs.n	8003274 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325a:	4b22      	ldr	r3, [pc, #136]	; (80032e4 <HAL_RCC_ClockConfig+0x1b8>)
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003262:	4b20      	ldr	r3, [pc, #128]	; (80032e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	429a      	cmp	r2, r3
 800326e:	d001      	beq.n	8003274 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e032      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d008      	beq.n	8003292 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003280:	4b19      	ldr	r3, [pc, #100]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	4916      	ldr	r1, [pc, #88]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	4313      	orrs	r3, r2
 8003290:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d009      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800329e:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	490e      	ldr	r1, [pc, #56]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032b2:	f000 f821 	bl	80032f8 <HAL_RCC_GetSysClockFreq>
 80032b6:	4602      	mov	r2, r0
 80032b8:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	490a      	ldr	r1, [pc, #40]	; (80032ec <HAL_RCC_ClockConfig+0x1c0>)
 80032c4:	5ccb      	ldrb	r3, [r1, r3]
 80032c6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ca:	4a09      	ldr	r2, [pc, #36]	; (80032f0 <HAL_RCC_ClockConfig+0x1c4>)
 80032cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032ce:	4b09      	ldr	r3, [pc, #36]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fe f8e8 	bl	80014a8 <HAL_InitTick>

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40023c00 	.word	0x40023c00
 80032e8:	40023800 	.word	0x40023800
 80032ec:	080054d0 	.word	0x080054d0
 80032f0:	20000000 	.word	0x20000000
 80032f4:	20000004 	.word	0x20000004

080032f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80032fc:	b084      	sub	sp, #16
 80032fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003300:	2300      	movs	r3, #0
 8003302:	607b      	str	r3, [r7, #4]
 8003304:	2300      	movs	r3, #0
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	2300      	movs	r3, #0
 800330a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003310:	4b67      	ldr	r3, [pc, #412]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 030c 	and.w	r3, r3, #12
 8003318:	2b08      	cmp	r3, #8
 800331a:	d00d      	beq.n	8003338 <HAL_RCC_GetSysClockFreq+0x40>
 800331c:	2b08      	cmp	r3, #8
 800331e:	f200 80bd 	bhi.w	800349c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <HAL_RCC_GetSysClockFreq+0x34>
 8003326:	2b04      	cmp	r3, #4
 8003328:	d003      	beq.n	8003332 <HAL_RCC_GetSysClockFreq+0x3a>
 800332a:	e0b7      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800332c:	4b61      	ldr	r3, [pc, #388]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800332e:	60bb      	str	r3, [r7, #8]
       break;
 8003330:	e0b7      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003332:	4b61      	ldr	r3, [pc, #388]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003334:	60bb      	str	r3, [r7, #8]
      break;
 8003336:	e0b4      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003338:	4b5d      	ldr	r3, [pc, #372]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003340:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003342:	4b5b      	ldr	r3, [pc, #364]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d04d      	beq.n	80033ea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800334e:	4b58      	ldr	r3, [pc, #352]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	099b      	lsrs	r3, r3, #6
 8003354:	461a      	mov	r2, r3
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800335e:	f04f 0100 	mov.w	r1, #0
 8003362:	ea02 0800 	and.w	r8, r2, r0
 8003366:	ea03 0901 	and.w	r9, r3, r1
 800336a:	4640      	mov	r0, r8
 800336c:	4649      	mov	r1, r9
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	f04f 0300 	mov.w	r3, #0
 8003376:	014b      	lsls	r3, r1, #5
 8003378:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800337c:	0142      	lsls	r2, r0, #5
 800337e:	4610      	mov	r0, r2
 8003380:	4619      	mov	r1, r3
 8003382:	ebb0 0008 	subs.w	r0, r0, r8
 8003386:	eb61 0109 	sbc.w	r1, r1, r9
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	f04f 0300 	mov.w	r3, #0
 8003392:	018b      	lsls	r3, r1, #6
 8003394:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003398:	0182      	lsls	r2, r0, #6
 800339a:	1a12      	subs	r2, r2, r0
 800339c:	eb63 0301 	sbc.w	r3, r3, r1
 80033a0:	f04f 0000 	mov.w	r0, #0
 80033a4:	f04f 0100 	mov.w	r1, #0
 80033a8:	00d9      	lsls	r1, r3, #3
 80033aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033ae:	00d0      	lsls	r0, r2, #3
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	eb12 0208 	adds.w	r2, r2, r8
 80033b8:	eb43 0309 	adc.w	r3, r3, r9
 80033bc:	f04f 0000 	mov.w	r0, #0
 80033c0:	f04f 0100 	mov.w	r1, #0
 80033c4:	0259      	lsls	r1, r3, #9
 80033c6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80033ca:	0250      	lsls	r0, r2, #9
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4610      	mov	r0, r2
 80033d2:	4619      	mov	r1, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	461a      	mov	r2, r3
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	f7fc ff50 	bl	8000280 <__aeabi_uldivmod>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4613      	mov	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	e04a      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ea:	4b31      	ldr	r3, [pc, #196]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	099b      	lsrs	r3, r3, #6
 80033f0:	461a      	mov	r2, r3
 80033f2:	f04f 0300 	mov.w	r3, #0
 80033f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033fa:	f04f 0100 	mov.w	r1, #0
 80033fe:	ea02 0400 	and.w	r4, r2, r0
 8003402:	ea03 0501 	and.w	r5, r3, r1
 8003406:	4620      	mov	r0, r4
 8003408:	4629      	mov	r1, r5
 800340a:	f04f 0200 	mov.w	r2, #0
 800340e:	f04f 0300 	mov.w	r3, #0
 8003412:	014b      	lsls	r3, r1, #5
 8003414:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003418:	0142      	lsls	r2, r0, #5
 800341a:	4610      	mov	r0, r2
 800341c:	4619      	mov	r1, r3
 800341e:	1b00      	subs	r0, r0, r4
 8003420:	eb61 0105 	sbc.w	r1, r1, r5
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	018b      	lsls	r3, r1, #6
 800342e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003432:	0182      	lsls	r2, r0, #6
 8003434:	1a12      	subs	r2, r2, r0
 8003436:	eb63 0301 	sbc.w	r3, r3, r1
 800343a:	f04f 0000 	mov.w	r0, #0
 800343e:	f04f 0100 	mov.w	r1, #0
 8003442:	00d9      	lsls	r1, r3, #3
 8003444:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003448:	00d0      	lsls	r0, r2, #3
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	1912      	adds	r2, r2, r4
 8003450:	eb45 0303 	adc.w	r3, r5, r3
 8003454:	f04f 0000 	mov.w	r0, #0
 8003458:	f04f 0100 	mov.w	r1, #0
 800345c:	0299      	lsls	r1, r3, #10
 800345e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003462:	0290      	lsls	r0, r2, #10
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	4610      	mov	r0, r2
 800346a:	4619      	mov	r1, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	461a      	mov	r2, r3
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	f7fc ff04 	bl	8000280 <__aeabi_uldivmod>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4613      	mov	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003480:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	0c1b      	lsrs	r3, r3, #16
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	3301      	adds	r3, #1
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	fbb2 f3f3 	udiv	r3, r2, r3
 8003498:	60bb      	str	r3, [r7, #8]
      break;
 800349a:	e002      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800349c:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800349e:	60bb      	str	r3, [r7, #8]
      break;
 80034a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034a2:	68bb      	ldr	r3, [r7, #8]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80034ae:	bf00      	nop
 80034b0:	40023800 	.word	0x40023800
 80034b4:	00f42400 	.word	0x00f42400
 80034b8:	007a1200 	.word	0x007a1200

080034bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c0:	4b03      	ldr	r3, [pc, #12]	; (80034d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034c2:	681b      	ldr	r3, [r3, #0]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	20000000 	.word	0x20000000

080034d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034d8:	f7ff fff0 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 80034dc:	4602      	mov	r2, r0
 80034de:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	0a9b      	lsrs	r3, r3, #10
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	4903      	ldr	r1, [pc, #12]	; (80034f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ea:	5ccb      	ldrb	r3, [r1, r3]
 80034ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40023800 	.word	0x40023800
 80034f8:	080054e0 	.word	0x080054e0

080034fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003500:	f7ff ffdc 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 8003504:	4602      	mov	r2, r0
 8003506:	4b05      	ldr	r3, [pc, #20]	; (800351c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	0b5b      	lsrs	r3, r3, #13
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	4903      	ldr	r1, [pc, #12]	; (8003520 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003512:	5ccb      	ldrb	r3, [r1, r3]
 8003514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003518:	4618      	mov	r0, r3
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40023800 	.word	0x40023800
 8003520:	080054e0 	.word	0x080054e0

08003524 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e041      	b.n	80035ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7fd fe48 	bl	80011e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3304      	adds	r3, #4
 8003560:	4619      	mov	r1, r3
 8003562:	4610      	mov	r0, r2
 8003564:	f000 fac0 	bl	8003ae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b082      	sub	sp, #8
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e041      	b.n	8003658 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d106      	bne.n	80035ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f839 	bl	8003660 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2202      	movs	r2, #2
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3304      	adds	r3, #4
 80035fe:	4619      	mov	r1, r3
 8003600:	4610      	mov	r0, r2
 8003602:	f000 fa71 	bl	8003ae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d109      	bne.n	8003698 <HAL_TIM_PWM_Start+0x24>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b01      	cmp	r3, #1
 800368e:	bf14      	ite	ne
 8003690:	2301      	movne	r3, #1
 8003692:	2300      	moveq	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	e022      	b.n	80036de <HAL_TIM_PWM_Start+0x6a>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	2b04      	cmp	r3, #4
 800369c:	d109      	bne.n	80036b2 <HAL_TIM_PWM_Start+0x3e>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	bf14      	ite	ne
 80036aa:	2301      	movne	r3, #1
 80036ac:	2300      	moveq	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	e015      	b.n	80036de <HAL_TIM_PWM_Start+0x6a>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d109      	bne.n	80036cc <HAL_TIM_PWM_Start+0x58>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	bf14      	ite	ne
 80036c4:	2301      	movne	r3, #1
 80036c6:	2300      	moveq	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	e008      	b.n	80036de <HAL_TIM_PWM_Start+0x6a>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	bf14      	ite	ne
 80036d8:	2301      	movne	r3, #1
 80036da:	2300      	moveq	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e068      	b.n	80037b8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d104      	bne.n	80036f6 <HAL_TIM_PWM_Start+0x82>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036f4:	e013      	b.n	800371e <HAL_TIM_PWM_Start+0xaa>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d104      	bne.n	8003706 <HAL_TIM_PWM_Start+0x92>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003704:	e00b      	b.n	800371e <HAL_TIM_PWM_Start+0xaa>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b08      	cmp	r3, #8
 800370a:	d104      	bne.n	8003716 <HAL_TIM_PWM_Start+0xa2>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003714:	e003      	b.n	800371e <HAL_TIM_PWM_Start+0xaa>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2202      	movs	r2, #2
 800371a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2201      	movs	r2, #1
 8003724:	6839      	ldr	r1, [r7, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f000 fc84 	bl	8004034 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a23      	ldr	r2, [pc, #140]	; (80037c0 <HAL_TIM_PWM_Start+0x14c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d107      	bne.n	8003746 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003744:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a1d      	ldr	r2, [pc, #116]	; (80037c0 <HAL_TIM_PWM_Start+0x14c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d018      	beq.n	8003782 <HAL_TIM_PWM_Start+0x10e>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003758:	d013      	beq.n	8003782 <HAL_TIM_PWM_Start+0x10e>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a19      	ldr	r2, [pc, #100]	; (80037c4 <HAL_TIM_PWM_Start+0x150>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d00e      	beq.n	8003782 <HAL_TIM_PWM_Start+0x10e>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a17      	ldr	r2, [pc, #92]	; (80037c8 <HAL_TIM_PWM_Start+0x154>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d009      	beq.n	8003782 <HAL_TIM_PWM_Start+0x10e>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a16      	ldr	r2, [pc, #88]	; (80037cc <HAL_TIM_PWM_Start+0x158>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d004      	beq.n	8003782 <HAL_TIM_PWM_Start+0x10e>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a14      	ldr	r2, [pc, #80]	; (80037d0 <HAL_TIM_PWM_Start+0x15c>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d111      	bne.n	80037a6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2b06      	cmp	r3, #6
 8003792:	d010      	beq.n	80037b6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a4:	e007      	b.n	80037b6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f042 0201 	orr.w	r2, r2, #1
 80037b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40010000 	.word	0x40010000
 80037c4:	40000400 	.word	0x40000400
 80037c8:	40000800 	.word	0x40000800
 80037cc:	40000c00 	.word	0x40000c00
 80037d0:	40014000 	.word	0x40014000

080037d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037e0:	2300      	movs	r3, #0
 80037e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e0ae      	b.n	8003950 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b0c      	cmp	r3, #12
 80037fe:	f200 809f 	bhi.w	8003940 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003802:	a201      	add	r2, pc, #4	; (adr r2, 8003808 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003808:	0800383d 	.word	0x0800383d
 800380c:	08003941 	.word	0x08003941
 8003810:	08003941 	.word	0x08003941
 8003814:	08003941 	.word	0x08003941
 8003818:	0800387d 	.word	0x0800387d
 800381c:	08003941 	.word	0x08003941
 8003820:	08003941 	.word	0x08003941
 8003824:	08003941 	.word	0x08003941
 8003828:	080038bf 	.word	0x080038bf
 800382c:	08003941 	.word	0x08003941
 8003830:	08003941 	.word	0x08003941
 8003834:	08003941 	.word	0x08003941
 8003838:	080038ff 	.word	0x080038ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68b9      	ldr	r1, [r7, #8]
 8003842:	4618      	mov	r0, r3
 8003844:	f000 f9d0 	bl	8003be8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699a      	ldr	r2, [r3, #24]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0208 	orr.w	r2, r2, #8
 8003856:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699a      	ldr	r2, [r3, #24]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0204 	bic.w	r2, r2, #4
 8003866:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6999      	ldr	r1, [r3, #24]
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	691a      	ldr	r2, [r3, #16]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	619a      	str	r2, [r3, #24]
      break;
 800387a:	e064      	b.n	8003946 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68b9      	ldr	r1, [r7, #8]
 8003882:	4618      	mov	r0, r3
 8003884:	f000 fa16 	bl	8003cb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699a      	ldr	r2, [r3, #24]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003896:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699a      	ldr	r2, [r3, #24]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6999      	ldr	r1, [r3, #24]
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	021a      	lsls	r2, r3, #8
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	619a      	str	r2, [r3, #24]
      break;
 80038bc:	e043      	b.n	8003946 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68b9      	ldr	r1, [r7, #8]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f000 fa61 	bl	8003d8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	69da      	ldr	r2, [r3, #28]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 0208 	orr.w	r2, r2, #8
 80038d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	69da      	ldr	r2, [r3, #28]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0204 	bic.w	r2, r2, #4
 80038e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69d9      	ldr	r1, [r3, #28]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	61da      	str	r2, [r3, #28]
      break;
 80038fc:	e023      	b.n	8003946 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68b9      	ldr	r1, [r7, #8]
 8003904:	4618      	mov	r0, r3
 8003906:	f000 faab 	bl	8003e60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	69da      	ldr	r2, [r3, #28]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003918:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	69da      	ldr	r2, [r3, #28]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003928:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	69d9      	ldr	r1, [r3, #28]
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	021a      	lsls	r2, r3, #8
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	61da      	str	r2, [r3, #28]
      break;
 800393e:	e002      	b.n	8003946 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	75fb      	strb	r3, [r7, #23]
      break;
 8003944:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800394e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800396c:	2b01      	cmp	r3, #1
 800396e:	d101      	bne.n	8003974 <HAL_TIM_ConfigClockSource+0x1c>
 8003970:	2302      	movs	r3, #2
 8003972:	e0b4      	b.n	8003ade <HAL_TIM_ConfigClockSource+0x186>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2202      	movs	r2, #2
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003992:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800399a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ac:	d03e      	beq.n	8003a2c <HAL_TIM_ConfigClockSource+0xd4>
 80039ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039b2:	f200 8087 	bhi.w	8003ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80039b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ba:	f000 8086 	beq.w	8003aca <HAL_TIM_ConfigClockSource+0x172>
 80039be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c2:	d87f      	bhi.n	8003ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80039c4:	2b70      	cmp	r3, #112	; 0x70
 80039c6:	d01a      	beq.n	80039fe <HAL_TIM_ConfigClockSource+0xa6>
 80039c8:	2b70      	cmp	r3, #112	; 0x70
 80039ca:	d87b      	bhi.n	8003ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80039cc:	2b60      	cmp	r3, #96	; 0x60
 80039ce:	d050      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0x11a>
 80039d0:	2b60      	cmp	r3, #96	; 0x60
 80039d2:	d877      	bhi.n	8003ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80039d4:	2b50      	cmp	r3, #80	; 0x50
 80039d6:	d03c      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0xfa>
 80039d8:	2b50      	cmp	r3, #80	; 0x50
 80039da:	d873      	bhi.n	8003ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80039dc:	2b40      	cmp	r3, #64	; 0x40
 80039de:	d058      	beq.n	8003a92 <HAL_TIM_ConfigClockSource+0x13a>
 80039e0:	2b40      	cmp	r3, #64	; 0x40
 80039e2:	d86f      	bhi.n	8003ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80039e4:	2b30      	cmp	r3, #48	; 0x30
 80039e6:	d064      	beq.n	8003ab2 <HAL_TIM_ConfigClockSource+0x15a>
 80039e8:	2b30      	cmp	r3, #48	; 0x30
 80039ea:	d86b      	bhi.n	8003ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80039ec:	2b20      	cmp	r3, #32
 80039ee:	d060      	beq.n	8003ab2 <HAL_TIM_ConfigClockSource+0x15a>
 80039f0:	2b20      	cmp	r3, #32
 80039f2:	d867      	bhi.n	8003ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d05c      	beq.n	8003ab2 <HAL_TIM_ConfigClockSource+0x15a>
 80039f8:	2b10      	cmp	r3, #16
 80039fa:	d05a      	beq.n	8003ab2 <HAL_TIM_ConfigClockSource+0x15a>
 80039fc:	e062      	b.n	8003ac4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	6899      	ldr	r1, [r3, #8]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f000 faf1 	bl	8003ff4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	609a      	str	r2, [r3, #8]
      break;
 8003a2a:	e04f      	b.n	8003acc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6818      	ldr	r0, [r3, #0]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	6899      	ldr	r1, [r3, #8]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f000 fada 	bl	8003ff4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689a      	ldr	r2, [r3, #8]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a4e:	609a      	str	r2, [r3, #8]
      break;
 8003a50:	e03c      	b.n	8003acc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	6859      	ldr	r1, [r3, #4]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f000 fa4e 	bl	8003f00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2150      	movs	r1, #80	; 0x50
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 faa7 	bl	8003fbe <TIM_ITRx_SetConfig>
      break;
 8003a70:	e02c      	b.n	8003acc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6818      	ldr	r0, [r3, #0]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	6859      	ldr	r1, [r3, #4]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f000 fa6d 	bl	8003f5e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2160      	movs	r1, #96	; 0x60
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fa97 	bl	8003fbe <TIM_ITRx_SetConfig>
      break;
 8003a90:	e01c      	b.n	8003acc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6818      	ldr	r0, [r3, #0]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	6859      	ldr	r1, [r3, #4]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	f000 fa2e 	bl	8003f00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2140      	movs	r1, #64	; 0x40
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 fa87 	bl	8003fbe <TIM_ITRx_SetConfig>
      break;
 8003ab0:	e00c      	b.n	8003acc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4619      	mov	r1, r3
 8003abc:	4610      	mov	r0, r2
 8003abe:	f000 fa7e 	bl	8003fbe <TIM_ITRx_SetConfig>
      break;
 8003ac2:	e003      	b.n	8003acc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac8:	e000      	b.n	8003acc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003aca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a34      	ldr	r2, [pc, #208]	; (8003bcc <TIM_Base_SetConfig+0xe4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d00f      	beq.n	8003b20 <TIM_Base_SetConfig+0x38>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b06:	d00b      	beq.n	8003b20 <TIM_Base_SetConfig+0x38>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a31      	ldr	r2, [pc, #196]	; (8003bd0 <TIM_Base_SetConfig+0xe8>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d007      	beq.n	8003b20 <TIM_Base_SetConfig+0x38>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a30      	ldr	r2, [pc, #192]	; (8003bd4 <TIM_Base_SetConfig+0xec>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d003      	beq.n	8003b20 <TIM_Base_SetConfig+0x38>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a2f      	ldr	r2, [pc, #188]	; (8003bd8 <TIM_Base_SetConfig+0xf0>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d108      	bne.n	8003b32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a25      	ldr	r2, [pc, #148]	; (8003bcc <TIM_Base_SetConfig+0xe4>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d01b      	beq.n	8003b72 <TIM_Base_SetConfig+0x8a>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b40:	d017      	beq.n	8003b72 <TIM_Base_SetConfig+0x8a>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a22      	ldr	r2, [pc, #136]	; (8003bd0 <TIM_Base_SetConfig+0xe8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d013      	beq.n	8003b72 <TIM_Base_SetConfig+0x8a>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a21      	ldr	r2, [pc, #132]	; (8003bd4 <TIM_Base_SetConfig+0xec>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00f      	beq.n	8003b72 <TIM_Base_SetConfig+0x8a>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a20      	ldr	r2, [pc, #128]	; (8003bd8 <TIM_Base_SetConfig+0xf0>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d00b      	beq.n	8003b72 <TIM_Base_SetConfig+0x8a>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a1f      	ldr	r2, [pc, #124]	; (8003bdc <TIM_Base_SetConfig+0xf4>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d007      	beq.n	8003b72 <TIM_Base_SetConfig+0x8a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a1e      	ldr	r2, [pc, #120]	; (8003be0 <TIM_Base_SetConfig+0xf8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d003      	beq.n	8003b72 <TIM_Base_SetConfig+0x8a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a1d      	ldr	r2, [pc, #116]	; (8003be4 <TIM_Base_SetConfig+0xfc>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d108      	bne.n	8003b84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a08      	ldr	r2, [pc, #32]	; (8003bcc <TIM_Base_SetConfig+0xe4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d103      	bne.n	8003bb8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	691a      	ldr	r2, [r3, #16]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	615a      	str	r2, [r3, #20]
}
 8003bbe:	bf00      	nop
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	40010000 	.word	0x40010000
 8003bd0:	40000400 	.word	0x40000400
 8003bd4:	40000800 	.word	0x40000800
 8003bd8:	40000c00 	.word	0x40000c00
 8003bdc:	40014000 	.word	0x40014000
 8003be0:	40014400 	.word	0x40014400
 8003be4:	40014800 	.word	0x40014800

08003be8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	f023 0201 	bic.w	r2, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f023 0303 	bic.w	r3, r3, #3
 8003c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f023 0302 	bic.w	r3, r3, #2
 8003c30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a1c      	ldr	r2, [pc, #112]	; (8003cb0 <TIM_OC1_SetConfig+0xc8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d10c      	bne.n	8003c5e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	f023 0308 	bic.w	r3, r3, #8
 8003c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f023 0304 	bic.w	r3, r3, #4
 8003c5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a13      	ldr	r2, [pc, #76]	; (8003cb0 <TIM_OC1_SetConfig+0xc8>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d111      	bne.n	8003c8a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	621a      	str	r2, [r3, #32]
}
 8003ca4:	bf00      	nop
 8003ca6:	371c      	adds	r7, #28
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	40010000 	.word	0x40010000

08003cb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	f023 0210 	bic.w	r2, r3, #16
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	021b      	lsls	r3, r3, #8
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f023 0320 	bic.w	r3, r3, #32
 8003cfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a1e      	ldr	r2, [pc, #120]	; (8003d88 <TIM_OC2_SetConfig+0xd4>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d10d      	bne.n	8003d30 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a15      	ldr	r2, [pc, #84]	; (8003d88 <TIM_OC2_SetConfig+0xd4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d113      	bne.n	8003d60 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	621a      	str	r2, [r3, #32]
}
 8003d7a:	bf00      	nop
 8003d7c:	371c      	adds	r7, #28
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	40010000 	.word	0x40010000

08003d8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f023 0303 	bic.w	r3, r3, #3
 8003dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	021b      	lsls	r3, r3, #8
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a1d      	ldr	r2, [pc, #116]	; (8003e5c <TIM_OC3_SetConfig+0xd0>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d10d      	bne.n	8003e06 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003df0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	021b      	lsls	r3, r3, #8
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a14      	ldr	r2, [pc, #80]	; (8003e5c <TIM_OC3_SetConfig+0xd0>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d113      	bne.n	8003e36 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	011b      	lsls	r3, r3, #4
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	621a      	str	r2, [r3, #32]
}
 8003e50:	bf00      	nop
 8003e52:	371c      	adds	r7, #28
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	40010000 	.word	0x40010000

08003e60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	021b      	lsls	r3, r3, #8
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003eaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	031b      	lsls	r3, r3, #12
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a10      	ldr	r2, [pc, #64]	; (8003efc <TIM_OC4_SetConfig+0x9c>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d109      	bne.n	8003ed4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ec6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	019b      	lsls	r3, r3, #6
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	621a      	str	r2, [r3, #32]
}
 8003eee:	bf00      	nop
 8003ef0:	371c      	adds	r7, #28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40010000 	.word	0x40010000

08003f00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	f023 0201 	bic.w	r2, r3, #1
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f023 030a 	bic.w	r3, r3, #10
 8003f3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	621a      	str	r2, [r3, #32]
}
 8003f52:	bf00      	nop
 8003f54:	371c      	adds	r7, #28
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b087      	sub	sp, #28
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	f023 0210 	bic.w	r2, r3, #16
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	031b      	lsls	r3, r3, #12
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	621a      	str	r2, [r3, #32]
}
 8003fb2:	bf00      	nop
 8003fb4:	371c      	adds	r7, #28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b085      	sub	sp, #20
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f043 0307 	orr.w	r3, r3, #7
 8003fe0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	609a      	str	r2, [r3, #8]
}
 8003fe8:	bf00      	nop
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b087      	sub	sp, #28
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
 8004000:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800400e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	021a      	lsls	r2, r3, #8
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	431a      	orrs	r2, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	4313      	orrs	r3, r2
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	4313      	orrs	r3, r2
 8004020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	609a      	str	r2, [r3, #8]
}
 8004028:	bf00      	nop
 800402a:	371c      	adds	r7, #28
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004034:	b480      	push	{r7}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	f003 031f 	and.w	r3, r3, #31
 8004046:	2201      	movs	r2, #1
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a1a      	ldr	r2, [r3, #32]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	43db      	mvns	r3, r3
 8004056:	401a      	ands	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a1a      	ldr	r2, [r3, #32]
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f003 031f 	and.w	r3, r3, #31
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	fa01 f303 	lsl.w	r3, r1, r3
 800406c:	431a      	orrs	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	621a      	str	r2, [r3, #32]
}
 8004072:	bf00      	nop
 8004074:	371c      	adds	r7, #28
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
	...

08004080 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004090:	2b01      	cmp	r3, #1
 8004092:	d101      	bne.n	8004098 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004094:	2302      	movs	r3, #2
 8004096:	e050      	b.n	800413a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a1c      	ldr	r2, [pc, #112]	; (8004148 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d018      	beq.n	800410e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e4:	d013      	beq.n	800410e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a18      	ldr	r2, [pc, #96]	; (800414c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d00e      	beq.n	800410e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a16      	ldr	r2, [pc, #88]	; (8004150 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d009      	beq.n	800410e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a15      	ldr	r2, [pc, #84]	; (8004154 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d004      	beq.n	800410e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a13      	ldr	r2, [pc, #76]	; (8004158 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d10c      	bne.n	8004128 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004114:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	4313      	orrs	r3, r2
 800411e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	40010000 	.word	0x40010000
 800414c:	40000400 	.word	0x40000400
 8004150:	40000800 	.word	0x40000800
 8004154:	40000c00 	.word	0x40000c00
 8004158:	40014000 	.word	0x40014000

0800415c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e03f      	b.n	80041ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d106      	bne.n	8004188 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7fd f8fc 	bl	8001380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2224      	movs	r2, #36	; 0x24
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800419e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f829 	bl	80041f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	695a      	ldr	r2, [r3, #20]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2220      	movs	r2, #32
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
	...

080041f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041fc:	b09f      	sub	sp, #124	; 0x7c
 80041fe:	af00      	add	r7, sp, #0
 8004200:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800420c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800420e:	68d9      	ldr	r1, [r3, #12]
 8004210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	ea40 0301 	orr.w	r3, r0, r1
 8004218:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800421a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800421c:	689a      	ldr	r2, [r3, #8]
 800421e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	431a      	orrs	r2, r3
 8004224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	431a      	orrs	r2, r3
 800422a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	4313      	orrs	r3, r2
 8004230:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800423c:	f021 010c 	bic.w	r1, r1, #12
 8004240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004246:	430b      	orrs	r3, r1
 8004248:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800424a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004256:	6999      	ldr	r1, [r3, #24]
 8004258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	ea40 0301 	orr.w	r3, r0, r1
 8004260:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	4bc5      	ldr	r3, [pc, #788]	; (800457c <UART_SetConfig+0x384>)
 8004268:	429a      	cmp	r2, r3
 800426a:	d004      	beq.n	8004276 <UART_SetConfig+0x7e>
 800426c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	4bc3      	ldr	r3, [pc, #780]	; (8004580 <UART_SetConfig+0x388>)
 8004272:	429a      	cmp	r2, r3
 8004274:	d103      	bne.n	800427e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004276:	f7ff f941 	bl	80034fc <HAL_RCC_GetPCLK2Freq>
 800427a:	6778      	str	r0, [r7, #116]	; 0x74
 800427c:	e002      	b.n	8004284 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800427e:	f7ff f929 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 8004282:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004286:	69db      	ldr	r3, [r3, #28]
 8004288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800428c:	f040 80b6 	bne.w	80043fc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004290:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004292:	461c      	mov	r4, r3
 8004294:	f04f 0500 	mov.w	r5, #0
 8004298:	4622      	mov	r2, r4
 800429a:	462b      	mov	r3, r5
 800429c:	1891      	adds	r1, r2, r2
 800429e:	6439      	str	r1, [r7, #64]	; 0x40
 80042a0:	415b      	adcs	r3, r3
 80042a2:	647b      	str	r3, [r7, #68]	; 0x44
 80042a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042a8:	1912      	adds	r2, r2, r4
 80042aa:	eb45 0303 	adc.w	r3, r5, r3
 80042ae:	f04f 0000 	mov.w	r0, #0
 80042b2:	f04f 0100 	mov.w	r1, #0
 80042b6:	00d9      	lsls	r1, r3, #3
 80042b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042bc:	00d0      	lsls	r0, r2, #3
 80042be:	4602      	mov	r2, r0
 80042c0:	460b      	mov	r3, r1
 80042c2:	1911      	adds	r1, r2, r4
 80042c4:	6639      	str	r1, [r7, #96]	; 0x60
 80042c6:	416b      	adcs	r3, r5
 80042c8:	667b      	str	r3, [r7, #100]	; 0x64
 80042ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	461a      	mov	r2, r3
 80042d0:	f04f 0300 	mov.w	r3, #0
 80042d4:	1891      	adds	r1, r2, r2
 80042d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80042d8:	415b      	adcs	r3, r3
 80042da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80042e0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80042e4:	f7fb ffcc 	bl	8000280 <__aeabi_uldivmod>
 80042e8:	4602      	mov	r2, r0
 80042ea:	460b      	mov	r3, r1
 80042ec:	4ba5      	ldr	r3, [pc, #660]	; (8004584 <UART_SetConfig+0x38c>)
 80042ee:	fba3 2302 	umull	r2, r3, r3, r2
 80042f2:	095b      	lsrs	r3, r3, #5
 80042f4:	011e      	lsls	r6, r3, #4
 80042f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042f8:	461c      	mov	r4, r3
 80042fa:	f04f 0500 	mov.w	r5, #0
 80042fe:	4622      	mov	r2, r4
 8004300:	462b      	mov	r3, r5
 8004302:	1891      	adds	r1, r2, r2
 8004304:	6339      	str	r1, [r7, #48]	; 0x30
 8004306:	415b      	adcs	r3, r3
 8004308:	637b      	str	r3, [r7, #52]	; 0x34
 800430a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800430e:	1912      	adds	r2, r2, r4
 8004310:	eb45 0303 	adc.w	r3, r5, r3
 8004314:	f04f 0000 	mov.w	r0, #0
 8004318:	f04f 0100 	mov.w	r1, #0
 800431c:	00d9      	lsls	r1, r3, #3
 800431e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004322:	00d0      	lsls	r0, r2, #3
 8004324:	4602      	mov	r2, r0
 8004326:	460b      	mov	r3, r1
 8004328:	1911      	adds	r1, r2, r4
 800432a:	65b9      	str	r1, [r7, #88]	; 0x58
 800432c:	416b      	adcs	r3, r5
 800432e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	461a      	mov	r2, r3
 8004336:	f04f 0300 	mov.w	r3, #0
 800433a:	1891      	adds	r1, r2, r2
 800433c:	62b9      	str	r1, [r7, #40]	; 0x28
 800433e:	415b      	adcs	r3, r3
 8004340:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004342:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004346:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800434a:	f7fb ff99 	bl	8000280 <__aeabi_uldivmod>
 800434e:	4602      	mov	r2, r0
 8004350:	460b      	mov	r3, r1
 8004352:	4b8c      	ldr	r3, [pc, #560]	; (8004584 <UART_SetConfig+0x38c>)
 8004354:	fba3 1302 	umull	r1, r3, r3, r2
 8004358:	095b      	lsrs	r3, r3, #5
 800435a:	2164      	movs	r1, #100	; 0x64
 800435c:	fb01 f303 	mul.w	r3, r1, r3
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	3332      	adds	r3, #50	; 0x32
 8004366:	4a87      	ldr	r2, [pc, #540]	; (8004584 <UART_SetConfig+0x38c>)
 8004368:	fba2 2303 	umull	r2, r3, r2, r3
 800436c:	095b      	lsrs	r3, r3, #5
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004374:	441e      	add	r6, r3
 8004376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004378:	4618      	mov	r0, r3
 800437a:	f04f 0100 	mov.w	r1, #0
 800437e:	4602      	mov	r2, r0
 8004380:	460b      	mov	r3, r1
 8004382:	1894      	adds	r4, r2, r2
 8004384:	623c      	str	r4, [r7, #32]
 8004386:	415b      	adcs	r3, r3
 8004388:	627b      	str	r3, [r7, #36]	; 0x24
 800438a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800438e:	1812      	adds	r2, r2, r0
 8004390:	eb41 0303 	adc.w	r3, r1, r3
 8004394:	f04f 0400 	mov.w	r4, #0
 8004398:	f04f 0500 	mov.w	r5, #0
 800439c:	00dd      	lsls	r5, r3, #3
 800439e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80043a2:	00d4      	lsls	r4, r2, #3
 80043a4:	4622      	mov	r2, r4
 80043a6:	462b      	mov	r3, r5
 80043a8:	1814      	adds	r4, r2, r0
 80043aa:	653c      	str	r4, [r7, #80]	; 0x50
 80043ac:	414b      	adcs	r3, r1
 80043ae:	657b      	str	r3, [r7, #84]	; 0x54
 80043b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	461a      	mov	r2, r3
 80043b6:	f04f 0300 	mov.w	r3, #0
 80043ba:	1891      	adds	r1, r2, r2
 80043bc:	61b9      	str	r1, [r7, #24]
 80043be:	415b      	adcs	r3, r3
 80043c0:	61fb      	str	r3, [r7, #28]
 80043c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80043ca:	f7fb ff59 	bl	8000280 <__aeabi_uldivmod>
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	4b6c      	ldr	r3, [pc, #432]	; (8004584 <UART_SetConfig+0x38c>)
 80043d4:	fba3 1302 	umull	r1, r3, r3, r2
 80043d8:	095b      	lsrs	r3, r3, #5
 80043da:	2164      	movs	r1, #100	; 0x64
 80043dc:	fb01 f303 	mul.w	r3, r1, r3
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	3332      	adds	r3, #50	; 0x32
 80043e6:	4a67      	ldr	r2, [pc, #412]	; (8004584 <UART_SetConfig+0x38c>)
 80043e8:	fba2 2303 	umull	r2, r3, r2, r3
 80043ec:	095b      	lsrs	r3, r3, #5
 80043ee:	f003 0207 	and.w	r2, r3, #7
 80043f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4432      	add	r2, r6
 80043f8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043fa:	e0b9      	b.n	8004570 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043fe:	461c      	mov	r4, r3
 8004400:	f04f 0500 	mov.w	r5, #0
 8004404:	4622      	mov	r2, r4
 8004406:	462b      	mov	r3, r5
 8004408:	1891      	adds	r1, r2, r2
 800440a:	6139      	str	r1, [r7, #16]
 800440c:	415b      	adcs	r3, r3
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004414:	1912      	adds	r2, r2, r4
 8004416:	eb45 0303 	adc.w	r3, r5, r3
 800441a:	f04f 0000 	mov.w	r0, #0
 800441e:	f04f 0100 	mov.w	r1, #0
 8004422:	00d9      	lsls	r1, r3, #3
 8004424:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004428:	00d0      	lsls	r0, r2, #3
 800442a:	4602      	mov	r2, r0
 800442c:	460b      	mov	r3, r1
 800442e:	eb12 0804 	adds.w	r8, r2, r4
 8004432:	eb43 0905 	adc.w	r9, r3, r5
 8004436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	4618      	mov	r0, r3
 800443c:	f04f 0100 	mov.w	r1, #0
 8004440:	f04f 0200 	mov.w	r2, #0
 8004444:	f04f 0300 	mov.w	r3, #0
 8004448:	008b      	lsls	r3, r1, #2
 800444a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800444e:	0082      	lsls	r2, r0, #2
 8004450:	4640      	mov	r0, r8
 8004452:	4649      	mov	r1, r9
 8004454:	f7fb ff14 	bl	8000280 <__aeabi_uldivmod>
 8004458:	4602      	mov	r2, r0
 800445a:	460b      	mov	r3, r1
 800445c:	4b49      	ldr	r3, [pc, #292]	; (8004584 <UART_SetConfig+0x38c>)
 800445e:	fba3 2302 	umull	r2, r3, r3, r2
 8004462:	095b      	lsrs	r3, r3, #5
 8004464:	011e      	lsls	r6, r3, #4
 8004466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004468:	4618      	mov	r0, r3
 800446a:	f04f 0100 	mov.w	r1, #0
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	1894      	adds	r4, r2, r2
 8004474:	60bc      	str	r4, [r7, #8]
 8004476:	415b      	adcs	r3, r3
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800447e:	1812      	adds	r2, r2, r0
 8004480:	eb41 0303 	adc.w	r3, r1, r3
 8004484:	f04f 0400 	mov.w	r4, #0
 8004488:	f04f 0500 	mov.w	r5, #0
 800448c:	00dd      	lsls	r5, r3, #3
 800448e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004492:	00d4      	lsls	r4, r2, #3
 8004494:	4622      	mov	r2, r4
 8004496:	462b      	mov	r3, r5
 8004498:	1814      	adds	r4, r2, r0
 800449a:	64bc      	str	r4, [r7, #72]	; 0x48
 800449c:	414b      	adcs	r3, r1
 800449e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f04f 0100 	mov.w	r1, #0
 80044aa:	f04f 0200 	mov.w	r2, #0
 80044ae:	f04f 0300 	mov.w	r3, #0
 80044b2:	008b      	lsls	r3, r1, #2
 80044b4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80044b8:	0082      	lsls	r2, r0, #2
 80044ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80044be:	f7fb fedf 	bl	8000280 <__aeabi_uldivmod>
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	4b2f      	ldr	r3, [pc, #188]	; (8004584 <UART_SetConfig+0x38c>)
 80044c8:	fba3 1302 	umull	r1, r3, r3, r2
 80044cc:	095b      	lsrs	r3, r3, #5
 80044ce:	2164      	movs	r1, #100	; 0x64
 80044d0:	fb01 f303 	mul.w	r3, r1, r3
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	3332      	adds	r3, #50	; 0x32
 80044da:	4a2a      	ldr	r2, [pc, #168]	; (8004584 <UART_SetConfig+0x38c>)
 80044dc:	fba2 2303 	umull	r2, r3, r2, r3
 80044e0:	095b      	lsrs	r3, r3, #5
 80044e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044e6:	441e      	add	r6, r3
 80044e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044ea:	4618      	mov	r0, r3
 80044ec:	f04f 0100 	mov.w	r1, #0
 80044f0:	4602      	mov	r2, r0
 80044f2:	460b      	mov	r3, r1
 80044f4:	1894      	adds	r4, r2, r2
 80044f6:	603c      	str	r4, [r7, #0]
 80044f8:	415b      	adcs	r3, r3
 80044fa:	607b      	str	r3, [r7, #4]
 80044fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004500:	1812      	adds	r2, r2, r0
 8004502:	eb41 0303 	adc.w	r3, r1, r3
 8004506:	f04f 0400 	mov.w	r4, #0
 800450a:	f04f 0500 	mov.w	r5, #0
 800450e:	00dd      	lsls	r5, r3, #3
 8004510:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004514:	00d4      	lsls	r4, r2, #3
 8004516:	4622      	mov	r2, r4
 8004518:	462b      	mov	r3, r5
 800451a:	eb12 0a00 	adds.w	sl, r2, r0
 800451e:	eb43 0b01 	adc.w	fp, r3, r1
 8004522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	4618      	mov	r0, r3
 8004528:	f04f 0100 	mov.w	r1, #0
 800452c:	f04f 0200 	mov.w	r2, #0
 8004530:	f04f 0300 	mov.w	r3, #0
 8004534:	008b      	lsls	r3, r1, #2
 8004536:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800453a:	0082      	lsls	r2, r0, #2
 800453c:	4650      	mov	r0, sl
 800453e:	4659      	mov	r1, fp
 8004540:	f7fb fe9e 	bl	8000280 <__aeabi_uldivmod>
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	4b0e      	ldr	r3, [pc, #56]	; (8004584 <UART_SetConfig+0x38c>)
 800454a:	fba3 1302 	umull	r1, r3, r3, r2
 800454e:	095b      	lsrs	r3, r3, #5
 8004550:	2164      	movs	r1, #100	; 0x64
 8004552:	fb01 f303 	mul.w	r3, r1, r3
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	3332      	adds	r3, #50	; 0x32
 800455c:	4a09      	ldr	r2, [pc, #36]	; (8004584 <UART_SetConfig+0x38c>)
 800455e:	fba2 2303 	umull	r2, r3, r2, r3
 8004562:	095b      	lsrs	r3, r3, #5
 8004564:	f003 020f 	and.w	r2, r3, #15
 8004568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4432      	add	r2, r6
 800456e:	609a      	str	r2, [r3, #8]
}
 8004570:	bf00      	nop
 8004572:	377c      	adds	r7, #124	; 0x7c
 8004574:	46bd      	mov	sp, r7
 8004576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800457a:	bf00      	nop
 800457c:	40011000 	.word	0x40011000
 8004580:	40011400 	.word	0x40011400
 8004584:	51eb851f 	.word	0x51eb851f

08004588 <__errno>:
 8004588:	4b01      	ldr	r3, [pc, #4]	; (8004590 <__errno+0x8>)
 800458a:	6818      	ldr	r0, [r3, #0]
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	2000000c 	.word	0x2000000c

08004594 <__libc_init_array>:
 8004594:	b570      	push	{r4, r5, r6, lr}
 8004596:	4d0d      	ldr	r5, [pc, #52]	; (80045cc <__libc_init_array+0x38>)
 8004598:	4c0d      	ldr	r4, [pc, #52]	; (80045d0 <__libc_init_array+0x3c>)
 800459a:	1b64      	subs	r4, r4, r5
 800459c:	10a4      	asrs	r4, r4, #2
 800459e:	2600      	movs	r6, #0
 80045a0:	42a6      	cmp	r6, r4
 80045a2:	d109      	bne.n	80045b8 <__libc_init_array+0x24>
 80045a4:	4d0b      	ldr	r5, [pc, #44]	; (80045d4 <__libc_init_array+0x40>)
 80045a6:	4c0c      	ldr	r4, [pc, #48]	; (80045d8 <__libc_init_array+0x44>)
 80045a8:	f000 ff7e 	bl	80054a8 <_init>
 80045ac:	1b64      	subs	r4, r4, r5
 80045ae:	10a4      	asrs	r4, r4, #2
 80045b0:	2600      	movs	r6, #0
 80045b2:	42a6      	cmp	r6, r4
 80045b4:	d105      	bne.n	80045c2 <__libc_init_array+0x2e>
 80045b6:	bd70      	pop	{r4, r5, r6, pc}
 80045b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045bc:	4798      	blx	r3
 80045be:	3601      	adds	r6, #1
 80045c0:	e7ee      	b.n	80045a0 <__libc_init_array+0xc>
 80045c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c6:	4798      	blx	r3
 80045c8:	3601      	adds	r6, #1
 80045ca:	e7f2      	b.n	80045b2 <__libc_init_array+0x1e>
 80045cc:	08005590 	.word	0x08005590
 80045d0:	08005590 	.word	0x08005590
 80045d4:	08005590 	.word	0x08005590
 80045d8:	08005594 	.word	0x08005594

080045dc <malloc>:
 80045dc:	4b02      	ldr	r3, [pc, #8]	; (80045e8 <malloc+0xc>)
 80045de:	4601      	mov	r1, r0
 80045e0:	6818      	ldr	r0, [r3, #0]
 80045e2:	f000 b85b 	b.w	800469c <_malloc_r>
 80045e6:	bf00      	nop
 80045e8:	2000000c 	.word	0x2000000c

080045ec <memset>:
 80045ec:	4402      	add	r2, r0
 80045ee:	4603      	mov	r3, r0
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d100      	bne.n	80045f6 <memset+0xa>
 80045f4:	4770      	bx	lr
 80045f6:	f803 1b01 	strb.w	r1, [r3], #1
 80045fa:	e7f9      	b.n	80045f0 <memset+0x4>

080045fc <_free_r>:
 80045fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045fe:	2900      	cmp	r1, #0
 8004600:	d048      	beq.n	8004694 <_free_r+0x98>
 8004602:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004606:	9001      	str	r0, [sp, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	f1a1 0404 	sub.w	r4, r1, #4
 800460e:	bfb8      	it	lt
 8004610:	18e4      	addlt	r4, r4, r3
 8004612:	f000 f9bd 	bl	8004990 <__malloc_lock>
 8004616:	4a20      	ldr	r2, [pc, #128]	; (8004698 <_free_r+0x9c>)
 8004618:	9801      	ldr	r0, [sp, #4]
 800461a:	6813      	ldr	r3, [r2, #0]
 800461c:	4615      	mov	r5, r2
 800461e:	b933      	cbnz	r3, 800462e <_free_r+0x32>
 8004620:	6063      	str	r3, [r4, #4]
 8004622:	6014      	str	r4, [r2, #0]
 8004624:	b003      	add	sp, #12
 8004626:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800462a:	f000 b9b7 	b.w	800499c <__malloc_unlock>
 800462e:	42a3      	cmp	r3, r4
 8004630:	d90b      	bls.n	800464a <_free_r+0x4e>
 8004632:	6821      	ldr	r1, [r4, #0]
 8004634:	1862      	adds	r2, r4, r1
 8004636:	4293      	cmp	r3, r2
 8004638:	bf04      	itt	eq
 800463a:	681a      	ldreq	r2, [r3, #0]
 800463c:	685b      	ldreq	r3, [r3, #4]
 800463e:	6063      	str	r3, [r4, #4]
 8004640:	bf04      	itt	eq
 8004642:	1852      	addeq	r2, r2, r1
 8004644:	6022      	streq	r2, [r4, #0]
 8004646:	602c      	str	r4, [r5, #0]
 8004648:	e7ec      	b.n	8004624 <_free_r+0x28>
 800464a:	461a      	mov	r2, r3
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	b10b      	cbz	r3, 8004654 <_free_r+0x58>
 8004650:	42a3      	cmp	r3, r4
 8004652:	d9fa      	bls.n	800464a <_free_r+0x4e>
 8004654:	6811      	ldr	r1, [r2, #0]
 8004656:	1855      	adds	r5, r2, r1
 8004658:	42a5      	cmp	r5, r4
 800465a:	d10b      	bne.n	8004674 <_free_r+0x78>
 800465c:	6824      	ldr	r4, [r4, #0]
 800465e:	4421      	add	r1, r4
 8004660:	1854      	adds	r4, r2, r1
 8004662:	42a3      	cmp	r3, r4
 8004664:	6011      	str	r1, [r2, #0]
 8004666:	d1dd      	bne.n	8004624 <_free_r+0x28>
 8004668:	681c      	ldr	r4, [r3, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	6053      	str	r3, [r2, #4]
 800466e:	4421      	add	r1, r4
 8004670:	6011      	str	r1, [r2, #0]
 8004672:	e7d7      	b.n	8004624 <_free_r+0x28>
 8004674:	d902      	bls.n	800467c <_free_r+0x80>
 8004676:	230c      	movs	r3, #12
 8004678:	6003      	str	r3, [r0, #0]
 800467a:	e7d3      	b.n	8004624 <_free_r+0x28>
 800467c:	6825      	ldr	r5, [r4, #0]
 800467e:	1961      	adds	r1, r4, r5
 8004680:	428b      	cmp	r3, r1
 8004682:	bf04      	itt	eq
 8004684:	6819      	ldreq	r1, [r3, #0]
 8004686:	685b      	ldreq	r3, [r3, #4]
 8004688:	6063      	str	r3, [r4, #4]
 800468a:	bf04      	itt	eq
 800468c:	1949      	addeq	r1, r1, r5
 800468e:	6021      	streq	r1, [r4, #0]
 8004690:	6054      	str	r4, [r2, #4]
 8004692:	e7c7      	b.n	8004624 <_free_r+0x28>
 8004694:	b003      	add	sp, #12
 8004696:	bd30      	pop	{r4, r5, pc}
 8004698:	2000009c 	.word	0x2000009c

0800469c <_malloc_r>:
 800469c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469e:	1ccd      	adds	r5, r1, #3
 80046a0:	f025 0503 	bic.w	r5, r5, #3
 80046a4:	3508      	adds	r5, #8
 80046a6:	2d0c      	cmp	r5, #12
 80046a8:	bf38      	it	cc
 80046aa:	250c      	movcc	r5, #12
 80046ac:	2d00      	cmp	r5, #0
 80046ae:	4606      	mov	r6, r0
 80046b0:	db01      	blt.n	80046b6 <_malloc_r+0x1a>
 80046b2:	42a9      	cmp	r1, r5
 80046b4:	d903      	bls.n	80046be <_malloc_r+0x22>
 80046b6:	230c      	movs	r3, #12
 80046b8:	6033      	str	r3, [r6, #0]
 80046ba:	2000      	movs	r0, #0
 80046bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046be:	f000 f967 	bl	8004990 <__malloc_lock>
 80046c2:	4921      	ldr	r1, [pc, #132]	; (8004748 <_malloc_r+0xac>)
 80046c4:	680a      	ldr	r2, [r1, #0]
 80046c6:	4614      	mov	r4, r2
 80046c8:	b99c      	cbnz	r4, 80046f2 <_malloc_r+0x56>
 80046ca:	4f20      	ldr	r7, [pc, #128]	; (800474c <_malloc_r+0xb0>)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	b923      	cbnz	r3, 80046da <_malloc_r+0x3e>
 80046d0:	4621      	mov	r1, r4
 80046d2:	4630      	mov	r0, r6
 80046d4:	f000 f854 	bl	8004780 <_sbrk_r>
 80046d8:	6038      	str	r0, [r7, #0]
 80046da:	4629      	mov	r1, r5
 80046dc:	4630      	mov	r0, r6
 80046de:	f000 f84f 	bl	8004780 <_sbrk_r>
 80046e2:	1c43      	adds	r3, r0, #1
 80046e4:	d123      	bne.n	800472e <_malloc_r+0x92>
 80046e6:	230c      	movs	r3, #12
 80046e8:	6033      	str	r3, [r6, #0]
 80046ea:	4630      	mov	r0, r6
 80046ec:	f000 f956 	bl	800499c <__malloc_unlock>
 80046f0:	e7e3      	b.n	80046ba <_malloc_r+0x1e>
 80046f2:	6823      	ldr	r3, [r4, #0]
 80046f4:	1b5b      	subs	r3, r3, r5
 80046f6:	d417      	bmi.n	8004728 <_malloc_r+0x8c>
 80046f8:	2b0b      	cmp	r3, #11
 80046fa:	d903      	bls.n	8004704 <_malloc_r+0x68>
 80046fc:	6023      	str	r3, [r4, #0]
 80046fe:	441c      	add	r4, r3
 8004700:	6025      	str	r5, [r4, #0]
 8004702:	e004      	b.n	800470e <_malloc_r+0x72>
 8004704:	6863      	ldr	r3, [r4, #4]
 8004706:	42a2      	cmp	r2, r4
 8004708:	bf0c      	ite	eq
 800470a:	600b      	streq	r3, [r1, #0]
 800470c:	6053      	strne	r3, [r2, #4]
 800470e:	4630      	mov	r0, r6
 8004710:	f000 f944 	bl	800499c <__malloc_unlock>
 8004714:	f104 000b 	add.w	r0, r4, #11
 8004718:	1d23      	adds	r3, r4, #4
 800471a:	f020 0007 	bic.w	r0, r0, #7
 800471e:	1ac2      	subs	r2, r0, r3
 8004720:	d0cc      	beq.n	80046bc <_malloc_r+0x20>
 8004722:	1a1b      	subs	r3, r3, r0
 8004724:	50a3      	str	r3, [r4, r2]
 8004726:	e7c9      	b.n	80046bc <_malloc_r+0x20>
 8004728:	4622      	mov	r2, r4
 800472a:	6864      	ldr	r4, [r4, #4]
 800472c:	e7cc      	b.n	80046c8 <_malloc_r+0x2c>
 800472e:	1cc4      	adds	r4, r0, #3
 8004730:	f024 0403 	bic.w	r4, r4, #3
 8004734:	42a0      	cmp	r0, r4
 8004736:	d0e3      	beq.n	8004700 <_malloc_r+0x64>
 8004738:	1a21      	subs	r1, r4, r0
 800473a:	4630      	mov	r0, r6
 800473c:	f000 f820 	bl	8004780 <_sbrk_r>
 8004740:	3001      	adds	r0, #1
 8004742:	d1dd      	bne.n	8004700 <_malloc_r+0x64>
 8004744:	e7cf      	b.n	80046e6 <_malloc_r+0x4a>
 8004746:	bf00      	nop
 8004748:	2000009c 	.word	0x2000009c
 800474c:	200000a0 	.word	0x200000a0

08004750 <iprintf>:
 8004750:	b40f      	push	{r0, r1, r2, r3}
 8004752:	4b0a      	ldr	r3, [pc, #40]	; (800477c <iprintf+0x2c>)
 8004754:	b513      	push	{r0, r1, r4, lr}
 8004756:	681c      	ldr	r4, [r3, #0]
 8004758:	b124      	cbz	r4, 8004764 <iprintf+0x14>
 800475a:	69a3      	ldr	r3, [r4, #24]
 800475c:	b913      	cbnz	r3, 8004764 <iprintf+0x14>
 800475e:	4620      	mov	r0, r4
 8004760:	f000 f876 	bl	8004850 <__sinit>
 8004764:	ab05      	add	r3, sp, #20
 8004766:	9a04      	ldr	r2, [sp, #16]
 8004768:	68a1      	ldr	r1, [r4, #8]
 800476a:	9301      	str	r3, [sp, #4]
 800476c:	4620      	mov	r0, r4
 800476e:	f000 f945 	bl	80049fc <_vfiprintf_r>
 8004772:	b002      	add	sp, #8
 8004774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004778:	b004      	add	sp, #16
 800477a:	4770      	bx	lr
 800477c:	2000000c 	.word	0x2000000c

08004780 <_sbrk_r>:
 8004780:	b538      	push	{r3, r4, r5, lr}
 8004782:	4d06      	ldr	r5, [pc, #24]	; (800479c <_sbrk_r+0x1c>)
 8004784:	2300      	movs	r3, #0
 8004786:	4604      	mov	r4, r0
 8004788:	4608      	mov	r0, r1
 800478a:	602b      	str	r3, [r5, #0]
 800478c:	f7fc fbb8 	bl	8000f00 <_sbrk>
 8004790:	1c43      	adds	r3, r0, #1
 8004792:	d102      	bne.n	800479a <_sbrk_r+0x1a>
 8004794:	682b      	ldr	r3, [r5, #0]
 8004796:	b103      	cbz	r3, 800479a <_sbrk_r+0x1a>
 8004798:	6023      	str	r3, [r4, #0]
 800479a:	bd38      	pop	{r3, r4, r5, pc}
 800479c:	200002d0 	.word	0x200002d0

080047a0 <std>:
 80047a0:	2300      	movs	r3, #0
 80047a2:	b510      	push	{r4, lr}
 80047a4:	4604      	mov	r4, r0
 80047a6:	e9c0 3300 	strd	r3, r3, [r0]
 80047aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047ae:	6083      	str	r3, [r0, #8]
 80047b0:	8181      	strh	r1, [r0, #12]
 80047b2:	6643      	str	r3, [r0, #100]	; 0x64
 80047b4:	81c2      	strh	r2, [r0, #14]
 80047b6:	6183      	str	r3, [r0, #24]
 80047b8:	4619      	mov	r1, r3
 80047ba:	2208      	movs	r2, #8
 80047bc:	305c      	adds	r0, #92	; 0x5c
 80047be:	f7ff ff15 	bl	80045ec <memset>
 80047c2:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <std+0x38>)
 80047c4:	6263      	str	r3, [r4, #36]	; 0x24
 80047c6:	4b05      	ldr	r3, [pc, #20]	; (80047dc <std+0x3c>)
 80047c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80047ca:	4b05      	ldr	r3, [pc, #20]	; (80047e0 <std+0x40>)
 80047cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80047ce:	4b05      	ldr	r3, [pc, #20]	; (80047e4 <std+0x44>)
 80047d0:	6224      	str	r4, [r4, #32]
 80047d2:	6323      	str	r3, [r4, #48]	; 0x30
 80047d4:	bd10      	pop	{r4, pc}
 80047d6:	bf00      	nop
 80047d8:	08004f85 	.word	0x08004f85
 80047dc:	08004fa7 	.word	0x08004fa7
 80047e0:	08004fdf 	.word	0x08004fdf
 80047e4:	08005003 	.word	0x08005003

080047e8 <_cleanup_r>:
 80047e8:	4901      	ldr	r1, [pc, #4]	; (80047f0 <_cleanup_r+0x8>)
 80047ea:	f000 b8af 	b.w	800494c <_fwalk_reent>
 80047ee:	bf00      	nop
 80047f0:	080052dd 	.word	0x080052dd

080047f4 <__sfmoreglue>:
 80047f4:	b570      	push	{r4, r5, r6, lr}
 80047f6:	1e4a      	subs	r2, r1, #1
 80047f8:	2568      	movs	r5, #104	; 0x68
 80047fa:	4355      	muls	r5, r2
 80047fc:	460e      	mov	r6, r1
 80047fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004802:	f7ff ff4b 	bl	800469c <_malloc_r>
 8004806:	4604      	mov	r4, r0
 8004808:	b140      	cbz	r0, 800481c <__sfmoreglue+0x28>
 800480a:	2100      	movs	r1, #0
 800480c:	e9c0 1600 	strd	r1, r6, [r0]
 8004810:	300c      	adds	r0, #12
 8004812:	60a0      	str	r0, [r4, #8]
 8004814:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004818:	f7ff fee8 	bl	80045ec <memset>
 800481c:	4620      	mov	r0, r4
 800481e:	bd70      	pop	{r4, r5, r6, pc}

08004820 <__sfp_lock_acquire>:
 8004820:	4801      	ldr	r0, [pc, #4]	; (8004828 <__sfp_lock_acquire+0x8>)
 8004822:	f000 b8b3 	b.w	800498c <__retarget_lock_acquire_recursive>
 8004826:	bf00      	nop
 8004828:	200002cc 	.word	0x200002cc

0800482c <__sfp_lock_release>:
 800482c:	4801      	ldr	r0, [pc, #4]	; (8004834 <__sfp_lock_release+0x8>)
 800482e:	f000 b8ae 	b.w	800498e <__retarget_lock_release_recursive>
 8004832:	bf00      	nop
 8004834:	200002cc 	.word	0x200002cc

08004838 <__sinit_lock_acquire>:
 8004838:	4801      	ldr	r0, [pc, #4]	; (8004840 <__sinit_lock_acquire+0x8>)
 800483a:	f000 b8a7 	b.w	800498c <__retarget_lock_acquire_recursive>
 800483e:	bf00      	nop
 8004840:	200002c7 	.word	0x200002c7

08004844 <__sinit_lock_release>:
 8004844:	4801      	ldr	r0, [pc, #4]	; (800484c <__sinit_lock_release+0x8>)
 8004846:	f000 b8a2 	b.w	800498e <__retarget_lock_release_recursive>
 800484a:	bf00      	nop
 800484c:	200002c7 	.word	0x200002c7

08004850 <__sinit>:
 8004850:	b510      	push	{r4, lr}
 8004852:	4604      	mov	r4, r0
 8004854:	f7ff fff0 	bl	8004838 <__sinit_lock_acquire>
 8004858:	69a3      	ldr	r3, [r4, #24]
 800485a:	b11b      	cbz	r3, 8004864 <__sinit+0x14>
 800485c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004860:	f7ff bff0 	b.w	8004844 <__sinit_lock_release>
 8004864:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004868:	6523      	str	r3, [r4, #80]	; 0x50
 800486a:	4b13      	ldr	r3, [pc, #76]	; (80048b8 <__sinit+0x68>)
 800486c:	4a13      	ldr	r2, [pc, #76]	; (80048bc <__sinit+0x6c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	62a2      	str	r2, [r4, #40]	; 0x28
 8004872:	42a3      	cmp	r3, r4
 8004874:	bf04      	itt	eq
 8004876:	2301      	moveq	r3, #1
 8004878:	61a3      	streq	r3, [r4, #24]
 800487a:	4620      	mov	r0, r4
 800487c:	f000 f820 	bl	80048c0 <__sfp>
 8004880:	6060      	str	r0, [r4, #4]
 8004882:	4620      	mov	r0, r4
 8004884:	f000 f81c 	bl	80048c0 <__sfp>
 8004888:	60a0      	str	r0, [r4, #8]
 800488a:	4620      	mov	r0, r4
 800488c:	f000 f818 	bl	80048c0 <__sfp>
 8004890:	2200      	movs	r2, #0
 8004892:	60e0      	str	r0, [r4, #12]
 8004894:	2104      	movs	r1, #4
 8004896:	6860      	ldr	r0, [r4, #4]
 8004898:	f7ff ff82 	bl	80047a0 <std>
 800489c:	68a0      	ldr	r0, [r4, #8]
 800489e:	2201      	movs	r2, #1
 80048a0:	2109      	movs	r1, #9
 80048a2:	f7ff ff7d 	bl	80047a0 <std>
 80048a6:	68e0      	ldr	r0, [r4, #12]
 80048a8:	2202      	movs	r2, #2
 80048aa:	2112      	movs	r1, #18
 80048ac:	f7ff ff78 	bl	80047a0 <std>
 80048b0:	2301      	movs	r3, #1
 80048b2:	61a3      	str	r3, [r4, #24]
 80048b4:	e7d2      	b.n	800485c <__sinit+0xc>
 80048b6:	bf00      	nop
 80048b8:	080054f0 	.word	0x080054f0
 80048bc:	080047e9 	.word	0x080047e9

080048c0 <__sfp>:
 80048c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c2:	4607      	mov	r7, r0
 80048c4:	f7ff ffac 	bl	8004820 <__sfp_lock_acquire>
 80048c8:	4b1e      	ldr	r3, [pc, #120]	; (8004944 <__sfp+0x84>)
 80048ca:	681e      	ldr	r6, [r3, #0]
 80048cc:	69b3      	ldr	r3, [r6, #24]
 80048ce:	b913      	cbnz	r3, 80048d6 <__sfp+0x16>
 80048d0:	4630      	mov	r0, r6
 80048d2:	f7ff ffbd 	bl	8004850 <__sinit>
 80048d6:	3648      	adds	r6, #72	; 0x48
 80048d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80048dc:	3b01      	subs	r3, #1
 80048de:	d503      	bpl.n	80048e8 <__sfp+0x28>
 80048e0:	6833      	ldr	r3, [r6, #0]
 80048e2:	b30b      	cbz	r3, 8004928 <__sfp+0x68>
 80048e4:	6836      	ldr	r6, [r6, #0]
 80048e6:	e7f7      	b.n	80048d8 <__sfp+0x18>
 80048e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80048ec:	b9d5      	cbnz	r5, 8004924 <__sfp+0x64>
 80048ee:	4b16      	ldr	r3, [pc, #88]	; (8004948 <__sfp+0x88>)
 80048f0:	60e3      	str	r3, [r4, #12]
 80048f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80048f6:	6665      	str	r5, [r4, #100]	; 0x64
 80048f8:	f000 f847 	bl	800498a <__retarget_lock_init_recursive>
 80048fc:	f7ff ff96 	bl	800482c <__sfp_lock_release>
 8004900:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004904:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004908:	6025      	str	r5, [r4, #0]
 800490a:	61a5      	str	r5, [r4, #24]
 800490c:	2208      	movs	r2, #8
 800490e:	4629      	mov	r1, r5
 8004910:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004914:	f7ff fe6a 	bl	80045ec <memset>
 8004918:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800491c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004920:	4620      	mov	r0, r4
 8004922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004924:	3468      	adds	r4, #104	; 0x68
 8004926:	e7d9      	b.n	80048dc <__sfp+0x1c>
 8004928:	2104      	movs	r1, #4
 800492a:	4638      	mov	r0, r7
 800492c:	f7ff ff62 	bl	80047f4 <__sfmoreglue>
 8004930:	4604      	mov	r4, r0
 8004932:	6030      	str	r0, [r6, #0]
 8004934:	2800      	cmp	r0, #0
 8004936:	d1d5      	bne.n	80048e4 <__sfp+0x24>
 8004938:	f7ff ff78 	bl	800482c <__sfp_lock_release>
 800493c:	230c      	movs	r3, #12
 800493e:	603b      	str	r3, [r7, #0]
 8004940:	e7ee      	b.n	8004920 <__sfp+0x60>
 8004942:	bf00      	nop
 8004944:	080054f0 	.word	0x080054f0
 8004948:	ffff0001 	.word	0xffff0001

0800494c <_fwalk_reent>:
 800494c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004950:	4606      	mov	r6, r0
 8004952:	4688      	mov	r8, r1
 8004954:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004958:	2700      	movs	r7, #0
 800495a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800495e:	f1b9 0901 	subs.w	r9, r9, #1
 8004962:	d505      	bpl.n	8004970 <_fwalk_reent+0x24>
 8004964:	6824      	ldr	r4, [r4, #0]
 8004966:	2c00      	cmp	r4, #0
 8004968:	d1f7      	bne.n	800495a <_fwalk_reent+0xe>
 800496a:	4638      	mov	r0, r7
 800496c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004970:	89ab      	ldrh	r3, [r5, #12]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d907      	bls.n	8004986 <_fwalk_reent+0x3a>
 8004976:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800497a:	3301      	adds	r3, #1
 800497c:	d003      	beq.n	8004986 <_fwalk_reent+0x3a>
 800497e:	4629      	mov	r1, r5
 8004980:	4630      	mov	r0, r6
 8004982:	47c0      	blx	r8
 8004984:	4307      	orrs	r7, r0
 8004986:	3568      	adds	r5, #104	; 0x68
 8004988:	e7e9      	b.n	800495e <_fwalk_reent+0x12>

0800498a <__retarget_lock_init_recursive>:
 800498a:	4770      	bx	lr

0800498c <__retarget_lock_acquire_recursive>:
 800498c:	4770      	bx	lr

0800498e <__retarget_lock_release_recursive>:
 800498e:	4770      	bx	lr

08004990 <__malloc_lock>:
 8004990:	4801      	ldr	r0, [pc, #4]	; (8004998 <__malloc_lock+0x8>)
 8004992:	f7ff bffb 	b.w	800498c <__retarget_lock_acquire_recursive>
 8004996:	bf00      	nop
 8004998:	200002c8 	.word	0x200002c8

0800499c <__malloc_unlock>:
 800499c:	4801      	ldr	r0, [pc, #4]	; (80049a4 <__malloc_unlock+0x8>)
 800499e:	f7ff bff6 	b.w	800498e <__retarget_lock_release_recursive>
 80049a2:	bf00      	nop
 80049a4:	200002c8 	.word	0x200002c8

080049a8 <__sfputc_r>:
 80049a8:	6893      	ldr	r3, [r2, #8]
 80049aa:	3b01      	subs	r3, #1
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	b410      	push	{r4}
 80049b0:	6093      	str	r3, [r2, #8]
 80049b2:	da08      	bge.n	80049c6 <__sfputc_r+0x1e>
 80049b4:	6994      	ldr	r4, [r2, #24]
 80049b6:	42a3      	cmp	r3, r4
 80049b8:	db01      	blt.n	80049be <__sfputc_r+0x16>
 80049ba:	290a      	cmp	r1, #10
 80049bc:	d103      	bne.n	80049c6 <__sfputc_r+0x1e>
 80049be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049c2:	f000 bb23 	b.w	800500c <__swbuf_r>
 80049c6:	6813      	ldr	r3, [r2, #0]
 80049c8:	1c58      	adds	r0, r3, #1
 80049ca:	6010      	str	r0, [r2, #0]
 80049cc:	7019      	strb	r1, [r3, #0]
 80049ce:	4608      	mov	r0, r1
 80049d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <__sfputs_r>:
 80049d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d8:	4606      	mov	r6, r0
 80049da:	460f      	mov	r7, r1
 80049dc:	4614      	mov	r4, r2
 80049de:	18d5      	adds	r5, r2, r3
 80049e0:	42ac      	cmp	r4, r5
 80049e2:	d101      	bne.n	80049e8 <__sfputs_r+0x12>
 80049e4:	2000      	movs	r0, #0
 80049e6:	e007      	b.n	80049f8 <__sfputs_r+0x22>
 80049e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049ec:	463a      	mov	r2, r7
 80049ee:	4630      	mov	r0, r6
 80049f0:	f7ff ffda 	bl	80049a8 <__sfputc_r>
 80049f4:	1c43      	adds	r3, r0, #1
 80049f6:	d1f3      	bne.n	80049e0 <__sfputs_r+0xa>
 80049f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080049fc <_vfiprintf_r>:
 80049fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a00:	460d      	mov	r5, r1
 8004a02:	b09d      	sub	sp, #116	; 0x74
 8004a04:	4614      	mov	r4, r2
 8004a06:	4698      	mov	r8, r3
 8004a08:	4606      	mov	r6, r0
 8004a0a:	b118      	cbz	r0, 8004a14 <_vfiprintf_r+0x18>
 8004a0c:	6983      	ldr	r3, [r0, #24]
 8004a0e:	b90b      	cbnz	r3, 8004a14 <_vfiprintf_r+0x18>
 8004a10:	f7ff ff1e 	bl	8004850 <__sinit>
 8004a14:	4b89      	ldr	r3, [pc, #548]	; (8004c3c <_vfiprintf_r+0x240>)
 8004a16:	429d      	cmp	r5, r3
 8004a18:	d11b      	bne.n	8004a52 <_vfiprintf_r+0x56>
 8004a1a:	6875      	ldr	r5, [r6, #4]
 8004a1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a1e:	07d9      	lsls	r1, r3, #31
 8004a20:	d405      	bmi.n	8004a2e <_vfiprintf_r+0x32>
 8004a22:	89ab      	ldrh	r3, [r5, #12]
 8004a24:	059a      	lsls	r2, r3, #22
 8004a26:	d402      	bmi.n	8004a2e <_vfiprintf_r+0x32>
 8004a28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a2a:	f7ff ffaf 	bl	800498c <__retarget_lock_acquire_recursive>
 8004a2e:	89ab      	ldrh	r3, [r5, #12]
 8004a30:	071b      	lsls	r3, r3, #28
 8004a32:	d501      	bpl.n	8004a38 <_vfiprintf_r+0x3c>
 8004a34:	692b      	ldr	r3, [r5, #16]
 8004a36:	b9eb      	cbnz	r3, 8004a74 <_vfiprintf_r+0x78>
 8004a38:	4629      	mov	r1, r5
 8004a3a:	4630      	mov	r0, r6
 8004a3c:	f000 fb4a 	bl	80050d4 <__swsetup_r>
 8004a40:	b1c0      	cbz	r0, 8004a74 <_vfiprintf_r+0x78>
 8004a42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a44:	07dc      	lsls	r4, r3, #31
 8004a46:	d50e      	bpl.n	8004a66 <_vfiprintf_r+0x6a>
 8004a48:	f04f 30ff 	mov.w	r0, #4294967295
 8004a4c:	b01d      	add	sp, #116	; 0x74
 8004a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a52:	4b7b      	ldr	r3, [pc, #492]	; (8004c40 <_vfiprintf_r+0x244>)
 8004a54:	429d      	cmp	r5, r3
 8004a56:	d101      	bne.n	8004a5c <_vfiprintf_r+0x60>
 8004a58:	68b5      	ldr	r5, [r6, #8]
 8004a5a:	e7df      	b.n	8004a1c <_vfiprintf_r+0x20>
 8004a5c:	4b79      	ldr	r3, [pc, #484]	; (8004c44 <_vfiprintf_r+0x248>)
 8004a5e:	429d      	cmp	r5, r3
 8004a60:	bf08      	it	eq
 8004a62:	68f5      	ldreq	r5, [r6, #12]
 8004a64:	e7da      	b.n	8004a1c <_vfiprintf_r+0x20>
 8004a66:	89ab      	ldrh	r3, [r5, #12]
 8004a68:	0598      	lsls	r0, r3, #22
 8004a6a:	d4ed      	bmi.n	8004a48 <_vfiprintf_r+0x4c>
 8004a6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a6e:	f7ff ff8e 	bl	800498e <__retarget_lock_release_recursive>
 8004a72:	e7e9      	b.n	8004a48 <_vfiprintf_r+0x4c>
 8004a74:	2300      	movs	r3, #0
 8004a76:	9309      	str	r3, [sp, #36]	; 0x24
 8004a78:	2320      	movs	r3, #32
 8004a7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a82:	2330      	movs	r3, #48	; 0x30
 8004a84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004c48 <_vfiprintf_r+0x24c>
 8004a88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a8c:	f04f 0901 	mov.w	r9, #1
 8004a90:	4623      	mov	r3, r4
 8004a92:	469a      	mov	sl, r3
 8004a94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a98:	b10a      	cbz	r2, 8004a9e <_vfiprintf_r+0xa2>
 8004a9a:	2a25      	cmp	r2, #37	; 0x25
 8004a9c:	d1f9      	bne.n	8004a92 <_vfiprintf_r+0x96>
 8004a9e:	ebba 0b04 	subs.w	fp, sl, r4
 8004aa2:	d00b      	beq.n	8004abc <_vfiprintf_r+0xc0>
 8004aa4:	465b      	mov	r3, fp
 8004aa6:	4622      	mov	r2, r4
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	4630      	mov	r0, r6
 8004aac:	f7ff ff93 	bl	80049d6 <__sfputs_r>
 8004ab0:	3001      	adds	r0, #1
 8004ab2:	f000 80aa 	beq.w	8004c0a <_vfiprintf_r+0x20e>
 8004ab6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ab8:	445a      	add	r2, fp
 8004aba:	9209      	str	r2, [sp, #36]	; 0x24
 8004abc:	f89a 3000 	ldrb.w	r3, [sl]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 80a2 	beq.w	8004c0a <_vfiprintf_r+0x20e>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8004acc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ad0:	f10a 0a01 	add.w	sl, sl, #1
 8004ad4:	9304      	str	r3, [sp, #16]
 8004ad6:	9307      	str	r3, [sp, #28]
 8004ad8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004adc:	931a      	str	r3, [sp, #104]	; 0x68
 8004ade:	4654      	mov	r4, sl
 8004ae0:	2205      	movs	r2, #5
 8004ae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ae6:	4858      	ldr	r0, [pc, #352]	; (8004c48 <_vfiprintf_r+0x24c>)
 8004ae8:	f7fb fb7a 	bl	80001e0 <memchr>
 8004aec:	9a04      	ldr	r2, [sp, #16]
 8004aee:	b9d8      	cbnz	r0, 8004b28 <_vfiprintf_r+0x12c>
 8004af0:	06d1      	lsls	r1, r2, #27
 8004af2:	bf44      	itt	mi
 8004af4:	2320      	movmi	r3, #32
 8004af6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004afa:	0713      	lsls	r3, r2, #28
 8004afc:	bf44      	itt	mi
 8004afe:	232b      	movmi	r3, #43	; 0x2b
 8004b00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b04:	f89a 3000 	ldrb.w	r3, [sl]
 8004b08:	2b2a      	cmp	r3, #42	; 0x2a
 8004b0a:	d015      	beq.n	8004b38 <_vfiprintf_r+0x13c>
 8004b0c:	9a07      	ldr	r2, [sp, #28]
 8004b0e:	4654      	mov	r4, sl
 8004b10:	2000      	movs	r0, #0
 8004b12:	f04f 0c0a 	mov.w	ip, #10
 8004b16:	4621      	mov	r1, r4
 8004b18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b1c:	3b30      	subs	r3, #48	; 0x30
 8004b1e:	2b09      	cmp	r3, #9
 8004b20:	d94e      	bls.n	8004bc0 <_vfiprintf_r+0x1c4>
 8004b22:	b1b0      	cbz	r0, 8004b52 <_vfiprintf_r+0x156>
 8004b24:	9207      	str	r2, [sp, #28]
 8004b26:	e014      	b.n	8004b52 <_vfiprintf_r+0x156>
 8004b28:	eba0 0308 	sub.w	r3, r0, r8
 8004b2c:	fa09 f303 	lsl.w	r3, r9, r3
 8004b30:	4313      	orrs	r3, r2
 8004b32:	9304      	str	r3, [sp, #16]
 8004b34:	46a2      	mov	sl, r4
 8004b36:	e7d2      	b.n	8004ade <_vfiprintf_r+0xe2>
 8004b38:	9b03      	ldr	r3, [sp, #12]
 8004b3a:	1d19      	adds	r1, r3, #4
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	9103      	str	r1, [sp, #12]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	bfbb      	ittet	lt
 8004b44:	425b      	neglt	r3, r3
 8004b46:	f042 0202 	orrlt.w	r2, r2, #2
 8004b4a:	9307      	strge	r3, [sp, #28]
 8004b4c:	9307      	strlt	r3, [sp, #28]
 8004b4e:	bfb8      	it	lt
 8004b50:	9204      	strlt	r2, [sp, #16]
 8004b52:	7823      	ldrb	r3, [r4, #0]
 8004b54:	2b2e      	cmp	r3, #46	; 0x2e
 8004b56:	d10c      	bne.n	8004b72 <_vfiprintf_r+0x176>
 8004b58:	7863      	ldrb	r3, [r4, #1]
 8004b5a:	2b2a      	cmp	r3, #42	; 0x2a
 8004b5c:	d135      	bne.n	8004bca <_vfiprintf_r+0x1ce>
 8004b5e:	9b03      	ldr	r3, [sp, #12]
 8004b60:	1d1a      	adds	r2, r3, #4
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	9203      	str	r2, [sp, #12]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	bfb8      	it	lt
 8004b6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b6e:	3402      	adds	r4, #2
 8004b70:	9305      	str	r3, [sp, #20]
 8004b72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004c58 <_vfiprintf_r+0x25c>
 8004b76:	7821      	ldrb	r1, [r4, #0]
 8004b78:	2203      	movs	r2, #3
 8004b7a:	4650      	mov	r0, sl
 8004b7c:	f7fb fb30 	bl	80001e0 <memchr>
 8004b80:	b140      	cbz	r0, 8004b94 <_vfiprintf_r+0x198>
 8004b82:	2340      	movs	r3, #64	; 0x40
 8004b84:	eba0 000a 	sub.w	r0, r0, sl
 8004b88:	fa03 f000 	lsl.w	r0, r3, r0
 8004b8c:	9b04      	ldr	r3, [sp, #16]
 8004b8e:	4303      	orrs	r3, r0
 8004b90:	3401      	adds	r4, #1
 8004b92:	9304      	str	r3, [sp, #16]
 8004b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b98:	482c      	ldr	r0, [pc, #176]	; (8004c4c <_vfiprintf_r+0x250>)
 8004b9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b9e:	2206      	movs	r2, #6
 8004ba0:	f7fb fb1e 	bl	80001e0 <memchr>
 8004ba4:	2800      	cmp	r0, #0
 8004ba6:	d03f      	beq.n	8004c28 <_vfiprintf_r+0x22c>
 8004ba8:	4b29      	ldr	r3, [pc, #164]	; (8004c50 <_vfiprintf_r+0x254>)
 8004baa:	bb1b      	cbnz	r3, 8004bf4 <_vfiprintf_r+0x1f8>
 8004bac:	9b03      	ldr	r3, [sp, #12]
 8004bae:	3307      	adds	r3, #7
 8004bb0:	f023 0307 	bic.w	r3, r3, #7
 8004bb4:	3308      	adds	r3, #8
 8004bb6:	9303      	str	r3, [sp, #12]
 8004bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bba:	443b      	add	r3, r7
 8004bbc:	9309      	str	r3, [sp, #36]	; 0x24
 8004bbe:	e767      	b.n	8004a90 <_vfiprintf_r+0x94>
 8004bc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bc4:	460c      	mov	r4, r1
 8004bc6:	2001      	movs	r0, #1
 8004bc8:	e7a5      	b.n	8004b16 <_vfiprintf_r+0x11a>
 8004bca:	2300      	movs	r3, #0
 8004bcc:	3401      	adds	r4, #1
 8004bce:	9305      	str	r3, [sp, #20]
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	f04f 0c0a 	mov.w	ip, #10
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bdc:	3a30      	subs	r2, #48	; 0x30
 8004bde:	2a09      	cmp	r2, #9
 8004be0:	d903      	bls.n	8004bea <_vfiprintf_r+0x1ee>
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d0c5      	beq.n	8004b72 <_vfiprintf_r+0x176>
 8004be6:	9105      	str	r1, [sp, #20]
 8004be8:	e7c3      	b.n	8004b72 <_vfiprintf_r+0x176>
 8004bea:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bee:	4604      	mov	r4, r0
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e7f0      	b.n	8004bd6 <_vfiprintf_r+0x1da>
 8004bf4:	ab03      	add	r3, sp, #12
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	462a      	mov	r2, r5
 8004bfa:	4b16      	ldr	r3, [pc, #88]	; (8004c54 <_vfiprintf_r+0x258>)
 8004bfc:	a904      	add	r1, sp, #16
 8004bfe:	4630      	mov	r0, r6
 8004c00:	f3af 8000 	nop.w
 8004c04:	4607      	mov	r7, r0
 8004c06:	1c78      	adds	r0, r7, #1
 8004c08:	d1d6      	bne.n	8004bb8 <_vfiprintf_r+0x1bc>
 8004c0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c0c:	07d9      	lsls	r1, r3, #31
 8004c0e:	d405      	bmi.n	8004c1c <_vfiprintf_r+0x220>
 8004c10:	89ab      	ldrh	r3, [r5, #12]
 8004c12:	059a      	lsls	r2, r3, #22
 8004c14:	d402      	bmi.n	8004c1c <_vfiprintf_r+0x220>
 8004c16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c18:	f7ff feb9 	bl	800498e <__retarget_lock_release_recursive>
 8004c1c:	89ab      	ldrh	r3, [r5, #12]
 8004c1e:	065b      	lsls	r3, r3, #25
 8004c20:	f53f af12 	bmi.w	8004a48 <_vfiprintf_r+0x4c>
 8004c24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c26:	e711      	b.n	8004a4c <_vfiprintf_r+0x50>
 8004c28:	ab03      	add	r3, sp, #12
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	462a      	mov	r2, r5
 8004c2e:	4b09      	ldr	r3, [pc, #36]	; (8004c54 <_vfiprintf_r+0x258>)
 8004c30:	a904      	add	r1, sp, #16
 8004c32:	4630      	mov	r0, r6
 8004c34:	f000 f880 	bl	8004d38 <_printf_i>
 8004c38:	e7e4      	b.n	8004c04 <_vfiprintf_r+0x208>
 8004c3a:	bf00      	nop
 8004c3c:	08005514 	.word	0x08005514
 8004c40:	08005534 	.word	0x08005534
 8004c44:	080054f4 	.word	0x080054f4
 8004c48:	08005554 	.word	0x08005554
 8004c4c:	0800555e 	.word	0x0800555e
 8004c50:	00000000 	.word	0x00000000
 8004c54:	080049d7 	.word	0x080049d7
 8004c58:	0800555a 	.word	0x0800555a

08004c5c <_printf_common>:
 8004c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c60:	4616      	mov	r6, r2
 8004c62:	4699      	mov	r9, r3
 8004c64:	688a      	ldr	r2, [r1, #8]
 8004c66:	690b      	ldr	r3, [r1, #16]
 8004c68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	bfb8      	it	lt
 8004c70:	4613      	movlt	r3, r2
 8004c72:	6033      	str	r3, [r6, #0]
 8004c74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c78:	4607      	mov	r7, r0
 8004c7a:	460c      	mov	r4, r1
 8004c7c:	b10a      	cbz	r2, 8004c82 <_printf_common+0x26>
 8004c7e:	3301      	adds	r3, #1
 8004c80:	6033      	str	r3, [r6, #0]
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	0699      	lsls	r1, r3, #26
 8004c86:	bf42      	ittt	mi
 8004c88:	6833      	ldrmi	r3, [r6, #0]
 8004c8a:	3302      	addmi	r3, #2
 8004c8c:	6033      	strmi	r3, [r6, #0]
 8004c8e:	6825      	ldr	r5, [r4, #0]
 8004c90:	f015 0506 	ands.w	r5, r5, #6
 8004c94:	d106      	bne.n	8004ca4 <_printf_common+0x48>
 8004c96:	f104 0a19 	add.w	sl, r4, #25
 8004c9a:	68e3      	ldr	r3, [r4, #12]
 8004c9c:	6832      	ldr	r2, [r6, #0]
 8004c9e:	1a9b      	subs	r3, r3, r2
 8004ca0:	42ab      	cmp	r3, r5
 8004ca2:	dc26      	bgt.n	8004cf2 <_printf_common+0x96>
 8004ca4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ca8:	1e13      	subs	r3, r2, #0
 8004caa:	6822      	ldr	r2, [r4, #0]
 8004cac:	bf18      	it	ne
 8004cae:	2301      	movne	r3, #1
 8004cb0:	0692      	lsls	r2, r2, #26
 8004cb2:	d42b      	bmi.n	8004d0c <_printf_common+0xb0>
 8004cb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cb8:	4649      	mov	r1, r9
 8004cba:	4638      	mov	r0, r7
 8004cbc:	47c0      	blx	r8
 8004cbe:	3001      	adds	r0, #1
 8004cc0:	d01e      	beq.n	8004d00 <_printf_common+0xa4>
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	68e5      	ldr	r5, [r4, #12]
 8004cc6:	6832      	ldr	r2, [r6, #0]
 8004cc8:	f003 0306 	and.w	r3, r3, #6
 8004ccc:	2b04      	cmp	r3, #4
 8004cce:	bf08      	it	eq
 8004cd0:	1aad      	subeq	r5, r5, r2
 8004cd2:	68a3      	ldr	r3, [r4, #8]
 8004cd4:	6922      	ldr	r2, [r4, #16]
 8004cd6:	bf0c      	ite	eq
 8004cd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cdc:	2500      	movne	r5, #0
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	bfc4      	itt	gt
 8004ce2:	1a9b      	subgt	r3, r3, r2
 8004ce4:	18ed      	addgt	r5, r5, r3
 8004ce6:	2600      	movs	r6, #0
 8004ce8:	341a      	adds	r4, #26
 8004cea:	42b5      	cmp	r5, r6
 8004cec:	d11a      	bne.n	8004d24 <_printf_common+0xc8>
 8004cee:	2000      	movs	r0, #0
 8004cf0:	e008      	b.n	8004d04 <_printf_common+0xa8>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	4652      	mov	r2, sl
 8004cf6:	4649      	mov	r1, r9
 8004cf8:	4638      	mov	r0, r7
 8004cfa:	47c0      	blx	r8
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	d103      	bne.n	8004d08 <_printf_common+0xac>
 8004d00:	f04f 30ff 	mov.w	r0, #4294967295
 8004d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d08:	3501      	adds	r5, #1
 8004d0a:	e7c6      	b.n	8004c9a <_printf_common+0x3e>
 8004d0c:	18e1      	adds	r1, r4, r3
 8004d0e:	1c5a      	adds	r2, r3, #1
 8004d10:	2030      	movs	r0, #48	; 0x30
 8004d12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d16:	4422      	add	r2, r4
 8004d18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d20:	3302      	adds	r3, #2
 8004d22:	e7c7      	b.n	8004cb4 <_printf_common+0x58>
 8004d24:	2301      	movs	r3, #1
 8004d26:	4622      	mov	r2, r4
 8004d28:	4649      	mov	r1, r9
 8004d2a:	4638      	mov	r0, r7
 8004d2c:	47c0      	blx	r8
 8004d2e:	3001      	adds	r0, #1
 8004d30:	d0e6      	beq.n	8004d00 <_printf_common+0xa4>
 8004d32:	3601      	adds	r6, #1
 8004d34:	e7d9      	b.n	8004cea <_printf_common+0x8e>
	...

08004d38 <_printf_i>:
 8004d38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d3c:	460c      	mov	r4, r1
 8004d3e:	4691      	mov	r9, r2
 8004d40:	7e27      	ldrb	r7, [r4, #24]
 8004d42:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004d44:	2f78      	cmp	r7, #120	; 0x78
 8004d46:	4680      	mov	r8, r0
 8004d48:	469a      	mov	sl, r3
 8004d4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d4e:	d807      	bhi.n	8004d60 <_printf_i+0x28>
 8004d50:	2f62      	cmp	r7, #98	; 0x62
 8004d52:	d80a      	bhi.n	8004d6a <_printf_i+0x32>
 8004d54:	2f00      	cmp	r7, #0
 8004d56:	f000 80d8 	beq.w	8004f0a <_printf_i+0x1d2>
 8004d5a:	2f58      	cmp	r7, #88	; 0x58
 8004d5c:	f000 80a3 	beq.w	8004ea6 <_printf_i+0x16e>
 8004d60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d68:	e03a      	b.n	8004de0 <_printf_i+0xa8>
 8004d6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d6e:	2b15      	cmp	r3, #21
 8004d70:	d8f6      	bhi.n	8004d60 <_printf_i+0x28>
 8004d72:	a001      	add	r0, pc, #4	; (adr r0, 8004d78 <_printf_i+0x40>)
 8004d74:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004d78:	08004dd1 	.word	0x08004dd1
 8004d7c:	08004de5 	.word	0x08004de5
 8004d80:	08004d61 	.word	0x08004d61
 8004d84:	08004d61 	.word	0x08004d61
 8004d88:	08004d61 	.word	0x08004d61
 8004d8c:	08004d61 	.word	0x08004d61
 8004d90:	08004de5 	.word	0x08004de5
 8004d94:	08004d61 	.word	0x08004d61
 8004d98:	08004d61 	.word	0x08004d61
 8004d9c:	08004d61 	.word	0x08004d61
 8004da0:	08004d61 	.word	0x08004d61
 8004da4:	08004ef1 	.word	0x08004ef1
 8004da8:	08004e15 	.word	0x08004e15
 8004dac:	08004ed3 	.word	0x08004ed3
 8004db0:	08004d61 	.word	0x08004d61
 8004db4:	08004d61 	.word	0x08004d61
 8004db8:	08004f13 	.word	0x08004f13
 8004dbc:	08004d61 	.word	0x08004d61
 8004dc0:	08004e15 	.word	0x08004e15
 8004dc4:	08004d61 	.word	0x08004d61
 8004dc8:	08004d61 	.word	0x08004d61
 8004dcc:	08004edb 	.word	0x08004edb
 8004dd0:	680b      	ldr	r3, [r1, #0]
 8004dd2:	1d1a      	adds	r2, r3, #4
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	600a      	str	r2, [r1, #0]
 8004dd8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ddc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004de0:	2301      	movs	r3, #1
 8004de2:	e0a3      	b.n	8004f2c <_printf_i+0x1f4>
 8004de4:	6825      	ldr	r5, [r4, #0]
 8004de6:	6808      	ldr	r0, [r1, #0]
 8004de8:	062e      	lsls	r6, r5, #24
 8004dea:	f100 0304 	add.w	r3, r0, #4
 8004dee:	d50a      	bpl.n	8004e06 <_printf_i+0xce>
 8004df0:	6805      	ldr	r5, [r0, #0]
 8004df2:	600b      	str	r3, [r1, #0]
 8004df4:	2d00      	cmp	r5, #0
 8004df6:	da03      	bge.n	8004e00 <_printf_i+0xc8>
 8004df8:	232d      	movs	r3, #45	; 0x2d
 8004dfa:	426d      	negs	r5, r5
 8004dfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e00:	485e      	ldr	r0, [pc, #376]	; (8004f7c <_printf_i+0x244>)
 8004e02:	230a      	movs	r3, #10
 8004e04:	e019      	b.n	8004e3a <_printf_i+0x102>
 8004e06:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004e0a:	6805      	ldr	r5, [r0, #0]
 8004e0c:	600b      	str	r3, [r1, #0]
 8004e0e:	bf18      	it	ne
 8004e10:	b22d      	sxthne	r5, r5
 8004e12:	e7ef      	b.n	8004df4 <_printf_i+0xbc>
 8004e14:	680b      	ldr	r3, [r1, #0]
 8004e16:	6825      	ldr	r5, [r4, #0]
 8004e18:	1d18      	adds	r0, r3, #4
 8004e1a:	6008      	str	r0, [r1, #0]
 8004e1c:	0628      	lsls	r0, r5, #24
 8004e1e:	d501      	bpl.n	8004e24 <_printf_i+0xec>
 8004e20:	681d      	ldr	r5, [r3, #0]
 8004e22:	e002      	b.n	8004e2a <_printf_i+0xf2>
 8004e24:	0669      	lsls	r1, r5, #25
 8004e26:	d5fb      	bpl.n	8004e20 <_printf_i+0xe8>
 8004e28:	881d      	ldrh	r5, [r3, #0]
 8004e2a:	4854      	ldr	r0, [pc, #336]	; (8004f7c <_printf_i+0x244>)
 8004e2c:	2f6f      	cmp	r7, #111	; 0x6f
 8004e2e:	bf0c      	ite	eq
 8004e30:	2308      	moveq	r3, #8
 8004e32:	230a      	movne	r3, #10
 8004e34:	2100      	movs	r1, #0
 8004e36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e3a:	6866      	ldr	r6, [r4, #4]
 8004e3c:	60a6      	str	r6, [r4, #8]
 8004e3e:	2e00      	cmp	r6, #0
 8004e40:	bfa2      	ittt	ge
 8004e42:	6821      	ldrge	r1, [r4, #0]
 8004e44:	f021 0104 	bicge.w	r1, r1, #4
 8004e48:	6021      	strge	r1, [r4, #0]
 8004e4a:	b90d      	cbnz	r5, 8004e50 <_printf_i+0x118>
 8004e4c:	2e00      	cmp	r6, #0
 8004e4e:	d04d      	beq.n	8004eec <_printf_i+0x1b4>
 8004e50:	4616      	mov	r6, r2
 8004e52:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e56:	fb03 5711 	mls	r7, r3, r1, r5
 8004e5a:	5dc7      	ldrb	r7, [r0, r7]
 8004e5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e60:	462f      	mov	r7, r5
 8004e62:	42bb      	cmp	r3, r7
 8004e64:	460d      	mov	r5, r1
 8004e66:	d9f4      	bls.n	8004e52 <_printf_i+0x11a>
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d10b      	bne.n	8004e84 <_printf_i+0x14c>
 8004e6c:	6823      	ldr	r3, [r4, #0]
 8004e6e:	07df      	lsls	r7, r3, #31
 8004e70:	d508      	bpl.n	8004e84 <_printf_i+0x14c>
 8004e72:	6923      	ldr	r3, [r4, #16]
 8004e74:	6861      	ldr	r1, [r4, #4]
 8004e76:	4299      	cmp	r1, r3
 8004e78:	bfde      	ittt	le
 8004e7a:	2330      	movle	r3, #48	; 0x30
 8004e7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e84:	1b92      	subs	r2, r2, r6
 8004e86:	6122      	str	r2, [r4, #16]
 8004e88:	f8cd a000 	str.w	sl, [sp]
 8004e8c:	464b      	mov	r3, r9
 8004e8e:	aa03      	add	r2, sp, #12
 8004e90:	4621      	mov	r1, r4
 8004e92:	4640      	mov	r0, r8
 8004e94:	f7ff fee2 	bl	8004c5c <_printf_common>
 8004e98:	3001      	adds	r0, #1
 8004e9a:	d14c      	bne.n	8004f36 <_printf_i+0x1fe>
 8004e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea0:	b004      	add	sp, #16
 8004ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ea6:	4835      	ldr	r0, [pc, #212]	; (8004f7c <_printf_i+0x244>)
 8004ea8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004eac:	6823      	ldr	r3, [r4, #0]
 8004eae:	680e      	ldr	r6, [r1, #0]
 8004eb0:	061f      	lsls	r7, r3, #24
 8004eb2:	f856 5b04 	ldr.w	r5, [r6], #4
 8004eb6:	600e      	str	r6, [r1, #0]
 8004eb8:	d514      	bpl.n	8004ee4 <_printf_i+0x1ac>
 8004eba:	07d9      	lsls	r1, r3, #31
 8004ebc:	bf44      	itt	mi
 8004ebe:	f043 0320 	orrmi.w	r3, r3, #32
 8004ec2:	6023      	strmi	r3, [r4, #0]
 8004ec4:	b91d      	cbnz	r5, 8004ece <_printf_i+0x196>
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	f023 0320 	bic.w	r3, r3, #32
 8004ecc:	6023      	str	r3, [r4, #0]
 8004ece:	2310      	movs	r3, #16
 8004ed0:	e7b0      	b.n	8004e34 <_printf_i+0xfc>
 8004ed2:	6823      	ldr	r3, [r4, #0]
 8004ed4:	f043 0320 	orr.w	r3, r3, #32
 8004ed8:	6023      	str	r3, [r4, #0]
 8004eda:	2378      	movs	r3, #120	; 0x78
 8004edc:	4828      	ldr	r0, [pc, #160]	; (8004f80 <_printf_i+0x248>)
 8004ede:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ee2:	e7e3      	b.n	8004eac <_printf_i+0x174>
 8004ee4:	065e      	lsls	r6, r3, #25
 8004ee6:	bf48      	it	mi
 8004ee8:	b2ad      	uxthmi	r5, r5
 8004eea:	e7e6      	b.n	8004eba <_printf_i+0x182>
 8004eec:	4616      	mov	r6, r2
 8004eee:	e7bb      	b.n	8004e68 <_printf_i+0x130>
 8004ef0:	680b      	ldr	r3, [r1, #0]
 8004ef2:	6826      	ldr	r6, [r4, #0]
 8004ef4:	6960      	ldr	r0, [r4, #20]
 8004ef6:	1d1d      	adds	r5, r3, #4
 8004ef8:	600d      	str	r5, [r1, #0]
 8004efa:	0635      	lsls	r5, r6, #24
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	d501      	bpl.n	8004f04 <_printf_i+0x1cc>
 8004f00:	6018      	str	r0, [r3, #0]
 8004f02:	e002      	b.n	8004f0a <_printf_i+0x1d2>
 8004f04:	0671      	lsls	r1, r6, #25
 8004f06:	d5fb      	bpl.n	8004f00 <_printf_i+0x1c8>
 8004f08:	8018      	strh	r0, [r3, #0]
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	6123      	str	r3, [r4, #16]
 8004f0e:	4616      	mov	r6, r2
 8004f10:	e7ba      	b.n	8004e88 <_printf_i+0x150>
 8004f12:	680b      	ldr	r3, [r1, #0]
 8004f14:	1d1a      	adds	r2, r3, #4
 8004f16:	600a      	str	r2, [r1, #0]
 8004f18:	681e      	ldr	r6, [r3, #0]
 8004f1a:	6862      	ldr	r2, [r4, #4]
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	4630      	mov	r0, r6
 8004f20:	f7fb f95e 	bl	80001e0 <memchr>
 8004f24:	b108      	cbz	r0, 8004f2a <_printf_i+0x1f2>
 8004f26:	1b80      	subs	r0, r0, r6
 8004f28:	6060      	str	r0, [r4, #4]
 8004f2a:	6863      	ldr	r3, [r4, #4]
 8004f2c:	6123      	str	r3, [r4, #16]
 8004f2e:	2300      	movs	r3, #0
 8004f30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f34:	e7a8      	b.n	8004e88 <_printf_i+0x150>
 8004f36:	6923      	ldr	r3, [r4, #16]
 8004f38:	4632      	mov	r2, r6
 8004f3a:	4649      	mov	r1, r9
 8004f3c:	4640      	mov	r0, r8
 8004f3e:	47d0      	blx	sl
 8004f40:	3001      	adds	r0, #1
 8004f42:	d0ab      	beq.n	8004e9c <_printf_i+0x164>
 8004f44:	6823      	ldr	r3, [r4, #0]
 8004f46:	079b      	lsls	r3, r3, #30
 8004f48:	d413      	bmi.n	8004f72 <_printf_i+0x23a>
 8004f4a:	68e0      	ldr	r0, [r4, #12]
 8004f4c:	9b03      	ldr	r3, [sp, #12]
 8004f4e:	4298      	cmp	r0, r3
 8004f50:	bfb8      	it	lt
 8004f52:	4618      	movlt	r0, r3
 8004f54:	e7a4      	b.n	8004ea0 <_printf_i+0x168>
 8004f56:	2301      	movs	r3, #1
 8004f58:	4632      	mov	r2, r6
 8004f5a:	4649      	mov	r1, r9
 8004f5c:	4640      	mov	r0, r8
 8004f5e:	47d0      	blx	sl
 8004f60:	3001      	adds	r0, #1
 8004f62:	d09b      	beq.n	8004e9c <_printf_i+0x164>
 8004f64:	3501      	adds	r5, #1
 8004f66:	68e3      	ldr	r3, [r4, #12]
 8004f68:	9903      	ldr	r1, [sp, #12]
 8004f6a:	1a5b      	subs	r3, r3, r1
 8004f6c:	42ab      	cmp	r3, r5
 8004f6e:	dcf2      	bgt.n	8004f56 <_printf_i+0x21e>
 8004f70:	e7eb      	b.n	8004f4a <_printf_i+0x212>
 8004f72:	2500      	movs	r5, #0
 8004f74:	f104 0619 	add.w	r6, r4, #25
 8004f78:	e7f5      	b.n	8004f66 <_printf_i+0x22e>
 8004f7a:	bf00      	nop
 8004f7c:	08005565 	.word	0x08005565
 8004f80:	08005576 	.word	0x08005576

08004f84 <__sread>:
 8004f84:	b510      	push	{r4, lr}
 8004f86:	460c      	mov	r4, r1
 8004f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f8c:	f000 fa58 	bl	8005440 <_read_r>
 8004f90:	2800      	cmp	r0, #0
 8004f92:	bfab      	itete	ge
 8004f94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f96:	89a3      	ldrhlt	r3, [r4, #12]
 8004f98:	181b      	addge	r3, r3, r0
 8004f9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f9e:	bfac      	ite	ge
 8004fa0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004fa2:	81a3      	strhlt	r3, [r4, #12]
 8004fa4:	bd10      	pop	{r4, pc}

08004fa6 <__swrite>:
 8004fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004faa:	461f      	mov	r7, r3
 8004fac:	898b      	ldrh	r3, [r1, #12]
 8004fae:	05db      	lsls	r3, r3, #23
 8004fb0:	4605      	mov	r5, r0
 8004fb2:	460c      	mov	r4, r1
 8004fb4:	4616      	mov	r6, r2
 8004fb6:	d505      	bpl.n	8004fc4 <__swrite+0x1e>
 8004fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f000 f9c8 	bl	8005354 <_lseek_r>
 8004fc4:	89a3      	ldrh	r3, [r4, #12]
 8004fc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fce:	81a3      	strh	r3, [r4, #12]
 8004fd0:	4632      	mov	r2, r6
 8004fd2:	463b      	mov	r3, r7
 8004fd4:	4628      	mov	r0, r5
 8004fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fda:	f000 b869 	b.w	80050b0 <_write_r>

08004fde <__sseek>:
 8004fde:	b510      	push	{r4, lr}
 8004fe0:	460c      	mov	r4, r1
 8004fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fe6:	f000 f9b5 	bl	8005354 <_lseek_r>
 8004fea:	1c43      	adds	r3, r0, #1
 8004fec:	89a3      	ldrh	r3, [r4, #12]
 8004fee:	bf15      	itete	ne
 8004ff0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ff2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ff6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ffa:	81a3      	strheq	r3, [r4, #12]
 8004ffc:	bf18      	it	ne
 8004ffe:	81a3      	strhne	r3, [r4, #12]
 8005000:	bd10      	pop	{r4, pc}

08005002 <__sclose>:
 8005002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005006:	f000 b8d3 	b.w	80051b0 <_close_r>
	...

0800500c <__swbuf_r>:
 800500c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800500e:	460e      	mov	r6, r1
 8005010:	4614      	mov	r4, r2
 8005012:	4605      	mov	r5, r0
 8005014:	b118      	cbz	r0, 800501e <__swbuf_r+0x12>
 8005016:	6983      	ldr	r3, [r0, #24]
 8005018:	b90b      	cbnz	r3, 800501e <__swbuf_r+0x12>
 800501a:	f7ff fc19 	bl	8004850 <__sinit>
 800501e:	4b21      	ldr	r3, [pc, #132]	; (80050a4 <__swbuf_r+0x98>)
 8005020:	429c      	cmp	r4, r3
 8005022:	d12b      	bne.n	800507c <__swbuf_r+0x70>
 8005024:	686c      	ldr	r4, [r5, #4]
 8005026:	69a3      	ldr	r3, [r4, #24]
 8005028:	60a3      	str	r3, [r4, #8]
 800502a:	89a3      	ldrh	r3, [r4, #12]
 800502c:	071a      	lsls	r2, r3, #28
 800502e:	d52f      	bpl.n	8005090 <__swbuf_r+0x84>
 8005030:	6923      	ldr	r3, [r4, #16]
 8005032:	b36b      	cbz	r3, 8005090 <__swbuf_r+0x84>
 8005034:	6923      	ldr	r3, [r4, #16]
 8005036:	6820      	ldr	r0, [r4, #0]
 8005038:	1ac0      	subs	r0, r0, r3
 800503a:	6963      	ldr	r3, [r4, #20]
 800503c:	b2f6      	uxtb	r6, r6
 800503e:	4283      	cmp	r3, r0
 8005040:	4637      	mov	r7, r6
 8005042:	dc04      	bgt.n	800504e <__swbuf_r+0x42>
 8005044:	4621      	mov	r1, r4
 8005046:	4628      	mov	r0, r5
 8005048:	f000 f948 	bl	80052dc <_fflush_r>
 800504c:	bb30      	cbnz	r0, 800509c <__swbuf_r+0x90>
 800504e:	68a3      	ldr	r3, [r4, #8]
 8005050:	3b01      	subs	r3, #1
 8005052:	60a3      	str	r3, [r4, #8]
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	1c5a      	adds	r2, r3, #1
 8005058:	6022      	str	r2, [r4, #0]
 800505a:	701e      	strb	r6, [r3, #0]
 800505c:	6963      	ldr	r3, [r4, #20]
 800505e:	3001      	adds	r0, #1
 8005060:	4283      	cmp	r3, r0
 8005062:	d004      	beq.n	800506e <__swbuf_r+0x62>
 8005064:	89a3      	ldrh	r3, [r4, #12]
 8005066:	07db      	lsls	r3, r3, #31
 8005068:	d506      	bpl.n	8005078 <__swbuf_r+0x6c>
 800506a:	2e0a      	cmp	r6, #10
 800506c:	d104      	bne.n	8005078 <__swbuf_r+0x6c>
 800506e:	4621      	mov	r1, r4
 8005070:	4628      	mov	r0, r5
 8005072:	f000 f933 	bl	80052dc <_fflush_r>
 8005076:	b988      	cbnz	r0, 800509c <__swbuf_r+0x90>
 8005078:	4638      	mov	r0, r7
 800507a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800507c:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <__swbuf_r+0x9c>)
 800507e:	429c      	cmp	r4, r3
 8005080:	d101      	bne.n	8005086 <__swbuf_r+0x7a>
 8005082:	68ac      	ldr	r4, [r5, #8]
 8005084:	e7cf      	b.n	8005026 <__swbuf_r+0x1a>
 8005086:	4b09      	ldr	r3, [pc, #36]	; (80050ac <__swbuf_r+0xa0>)
 8005088:	429c      	cmp	r4, r3
 800508a:	bf08      	it	eq
 800508c:	68ec      	ldreq	r4, [r5, #12]
 800508e:	e7ca      	b.n	8005026 <__swbuf_r+0x1a>
 8005090:	4621      	mov	r1, r4
 8005092:	4628      	mov	r0, r5
 8005094:	f000 f81e 	bl	80050d4 <__swsetup_r>
 8005098:	2800      	cmp	r0, #0
 800509a:	d0cb      	beq.n	8005034 <__swbuf_r+0x28>
 800509c:	f04f 37ff 	mov.w	r7, #4294967295
 80050a0:	e7ea      	b.n	8005078 <__swbuf_r+0x6c>
 80050a2:	bf00      	nop
 80050a4:	08005514 	.word	0x08005514
 80050a8:	08005534 	.word	0x08005534
 80050ac:	080054f4 	.word	0x080054f4

080050b0 <_write_r>:
 80050b0:	b538      	push	{r3, r4, r5, lr}
 80050b2:	4d07      	ldr	r5, [pc, #28]	; (80050d0 <_write_r+0x20>)
 80050b4:	4604      	mov	r4, r0
 80050b6:	4608      	mov	r0, r1
 80050b8:	4611      	mov	r1, r2
 80050ba:	2200      	movs	r2, #0
 80050bc:	602a      	str	r2, [r5, #0]
 80050be:	461a      	mov	r2, r3
 80050c0:	f7fb fd39 	bl	8000b36 <_write>
 80050c4:	1c43      	adds	r3, r0, #1
 80050c6:	d102      	bne.n	80050ce <_write_r+0x1e>
 80050c8:	682b      	ldr	r3, [r5, #0]
 80050ca:	b103      	cbz	r3, 80050ce <_write_r+0x1e>
 80050cc:	6023      	str	r3, [r4, #0]
 80050ce:	bd38      	pop	{r3, r4, r5, pc}
 80050d0:	200002d0 	.word	0x200002d0

080050d4 <__swsetup_r>:
 80050d4:	4b32      	ldr	r3, [pc, #200]	; (80051a0 <__swsetup_r+0xcc>)
 80050d6:	b570      	push	{r4, r5, r6, lr}
 80050d8:	681d      	ldr	r5, [r3, #0]
 80050da:	4606      	mov	r6, r0
 80050dc:	460c      	mov	r4, r1
 80050de:	b125      	cbz	r5, 80050ea <__swsetup_r+0x16>
 80050e0:	69ab      	ldr	r3, [r5, #24]
 80050e2:	b913      	cbnz	r3, 80050ea <__swsetup_r+0x16>
 80050e4:	4628      	mov	r0, r5
 80050e6:	f7ff fbb3 	bl	8004850 <__sinit>
 80050ea:	4b2e      	ldr	r3, [pc, #184]	; (80051a4 <__swsetup_r+0xd0>)
 80050ec:	429c      	cmp	r4, r3
 80050ee:	d10f      	bne.n	8005110 <__swsetup_r+0x3c>
 80050f0:	686c      	ldr	r4, [r5, #4]
 80050f2:	89a3      	ldrh	r3, [r4, #12]
 80050f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80050f8:	0719      	lsls	r1, r3, #28
 80050fa:	d42c      	bmi.n	8005156 <__swsetup_r+0x82>
 80050fc:	06dd      	lsls	r5, r3, #27
 80050fe:	d411      	bmi.n	8005124 <__swsetup_r+0x50>
 8005100:	2309      	movs	r3, #9
 8005102:	6033      	str	r3, [r6, #0]
 8005104:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005108:	81a3      	strh	r3, [r4, #12]
 800510a:	f04f 30ff 	mov.w	r0, #4294967295
 800510e:	e03e      	b.n	800518e <__swsetup_r+0xba>
 8005110:	4b25      	ldr	r3, [pc, #148]	; (80051a8 <__swsetup_r+0xd4>)
 8005112:	429c      	cmp	r4, r3
 8005114:	d101      	bne.n	800511a <__swsetup_r+0x46>
 8005116:	68ac      	ldr	r4, [r5, #8]
 8005118:	e7eb      	b.n	80050f2 <__swsetup_r+0x1e>
 800511a:	4b24      	ldr	r3, [pc, #144]	; (80051ac <__swsetup_r+0xd8>)
 800511c:	429c      	cmp	r4, r3
 800511e:	bf08      	it	eq
 8005120:	68ec      	ldreq	r4, [r5, #12]
 8005122:	e7e6      	b.n	80050f2 <__swsetup_r+0x1e>
 8005124:	0758      	lsls	r0, r3, #29
 8005126:	d512      	bpl.n	800514e <__swsetup_r+0x7a>
 8005128:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800512a:	b141      	cbz	r1, 800513e <__swsetup_r+0x6a>
 800512c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005130:	4299      	cmp	r1, r3
 8005132:	d002      	beq.n	800513a <__swsetup_r+0x66>
 8005134:	4630      	mov	r0, r6
 8005136:	f7ff fa61 	bl	80045fc <_free_r>
 800513a:	2300      	movs	r3, #0
 800513c:	6363      	str	r3, [r4, #52]	; 0x34
 800513e:	89a3      	ldrh	r3, [r4, #12]
 8005140:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005144:	81a3      	strh	r3, [r4, #12]
 8005146:	2300      	movs	r3, #0
 8005148:	6063      	str	r3, [r4, #4]
 800514a:	6923      	ldr	r3, [r4, #16]
 800514c:	6023      	str	r3, [r4, #0]
 800514e:	89a3      	ldrh	r3, [r4, #12]
 8005150:	f043 0308 	orr.w	r3, r3, #8
 8005154:	81a3      	strh	r3, [r4, #12]
 8005156:	6923      	ldr	r3, [r4, #16]
 8005158:	b94b      	cbnz	r3, 800516e <__swsetup_r+0x9a>
 800515a:	89a3      	ldrh	r3, [r4, #12]
 800515c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005164:	d003      	beq.n	800516e <__swsetup_r+0x9a>
 8005166:	4621      	mov	r1, r4
 8005168:	4630      	mov	r0, r6
 800516a:	f000 f929 	bl	80053c0 <__smakebuf_r>
 800516e:	89a0      	ldrh	r0, [r4, #12]
 8005170:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005174:	f010 0301 	ands.w	r3, r0, #1
 8005178:	d00a      	beq.n	8005190 <__swsetup_r+0xbc>
 800517a:	2300      	movs	r3, #0
 800517c:	60a3      	str	r3, [r4, #8]
 800517e:	6963      	ldr	r3, [r4, #20]
 8005180:	425b      	negs	r3, r3
 8005182:	61a3      	str	r3, [r4, #24]
 8005184:	6923      	ldr	r3, [r4, #16]
 8005186:	b943      	cbnz	r3, 800519a <__swsetup_r+0xc6>
 8005188:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800518c:	d1ba      	bne.n	8005104 <__swsetup_r+0x30>
 800518e:	bd70      	pop	{r4, r5, r6, pc}
 8005190:	0781      	lsls	r1, r0, #30
 8005192:	bf58      	it	pl
 8005194:	6963      	ldrpl	r3, [r4, #20]
 8005196:	60a3      	str	r3, [r4, #8]
 8005198:	e7f4      	b.n	8005184 <__swsetup_r+0xb0>
 800519a:	2000      	movs	r0, #0
 800519c:	e7f7      	b.n	800518e <__swsetup_r+0xba>
 800519e:	bf00      	nop
 80051a0:	2000000c 	.word	0x2000000c
 80051a4:	08005514 	.word	0x08005514
 80051a8:	08005534 	.word	0x08005534
 80051ac:	080054f4 	.word	0x080054f4

080051b0 <_close_r>:
 80051b0:	b538      	push	{r3, r4, r5, lr}
 80051b2:	4d06      	ldr	r5, [pc, #24]	; (80051cc <_close_r+0x1c>)
 80051b4:	2300      	movs	r3, #0
 80051b6:	4604      	mov	r4, r0
 80051b8:	4608      	mov	r0, r1
 80051ba:	602b      	str	r3, [r5, #0]
 80051bc:	f7fb fe6b 	bl	8000e96 <_close>
 80051c0:	1c43      	adds	r3, r0, #1
 80051c2:	d102      	bne.n	80051ca <_close_r+0x1a>
 80051c4:	682b      	ldr	r3, [r5, #0]
 80051c6:	b103      	cbz	r3, 80051ca <_close_r+0x1a>
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	bd38      	pop	{r3, r4, r5, pc}
 80051cc:	200002d0 	.word	0x200002d0

080051d0 <__sflush_r>:
 80051d0:	898a      	ldrh	r2, [r1, #12]
 80051d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051d6:	4605      	mov	r5, r0
 80051d8:	0710      	lsls	r0, r2, #28
 80051da:	460c      	mov	r4, r1
 80051dc:	d458      	bmi.n	8005290 <__sflush_r+0xc0>
 80051de:	684b      	ldr	r3, [r1, #4]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	dc05      	bgt.n	80051f0 <__sflush_r+0x20>
 80051e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	dc02      	bgt.n	80051f0 <__sflush_r+0x20>
 80051ea:	2000      	movs	r0, #0
 80051ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051f2:	2e00      	cmp	r6, #0
 80051f4:	d0f9      	beq.n	80051ea <__sflush_r+0x1a>
 80051f6:	2300      	movs	r3, #0
 80051f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80051fc:	682f      	ldr	r7, [r5, #0]
 80051fe:	602b      	str	r3, [r5, #0]
 8005200:	d032      	beq.n	8005268 <__sflush_r+0x98>
 8005202:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005204:	89a3      	ldrh	r3, [r4, #12]
 8005206:	075a      	lsls	r2, r3, #29
 8005208:	d505      	bpl.n	8005216 <__sflush_r+0x46>
 800520a:	6863      	ldr	r3, [r4, #4]
 800520c:	1ac0      	subs	r0, r0, r3
 800520e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005210:	b10b      	cbz	r3, 8005216 <__sflush_r+0x46>
 8005212:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005214:	1ac0      	subs	r0, r0, r3
 8005216:	2300      	movs	r3, #0
 8005218:	4602      	mov	r2, r0
 800521a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800521c:	6a21      	ldr	r1, [r4, #32]
 800521e:	4628      	mov	r0, r5
 8005220:	47b0      	blx	r6
 8005222:	1c43      	adds	r3, r0, #1
 8005224:	89a3      	ldrh	r3, [r4, #12]
 8005226:	d106      	bne.n	8005236 <__sflush_r+0x66>
 8005228:	6829      	ldr	r1, [r5, #0]
 800522a:	291d      	cmp	r1, #29
 800522c:	d82c      	bhi.n	8005288 <__sflush_r+0xb8>
 800522e:	4a2a      	ldr	r2, [pc, #168]	; (80052d8 <__sflush_r+0x108>)
 8005230:	40ca      	lsrs	r2, r1
 8005232:	07d6      	lsls	r6, r2, #31
 8005234:	d528      	bpl.n	8005288 <__sflush_r+0xb8>
 8005236:	2200      	movs	r2, #0
 8005238:	6062      	str	r2, [r4, #4]
 800523a:	04d9      	lsls	r1, r3, #19
 800523c:	6922      	ldr	r2, [r4, #16]
 800523e:	6022      	str	r2, [r4, #0]
 8005240:	d504      	bpl.n	800524c <__sflush_r+0x7c>
 8005242:	1c42      	adds	r2, r0, #1
 8005244:	d101      	bne.n	800524a <__sflush_r+0x7a>
 8005246:	682b      	ldr	r3, [r5, #0]
 8005248:	b903      	cbnz	r3, 800524c <__sflush_r+0x7c>
 800524a:	6560      	str	r0, [r4, #84]	; 0x54
 800524c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800524e:	602f      	str	r7, [r5, #0]
 8005250:	2900      	cmp	r1, #0
 8005252:	d0ca      	beq.n	80051ea <__sflush_r+0x1a>
 8005254:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005258:	4299      	cmp	r1, r3
 800525a:	d002      	beq.n	8005262 <__sflush_r+0x92>
 800525c:	4628      	mov	r0, r5
 800525e:	f7ff f9cd 	bl	80045fc <_free_r>
 8005262:	2000      	movs	r0, #0
 8005264:	6360      	str	r0, [r4, #52]	; 0x34
 8005266:	e7c1      	b.n	80051ec <__sflush_r+0x1c>
 8005268:	6a21      	ldr	r1, [r4, #32]
 800526a:	2301      	movs	r3, #1
 800526c:	4628      	mov	r0, r5
 800526e:	47b0      	blx	r6
 8005270:	1c41      	adds	r1, r0, #1
 8005272:	d1c7      	bne.n	8005204 <__sflush_r+0x34>
 8005274:	682b      	ldr	r3, [r5, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d0c4      	beq.n	8005204 <__sflush_r+0x34>
 800527a:	2b1d      	cmp	r3, #29
 800527c:	d001      	beq.n	8005282 <__sflush_r+0xb2>
 800527e:	2b16      	cmp	r3, #22
 8005280:	d101      	bne.n	8005286 <__sflush_r+0xb6>
 8005282:	602f      	str	r7, [r5, #0]
 8005284:	e7b1      	b.n	80051ea <__sflush_r+0x1a>
 8005286:	89a3      	ldrh	r3, [r4, #12]
 8005288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800528c:	81a3      	strh	r3, [r4, #12]
 800528e:	e7ad      	b.n	80051ec <__sflush_r+0x1c>
 8005290:	690f      	ldr	r7, [r1, #16]
 8005292:	2f00      	cmp	r7, #0
 8005294:	d0a9      	beq.n	80051ea <__sflush_r+0x1a>
 8005296:	0793      	lsls	r3, r2, #30
 8005298:	680e      	ldr	r6, [r1, #0]
 800529a:	bf08      	it	eq
 800529c:	694b      	ldreq	r3, [r1, #20]
 800529e:	600f      	str	r7, [r1, #0]
 80052a0:	bf18      	it	ne
 80052a2:	2300      	movne	r3, #0
 80052a4:	eba6 0807 	sub.w	r8, r6, r7
 80052a8:	608b      	str	r3, [r1, #8]
 80052aa:	f1b8 0f00 	cmp.w	r8, #0
 80052ae:	dd9c      	ble.n	80051ea <__sflush_r+0x1a>
 80052b0:	6a21      	ldr	r1, [r4, #32]
 80052b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80052b4:	4643      	mov	r3, r8
 80052b6:	463a      	mov	r2, r7
 80052b8:	4628      	mov	r0, r5
 80052ba:	47b0      	blx	r6
 80052bc:	2800      	cmp	r0, #0
 80052be:	dc06      	bgt.n	80052ce <__sflush_r+0xfe>
 80052c0:	89a3      	ldrh	r3, [r4, #12]
 80052c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052c6:	81a3      	strh	r3, [r4, #12]
 80052c8:	f04f 30ff 	mov.w	r0, #4294967295
 80052cc:	e78e      	b.n	80051ec <__sflush_r+0x1c>
 80052ce:	4407      	add	r7, r0
 80052d0:	eba8 0800 	sub.w	r8, r8, r0
 80052d4:	e7e9      	b.n	80052aa <__sflush_r+0xda>
 80052d6:	bf00      	nop
 80052d8:	20400001 	.word	0x20400001

080052dc <_fflush_r>:
 80052dc:	b538      	push	{r3, r4, r5, lr}
 80052de:	690b      	ldr	r3, [r1, #16]
 80052e0:	4605      	mov	r5, r0
 80052e2:	460c      	mov	r4, r1
 80052e4:	b913      	cbnz	r3, 80052ec <_fflush_r+0x10>
 80052e6:	2500      	movs	r5, #0
 80052e8:	4628      	mov	r0, r5
 80052ea:	bd38      	pop	{r3, r4, r5, pc}
 80052ec:	b118      	cbz	r0, 80052f6 <_fflush_r+0x1a>
 80052ee:	6983      	ldr	r3, [r0, #24]
 80052f0:	b90b      	cbnz	r3, 80052f6 <_fflush_r+0x1a>
 80052f2:	f7ff faad 	bl	8004850 <__sinit>
 80052f6:	4b14      	ldr	r3, [pc, #80]	; (8005348 <_fflush_r+0x6c>)
 80052f8:	429c      	cmp	r4, r3
 80052fa:	d11b      	bne.n	8005334 <_fflush_r+0x58>
 80052fc:	686c      	ldr	r4, [r5, #4]
 80052fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d0ef      	beq.n	80052e6 <_fflush_r+0xa>
 8005306:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005308:	07d0      	lsls	r0, r2, #31
 800530a:	d404      	bmi.n	8005316 <_fflush_r+0x3a>
 800530c:	0599      	lsls	r1, r3, #22
 800530e:	d402      	bmi.n	8005316 <_fflush_r+0x3a>
 8005310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005312:	f7ff fb3b 	bl	800498c <__retarget_lock_acquire_recursive>
 8005316:	4628      	mov	r0, r5
 8005318:	4621      	mov	r1, r4
 800531a:	f7ff ff59 	bl	80051d0 <__sflush_r>
 800531e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005320:	07da      	lsls	r2, r3, #31
 8005322:	4605      	mov	r5, r0
 8005324:	d4e0      	bmi.n	80052e8 <_fflush_r+0xc>
 8005326:	89a3      	ldrh	r3, [r4, #12]
 8005328:	059b      	lsls	r3, r3, #22
 800532a:	d4dd      	bmi.n	80052e8 <_fflush_r+0xc>
 800532c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800532e:	f7ff fb2e 	bl	800498e <__retarget_lock_release_recursive>
 8005332:	e7d9      	b.n	80052e8 <_fflush_r+0xc>
 8005334:	4b05      	ldr	r3, [pc, #20]	; (800534c <_fflush_r+0x70>)
 8005336:	429c      	cmp	r4, r3
 8005338:	d101      	bne.n	800533e <_fflush_r+0x62>
 800533a:	68ac      	ldr	r4, [r5, #8]
 800533c:	e7df      	b.n	80052fe <_fflush_r+0x22>
 800533e:	4b04      	ldr	r3, [pc, #16]	; (8005350 <_fflush_r+0x74>)
 8005340:	429c      	cmp	r4, r3
 8005342:	bf08      	it	eq
 8005344:	68ec      	ldreq	r4, [r5, #12]
 8005346:	e7da      	b.n	80052fe <_fflush_r+0x22>
 8005348:	08005514 	.word	0x08005514
 800534c:	08005534 	.word	0x08005534
 8005350:	080054f4 	.word	0x080054f4

08005354 <_lseek_r>:
 8005354:	b538      	push	{r3, r4, r5, lr}
 8005356:	4d07      	ldr	r5, [pc, #28]	; (8005374 <_lseek_r+0x20>)
 8005358:	4604      	mov	r4, r0
 800535a:	4608      	mov	r0, r1
 800535c:	4611      	mov	r1, r2
 800535e:	2200      	movs	r2, #0
 8005360:	602a      	str	r2, [r5, #0]
 8005362:	461a      	mov	r2, r3
 8005364:	f7fb fdbe 	bl	8000ee4 <_lseek>
 8005368:	1c43      	adds	r3, r0, #1
 800536a:	d102      	bne.n	8005372 <_lseek_r+0x1e>
 800536c:	682b      	ldr	r3, [r5, #0]
 800536e:	b103      	cbz	r3, 8005372 <_lseek_r+0x1e>
 8005370:	6023      	str	r3, [r4, #0]
 8005372:	bd38      	pop	{r3, r4, r5, pc}
 8005374:	200002d0 	.word	0x200002d0

08005378 <__swhatbuf_r>:
 8005378:	b570      	push	{r4, r5, r6, lr}
 800537a:	460e      	mov	r6, r1
 800537c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005380:	2900      	cmp	r1, #0
 8005382:	b096      	sub	sp, #88	; 0x58
 8005384:	4614      	mov	r4, r2
 8005386:	461d      	mov	r5, r3
 8005388:	da07      	bge.n	800539a <__swhatbuf_r+0x22>
 800538a:	2300      	movs	r3, #0
 800538c:	602b      	str	r3, [r5, #0]
 800538e:	89b3      	ldrh	r3, [r6, #12]
 8005390:	061a      	lsls	r2, r3, #24
 8005392:	d410      	bmi.n	80053b6 <__swhatbuf_r+0x3e>
 8005394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005398:	e00e      	b.n	80053b8 <__swhatbuf_r+0x40>
 800539a:	466a      	mov	r2, sp
 800539c:	f000 f862 	bl	8005464 <_fstat_r>
 80053a0:	2800      	cmp	r0, #0
 80053a2:	dbf2      	blt.n	800538a <__swhatbuf_r+0x12>
 80053a4:	9a01      	ldr	r2, [sp, #4]
 80053a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80053aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80053ae:	425a      	negs	r2, r3
 80053b0:	415a      	adcs	r2, r3
 80053b2:	602a      	str	r2, [r5, #0]
 80053b4:	e7ee      	b.n	8005394 <__swhatbuf_r+0x1c>
 80053b6:	2340      	movs	r3, #64	; 0x40
 80053b8:	2000      	movs	r0, #0
 80053ba:	6023      	str	r3, [r4, #0]
 80053bc:	b016      	add	sp, #88	; 0x58
 80053be:	bd70      	pop	{r4, r5, r6, pc}

080053c0 <__smakebuf_r>:
 80053c0:	898b      	ldrh	r3, [r1, #12]
 80053c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80053c4:	079d      	lsls	r5, r3, #30
 80053c6:	4606      	mov	r6, r0
 80053c8:	460c      	mov	r4, r1
 80053ca:	d507      	bpl.n	80053dc <__smakebuf_r+0x1c>
 80053cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80053d0:	6023      	str	r3, [r4, #0]
 80053d2:	6123      	str	r3, [r4, #16]
 80053d4:	2301      	movs	r3, #1
 80053d6:	6163      	str	r3, [r4, #20]
 80053d8:	b002      	add	sp, #8
 80053da:	bd70      	pop	{r4, r5, r6, pc}
 80053dc:	ab01      	add	r3, sp, #4
 80053de:	466a      	mov	r2, sp
 80053e0:	f7ff ffca 	bl	8005378 <__swhatbuf_r>
 80053e4:	9900      	ldr	r1, [sp, #0]
 80053e6:	4605      	mov	r5, r0
 80053e8:	4630      	mov	r0, r6
 80053ea:	f7ff f957 	bl	800469c <_malloc_r>
 80053ee:	b948      	cbnz	r0, 8005404 <__smakebuf_r+0x44>
 80053f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053f4:	059a      	lsls	r2, r3, #22
 80053f6:	d4ef      	bmi.n	80053d8 <__smakebuf_r+0x18>
 80053f8:	f023 0303 	bic.w	r3, r3, #3
 80053fc:	f043 0302 	orr.w	r3, r3, #2
 8005400:	81a3      	strh	r3, [r4, #12]
 8005402:	e7e3      	b.n	80053cc <__smakebuf_r+0xc>
 8005404:	4b0d      	ldr	r3, [pc, #52]	; (800543c <__smakebuf_r+0x7c>)
 8005406:	62b3      	str	r3, [r6, #40]	; 0x28
 8005408:	89a3      	ldrh	r3, [r4, #12]
 800540a:	6020      	str	r0, [r4, #0]
 800540c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005410:	81a3      	strh	r3, [r4, #12]
 8005412:	9b00      	ldr	r3, [sp, #0]
 8005414:	6163      	str	r3, [r4, #20]
 8005416:	9b01      	ldr	r3, [sp, #4]
 8005418:	6120      	str	r0, [r4, #16]
 800541a:	b15b      	cbz	r3, 8005434 <__smakebuf_r+0x74>
 800541c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005420:	4630      	mov	r0, r6
 8005422:	f000 f831 	bl	8005488 <_isatty_r>
 8005426:	b128      	cbz	r0, 8005434 <__smakebuf_r+0x74>
 8005428:	89a3      	ldrh	r3, [r4, #12]
 800542a:	f023 0303 	bic.w	r3, r3, #3
 800542e:	f043 0301 	orr.w	r3, r3, #1
 8005432:	81a3      	strh	r3, [r4, #12]
 8005434:	89a0      	ldrh	r0, [r4, #12]
 8005436:	4305      	orrs	r5, r0
 8005438:	81a5      	strh	r5, [r4, #12]
 800543a:	e7cd      	b.n	80053d8 <__smakebuf_r+0x18>
 800543c:	080047e9 	.word	0x080047e9

08005440 <_read_r>:
 8005440:	b538      	push	{r3, r4, r5, lr}
 8005442:	4d07      	ldr	r5, [pc, #28]	; (8005460 <_read_r+0x20>)
 8005444:	4604      	mov	r4, r0
 8005446:	4608      	mov	r0, r1
 8005448:	4611      	mov	r1, r2
 800544a:	2200      	movs	r2, #0
 800544c:	602a      	str	r2, [r5, #0]
 800544e:	461a      	mov	r2, r3
 8005450:	f7fb fd04 	bl	8000e5c <_read>
 8005454:	1c43      	adds	r3, r0, #1
 8005456:	d102      	bne.n	800545e <_read_r+0x1e>
 8005458:	682b      	ldr	r3, [r5, #0]
 800545a:	b103      	cbz	r3, 800545e <_read_r+0x1e>
 800545c:	6023      	str	r3, [r4, #0]
 800545e:	bd38      	pop	{r3, r4, r5, pc}
 8005460:	200002d0 	.word	0x200002d0

08005464 <_fstat_r>:
 8005464:	b538      	push	{r3, r4, r5, lr}
 8005466:	4d07      	ldr	r5, [pc, #28]	; (8005484 <_fstat_r+0x20>)
 8005468:	2300      	movs	r3, #0
 800546a:	4604      	mov	r4, r0
 800546c:	4608      	mov	r0, r1
 800546e:	4611      	mov	r1, r2
 8005470:	602b      	str	r3, [r5, #0]
 8005472:	f7fb fd1c 	bl	8000eae <_fstat>
 8005476:	1c43      	adds	r3, r0, #1
 8005478:	d102      	bne.n	8005480 <_fstat_r+0x1c>
 800547a:	682b      	ldr	r3, [r5, #0]
 800547c:	b103      	cbz	r3, 8005480 <_fstat_r+0x1c>
 800547e:	6023      	str	r3, [r4, #0]
 8005480:	bd38      	pop	{r3, r4, r5, pc}
 8005482:	bf00      	nop
 8005484:	200002d0 	.word	0x200002d0

08005488 <_isatty_r>:
 8005488:	b538      	push	{r3, r4, r5, lr}
 800548a:	4d06      	ldr	r5, [pc, #24]	; (80054a4 <_isatty_r+0x1c>)
 800548c:	2300      	movs	r3, #0
 800548e:	4604      	mov	r4, r0
 8005490:	4608      	mov	r0, r1
 8005492:	602b      	str	r3, [r5, #0]
 8005494:	f7fb fd1b 	bl	8000ece <_isatty>
 8005498:	1c43      	adds	r3, r0, #1
 800549a:	d102      	bne.n	80054a2 <_isatty_r+0x1a>
 800549c:	682b      	ldr	r3, [r5, #0]
 800549e:	b103      	cbz	r3, 80054a2 <_isatty_r+0x1a>
 80054a0:	6023      	str	r3, [r4, #0]
 80054a2:	bd38      	pop	{r3, r4, r5, pc}
 80054a4:	200002d0 	.word	0x200002d0

080054a8 <_init>:
 80054a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054aa:	bf00      	nop
 80054ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ae:	bc08      	pop	{r3}
 80054b0:	469e      	mov	lr, r3
 80054b2:	4770      	bx	lr

080054b4 <_fini>:
 80054b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b6:	bf00      	nop
 80054b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ba:	bc08      	pop	{r3}
 80054bc:	469e      	mov	lr, r3
 80054be:	4770      	bx	lr
