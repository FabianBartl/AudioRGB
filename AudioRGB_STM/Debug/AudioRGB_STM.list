
AudioRGB_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08005368  08005368  00015368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053cc  080053cc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080053cc  080053cc  000153cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053d4  080053d4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053d4  080053d4  000153d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053d8  080053d8  000153d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080053dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000070  0800544c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  0800544c  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015843  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c57  00000000  00000000  000358e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  00038540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  000396b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019073  00000000  00000000  0003a720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000174fd  00000000  00000000  00053793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c467  00000000  00000000  0006ac90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001070f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d20  00000000  00000000  0010714c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005350 	.word	0x08005350

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005350 	.word	0x08005350

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <ADC_Select_CH1>:

/* USER CODE BEGIN 0 */
// Copied generated code from MX_ADC1_Init(), but modified for one channel readout
// left audio channel
void ADC_Select_CH1(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800058e:	463b      	mov	r3, r7
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_1;
 800059a:	2301      	movs	r3, #1
 800059c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1; // has to be 1, because it's only one channel selected
 800059e:	2301      	movs	r3, #1
 80005a0:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a6:	463b      	mov	r3, r7
 80005a8:	4619      	mov	r1, r3
 80005aa:	4806      	ldr	r0, [pc, #24]	; (80005c4 <ADC_Select_CH1+0x3c>)
 80005ac:	f001 fbea 	bl	8001d84 <HAL_ADC_ConfigChannel>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <ADC_Select_CH1+0x32>
	{
		Error_Handler();
 80005b6:	f000 fd2f 	bl	8001018 <Error_Handler>
	}
}
 80005ba:	bf00      	nop
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000098 	.word	0x20000098

080005c8 <ADC_Select_CH4>:
// right audio channel
void ADC_Select_CH4(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80005ce:	463b      	mov	r3, r7
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_4;
 80005da:	2304      	movs	r3, #4
 80005dc:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1; // has to be 1, because it's only one channel selected
 80005de:	2301      	movs	r3, #1
 80005e0:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e6:	463b      	mov	r3, r7
 80005e8:	4619      	mov	r1, r3
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <ADC_Select_CH4+0x3c>)
 80005ec:	f001 fbca 	bl	8001d84 <HAL_ADC_ConfigChannel>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <ADC_Select_CH4+0x32>
	{
		Error_Handler();
 80005f6:	f000 fd0f 	bl	8001018 <Error_Handler>
	}
}
 80005fa:	bf00      	nop
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000098 	.word	0x20000098

08000608 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	463b      	mov	r3, r7
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	*/
  	// Copied from below for editing as user code and skip generated code with goto
	hadc1.Instance = ADC1;
 800061a:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <MX_ADC1_Init+0x7c>)
 800061c:	4a1a      	ldr	r2, [pc, #104]	; (8000688 <MX_ADC1_Init+0x80>)
 800061e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000620:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_ADC1_Init+0x7c>)
 8000622:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000626:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000628:	4b16      	ldr	r3, [pc, #88]	; (8000684 <MX_ADC1_Init+0x7c>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_ADC1_Init+0x7c>)
 8000630:	2201      	movs	r2, #1
 8000632:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000634:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MX_ADC1_Init+0x7c>)
 8000636:	2201      	movs	r2, #1
 8000638:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_ADC1_Init+0x7c>)
 800063c:	2200      	movs	r2, #0
 800063e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <MX_ADC1_Init+0x7c>)
 8000644:	2200      	movs	r2, #0
 8000646:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000648:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_ADC1_Init+0x7c>)
 800064a:	4a10      	ldr	r2, [pc, #64]	; (800068c <MX_ADC1_Init+0x84>)
 800064c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800064e:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <MX_ADC1_Init+0x7c>)
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;	// setup with 3 for getting rank settings, later set manually to 1
 8000654:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <MX_ADC1_Init+0x7c>)
 8000656:	2201      	movs	r2, #1
 8000658:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800065a:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <MX_ADC1_Init+0x7c>)
 800065c:	2200      	movs	r2, #0
 800065e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <MX_ADC1_Init+0x7c>)
 8000664:	2201      	movs	r2, #1
 8000666:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4806      	ldr	r0, [pc, #24]	; (8000684 <MX_ADC1_Init+0x7c>)
 800066a:	f001 f9c7 	bl	80019fc <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 8000674:	f000 fcd0 	bl	8001018 <Error_Handler>
	}

	// jump to user code ADC1_Init 2
	goto SKIP_ADC1_INIT_Generated;
 8000678:	bf00      	nop
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

	SKIP_ADC1_INIT_Generated:
	asm("nop");
 800067a:	bf00      	nop
  /* USER CODE END ADC1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000098 	.word	0x20000098
 8000688:	40012000 	.word	0x40012000
 800068c:	0f000001 	.word	0x0f000001

08000690 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a24      	ldr	r2, [pc, #144]	; (8000740 <HAL_ADC_MspInit+0xb0>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d141      	bne.n	8000736 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	4b23      	ldr	r3, [pc, #140]	; (8000744 <HAL_ADC_MspInit+0xb4>)
 80006b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ba:	4a22      	ldr	r2, [pc, #136]	; (8000744 <HAL_ADC_MspInit+0xb4>)
 80006bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c0:	6453      	str	r3, [r2, #68]	; 0x44
 80006c2:	4b20      	ldr	r3, [pc, #128]	; (8000744 <HAL_ADC_MspInit+0xb4>)
 80006c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	4b1c      	ldr	r3, [pc, #112]	; (8000744 <HAL_ADC_MspInit+0xb4>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a1b      	ldr	r2, [pc, #108]	; (8000744 <HAL_ADC_MspInit+0xb4>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b19      	ldr	r3, [pc, #100]	; (8000744 <HAL_ADC_MspInit+0xb4>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	4b15      	ldr	r3, [pc, #84]	; (8000744 <HAL_ADC_MspInit+0xb4>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a14      	ldr	r2, [pc, #80]	; (8000744 <HAL_ADC_MspInit+0xb4>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b12      	ldr	r3, [pc, #72]	; (8000744 <HAL_ADC_MspInit+0xb4>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = RNG_Pin;
 8000706:	2304      	movs	r3, #4
 8000708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800070a:	2303      	movs	r3, #3
 800070c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RNG_GPIO_Port, &GPIO_InitStruct);
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4619      	mov	r1, r3
 8000718:	480b      	ldr	r0, [pc, #44]	; (8000748 <HAL_ADC_MspInit+0xb8>)
 800071a:	f002 f94d 	bl	80029b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUX_L_Pin|AUX_R_Pin;
 800071e:	2312      	movs	r3, #18
 8000720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000722:	2303      	movs	r3, #3
 8000724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	4619      	mov	r1, r3
 8000730:	4806      	ldr	r0, [pc, #24]	; (800074c <HAL_ADC_MspInit+0xbc>)
 8000732:	f002 f941 	bl	80029b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000736:	bf00      	nop
 8000738:	3728      	adds	r7, #40	; 0x28
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40012000 	.word	0x40012000
 8000744:	40023800 	.word	0x40023800
 8000748:	40020800 	.word	0x40020800
 800074c:	40020000 	.word	0x40020000

08000750 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_DMA_Init+0x5c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a13      	ldr	r2, [pc, #76]	; (80007ac <MX_DMA_Init+0x5c>)
 8000760:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_DMA_Init+0x5c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2100      	movs	r1, #0
 8000776:	200b      	movs	r0, #11
 8000778:	f001 fdfd 	bl	8002376 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800077c:	200b      	movs	r0, #11
 800077e:	f001 fe16 	bl	80023ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2100      	movs	r1, #0
 8000786:	200f      	movs	r0, #15
 8000788:	f001 fdf5 	bl	8002376 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800078c:	200f      	movs	r0, #15
 800078e:	f001 fe0e 	bl	80023ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	2100      	movs	r1, #0
 8000796:	2010      	movs	r0, #16
 8000798:	f001 fded 	bl	8002376 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800079c:	2010      	movs	r0, #16
 800079e:	f001 fe06 	bl	80023ae <HAL_NVIC_EnableIRQ>

}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800

080007b0 <min>:

// --------
// min, max
// --------

float min(float a, float b) { return (a < b) ? a : b; }
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80007ba:	edc7 0a00 	vstr	s1, [r7]
 80007be:	ed97 7a01 	vldr	s14, [r7, #4]
 80007c2:	edd7 7a00 	vldr	s15, [r7]
 80007c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ce:	d501      	bpl.n	80007d4 <min+0x24>
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	e000      	b.n	80007d6 <min+0x26>
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	ee07 3a90 	vmov	s15, r3
 80007da:	eeb0 0a67 	vmov.f32	s0, s15
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <fillArray>:

// ------
// arrays
// ------

void fillArray(int val, int *arr, const size_t arrLen) { for(int i=0; i < arrLen; i++) arr[i] = val; }
 80007e8:	b480      	push	{r7}
 80007ea:	b087      	sub	sp, #28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	e008      	b.n	800080c <fillArray+0x24>
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	68ba      	ldr	r2, [r7, #8]
 8000800:	4413      	add	r3, r2
 8000802:	68fa      	ldr	r2, [r7, #12]
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	3301      	adds	r3, #1
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	429a      	cmp	r2, r3
 8000812:	d8f2      	bhi.n	80007fa <fillArray+0x12>
 8000814:	bf00      	nop
 8000816:	bf00      	nop
 8000818:	371c      	adds	r7, #28
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <emptyArray>:
void emptyArray(int *arr, const size_t arrLen) { fillArray(0, arr, arrLen); }
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
 800082a:	6039      	str	r1, [r7, #0]
 800082c:	683a      	ldr	r2, [r7, #0]
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	2000      	movs	r0, #0
 8000832:	f7ff ffd9 	bl	80007e8 <fillArray>
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <arraySum>:

int arraySum(int *arr, const size_t arrLen)
{
 800083e:	b480      	push	{r7}
 8000840:	b085      	sub	sp, #20
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
 8000846:	6039      	str	r1, [r7, #0]
	int sum = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
	for(size_t i=0; i < arrLen; i++) sum += arr[i];
 800084c:	2300      	movs	r3, #0
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	e00a      	b.n	8000868 <arraySum+0x2a>
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	4413      	add	r3, r2
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	68fa      	ldr	r2, [r7, #12]
 800085e:	4413      	add	r3, r2
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	3301      	adds	r3, #1
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68ba      	ldr	r2, [r7, #8]
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	429a      	cmp	r2, r3
 800086e:	d3f0      	bcc.n	8000852 <arraySum+0x14>
	return sum;
 8000870:	68fb      	ldr	r3, [r7, #12]
}
 8000872:	4618      	mov	r0, r3
 8000874:	3714      	adds	r7, #20
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <arrayAvr>:
float arrayAvr(int *arr, const size_t arrLen) { return (float)arraySum(arr, arrLen) / (float)arrLen; }
 800087e:	b580      	push	{r7, lr}
 8000880:	b082      	sub	sp, #8
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
 8000886:	6039      	str	r1, [r7, #0]
 8000888:	6839      	ldr	r1, [r7, #0]
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff ffd7 	bl	800083e <arraySum>
 8000890:	ee07 0a90 	vmov	s15, r0
 8000894:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	ee07 3a90 	vmov	s15, r3
 800089e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80008a6:	eef0 7a66 	vmov.f32	s15, s13
 80008aa:	eeb0 0a67 	vmov.f32	s0, s15
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <bufferAppend>:

// implements an append function for a circular array
// when the array is full, the values at the beginning are overwritten
// the buffer array contains the last measured ADC elements to smooth the audio signal
void bufferAppend(int val, int *arr, size_t *ind)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
	*ind = (*ind+1 > BUFFER_SIZE_AUX-1) ? 0 : *ind+1;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	3301      	adds	r3, #1
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d803      	bhi.n	80008d2 <bufferAppend+0x1e>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	3301      	adds	r3, #1
 80008d0:	e000      	b.n	80008d4 <bufferAppend+0x20>
 80008d2:	2300      	movs	r3, #0
 80008d4:	687a      	ldr	r2, [r7, #4]
 80008d6:	6013      	str	r3, [r2, #0]
	arr[*ind] = val;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	4413      	add	r3, r2
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	601a      	str	r2, [r3, #0]
}
 80008e6:	bf00      	nop
 80008e8:	3714      	adds	r7, #20
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <bufferFilter>:

// apply an average-filter to the last elements of the buffer array
float bufferFilter(int *arr)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b082      	sub	sp, #8
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
	return arrayAvr(arr, BUFFER_SIZE_AUX);
 80008fa:	2102      	movs	r1, #2
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff ffbe 	bl	800087e <arrayAvr>
 8000902:	eef0 7a40 	vmov.f32	s15, s0
}
 8000906:	eeb0 0a67 	vmov.f32	s0, s15
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <saturateLimits>:

// ----------------------------
// saturate, transform, amplify
// ----------------------------

float saturateLimits(float val, float lowerLim, float upperLim) { return (val < lowerLim) ? lowerLim : ((val > upperLim) ? upperLim : val); }
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	ed87 0a03 	vstr	s0, [r7, #12]
 800091a:	edc7 0a02 	vstr	s1, [r7, #8]
 800091e:	ed87 1a01 	vstr	s2, [r7, #4]
 8000922:	ed97 7a03 	vldr	s14, [r7, #12]
 8000926:	edd7 7a02 	vldr	s15, [r7, #8]
 800092a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800092e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000932:	d501      	bpl.n	8000938 <saturateLimits+0x28>
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	e00b      	b.n	8000950 <saturateLimits+0x40>
 8000938:	ed97 7a03 	vldr	s14, [r7, #12]
 800093c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000940:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000948:	dd01      	ble.n	800094e <saturateLimits+0x3e>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	e000      	b.n	8000950 <saturateLimits+0x40>
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	ee07 3a90 	vmov	s15, r3
 8000954:	eeb0 0a67 	vmov.f32	s0, s15
 8000958:	3714      	adds	r7, #20
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
	...

08000964 <saturate>:
float saturate(float val) { return saturateLimits(val, COLOR_MIN, COLOR_MAX); }
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	ed87 0a01 	vstr	s0, [r7, #4]
 800096e:	ed9f 1a07 	vldr	s2, [pc, #28]	; 800098c <saturate+0x28>
 8000972:	eddf 0a07 	vldr	s1, [pc, #28]	; 8000990 <saturate+0x2c>
 8000976:	ed97 0a01 	vldr	s0, [r7, #4]
 800097a:	f7ff ffc9 	bl	8000910 <saturateLimits>
 800097e:	eef0 7a40 	vmov.f32	s15, s0
 8000982:	eeb0 0a67 	vmov.f32	s0, s15
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	437f0000 	.word	0x437f0000
 8000990:	00000000 	.word	0x00000000

08000994 <transform>:

float transform(float val, float inMin, float inMax, float outMin, float outMax)
{
 8000994:	b480      	push	{r7}
 8000996:	b089      	sub	sp, #36	; 0x24
 8000998:	af00      	add	r7, sp, #0
 800099a:	ed87 0a05 	vstr	s0, [r7, #20]
 800099e:	edc7 0a04 	vstr	s1, [r7, #16]
 80009a2:	ed87 1a03 	vstr	s2, [r7, #12]
 80009a6:	edc7 1a02 	vstr	s3, [r7, #8]
 80009aa:	ed87 2a01 	vstr	s4, [r7, #4]
	float inHalf = inMin + (inMax - inMin) / 2;
 80009ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80009b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80009b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009ba:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80009be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80009c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009ca:	edc7 7a07 	vstr	s15, [r7, #28]
	float outHalf = outMin + (outMax - outMin) / 2;
 80009ce:	ed97 7a01 	vldr	s14, [r7, #4]
 80009d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80009d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009da:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80009de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80009e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009ea:	edc7 7a06 	vstr	s15, [r7, #24]
	return val - (inHalf - outHalf);
 80009ee:	ed97 7a07 	vldr	s14, [r7, #28]
 80009f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80009f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80009fe:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8000a02:	eeb0 0a67 	vmov.f32	s0, s15
 8000a06:	3724      	adds	r7, #36	; 0x24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <amplifyFactor>:

float amplifyFactor(float val, float fac) { return val * fac; }
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a1a:	edc7 0a00 	vstr	s1, [r7]
 8000a1e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000a22:	edd7 7a00 	vldr	s15, [r7]
 8000a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <amplify>:
float amplify(float val) { return amplifyFactor(val, VOLUME_BOOST); }
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a42:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000a46:	ed97 0a01 	vldr	s0, [r7, #4]
 8000a4a:	f7ff ffe1 	bl	8000a10 <amplifyFactor>
 8000a4e:	eef0 7a40 	vmov.f32	s15, s0
 8000a52:	eeb0 0a67 	vmov.f32	s0, s15
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <writeRGB>:
// ----
// rgbs
// ----

void writeRGB(int r, int g, int b)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
	// prevent higher pulses than period
	TIM4->CCR1 = (int)min(saturate(r), TIM4->ARR);
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	ee07 3a90 	vmov	s15, r3
 8000a6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a72:	eeb0 0a67 	vmov.f32	s0, s15
 8000a76:	f7ff ff75 	bl	8000964 <saturate>
 8000a7a:	eeb0 7a40 	vmov.f32	s14, s0
 8000a7e:	4b2b      	ldr	r3, [pc, #172]	; (8000b2c <writeRGB+0xd0>)
 8000a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a82:	ee07 3a90 	vmov	s15, r3
 8000a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a8a:	eef0 0a67 	vmov.f32	s1, s15
 8000a8e:	eeb0 0a47 	vmov.f32	s0, s14
 8000a92:	f7ff fe8d 	bl	80007b0 <min>
 8000a96:	eef0 7a40 	vmov.f32	s15, s0
 8000a9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a9e:	4b23      	ldr	r3, [pc, #140]	; (8000b2c <writeRGB+0xd0>)
 8000aa0:	ee17 2a90 	vmov	r2, s15
 8000aa4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = (int)min(saturate(g), TIM3->ARR);
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	ee07 3a90 	vmov	s15, r3
 8000aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ab4:	f7ff ff56 	bl	8000964 <saturate>
 8000ab8:	eeb0 7a40 	vmov.f32	s14, s0
 8000abc:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <writeRGB+0xd4>)
 8000abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac0:	ee07 3a90 	vmov	s15, r3
 8000ac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ac8:	eef0 0a67 	vmov.f32	s1, s15
 8000acc:	eeb0 0a47 	vmov.f32	s0, s14
 8000ad0:	f7ff fe6e 	bl	80007b0 <min>
 8000ad4:	eef0 7a40 	vmov.f32	s15, s0
 8000ad8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000adc:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <writeRGB+0xd4>)
 8000ade:	ee17 2a90 	vmov	r2, s15
 8000ae2:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR1 = (int)min(saturate(b), TIM3->ARR);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	ee07 3a90 	vmov	s15, r3
 8000aea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aee:	eeb0 0a67 	vmov.f32	s0, s15
 8000af2:	f7ff ff37 	bl	8000964 <saturate>
 8000af6:	eeb0 7a40 	vmov.f32	s14, s0
 8000afa:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <writeRGB+0xd4>)
 8000afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000afe:	ee07 3a90 	vmov	s15, r3
 8000b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b06:	eef0 0a67 	vmov.f32	s1, s15
 8000b0a:	eeb0 0a47 	vmov.f32	s0, s14
 8000b0e:	f7ff fe4f 	bl	80007b0 <min>
 8000b12:	eef0 7a40 	vmov.f32	s15, s0
 8000b16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b1a:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <writeRGB+0xd4>)
 8000b1c:	ee17 2a90 	vmov	r2, s15
 8000b20:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b22:	bf00      	nop
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40000800 	.word	0x40000800
 8000b30:	40000400 	.word	0x40000400

08000b34 <writeRGBArray>:
void writeRGBArray(int *rgb) { writeRGB(rgb[0], rgb[1], rgb[2]); }
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6818      	ldr	r0, [r3, #0]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3304      	adds	r3, #4
 8000b44:	6819      	ldr	r1, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	3308      	adds	r3, #8
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	f7ff ff85 	bl	8000a5c <writeRGB>
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <generatorLimit>:

// color generator
float generatorLimit(float val, float lowerLim, float upperLim)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	ed87 0a03 	vstr	s0, [r7, #12]
 8000b66:	edc7 0a02 	vstr	s1, [r7, #8]
 8000b6a:	ed87 1a01 	vstr	s2, [r7, #4]
	return transform(
 8000b6e:	ed9f 2a09 	vldr	s4, [pc, #36]	; 8000b94 <generatorLimit+0x38>
 8000b72:	eddf 1a09 	vldr	s3, [pc, #36]	; 8000b98 <generatorLimit+0x3c>
 8000b76:	ed97 1a01 	vldr	s2, [r7, #4]
 8000b7a:	edd7 0a02 	vldr	s1, [r7, #8]
 8000b7e:	ed97 0a03 	vldr	s0, [r7, #12]
 8000b82:	f7ff ff07 	bl	8000994 <transform>
 8000b86:	eef0 7a40 	vmov.f32	s15, s0
		lowerLim,
		upperLim,
		COLOR_MIN,
		COLOR_MAX
	);
}
 8000b8a:	eeb0 0a67 	vmov.f32	s0, s15
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	437f0000 	.word	0x437f0000
 8000b98:	00000000 	.word	0x00000000

08000b9c <generator>:
float generator(float val) { return generatorLimit(amplify(val), VOLUME_MIN, VOLUME_MAX); }
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000ba6:	ed97 0a01 	vldr	s0, [r7, #4]
 8000baa:	f7ff ff45 	bl	8000a38 <amplify>
 8000bae:	eef0 7a40 	vmov.f32	s15, s0
 8000bb2:	ed9f 1a07 	vldr	s2, [pc, #28]	; 8000bd0 <generator+0x34>
 8000bb6:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8000bba:	eeb0 0a67 	vmov.f32	s0, s15
 8000bbe:	f7ff ffcd 	bl	8000b5c <generatorLimit>
 8000bc2:	eef0 7a40 	vmov.f32	s15, s0
 8000bc6:	eeb0 0a67 	vmov.f32	s0, s15
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	44e10000 	.word	0x44e10000

08000bd4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	4b1e      	ldr	r3, [pc, #120]	; (8000c58 <MX_GPIO_Init+0x84>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a1d      	ldr	r2, [pc, #116]	; (8000c58 <MX_GPIO_Init+0x84>)
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <MX_GPIO_Init+0x84>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <MX_GPIO_Init+0x84>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a16      	ldr	r2, [pc, #88]	; (8000c58 <MX_GPIO_Init+0x84>)
 8000c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <MX_GPIO_Init+0x84>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <MX_GPIO_Init+0x84>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a0f      	ldr	r2, [pc, #60]	; (8000c58 <MX_GPIO_Init+0x84>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <MX_GPIO_Init+0x84>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_GPIO_Init+0x84>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a08      	ldr	r2, [pc, #32]	; (8000c58 <MX_GPIO_Init+0x84>)
 8000c38:	f043 0302 	orr.w	r3, r3, #2
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_GPIO_Init+0x84>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]

}
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800

08000c5c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c62:	4a13      	ldr	r2, [pc, #76]	; (8000cb0 <MX_I2C1_Init+0x54>)
 8000c64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c68:	4a12      	ldr	r2, [pc, #72]	; (8000cb4 <MX_I2C1_Init+0x58>)
 8000c6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c8c:	4b07      	ldr	r3, [pc, #28]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c98:	4804      	ldr	r0, [pc, #16]	; (8000cac <MX_I2C1_Init+0x50>)
 8000c9a:	f002 f811 	bl	8002cc0 <HAL_I2C_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ca4:	f000 f9b8 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	200000e0 	.word	0x200000e0
 8000cb0:	40005400 	.word	0x40005400
 8000cb4:	000186a0 	.word	0x000186a0

08000cb8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	; 0x28
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a19      	ldr	r2, [pc, #100]	; (8000d3c <HAL_I2C_MspInit+0x84>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d12c      	bne.n	8000d34 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <HAL_I2C_MspInit+0x88>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a17      	ldr	r2, [pc, #92]	; (8000d40 <HAL_I2C_MspInit+0x88>)
 8000ce4:	f043 0302 	orr.w	r3, r3, #2
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <HAL_I2C_MspInit+0x88>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_I2C_SCL_Pin|LCD_I2C_SDA_Pin;
 8000cf6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cfc:	2312      	movs	r3, #18
 8000cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d00:	2301      	movs	r3, #1
 8000d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d04:	2302      	movs	r3, #2
 8000d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d08:	2304      	movs	r3, #4
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	480c      	ldr	r0, [pc, #48]	; (8000d44 <HAL_I2C_MspInit+0x8c>)
 8000d14:	f001 fe50 	bl	80029b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <HAL_I2C_MspInit+0x88>)
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d20:	4a07      	ldr	r2, [pc, #28]	; (8000d40 <HAL_I2C_MspInit+0x88>)
 8000d22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d26:	6413      	str	r3, [r2, #64]	; 0x40
 8000d28:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <HAL_I2C_MspInit+0x88>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d34:	bf00      	nop
 8000d36:	3728      	adds	r7, #40	; 0x28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40005400 	.word	0x40005400
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020400 	.word	0x40020400

08000d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d48:	b590      	push	{r4, r7, lr}
 8000d4a:	ed2d 8b02 	vpush	{d8}
 8000d4e:	b099      	sub	sp, #100	; 0x64
 8000d50:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	// left audio channel
	int *buffArrL = (int *)malloc(BUFFER_SIZE_AUX * sizeof(int));
 8000d52:	2008      	movs	r0, #8
 8000d54:	f003 febe 	bl	8004ad4 <malloc>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	647b      	str	r3, [r7, #68]	; 0x44
	emptyArray(buffArrL, BUFFER_SIZE_AUX);
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000d60:	f7ff fd5f 	bl	8000822 <emptyArray>
	size_t buffIndL = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61bb      	str	r3, [r7, #24]
	int auxValL = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	657b      	str	r3, [r7, #84]	; 0x54
	float auxFilterL = 0;
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	653b      	str	r3, [r7, #80]	; 0x50

	// right audio channel
	int *buffArrR = (int *)malloc(BUFFER_SIZE_AUX * sizeof(int));
 8000d72:	2008      	movs	r0, #8
 8000d74:	f003 feae 	bl	8004ad4 <malloc>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	643b      	str	r3, [r7, #64]	; 0x40
	emptyArray(buffArrR, BUFFER_SIZE_AUX);
 8000d7c:	2102      	movs	r1, #2
 8000d7e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000d80:	f7ff fd4f 	bl	8000822 <emptyArray>
	size_t buffIndR = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
	int auxValR = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
	float auxFilterR = 0;
 8000d8c:	f04f 0300 	mov.w	r3, #0
 8000d90:	64fb      	str	r3, [r7, #76]	; 0x4c

	// rgb led (uint8_t doesn't work)
	int *rgbArr = (int *)malloc(CHANNEL_COUNT_RGB * sizeof(int));
 8000d92:	200c      	movs	r0, #12
 8000d94:	f003 fe9e 	bl	8004ad4 <malloc>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	63bb      	str	r3, [r7, #56]	; 0x38
	emptyArray(rgbArr, CHANNEL_COUNT_RGB);
 8000d9c:	2103      	movs	r1, #3
 8000d9e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000da0:	f7ff fd3f 	bl	8000822 <emptyArray>
	int r = 0, g = 0, b = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	637b      	str	r3, [r7, #52]	; 0x34
 8000da8:	2300      	movs	r3, #0
 8000daa:	633b      	str	r3, [r7, #48]	; 0x30
 8000dac:	2300      	movs	r3, #0
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
	size_t colSel = 0, colSelPrev = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
	int colVal = 0, colValPrev = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]

	// nanokernel tick counter
	uint32_t ticks = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	64bb      	str	r3, [r7, #72]	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc4:	f000 fd84 	bl	80018d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc8:	f000 f8ba 	bl	8000f40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dcc:	f7ff ff02 	bl	8000bd4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000dd0:	f000 fce2 	bl	8001798 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000dd4:	f7ff fcbc 	bl	8000750 <MX_DMA_Init>
  MX_ADC1_Init();
 8000dd8:	f7ff fc16 	bl	8000608 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000ddc:	f7ff ff3e 	bl	8000c5c <MX_I2C1_Init>
  MX_TIM1_Init();
 8000de0:	f000 f9d8 	bl	8001194 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000de4:	f000 fa26 	bl	8001234 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000de8:	f000 fa70 	bl	80012cc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000dec:	f000 faee 	bl	80013cc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	// setup rgb led
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000df0:	2100      	movs	r1, #0
 8000df2:	484e      	ldr	r0, [pc, #312]	; (8000f2c <main+0x1e4>)
 8000df4:	f002 fdba 	bl	800396c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000df8:	2104      	movs	r1, #4
 8000dfa:	484d      	ldr	r0, [pc, #308]	; (8000f30 <main+0x1e8>)
 8000dfc:	f002 fdb6 	bl	800396c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e00:	2100      	movs	r1, #0
 8000e02:	484b      	ldr	r0, [pc, #300]	; (8000f30 <main+0x1e8>)
 8000e04:	f002 fdb2 	bl	800396c <HAL_TIM_PWM_Start>
	writeRGB(r, g, b);
 8000e08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000e0c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000e0e:	f7ff fe25 	bl	8000a5c <writeRGB>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// get left audio channel from adc
		ADC_Select_CH1();
 8000e12:	f7ff fbb9 	bl	8000588 <ADC_Select_CH1>
		HAL_ADC_Start(&hadc1);
 8000e16:	4847      	ldr	r0, [pc, #284]	; (8000f34 <main+0x1ec>)
 8000e18:	f000 fe34 	bl	8001a84 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, TIMEOUT_ADC) == HAL_OK)
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	4845      	ldr	r0, [pc, #276]	; (8000f34 <main+0x1ec>)
 8000e20:	f000 ff17 	bl	8001c52 <HAL_ADC_PollForConversion>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d113      	bne.n	8000e52 <main+0x10a>
		{
			auxValL = HAL_ADC_GetValue(&hadc1);
 8000e2a:	4842      	ldr	r0, [pc, #264]	; (8000f34 <main+0x1ec>)
 8000e2c:	f000 ff9c 	bl	8001d68 <HAL_ADC_GetValue>
 8000e30:	4603      	mov	r3, r0
 8000e32:	657b      	str	r3, [r7, #84]	; 0x54
			HAL_ADC_Stop(&hadc1);
 8000e34:	483f      	ldr	r0, [pc, #252]	; (8000f34 <main+0x1ec>)
 8000e36:	f000 fed9 	bl	8001bec <HAL_ADC_Stop>
			// write buffer and apply filter
			bufferAppend(auxValL, buffArrL, &buffIndL);
 8000e3a:	f107 0318 	add.w	r3, r7, #24
 8000e3e:	461a      	mov	r2, r3
 8000e40:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000e42:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000e44:	f7ff fd36 	bl	80008b4 <bufferAppend>
			auxFilterL = bufferFilter(buffArrL);
 8000e48:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000e4a:	f7ff fd52 	bl	80008f2 <bufferFilter>
 8000e4e:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
		}

		// get right audio channel from adc
		ADC_Select_CH4();
 8000e52:	f7ff fbb9 	bl	80005c8 <ADC_Select_CH4>
		HAL_ADC_Start(&hadc1);
 8000e56:	4837      	ldr	r0, [pc, #220]	; (8000f34 <main+0x1ec>)
 8000e58:	f000 fe14 	bl	8001a84 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, TIMEOUT_ADC) == HAL_OK)
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	4835      	ldr	r0, [pc, #212]	; (8000f34 <main+0x1ec>)
 8000e60:	f000 fef7 	bl	8001c52 <HAL_ADC_PollForConversion>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d113      	bne.n	8000e92 <main+0x14a>
		{
			auxValR = HAL_ADC_GetValue(&hadc1);
 8000e6a:	4832      	ldr	r0, [pc, #200]	; (8000f34 <main+0x1ec>)
 8000e6c:	f000 ff7c 	bl	8001d68 <HAL_ADC_GetValue>
 8000e70:	4603      	mov	r3, r0
 8000e72:	63fb      	str	r3, [r7, #60]	; 0x3c
			HAL_ADC_Stop(&hadc1);
 8000e74:	482f      	ldr	r0, [pc, #188]	; (8000f34 <main+0x1ec>)
 8000e76:	f000 feb9 	bl	8001bec <HAL_ADC_Stop>
			// write buffer and apply filter
			bufferAppend(auxValR, buffArrR, &buffIndR);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	461a      	mov	r2, r3
 8000e80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000e82:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000e84:	f7ff fd16 	bl	80008b4 <bufferAppend>
			auxFilterR = bufferFilter(buffArrR);
 8000e88:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000e8a:	f7ff fd32 	bl	80008f2 <bufferFilter>
 8000e8e:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
		}

		// generate color
		rgbArr[0] = (int)generator(auxFilterL);
 8000e92:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8000e96:	f7ff fe81 	bl	8000b9c <generator>
 8000e9a:	eef0 7a40 	vmov.f32	s15, s0
 8000e9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ea2:	ee17 2a90 	vmov	r2, s15
 8000ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ea8:	601a      	str	r2, [r3, #0]
		rgbArr[1] = 5;
 8000eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eac:	3304      	adds	r3, #4
 8000eae:	2205      	movs	r2, #5
 8000eb0:	601a      	str	r2, [r3, #0]
		rgbArr[2] = (int)generator(auxFilterR);
 8000eb2:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8000eb6:	f7ff fe71 	bl	8000b9c <generator>
 8000eba:	eef0 7a40 	vmov.f32	s15, s0
 8000ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ec0:	3308      	adds	r3, #8
 8000ec2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ec6:	ee17 2a90 	vmov	r2, s15
 8000eca:	601a      	str	r2, [r3, #0]

		// write rgb
		writeRGBArray(rgbArr);
 8000ecc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000ece:	f7ff fe31 	bl	8000b34 <writeRGBArray>

		// debug via uart
		if (DEBUG)
		{
			sprintf(
 8000ed2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000ed6:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8000eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000edc:	681c      	ldr	r4, [r3, #0]
				buffMsg,
				"%d,%d,%d,%d\n",
				(int)auxValL,
				(int)auxFilterL,
				(int)rgbArr[0],
				(int)saturate(rgbArr[0])
 8000ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ee0:	681b      	ldr	r3, [r3, #0]
			sprintf(
 8000ee2:	ee07 3a90 	vmov	s15, r3
 8000ee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eea:	eeb0 0a67 	vmov.f32	s0, s15
 8000eee:	f7ff fd39 	bl	8000964 <saturate>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	4638      	mov	r0, r7
 8000ef6:	9301      	str	r3, [sp, #4]
 8000ef8:	9400      	str	r4, [sp, #0]
 8000efa:	ee18 3a10 	vmov	r3, s16
 8000efe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000f00:	490d      	ldr	r1, [pc, #52]	; (8000f38 <main+0x1f0>)
 8000f02:	f003 feb1 	bl	8004c68 <siprintf>
			);
			HAL_UART_Transmit(&huart2, (uint8_t *)buffMsg, strlen(buffMsg), HAL_MAX_DELAY);
 8000f06:	463b      	mov	r3, r7
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff f969 	bl	80001e0 <strlen>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	4639      	mov	r1, r7
 8000f14:	f04f 33ff 	mov.w	r3, #4294967295
 8000f18:	4808      	ldr	r0, [pc, #32]	; (8000f3c <main+0x1f4>)
 8000f1a:	f003 fae8 	bl	80044ee <HAL_UART_Transmit>
		}

		// update nanokernel tick and wait
		ticks++;
 8000f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f20:	3301      	adds	r3, #1
 8000f22:	64bb      	str	r3, [r7, #72]	; 0x48
		HAL_Delay(DELAY);
 8000f24:	2001      	movs	r0, #1
 8000f26:	f000 fd45 	bl	80019b4 <HAL_Delay>
	{
 8000f2a:	e772      	b.n	8000e12 <main+0xca>
 8000f2c:	20000134 	.word	0x20000134
 8000f30:	2000017c 	.word	0x2000017c
 8000f34:	20000098 	.word	0x20000098
 8000f38:	08005368 	.word	0x08005368
 8000f3c:	20000374 	.word	0x20000374

08000f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b094      	sub	sp, #80	; 0x50
 8000f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	f107 0320 	add.w	r3, r7, #32
 8000f4a:	2230      	movs	r2, #48	; 0x30
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f003 fdc8 	bl	8004ae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f64:	2300      	movs	r3, #0
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	4b29      	ldr	r3, [pc, #164]	; (8001010 <SystemClock_Config+0xd0>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	4a28      	ldr	r2, [pc, #160]	; (8001010 <SystemClock_Config+0xd0>)
 8000f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f72:	6413      	str	r3, [r2, #64]	; 0x40
 8000f74:	4b26      	ldr	r3, [pc, #152]	; (8001010 <SystemClock_Config+0xd0>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f80:	2300      	movs	r3, #0
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	4b23      	ldr	r3, [pc, #140]	; (8001014 <SystemClock_Config+0xd4>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f8c:	4a21      	ldr	r2, [pc, #132]	; (8001014 <SystemClock_Config+0xd4>)
 8000f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <SystemClock_Config+0xd4>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa8:	2310      	movs	r3, #16
 8000faa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fac:	2302      	movs	r3, #2
 8000fae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fb4:	2310      	movs	r3, #16
 8000fb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fb8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fbc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fc2:	2307      	movs	r3, #7
 8000fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc6:	f107 0320 	add.w	r3, r7, #32
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f001 ffbc 	bl	8002f48 <HAL_RCC_OscConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fd6:	f000 f81f 	bl	8001018 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fda:	230f      	movs	r3, #15
 8000fdc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f002 fa1e 	bl	8003438 <HAL_RCC_ClockConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001002:	f000 f809 	bl	8001018 <Error_Handler>
  }
}
 8001006:	bf00      	nop
 8001008:	3750      	adds	r7, #80	; 0x50
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800
 8001014:	40007000 	.word	0x40007000

08001018 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800101c:	b672      	cpsid	i
}
 800101e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001020:	e7fe      	b.n	8001020 <Error_Handler+0x8>
	...

08001024 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <HAL_MspInit+0x4c>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	4a0f      	ldr	r2, [pc, #60]	; (8001070 <HAL_MspInit+0x4c>)
 8001034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001038:	6453      	str	r3, [r2, #68]	; 0x44
 800103a:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <HAL_MspInit+0x4c>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <HAL_MspInit+0x4c>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	4a08      	ldr	r2, [pc, #32]	; (8001070 <HAL_MspInit+0x4c>)
 8001050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001054:	6413      	str	r3, [r2, #64]	; 0x40
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_MspInit+0x4c>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001062:	2007      	movs	r0, #7
 8001064:	f001 f97c 	bl	8002360 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40023800 	.word	0x40023800

08001074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <NMI_Handler+0x4>

0800107a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800107e:	e7fe      	b.n	800107e <HardFault_Handler+0x4>

08001080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <MemManage_Handler+0x4>

08001086 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108a:	e7fe      	b.n	800108a <BusFault_Handler+0x4>

0800108c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <UsageFault_Handler+0x4>

08001092 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c0:	f000 fc58 	bl	8001974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 80010cc:	4802      	ldr	r0, [pc, #8]	; (80010d8 <DMA1_Stream0_IRQHandler+0x10>)
 80010ce:	f001 fa37 	bl	8002540 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000314 	.word	0x20000314

080010dc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <DMA1_Stream4_IRQHandler+0x10>)
 80010e2:	f001 fa2d 	bl	8002540 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200001c4 	.word	0x200001c4

080010f0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 80010f4:	4802      	ldr	r0, [pc, #8]	; (8001100 <DMA1_Stream5_IRQHandler+0x10>)
 80010f6:	f001 fa23 	bl	8002540 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000224 	.word	0x20000224

08001104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800110c:	4a14      	ldr	r2, [pc, #80]	; (8001160 <_sbrk+0x5c>)
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <_sbrk+0x60>)
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <_sbrk+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d102      	bne.n	8001126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <_sbrk+0x64>)
 8001122:	4a12      	ldr	r2, [pc, #72]	; (800116c <_sbrk+0x68>)
 8001124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <_sbrk+0x64>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	429a      	cmp	r2, r3
 8001132:	d207      	bcs.n	8001144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001134:	f003 fca4 	bl	8004a80 <__errno>
 8001138:	4603      	mov	r3, r0
 800113a:	220c      	movs	r2, #12
 800113c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
 8001142:	e009      	b.n	8001158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <_sbrk+0x64>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800114a:	4b07      	ldr	r3, [pc, #28]	; (8001168 <_sbrk+0x64>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	4a05      	ldr	r2, [pc, #20]	; (8001168 <_sbrk+0x64>)
 8001154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001156:	68fb      	ldr	r3, [r7, #12]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20018000 	.word	0x20018000
 8001164:	00000400 	.word	0x00000400
 8001168:	2000008c 	.word	0x2000008c
 800116c:	200003d0 	.word	0x200003d0

08001170 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <SystemInit+0x20>)
 8001176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800117a:	4a05      	ldr	r2, [pc, #20]	; (8001190 <SystemInit+0x20>)
 800117c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001180:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim3_ch1_trig;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119a:	f107 0308 	add.w	r3, r7, #8
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a8:	463b      	mov	r3, r7
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011b0:	4b1e      	ldr	r3, [pc, #120]	; (800122c <MX_TIM1_Init+0x98>)
 80011b2:	4a1f      	ldr	r2, [pc, #124]	; (8001230 <MX_TIM1_Init+0x9c>)
 80011b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011b6:	4b1d      	ldr	r3, [pc, #116]	; (800122c <MX_TIM1_Init+0x98>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <MX_TIM1_Init+0x98>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80011c2:	4b1a      	ldr	r3, [pc, #104]	; (800122c <MX_TIM1_Init+0x98>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c8:	4b18      	ldr	r3, [pc, #96]	; (800122c <MX_TIM1_Init+0x98>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011ce:	4b17      	ldr	r3, [pc, #92]	; (800122c <MX_TIM1_Init+0x98>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d4:	4b15      	ldr	r3, [pc, #84]	; (800122c <MX_TIM1_Init+0x98>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011da:	4814      	ldr	r0, [pc, #80]	; (800122c <MX_TIM1_Init+0x98>)
 80011dc:	f002 fb28 	bl	8003830 <HAL_TIM_Base_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 80011e6:	f7ff ff17 	bl	8001018 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	4619      	mov	r1, r3
 80011f6:	480d      	ldr	r0, [pc, #52]	; (800122c <MX_TIM1_Init+0x98>)
 80011f8:	f002 fd2a 	bl	8003c50 <HAL_TIM_ConfigClockSource>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8001202:	f7ff ff09 	bl	8001018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001206:	2300      	movs	r3, #0
 8001208:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800120e:	463b      	mov	r3, r7
 8001210:	4619      	mov	r1, r3
 8001212:	4806      	ldr	r0, [pc, #24]	; (800122c <MX_TIM1_Init+0x98>)
 8001214:	f003 f8b0 	bl	8004378 <HAL_TIMEx_MasterConfigSynchronization>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800121e:	f7ff fefb 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	3718      	adds	r7, #24
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000284 	.word	0x20000284
 8001230:	40010000 	.word	0x40010000

08001234 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123a:	f107 0308 	add.w	r3, r7, #8
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001248:	463b      	mov	r3, r7
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001250:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <MX_TIM2_Init+0x94>)
 8001252:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001256:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001258:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <MX_TIM2_Init+0x94>)
 800125a:	2200      	movs	r2, #0
 800125c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125e:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <MX_TIM2_Init+0x94>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001264:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <MX_TIM2_Init+0x94>)
 8001266:	f04f 32ff 	mov.w	r2, #4294967295
 800126a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126c:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <MX_TIM2_Init+0x94>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <MX_TIM2_Init+0x94>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001278:	4813      	ldr	r0, [pc, #76]	; (80012c8 <MX_TIM2_Init+0x94>)
 800127a:	f002 fad9 	bl	8003830 <HAL_TIM_Base_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001284:	f7ff fec8 	bl	8001018 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800128e:	f107 0308 	add.w	r3, r7, #8
 8001292:	4619      	mov	r1, r3
 8001294:	480c      	ldr	r0, [pc, #48]	; (80012c8 <MX_TIM2_Init+0x94>)
 8001296:	f002 fcdb 	bl	8003c50 <HAL_TIM_ConfigClockSource>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012a0:	f7ff feba 	bl	8001018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ac:	463b      	mov	r3, r7
 80012ae:	4619      	mov	r1, r3
 80012b0:	4805      	ldr	r0, [pc, #20]	; (80012c8 <MX_TIM2_Init+0x94>)
 80012b2:	f003 f861 	bl	8004378 <HAL_TIMEx_MasterConfigSynchronization>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012bc:	f7ff feac 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	200002cc 	.word	0x200002cc

080012cc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08e      	sub	sp, #56	; 0x38
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e0:	f107 0320 	add.w	r3, r7, #32
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
 80012f8:	615a      	str	r2, [r3, #20]
 80012fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012fc:	4b31      	ldr	r3, [pc, #196]	; (80013c4 <MX_TIM3_Init+0xf8>)
 80012fe:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <MX_TIM3_Init+0xfc>)
 8001300:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001302:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <MX_TIM3_Init+0xf8>)
 8001304:	2253      	movs	r2, #83	; 0x53
 8001306:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001308:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <MX_TIM3_Init+0xf8>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255-1;
 800130e:	4b2d      	ldr	r3, [pc, #180]	; (80013c4 <MX_TIM3_Init+0xf8>)
 8001310:	22fe      	movs	r2, #254	; 0xfe
 8001312:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001314:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <MX_TIM3_Init+0xf8>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131a:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <MX_TIM3_Init+0xf8>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001320:	4828      	ldr	r0, [pc, #160]	; (80013c4 <MX_TIM3_Init+0xf8>)
 8001322:	f002 fa85 	bl	8003830 <HAL_TIM_Base_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800132c:	f7ff fe74 	bl	8001018 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001336:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800133a:	4619      	mov	r1, r3
 800133c:	4821      	ldr	r0, [pc, #132]	; (80013c4 <MX_TIM3_Init+0xf8>)
 800133e:	f002 fc87 	bl	8003c50 <HAL_TIM_ConfigClockSource>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001348:	f7ff fe66 	bl	8001018 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800134c:	481d      	ldr	r0, [pc, #116]	; (80013c4 <MX_TIM3_Init+0xf8>)
 800134e:	f002 fabe 	bl	80038ce <HAL_TIM_PWM_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001358:	f7ff fe5e 	bl	8001018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135c:	2300      	movs	r3, #0
 800135e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001364:	f107 0320 	add.w	r3, r7, #32
 8001368:	4619      	mov	r1, r3
 800136a:	4816      	ldr	r0, [pc, #88]	; (80013c4 <MX_TIM3_Init+0xf8>)
 800136c:	f003 f804 	bl	8004378 <HAL_TIMEx_MasterConfigSynchronization>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001376:	f7ff fe4f 	bl	8001018 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800137a:	2360      	movs	r3, #96	; 0x60
 800137c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 255;
 800137e:	23ff      	movs	r3, #255	; 0xff
 8001380:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2200      	movs	r2, #0
 800138e:	4619      	mov	r1, r3
 8001390:	480c      	ldr	r0, [pc, #48]	; (80013c4 <MX_TIM3_Init+0xf8>)
 8001392:	f002 fb9b 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800139c:	f7ff fe3c 	bl	8001018 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	2204      	movs	r2, #4
 80013a4:	4619      	mov	r1, r3
 80013a6:	4807      	ldr	r0, [pc, #28]	; (80013c4 <MX_TIM3_Init+0xf8>)
 80013a8:	f002 fb90 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 80013b2:	f7ff fe31 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013b6:	4803      	ldr	r0, [pc, #12]	; (80013c4 <MX_TIM3_Init+0xf8>)
 80013b8:	f000 f96e 	bl	8001698 <HAL_TIM_MspPostInit>

}
 80013bc:	bf00      	nop
 80013be:	3738      	adds	r7, #56	; 0x38
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	2000017c 	.word	0x2000017c
 80013c8:	40000400 	.word	0x40000400

080013cc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08a      	sub	sp, #40	; 0x28
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d2:	f107 0320 	add.w	r3, r7, #32
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
 80013e8:	611a      	str	r2, [r3, #16]
 80013ea:	615a      	str	r2, [r3, #20]
 80013ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013ee:	4b21      	ldr	r3, [pc, #132]	; (8001474 <MX_TIM4_Init+0xa8>)
 80013f0:	4a21      	ldr	r2, [pc, #132]	; (8001478 <MX_TIM4_Init+0xac>)
 80013f2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 80013f4:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <MX_TIM4_Init+0xa8>)
 80013f6:	2253      	movs	r2, #83	; 0x53
 80013f8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fa:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <MX_TIM4_Init+0xa8>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255-1;
 8001400:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <MX_TIM4_Init+0xa8>)
 8001402:	22fe      	movs	r2, #254	; 0xfe
 8001404:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001406:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <MX_TIM4_Init+0xa8>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140c:	4b19      	ldr	r3, [pc, #100]	; (8001474 <MX_TIM4_Init+0xa8>)
 800140e:	2200      	movs	r2, #0
 8001410:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001412:	4818      	ldr	r0, [pc, #96]	; (8001474 <MX_TIM4_Init+0xa8>)
 8001414:	f002 fa5b 	bl	80038ce <HAL_TIM_PWM_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800141e:	f7ff fdfb 	bl	8001018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001422:	2300      	movs	r3, #0
 8001424:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800142a:	f107 0320 	add.w	r3, r7, #32
 800142e:	4619      	mov	r1, r3
 8001430:	4810      	ldr	r0, [pc, #64]	; (8001474 <MX_TIM4_Init+0xa8>)
 8001432:	f002 ffa1 	bl	8004378 <HAL_TIMEx_MasterConfigSynchronization>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 800143c:	f7ff fdec 	bl	8001018 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001440:	2360      	movs	r3, #96	; 0x60
 8001442:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 255;
 8001444:	23ff      	movs	r3, #255	; 0xff
 8001446:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	2200      	movs	r2, #0
 8001454:	4619      	mov	r1, r3
 8001456:	4807      	ldr	r0, [pc, #28]	; (8001474 <MX_TIM4_Init+0xa8>)
 8001458:	f002 fb38 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001462:	f7ff fdd9 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001466:	4803      	ldr	r0, [pc, #12]	; (8001474 <MX_TIM4_Init+0xa8>)
 8001468:	f000 f916 	bl	8001698 <HAL_TIM_MspPostInit>

}
 800146c:	bf00      	nop
 800146e:	3728      	adds	r7, #40	; 0x28
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000134 	.word	0x20000134
 8001478:	40000800 	.word	0x40000800

0800147c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a52      	ldr	r2, [pc, #328]	; (80015d4 <HAL_TIM_Base_MspInit+0x158>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d10e      	bne.n	80014ac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	4b51      	ldr	r3, [pc, #324]	; (80015d8 <HAL_TIM_Base_MspInit+0x15c>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	4a50      	ldr	r2, [pc, #320]	; (80015d8 <HAL_TIM_Base_MspInit+0x15c>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6453      	str	r3, [r2, #68]	; 0x44
 800149e:	4b4e      	ldr	r3, [pc, #312]	; (80015d8 <HAL_TIM_Base_MspInit+0x15c>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	697b      	ldr	r3, [r7, #20]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80014aa:	e08e      	b.n	80015ca <HAL_TIM_Base_MspInit+0x14e>
  else if(tim_baseHandle->Instance==TIM2)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014b4:	d10e      	bne.n	80014d4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b47      	ldr	r3, [pc, #284]	; (80015d8 <HAL_TIM_Base_MspInit+0x15c>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	4a46      	ldr	r2, [pc, #280]	; (80015d8 <HAL_TIM_Base_MspInit+0x15c>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6413      	str	r3, [r2, #64]	; 0x40
 80014c6:	4b44      	ldr	r3, [pc, #272]	; (80015d8 <HAL_TIM_Base_MspInit+0x15c>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]
}
 80014d2:	e07a      	b.n	80015ca <HAL_TIM_Base_MspInit+0x14e>
  else if(tim_baseHandle->Instance==TIM3)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a40      	ldr	r2, [pc, #256]	; (80015dc <HAL_TIM_Base_MspInit+0x160>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d175      	bne.n	80015ca <HAL_TIM_Base_MspInit+0x14e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	4b3d      	ldr	r3, [pc, #244]	; (80015d8 <HAL_TIM_Base_MspInit+0x15c>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	4a3c      	ldr	r2, [pc, #240]	; (80015d8 <HAL_TIM_Base_MspInit+0x15c>)
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	6413      	str	r3, [r2, #64]	; 0x40
 80014ee:	4b3a      	ldr	r3, [pc, #232]	; (80015d8 <HAL_TIM_Base_MspInit+0x15c>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 80014fa:	4b39      	ldr	r3, [pc, #228]	; (80015e0 <HAL_TIM_Base_MspInit+0x164>)
 80014fc:	4a39      	ldr	r2, [pc, #228]	; (80015e4 <HAL_TIM_Base_MspInit+0x168>)
 80014fe:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 8001500:	4b37      	ldr	r3, [pc, #220]	; (80015e0 <HAL_TIM_Base_MspInit+0x164>)
 8001502:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001506:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001508:	4b35      	ldr	r3, [pc, #212]	; (80015e0 <HAL_TIM_Base_MspInit+0x164>)
 800150a:	2240      	movs	r2, #64	; 0x40
 800150c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800150e:	4b34      	ldr	r3, [pc, #208]	; (80015e0 <HAL_TIM_Base_MspInit+0x164>)
 8001510:	2200      	movs	r2, #0
 8001512:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001514:	4b32      	ldr	r3, [pc, #200]	; (80015e0 <HAL_TIM_Base_MspInit+0x164>)
 8001516:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800151a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800151c:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <HAL_TIM_Base_MspInit+0x164>)
 800151e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001522:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001524:	4b2e      	ldr	r3, [pc, #184]	; (80015e0 <HAL_TIM_Base_MspInit+0x164>)
 8001526:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800152a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 800152c:	4b2c      	ldr	r3, [pc, #176]	; (80015e0 <HAL_TIM_Base_MspInit+0x164>)
 800152e:	2200      	movs	r2, #0
 8001530:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8001532:	4b2b      	ldr	r3, [pc, #172]	; (80015e0 <HAL_TIM_Base_MspInit+0x164>)
 8001534:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001538:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800153a:	4b29      	ldr	r3, [pc, #164]	; (80015e0 <HAL_TIM_Base_MspInit+0x164>)
 800153c:	2200      	movs	r2, #0
 800153e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8001540:	4827      	ldr	r0, [pc, #156]	; (80015e0 <HAL_TIM_Base_MspInit+0x164>)
 8001542:	f000 ff4f 	bl	80023e4 <HAL_DMA_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <HAL_TIM_Base_MspInit+0xd4>
      Error_Handler();
 800154c:	f7ff fd64 	bl	8001018 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a23      	ldr	r2, [pc, #140]	; (80015e0 <HAL_TIM_Base_MspInit+0x164>)
 8001554:	629a      	str	r2, [r3, #40]	; 0x28
 8001556:	4a22      	ldr	r2, [pc, #136]	; (80015e0 <HAL_TIM_Base_MspInit+0x164>)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 800155c:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <HAL_TIM_Base_MspInit+0x16c>)
 800155e:	4a23      	ldr	r2, [pc, #140]	; (80015ec <HAL_TIM_Base_MspInit+0x170>)
 8001560:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8001562:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <HAL_TIM_Base_MspInit+0x16c>)
 8001564:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001568:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800156a:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <HAL_TIM_Base_MspInit+0x16c>)
 800156c:	2240      	movs	r2, #64	; 0x40
 800156e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001570:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <HAL_TIM_Base_MspInit+0x16c>)
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001576:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <HAL_TIM_Base_MspInit+0x16c>)
 8001578:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800157c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800157e:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <HAL_TIM_Base_MspInit+0x16c>)
 8001580:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001584:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001586:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <HAL_TIM_Base_MspInit+0x16c>)
 8001588:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800158c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <HAL_TIM_Base_MspInit+0x16c>)
 8001590:	2200      	movs	r2, #0
 8001592:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 8001594:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <HAL_TIM_Base_MspInit+0x16c>)
 8001596:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800159a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_TIM_Base_MspInit+0x16c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80015a2:	4811      	ldr	r0, [pc, #68]	; (80015e8 <HAL_TIM_Base_MspInit+0x16c>)
 80015a4:	f000 ff1e 	bl	80023e4 <HAL_DMA_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_TIM_Base_MspInit+0x136>
      Error_Handler();
 80015ae:	f7ff fd33 	bl	8001018 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a0c      	ldr	r2, [pc, #48]	; (80015e8 <HAL_TIM_Base_MspInit+0x16c>)
 80015b6:	625a      	str	r2, [r3, #36]	; 0x24
 80015b8:	4a0b      	ldr	r2, [pc, #44]	; (80015e8 <HAL_TIM_Base_MspInit+0x16c>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a09      	ldr	r2, [pc, #36]	; (80015e8 <HAL_TIM_Base_MspInit+0x16c>)
 80015c2:	639a      	str	r2, [r3, #56]	; 0x38
 80015c4:	4a08      	ldr	r2, [pc, #32]	; (80015e8 <HAL_TIM_Base_MspInit+0x16c>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80015ca:	bf00      	nop
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40010000 	.word	0x40010000
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40000400 	.word	0x40000400
 80015e0:	20000224 	.word	0x20000224
 80015e4:	40026088 	.word	0x40026088
 80015e8:	200001c4 	.word	0x200001c4
 80015ec:	40026070 	.word	0x40026070

080015f0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a22      	ldr	r2, [pc, #136]	; (8001688 <HAL_TIM_PWM_MspInit+0x98>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d13e      	bne.n	8001680 <HAL_TIM_PWM_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b21      	ldr	r3, [pc, #132]	; (800168c <HAL_TIM_PWM_MspInit+0x9c>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	4a20      	ldr	r2, [pc, #128]	; (800168c <HAL_TIM_PWM_MspInit+0x9c>)
 800160c:	f043 0304 	orr.w	r3, r3, #4
 8001610:	6413      	str	r3, [r2, #64]	; 0x40
 8001612:	4b1e      	ldr	r3, [pc, #120]	; (800168c <HAL_TIM_PWM_MspInit+0x9c>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 800161e:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <HAL_TIM_PWM_MspInit+0xa0>)
 8001620:	4a1c      	ldr	r2, [pc, #112]	; (8001694 <HAL_TIM_PWM_MspInit+0xa4>)
 8001622:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8001624:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <HAL_TIM_PWM_MspInit+0xa0>)
 8001626:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800162a:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800162c:	4b18      	ldr	r3, [pc, #96]	; (8001690 <HAL_TIM_PWM_MspInit+0xa0>)
 800162e:	2240      	movs	r2, #64	; 0x40
 8001630:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001632:	4b17      	ldr	r3, [pc, #92]	; (8001690 <HAL_TIM_PWM_MspInit+0xa0>)
 8001634:	2200      	movs	r2, #0
 8001636:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001638:	4b15      	ldr	r3, [pc, #84]	; (8001690 <HAL_TIM_PWM_MspInit+0xa0>)
 800163a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800163e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001640:	4b13      	ldr	r3, [pc, #76]	; (8001690 <HAL_TIM_PWM_MspInit+0xa0>)
 8001642:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001646:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <HAL_TIM_PWM_MspInit+0xa0>)
 800164a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800164e:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8001650:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <HAL_TIM_PWM_MspInit+0xa0>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <HAL_TIM_PWM_MspInit+0xa0>)
 8001658:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800165c:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <HAL_TIM_PWM_MspInit+0xa0>)
 8001660:	2200      	movs	r2, #0
 8001662:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8001664:	480a      	ldr	r0, [pc, #40]	; (8001690 <HAL_TIM_PWM_MspInit+0xa0>)
 8001666:	f000 febd 	bl	80023e4 <HAL_DMA_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <HAL_TIM_PWM_MspInit+0x84>
    {
      Error_Handler();
 8001670:	f7ff fcd2 	bl	8001018 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a06      	ldr	r2, [pc, #24]	; (8001690 <HAL_TIM_PWM_MspInit+0xa0>)
 8001678:	625a      	str	r2, [r3, #36]	; 0x24
 800167a:	4a05      	ldr	r2, [pc, #20]	; (8001690 <HAL_TIM_PWM_MspInit+0xa0>)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001680:	bf00      	nop
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40000800 	.word	0x40000800
 800168c:	40023800 	.word	0x40023800
 8001690:	20000314 	.word	0x20000314
 8001694:	40026010 	.word	0x40026010

08001698 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a33      	ldr	r2, [pc, #204]	; (8001784 <HAL_TIM_MspPostInit+0xec>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d13c      	bne.n	8001734 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	4b32      	ldr	r3, [pc, #200]	; (8001788 <HAL_TIM_MspPostInit+0xf0>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a31      	ldr	r2, [pc, #196]	; (8001788 <HAL_TIM_MspPostInit+0xf0>)
 80016c4:	f043 0304 	orr.w	r3, r3, #4
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b2f      	ldr	r3, [pc, #188]	; (8001788 <HAL_TIM_MspPostInit+0xf0>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b2b      	ldr	r3, [pc, #172]	; (8001788 <HAL_TIM_MspPostInit+0xf0>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a2a      	ldr	r2, [pc, #168]	; (8001788 <HAL_TIM_MspPostInit+0xf0>)
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b28      	ldr	r3, [pc, #160]	; (8001788 <HAL_TIM_MspPostInit+0xf0>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = LED_G_Pin;
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016fa:	2302      	movs	r3, #2
 80016fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016fe:	2302      	movs	r3, #2
 8001700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001702:	2302      	movs	r3, #2
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	481f      	ldr	r0, [pc, #124]	; (800178c <HAL_TIM_MspPostInit+0xf4>)
 800170e:	f001 f953 	bl	80029b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_B_Pin;
 8001712:	2310      	movs	r3, #16
 8001714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800171a:	2302      	movs	r3, #2
 800171c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800171e:	2302      	movs	r3, #2
 8001720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001722:	2302      	movs	r3, #2
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	4818      	ldr	r0, [pc, #96]	; (8001790 <HAL_TIM_MspPostInit+0xf8>)
 800172e:	f001 f943 	bl	80029b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001732:	e022      	b.n	800177a <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM4)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a16      	ldr	r2, [pc, #88]	; (8001794 <HAL_TIM_MspPostInit+0xfc>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d11d      	bne.n	800177a <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <HAL_TIM_MspPostInit+0xf0>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a10      	ldr	r2, [pc, #64]	; (8001788 <HAL_TIM_MspPostInit+0xf0>)
 8001748:	f043 0302 	orr.w	r3, r3, #2
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <HAL_TIM_MspPostInit+0xf0>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LED_R_Pin;
 800175a:	2340      	movs	r3, #64	; 0x40
 800175c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001762:	2302      	movs	r3, #2
 8001764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001766:	2302      	movs	r3, #2
 8001768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800176a:	2302      	movs	r3, #2
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	4619      	mov	r1, r3
 8001774:	4806      	ldr	r0, [pc, #24]	; (8001790 <HAL_TIM_MspPostInit+0xf8>)
 8001776:	f001 f91f 	bl	80029b8 <HAL_GPIO_Init>
}
 800177a:	bf00      	nop
 800177c:	3728      	adds	r7, #40	; 0x28
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40000400 	.word	0x40000400
 8001788:	40023800 	.word	0x40023800
 800178c:	40020800 	.word	0x40020800
 8001790:	40020400 	.word	0x40020400
 8001794:	40000800 	.word	0x40000800

08001798 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <MX_USART2_UART_Init+0x4c>)
 800179e:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <MX_USART2_UART_Init+0x50>)
 80017a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <MX_USART2_UART_Init+0x4c>)
 80017a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017aa:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <MX_USART2_UART_Init+0x4c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <MX_USART2_UART_Init+0x4c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017b6:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <MX_USART2_UART_Init+0x4c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017bc:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <MX_USART2_UART_Init+0x4c>)
 80017be:	220c      	movs	r2, #12
 80017c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <MX_USART2_UART_Init+0x4c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <MX_USART2_UART_Init+0x4c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ce:	4805      	ldr	r0, [pc, #20]	; (80017e4 <MX_USART2_UART_Init+0x4c>)
 80017d0:	f002 fe40 	bl	8004454 <HAL_UART_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017da:	f7ff fc1d 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000374 	.word	0x20000374
 80017e8:	40004400 	.word	0x40004400

080017ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	; 0x28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a19      	ldr	r2, [pc, #100]	; (8001870 <HAL_UART_MspInit+0x84>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d12b      	bne.n	8001866 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	4b18      	ldr	r3, [pc, #96]	; (8001874 <HAL_UART_MspInit+0x88>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	4a17      	ldr	r2, [pc, #92]	; (8001874 <HAL_UART_MspInit+0x88>)
 8001818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800181c:	6413      	str	r3, [r2, #64]	; 0x40
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <HAL_UART_MspInit+0x88>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	4b11      	ldr	r3, [pc, #68]	; (8001874 <HAL_UART_MspInit+0x88>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a10      	ldr	r2, [pc, #64]	; (8001874 <HAL_UART_MspInit+0x88>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <HAL_UART_MspInit+0x88>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001846:	230c      	movs	r3, #12
 8001848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2302      	movs	r3, #2
 800184c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001856:	2307      	movs	r3, #7
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185a:	f107 0314 	add.w	r3, r7, #20
 800185e:	4619      	mov	r1, r3
 8001860:	4805      	ldr	r0, [pc, #20]	; (8001878 <HAL_UART_MspInit+0x8c>)
 8001862:	f001 f8a9 	bl	80029b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001866:	bf00      	nop
 8001868:	3728      	adds	r7, #40	; 0x28
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40004400 	.word	0x40004400
 8001874:	40023800 	.word	0x40023800
 8001878:	40020000 	.word	0x40020000

0800187c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800187c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001880:	480d      	ldr	r0, [pc, #52]	; (80018b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001882:	490e      	ldr	r1, [pc, #56]	; (80018bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001884:	4a0e      	ldr	r2, [pc, #56]	; (80018c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001888:	e002      	b.n	8001890 <LoopCopyDataInit>

0800188a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800188a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800188c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188e:	3304      	adds	r3, #4

08001890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001894:	d3f9      	bcc.n	800188a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001896:	4a0b      	ldr	r2, [pc, #44]	; (80018c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001898:	4c0b      	ldr	r4, [pc, #44]	; (80018c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800189a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800189c:	e001      	b.n	80018a2 <LoopFillZerobss>

0800189e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a0:	3204      	adds	r2, #4

080018a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a4:	d3fb      	bcc.n	800189e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018a6:	f7ff fc63 	bl	8001170 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018aa:	f003 f8ef 	bl	8004a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ae:	f7ff fa4b 	bl	8000d48 <main>
  bx  lr    
 80018b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80018b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018bc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80018c0:	080053dc 	.word	0x080053dc
  ldr r2, =_sbss
 80018c4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80018c8:	200003cc 	.word	0x200003cc

080018cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018cc:	e7fe      	b.n	80018cc <ADC_IRQHandler>
	...

080018d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018d4:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <HAL_Init+0x40>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a0d      	ldr	r2, [pc, #52]	; (8001910 <HAL_Init+0x40>)
 80018da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <HAL_Init+0x40>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <HAL_Init+0x40>)
 80018e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <HAL_Init+0x40>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a07      	ldr	r2, [pc, #28]	; (8001910 <HAL_Init+0x40>)
 80018f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f8:	2003      	movs	r0, #3
 80018fa:	f000 fd31 	bl	8002360 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018fe:	2000      	movs	r0, #0
 8001900:	f000 f808 	bl	8001914 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001904:	f7ff fb8e 	bl	8001024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023c00 	.word	0x40023c00

08001914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800191c:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_InitTick+0x54>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <HAL_InitTick+0x58>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4619      	mov	r1, r3
 8001926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800192a:	fbb3 f3f1 	udiv	r3, r3, r1
 800192e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001932:	4618      	mov	r0, r3
 8001934:	f000 fd49 	bl	80023ca <HAL_SYSTICK_Config>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e00e      	b.n	8001960 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b0f      	cmp	r3, #15
 8001946:	d80a      	bhi.n	800195e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001948:	2200      	movs	r2, #0
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	f04f 30ff 	mov.w	r0, #4294967295
 8001950:	f000 fd11 	bl	8002376 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001954:	4a06      	ldr	r2, [pc, #24]	; (8001970 <HAL_InitTick+0x5c>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	e000      	b.n	8001960 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
}
 8001960:	4618      	mov	r0, r3
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000000 	.word	0x20000000
 800196c:	20000008 	.word	0x20000008
 8001970:	20000004 	.word	0x20000004

08001974 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_IncTick+0x20>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_IncTick+0x24>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4413      	add	r3, r2
 8001984:	4a04      	ldr	r2, [pc, #16]	; (8001998 <HAL_IncTick+0x24>)
 8001986:	6013      	str	r3, [r2, #0]
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20000008 	.word	0x20000008
 8001998:	200003b8 	.word	0x200003b8

0800199c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return uwTick;
 80019a0:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <HAL_GetTick+0x14>)
 80019a2:	681b      	ldr	r3, [r3, #0]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	200003b8 	.word	0x200003b8

080019b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019bc:	f7ff ffee 	bl	800199c <HAL_GetTick>
 80019c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019cc:	d005      	beq.n	80019da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ce:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <HAL_Delay+0x44>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4413      	add	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019da:	bf00      	nop
 80019dc:	f7ff ffde 	bl	800199c <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d8f7      	bhi.n	80019dc <HAL_Delay+0x28>
  {
  }
}
 80019ec:	bf00      	nop
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000008 	.word	0x20000008

080019fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a04:	2300      	movs	r3, #0
 8001a06:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e033      	b.n	8001a7a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d109      	bne.n	8001a2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7fe fe38 	bl	8000690 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	f003 0310 	and.w	r3, r3, #16
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d118      	bne.n	8001a6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a42:	f023 0302 	bic.w	r3, r3, #2
 8001a46:	f043 0202 	orr.w	r2, r3, #2
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 faba 	bl	8001fc8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	f023 0303 	bic.w	r3, r3, #3
 8001a62:	f043 0201 	orr.w	r2, r3, #1
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	641a      	str	r2, [r3, #64]	; 0x40
 8001a6a:	e001      	b.n	8001a70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d101      	bne.n	8001a9e <HAL_ADC_Start+0x1a>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e097      	b.n	8001bce <HAL_ADC_Start+0x14a>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d018      	beq.n	8001ae6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0201 	orr.w	r2, r2, #1
 8001ac2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ac4:	4b45      	ldr	r3, [pc, #276]	; (8001bdc <HAL_ADC_Start+0x158>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a45      	ldr	r2, [pc, #276]	; (8001be0 <HAL_ADC_Start+0x15c>)
 8001aca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ace:	0c9a      	lsrs	r2, r3, #18
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	4413      	add	r3, r2
 8001ad6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ad8:	e002      	b.n	8001ae0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	3b01      	subs	r3, #1
 8001ade:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f9      	bne.n	8001ada <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d15f      	bne.n	8001bb4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001afc:	f023 0301 	bic.w	r3, r3, #1
 8001b00:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d007      	beq.n	8001b26 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b1e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b32:	d106      	bne.n	8001b42 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b38:	f023 0206 	bic.w	r2, r3, #6
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	645a      	str	r2, [r3, #68]	; 0x44
 8001b40:	e002      	b.n	8001b48 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b50:	4b24      	ldr	r3, [pc, #144]	; (8001be4 <HAL_ADC_Start+0x160>)
 8001b52:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b5c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 031f 	and.w	r3, r3, #31
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10f      	bne.n	8001b8a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d129      	bne.n	8001bcc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	e020      	b.n	8001bcc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a16      	ldr	r2, [pc, #88]	; (8001be8 <HAL_ADC_Start+0x164>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d11b      	bne.n	8001bcc <HAL_ADC_Start+0x148>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d114      	bne.n	8001bcc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	e00b      	b.n	8001bcc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	f043 0210 	orr.w	r2, r3, #16
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc4:	f043 0201 	orr.w	r2, r3, #1
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	20000000 	.word	0x20000000
 8001be0:	431bde83 	.word	0x431bde83
 8001be4:	40012300 	.word	0x40012300
 8001be8:	40012000 	.word	0x40012000

08001bec <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d101      	bne.n	8001c02 <HAL_ADC_Stop+0x16>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e021      	b.n	8001c46 <HAL_ADC_Stop+0x5a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0201 	bic.w	r2, r2, #1
 8001c18:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d109      	bne.n	8001c3c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c30:	f023 0301 	bic.w	r3, r3, #1
 8001c34:	f043 0201 	orr.w	r2, r3, #1
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b084      	sub	sp, #16
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c6e:	d113      	bne.n	8001c98 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c7e:	d10b      	bne.n	8001c98 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	f043 0220 	orr.w	r2, r3, #32
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e063      	b.n	8001d60 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001c98:	f7ff fe80 	bl	800199c <HAL_GetTick>
 8001c9c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c9e:	e021      	b.n	8001ce4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca6:	d01d      	beq.n	8001ce4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d007      	beq.n	8001cbe <HAL_ADC_PollForConversion+0x6c>
 8001cae:	f7ff fe75 	bl	800199c <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d212      	bcs.n	8001ce4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d00b      	beq.n	8001ce4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	f043 0204 	orr.w	r2, r3, #4
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e03d      	b.n	8001d60 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d1d6      	bne.n	8001ca0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f06f 0212 	mvn.w	r2, #18
 8001cfa:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d123      	bne.n	8001d5e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d11f      	bne.n	8001d5e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d24:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d006      	beq.n	8001d3a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d111      	bne.n	8001d5e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d105      	bne.n	8001d5e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f043 0201 	orr.w	r2, r3, #1
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
	...

08001d84 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x1c>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e105      	b.n	8001fac <HAL_ADC_ConfigChannel+0x228>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b09      	cmp	r3, #9
 8001dae:	d925      	bls.n	8001dfc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68d9      	ldr	r1, [r3, #12]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3b1e      	subs	r3, #30
 8001dc6:	2207      	movs	r2, #7
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43da      	mvns	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	400a      	ands	r2, r1
 8001dd4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68d9      	ldr	r1, [r3, #12]
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	4618      	mov	r0, r3
 8001de8:	4603      	mov	r3, r0
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4403      	add	r3, r0
 8001dee:	3b1e      	subs	r3, #30
 8001df0:	409a      	lsls	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	e022      	b.n	8001e42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6919      	ldr	r1, [r3, #16]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	4413      	add	r3, r2
 8001e10:	2207      	movs	r2, #7
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43da      	mvns	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	400a      	ands	r2, r1
 8001e1e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6919      	ldr	r1, [r3, #16]
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	4618      	mov	r0, r3
 8001e32:	4603      	mov	r3, r0
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	4403      	add	r3, r0
 8001e38:	409a      	lsls	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b06      	cmp	r3, #6
 8001e48:	d824      	bhi.n	8001e94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	3b05      	subs	r3, #5
 8001e5c:	221f      	movs	r2, #31
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43da      	mvns	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	400a      	ands	r2, r1
 8001e6a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	4618      	mov	r0, r3
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	3b05      	subs	r3, #5
 8001e86:	fa00 f203 	lsl.w	r2, r0, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	635a      	str	r2, [r3, #52]	; 0x34
 8001e92:	e04c      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b0c      	cmp	r3, #12
 8001e9a:	d824      	bhi.n	8001ee6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	3b23      	subs	r3, #35	; 0x23
 8001eae:	221f      	movs	r2, #31
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43da      	mvns	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	400a      	ands	r2, r1
 8001ebc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	4618      	mov	r0, r3
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3b23      	subs	r3, #35	; 0x23
 8001ed8:	fa00 f203 	lsl.w	r2, r0, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ee4:	e023      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3b41      	subs	r3, #65	; 0x41
 8001ef8:	221f      	movs	r2, #31
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43da      	mvns	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	400a      	ands	r2, r1
 8001f06:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	4618      	mov	r0, r3
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	3b41      	subs	r3, #65	; 0x41
 8001f22:	fa00 f203 	lsl.w	r2, r0, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f2e:	4b22      	ldr	r3, [pc, #136]	; (8001fb8 <HAL_ADC_ConfigChannel+0x234>)
 8001f30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a21      	ldr	r2, [pc, #132]	; (8001fbc <HAL_ADC_ConfigChannel+0x238>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d109      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x1cc>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b12      	cmp	r3, #18
 8001f42:	d105      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a19      	ldr	r2, [pc, #100]	; (8001fbc <HAL_ADC_ConfigChannel+0x238>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d123      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x21e>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b10      	cmp	r3, #16
 8001f60:	d003      	beq.n	8001f6a <HAL_ADC_ConfigChannel+0x1e6>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2b11      	cmp	r3, #17
 8001f68:	d11b      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2b10      	cmp	r3, #16
 8001f7c:	d111      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f7e:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <HAL_ADC_ConfigChannel+0x23c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a10      	ldr	r2, [pc, #64]	; (8001fc4 <HAL_ADC_ConfigChannel+0x240>)
 8001f84:	fba2 2303 	umull	r2, r3, r2, r3
 8001f88:	0c9a      	lsrs	r2, r3, #18
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f94:	e002      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f9      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	40012300 	.word	0x40012300
 8001fbc:	40012000 	.word	0x40012000
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	431bde83 	.word	0x431bde83

08001fc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fd0:	4b79      	ldr	r3, [pc, #484]	; (80021b8 <ADC_Init+0x1f0>)
 8001fd2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ffc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6859      	ldr	r1, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	021a      	lsls	r2, r3, #8
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002020:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6859      	ldr	r1, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002042:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6899      	ldr	r1, [r3, #8]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205a:	4a58      	ldr	r2, [pc, #352]	; (80021bc <ADC_Init+0x1f4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d022      	beq.n	80020a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800206e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6899      	ldr	r1, [r3, #8]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002090:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6899      	ldr	r1, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	e00f      	b.n	80020c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0202 	bic.w	r2, r2, #2
 80020d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6899      	ldr	r1, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	7e1b      	ldrb	r3, [r3, #24]
 80020e0:	005a      	lsls	r2, r3, #1
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d01b      	beq.n	800212c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002102:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002112:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6859      	ldr	r1, [r3, #4]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	3b01      	subs	r3, #1
 8002120:	035a      	lsls	r2, r3, #13
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	e007      	b.n	800213c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800213a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800214a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	3b01      	subs	r3, #1
 8002158:	051a      	lsls	r2, r3, #20
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002170:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6899      	ldr	r1, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800217e:	025a      	lsls	r2, r3, #9
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002196:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6899      	ldr	r1, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	029a      	lsls	r2, r3, #10
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	609a      	str	r2, [r3, #8]
}
 80021ac:	bf00      	nop
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	40012300 	.word	0x40012300
 80021bc:	0f000001 	.word	0x0f000001

080021c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021d0:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <__NVIC_SetPriorityGrouping+0x44>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021dc:	4013      	ands	r3, r2
 80021de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021f2:	4a04      	ldr	r2, [pc, #16]	; (8002204 <__NVIC_SetPriorityGrouping+0x44>)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	60d3      	str	r3, [r2, #12]
}
 80021f8:	bf00      	nop
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800220c:	4b04      	ldr	r3, [pc, #16]	; (8002220 <__NVIC_GetPriorityGrouping+0x18>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	0a1b      	lsrs	r3, r3, #8
 8002212:	f003 0307 	and.w	r3, r3, #7
}
 8002216:	4618      	mov	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800222e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002232:	2b00      	cmp	r3, #0
 8002234:	db0b      	blt.n	800224e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	f003 021f 	and.w	r2, r3, #31
 800223c:	4907      	ldr	r1, [pc, #28]	; (800225c <__NVIC_EnableIRQ+0x38>)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	2001      	movs	r0, #1
 8002246:	fa00 f202 	lsl.w	r2, r0, r2
 800224a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	e000e100 	.word	0xe000e100

08002260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	6039      	str	r1, [r7, #0]
 800226a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002270:	2b00      	cmp	r3, #0
 8002272:	db0a      	blt.n	800228a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	b2da      	uxtb	r2, r3
 8002278:	490c      	ldr	r1, [pc, #48]	; (80022ac <__NVIC_SetPriority+0x4c>)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	0112      	lsls	r2, r2, #4
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	440b      	add	r3, r1
 8002284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002288:	e00a      	b.n	80022a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4908      	ldr	r1, [pc, #32]	; (80022b0 <__NVIC_SetPriority+0x50>)
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	3b04      	subs	r3, #4
 8002298:	0112      	lsls	r2, r2, #4
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	440b      	add	r3, r1
 800229e:	761a      	strb	r2, [r3, #24]
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000e100 	.word	0xe000e100
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b089      	sub	sp, #36	; 0x24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f1c3 0307 	rsb	r3, r3, #7
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	bf28      	it	cs
 80022d2:	2304      	movcs	r3, #4
 80022d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3304      	adds	r3, #4
 80022da:	2b06      	cmp	r3, #6
 80022dc:	d902      	bls.n	80022e4 <NVIC_EncodePriority+0x30>
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3b03      	subs	r3, #3
 80022e2:	e000      	b.n	80022e6 <NVIC_EncodePriority+0x32>
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43da      	mvns	r2, r3
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	401a      	ands	r2, r3
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	fa01 f303 	lsl.w	r3, r1, r3
 8002306:	43d9      	mvns	r1, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800230c:	4313      	orrs	r3, r2
         );
}
 800230e:	4618      	mov	r0, r3
 8002310:	3724      	adds	r7, #36	; 0x24
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
	...

0800231c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3b01      	subs	r3, #1
 8002328:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800232c:	d301      	bcc.n	8002332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800232e:	2301      	movs	r3, #1
 8002330:	e00f      	b.n	8002352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002332:	4a0a      	ldr	r2, [pc, #40]	; (800235c <SysTick_Config+0x40>)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3b01      	subs	r3, #1
 8002338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800233a:	210f      	movs	r1, #15
 800233c:	f04f 30ff 	mov.w	r0, #4294967295
 8002340:	f7ff ff8e 	bl	8002260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <SysTick_Config+0x40>)
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800234a:	4b04      	ldr	r3, [pc, #16]	; (800235c <SysTick_Config+0x40>)
 800234c:	2207      	movs	r2, #7
 800234e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	e000e010 	.word	0xe000e010

08002360 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff ff29 	bl	80021c0 <__NVIC_SetPriorityGrouping>
}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002376:	b580      	push	{r7, lr}
 8002378:	b086      	sub	sp, #24
 800237a:	af00      	add	r7, sp, #0
 800237c:	4603      	mov	r3, r0
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
 8002382:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002388:	f7ff ff3e 	bl	8002208 <__NVIC_GetPriorityGrouping>
 800238c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68b9      	ldr	r1, [r7, #8]
 8002392:	6978      	ldr	r0, [r7, #20]
 8002394:	f7ff ff8e 	bl	80022b4 <NVIC_EncodePriority>
 8002398:	4602      	mov	r2, r0
 800239a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800239e:	4611      	mov	r1, r2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff ff5d 	bl	8002260 <__NVIC_SetPriority>
}
 80023a6:	bf00      	nop
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ff31 	bl	8002224 <__NVIC_EnableIRQ>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff ffa2 	bl	800231c <SysTick_Config>
 80023d8:	4603      	mov	r3, r0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023f0:	f7ff fad4 	bl	800199c <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e099      	b.n	8002534 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2202      	movs	r2, #2
 8002404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0201 	bic.w	r2, r2, #1
 800241e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002420:	e00f      	b.n	8002442 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002422:	f7ff fabb 	bl	800199c <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b05      	cmp	r3, #5
 800242e:	d908      	bls.n	8002442 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2220      	movs	r2, #32
 8002434:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2203      	movs	r2, #3
 800243a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e078      	b.n	8002534 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1e8      	bne.n	8002422 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	4b38      	ldr	r3, [pc, #224]	; (800253c <HAL_DMA_Init+0x158>)
 800245c:	4013      	ands	r3, r2
 800245e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800246e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800247a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002486:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	4313      	orrs	r3, r2
 8002492:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	2b04      	cmp	r3, #4
 800249a:	d107      	bne.n	80024ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a4:	4313      	orrs	r3, r2
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f023 0307 	bic.w	r3, r3, #7
 80024c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	d117      	bne.n	8002506 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	4313      	orrs	r3, r2
 80024de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00e      	beq.n	8002506 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 f9e9 	bl	80028c0 <DMA_CheckFifoParam>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d008      	beq.n	8002506 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2240      	movs	r2, #64	; 0x40
 80024f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002502:	2301      	movs	r3, #1
 8002504:	e016      	b.n	8002534 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f9a0 	bl	8002854 <DMA_CalcBaseAndBitshift>
 8002514:	4603      	mov	r3, r0
 8002516:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251c:	223f      	movs	r2, #63	; 0x3f
 800251e:	409a      	lsls	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	f010803f 	.word	0xf010803f

08002540 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800254c:	4b92      	ldr	r3, [pc, #584]	; (8002798 <HAL_DMA_IRQHandler+0x258>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a92      	ldr	r2, [pc, #584]	; (800279c <HAL_DMA_IRQHandler+0x25c>)
 8002552:	fba2 2303 	umull	r2, r3, r2, r3
 8002556:	0a9b      	lsrs	r3, r3, #10
 8002558:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256a:	2208      	movs	r2, #8
 800256c:	409a      	lsls	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4013      	ands	r3, r2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d01a      	beq.n	80025ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	d013      	beq.n	80025ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0204 	bic.w	r2, r2, #4
 8002592:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002598:	2208      	movs	r2, #8
 800259a:	409a      	lsls	r2, r3
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a4:	f043 0201 	orr.w	r2, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b0:	2201      	movs	r2, #1
 80025b2:	409a      	lsls	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d012      	beq.n	80025e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00b      	beq.n	80025e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ce:	2201      	movs	r2, #1
 80025d0:	409a      	lsls	r2, r3
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025da:	f043 0202 	orr.w	r2, r3, #2
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e6:	2204      	movs	r2, #4
 80025e8:	409a      	lsls	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d012      	beq.n	8002618 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00b      	beq.n	8002618 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002604:	2204      	movs	r2, #4
 8002606:	409a      	lsls	r2, r3
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002610:	f043 0204 	orr.w	r2, r3, #4
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261c:	2210      	movs	r2, #16
 800261e:	409a      	lsls	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4013      	ands	r3, r2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d043      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b00      	cmp	r3, #0
 8002634:	d03c      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263a:	2210      	movs	r2, #16
 800263c:	409a      	lsls	r2, r3
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d018      	beq.n	8002682 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d108      	bne.n	8002670 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	2b00      	cmp	r3, #0
 8002664:	d024      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	4798      	blx	r3
 800266e:	e01f      	b.n	80026b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002674:	2b00      	cmp	r3, #0
 8002676:	d01b      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	4798      	blx	r3
 8002680:	e016      	b.n	80026b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268c:	2b00      	cmp	r3, #0
 800268e:	d107      	bne.n	80026a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0208 	bic.w	r2, r2, #8
 800269e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b4:	2220      	movs	r2, #32
 80026b6:	409a      	lsls	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4013      	ands	r3, r2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 808e 	beq.w	80027de <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0310 	and.w	r3, r3, #16
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 8086 	beq.w	80027de <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d6:	2220      	movs	r2, #32
 80026d8:	409a      	lsls	r2, r3
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b05      	cmp	r3, #5
 80026e8:	d136      	bne.n	8002758 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 0216 	bic.w	r2, r2, #22
 80026f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	695a      	ldr	r2, [r3, #20]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002708:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	2b00      	cmp	r3, #0
 8002710:	d103      	bne.n	800271a <HAL_DMA_IRQHandler+0x1da>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002716:	2b00      	cmp	r3, #0
 8002718:	d007      	beq.n	800272a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0208 	bic.w	r2, r2, #8
 8002728:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272e:	223f      	movs	r2, #63	; 0x3f
 8002730:	409a      	lsls	r2, r3
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800274a:	2b00      	cmp	r3, #0
 800274c:	d07d      	beq.n	800284a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	4798      	blx	r3
        }
        return;
 8002756:	e078      	b.n	800284a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d01c      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d108      	bne.n	8002786 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002778:	2b00      	cmp	r3, #0
 800277a:	d030      	beq.n	80027de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	4798      	blx	r3
 8002784:	e02b      	b.n	80027de <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278a:	2b00      	cmp	r3, #0
 800278c:	d027      	beq.n	80027de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	4798      	blx	r3
 8002796:	e022      	b.n	80027de <HAL_DMA_IRQHandler+0x29e>
 8002798:	20000000 	.word	0x20000000
 800279c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10f      	bne.n	80027ce <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0210 	bic.w	r2, r2, #16
 80027bc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d032      	beq.n	800284c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d022      	beq.n	8002838 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2205      	movs	r2, #5
 80027f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0201 	bic.w	r2, r2, #1
 8002808:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	3301      	adds	r3, #1
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	429a      	cmp	r2, r3
 8002814:	d307      	bcc.n	8002826 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1f2      	bne.n	800280a <HAL_DMA_IRQHandler+0x2ca>
 8002824:	e000      	b.n	8002828 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002826:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	4798      	blx	r3
 8002848:	e000      	b.n	800284c <HAL_DMA_IRQHandler+0x30c>
        return;
 800284a:	bf00      	nop
    }
  }
}
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop

08002854 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	3b10      	subs	r3, #16
 8002864:	4a14      	ldr	r2, [pc, #80]	; (80028b8 <DMA_CalcBaseAndBitshift+0x64>)
 8002866:	fba2 2303 	umull	r2, r3, r2, r3
 800286a:	091b      	lsrs	r3, r3, #4
 800286c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800286e:	4a13      	ldr	r2, [pc, #76]	; (80028bc <DMA_CalcBaseAndBitshift+0x68>)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4413      	add	r3, r2
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	461a      	mov	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2b03      	cmp	r3, #3
 8002880:	d909      	bls.n	8002896 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800288a:	f023 0303 	bic.w	r3, r3, #3
 800288e:	1d1a      	adds	r2, r3, #4
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	659a      	str	r2, [r3, #88]	; 0x58
 8002894:	e007      	b.n	80028a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800289e:	f023 0303 	bic.w	r3, r3, #3
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	aaaaaaab 	.word	0xaaaaaaab
 80028bc:	08005390 	.word	0x08005390

080028c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d11f      	bne.n	800291a <DMA_CheckFifoParam+0x5a>
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	2b03      	cmp	r3, #3
 80028de:	d856      	bhi.n	800298e <DMA_CheckFifoParam+0xce>
 80028e0:	a201      	add	r2, pc, #4	; (adr r2, 80028e8 <DMA_CheckFifoParam+0x28>)
 80028e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e6:	bf00      	nop
 80028e8:	080028f9 	.word	0x080028f9
 80028ec:	0800290b 	.word	0x0800290b
 80028f0:	080028f9 	.word	0x080028f9
 80028f4:	0800298f 	.word	0x0800298f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d046      	beq.n	8002992 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002908:	e043      	b.n	8002992 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002912:	d140      	bne.n	8002996 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002918:	e03d      	b.n	8002996 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002922:	d121      	bne.n	8002968 <DMA_CheckFifoParam+0xa8>
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2b03      	cmp	r3, #3
 8002928:	d837      	bhi.n	800299a <DMA_CheckFifoParam+0xda>
 800292a:	a201      	add	r2, pc, #4	; (adr r2, 8002930 <DMA_CheckFifoParam+0x70>)
 800292c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002930:	08002941 	.word	0x08002941
 8002934:	08002947 	.word	0x08002947
 8002938:	08002941 	.word	0x08002941
 800293c:	08002959 	.word	0x08002959
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
      break;
 8002944:	e030      	b.n	80029a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d025      	beq.n	800299e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002956:	e022      	b.n	800299e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002960:	d11f      	bne.n	80029a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002966:	e01c      	b.n	80029a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2b02      	cmp	r3, #2
 800296c:	d903      	bls.n	8002976 <DMA_CheckFifoParam+0xb6>
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2b03      	cmp	r3, #3
 8002972:	d003      	beq.n	800297c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002974:	e018      	b.n	80029a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	73fb      	strb	r3, [r7, #15]
      break;
 800297a:	e015      	b.n	80029a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00e      	beq.n	80029a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	73fb      	strb	r3, [r7, #15]
      break;
 800298c:	e00b      	b.n	80029a6 <DMA_CheckFifoParam+0xe6>
      break;
 800298e:	bf00      	nop
 8002990:	e00a      	b.n	80029a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002992:	bf00      	nop
 8002994:	e008      	b.n	80029a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002996:	bf00      	nop
 8002998:	e006      	b.n	80029a8 <DMA_CheckFifoParam+0xe8>
      break;
 800299a:	bf00      	nop
 800299c:	e004      	b.n	80029a8 <DMA_CheckFifoParam+0xe8>
      break;
 800299e:	bf00      	nop
 80029a0:	e002      	b.n	80029a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80029a2:	bf00      	nop
 80029a4:	e000      	b.n	80029a8 <DMA_CheckFifoParam+0xe8>
      break;
 80029a6:	bf00      	nop
    }
  } 
  
  return status; 
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop

080029b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b089      	sub	sp, #36	; 0x24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ce:	2300      	movs	r3, #0
 80029d0:	61fb      	str	r3, [r7, #28]
 80029d2:	e159      	b.n	8002c88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029d4:	2201      	movs	r2, #1
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	4013      	ands	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	f040 8148 	bne.w	8002c82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d005      	beq.n	8002a0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d130      	bne.n	8002a6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	2203      	movs	r2, #3
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a40:	2201      	movs	r2, #1
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f003 0201 	and.w	r2, r3, #1
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 0303 	and.w	r3, r3, #3
 8002a74:	2b03      	cmp	r3, #3
 8002a76:	d017      	beq.n	8002aa8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	2203      	movs	r2, #3
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d123      	bne.n	8002afc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	08da      	lsrs	r2, r3, #3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3208      	adds	r2, #8
 8002abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	220f      	movs	r2, #15
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	691a      	ldr	r2, [r3, #16]
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	08da      	lsrs	r2, r3, #3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3208      	adds	r2, #8
 8002af6:	69b9      	ldr	r1, [r7, #24]
 8002af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	2203      	movs	r2, #3
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 0203 	and.w	r2, r3, #3
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 80a2 	beq.w	8002c82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	4b57      	ldr	r3, [pc, #348]	; (8002ca0 <HAL_GPIO_Init+0x2e8>)
 8002b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b46:	4a56      	ldr	r2, [pc, #344]	; (8002ca0 <HAL_GPIO_Init+0x2e8>)
 8002b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b4e:	4b54      	ldr	r3, [pc, #336]	; (8002ca0 <HAL_GPIO_Init+0x2e8>)
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b5a:	4a52      	ldr	r2, [pc, #328]	; (8002ca4 <HAL_GPIO_Init+0x2ec>)
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	089b      	lsrs	r3, r3, #2
 8002b60:	3302      	adds	r3, #2
 8002b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	220f      	movs	r2, #15
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43db      	mvns	r3, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a49      	ldr	r2, [pc, #292]	; (8002ca8 <HAL_GPIO_Init+0x2f0>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d019      	beq.n	8002bba <HAL_GPIO_Init+0x202>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a48      	ldr	r2, [pc, #288]	; (8002cac <HAL_GPIO_Init+0x2f4>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d013      	beq.n	8002bb6 <HAL_GPIO_Init+0x1fe>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a47      	ldr	r2, [pc, #284]	; (8002cb0 <HAL_GPIO_Init+0x2f8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d00d      	beq.n	8002bb2 <HAL_GPIO_Init+0x1fa>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a46      	ldr	r2, [pc, #280]	; (8002cb4 <HAL_GPIO_Init+0x2fc>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d007      	beq.n	8002bae <HAL_GPIO_Init+0x1f6>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a45      	ldr	r2, [pc, #276]	; (8002cb8 <HAL_GPIO_Init+0x300>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d101      	bne.n	8002baa <HAL_GPIO_Init+0x1f2>
 8002ba6:	2304      	movs	r3, #4
 8002ba8:	e008      	b.n	8002bbc <HAL_GPIO_Init+0x204>
 8002baa:	2307      	movs	r3, #7
 8002bac:	e006      	b.n	8002bbc <HAL_GPIO_Init+0x204>
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e004      	b.n	8002bbc <HAL_GPIO_Init+0x204>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e002      	b.n	8002bbc <HAL_GPIO_Init+0x204>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <HAL_GPIO_Init+0x204>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	f002 0203 	and.w	r2, r2, #3
 8002bc2:	0092      	lsls	r2, r2, #2
 8002bc4:	4093      	lsls	r3, r2
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bcc:	4935      	ldr	r1, [pc, #212]	; (8002ca4 <HAL_GPIO_Init+0x2ec>)
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	089b      	lsrs	r3, r3, #2
 8002bd2:	3302      	adds	r3, #2
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bda:	4b38      	ldr	r3, [pc, #224]	; (8002cbc <HAL_GPIO_Init+0x304>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	43db      	mvns	r3, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4013      	ands	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bfe:	4a2f      	ldr	r2, [pc, #188]	; (8002cbc <HAL_GPIO_Init+0x304>)
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c04:	4b2d      	ldr	r3, [pc, #180]	; (8002cbc <HAL_GPIO_Init+0x304>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c28:	4a24      	ldr	r2, [pc, #144]	; (8002cbc <HAL_GPIO_Init+0x304>)
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c2e:	4b23      	ldr	r3, [pc, #140]	; (8002cbc <HAL_GPIO_Init+0x304>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	43db      	mvns	r3, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c52:	4a1a      	ldr	r2, [pc, #104]	; (8002cbc <HAL_GPIO_Init+0x304>)
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c58:	4b18      	ldr	r3, [pc, #96]	; (8002cbc <HAL_GPIO_Init+0x304>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c7c:	4a0f      	ldr	r2, [pc, #60]	; (8002cbc <HAL_GPIO_Init+0x304>)
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3301      	adds	r3, #1
 8002c86:	61fb      	str	r3, [r7, #28]
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	2b0f      	cmp	r3, #15
 8002c8c:	f67f aea2 	bls.w	80029d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c90:	bf00      	nop
 8002c92:	bf00      	nop
 8002c94:	3724      	adds	r7, #36	; 0x24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	40013800 	.word	0x40013800
 8002ca8:	40020000 	.word	0x40020000
 8002cac:	40020400 	.word	0x40020400
 8002cb0:	40020800 	.word	0x40020800
 8002cb4:	40020c00 	.word	0x40020c00
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	40013c00 	.word	0x40013c00

08002cc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e12b      	b.n	8002f2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d106      	bne.n	8002cec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7fd ffe6 	bl	8000cb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2224      	movs	r2, #36	; 0x24
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0201 	bic.w	r2, r2, #1
 8002d02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d24:	f000 fd5c 	bl	80037e0 <HAL_RCC_GetPCLK1Freq>
 8002d28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	4a81      	ldr	r2, [pc, #516]	; (8002f34 <HAL_I2C_Init+0x274>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d807      	bhi.n	8002d44 <HAL_I2C_Init+0x84>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4a80      	ldr	r2, [pc, #512]	; (8002f38 <HAL_I2C_Init+0x278>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	bf94      	ite	ls
 8002d3c:	2301      	movls	r3, #1
 8002d3e:	2300      	movhi	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	e006      	b.n	8002d52 <HAL_I2C_Init+0x92>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4a7d      	ldr	r2, [pc, #500]	; (8002f3c <HAL_I2C_Init+0x27c>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	bf94      	ite	ls
 8002d4c:	2301      	movls	r3, #1
 8002d4e:	2300      	movhi	r3, #0
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e0e7      	b.n	8002f2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	4a78      	ldr	r2, [pc, #480]	; (8002f40 <HAL_I2C_Init+0x280>)
 8002d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d62:	0c9b      	lsrs	r3, r3, #18
 8002d64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	4a6a      	ldr	r2, [pc, #424]	; (8002f34 <HAL_I2C_Init+0x274>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d802      	bhi.n	8002d94 <HAL_I2C_Init+0xd4>
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	3301      	adds	r3, #1
 8002d92:	e009      	b.n	8002da8 <HAL_I2C_Init+0xe8>
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d9a:	fb02 f303 	mul.w	r3, r2, r3
 8002d9e:	4a69      	ldr	r2, [pc, #420]	; (8002f44 <HAL_I2C_Init+0x284>)
 8002da0:	fba2 2303 	umull	r2, r3, r2, r3
 8002da4:	099b      	lsrs	r3, r3, #6
 8002da6:	3301      	adds	r3, #1
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6812      	ldr	r2, [r2, #0]
 8002dac:	430b      	orrs	r3, r1
 8002dae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	495c      	ldr	r1, [pc, #368]	; (8002f34 <HAL_I2C_Init+0x274>)
 8002dc4:	428b      	cmp	r3, r1
 8002dc6:	d819      	bhi.n	8002dfc <HAL_I2C_Init+0x13c>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	1e59      	subs	r1, r3, #1
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dd6:	1c59      	adds	r1, r3, #1
 8002dd8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ddc:	400b      	ands	r3, r1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <HAL_I2C_Init+0x138>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	1e59      	subs	r1, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	fbb1 f3f3 	udiv	r3, r1, r3
 8002df0:	3301      	adds	r3, #1
 8002df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df6:	e051      	b.n	8002e9c <HAL_I2C_Init+0x1dc>
 8002df8:	2304      	movs	r3, #4
 8002dfa:	e04f      	b.n	8002e9c <HAL_I2C_Init+0x1dc>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d111      	bne.n	8002e28 <HAL_I2C_Init+0x168>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	1e58      	subs	r0, r3, #1
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6859      	ldr	r1, [r3, #4]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	440b      	add	r3, r1
 8002e12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e16:	3301      	adds	r3, #1
 8002e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	bf0c      	ite	eq
 8002e20:	2301      	moveq	r3, #1
 8002e22:	2300      	movne	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	e012      	b.n	8002e4e <HAL_I2C_Init+0x18e>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	1e58      	subs	r0, r3, #1
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6859      	ldr	r1, [r3, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	0099      	lsls	r1, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e3e:	3301      	adds	r3, #1
 8002e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	bf0c      	ite	eq
 8002e48:	2301      	moveq	r3, #1
 8002e4a:	2300      	movne	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_I2C_Init+0x196>
 8002e52:	2301      	movs	r3, #1
 8002e54:	e022      	b.n	8002e9c <HAL_I2C_Init+0x1dc>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10e      	bne.n	8002e7c <HAL_I2C_Init+0x1bc>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	1e58      	subs	r0, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6859      	ldr	r1, [r3, #4]
 8002e66:	460b      	mov	r3, r1
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	440b      	add	r3, r1
 8002e6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e70:	3301      	adds	r3, #1
 8002e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e7a:	e00f      	b.n	8002e9c <HAL_I2C_Init+0x1dc>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	1e58      	subs	r0, r3, #1
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6859      	ldr	r1, [r3, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	0099      	lsls	r1, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e92:	3301      	adds	r3, #1
 8002e94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	6809      	ldr	r1, [r1, #0]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69da      	ldr	r2, [r3, #28]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002eca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6911      	ldr	r1, [r2, #16]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	68d2      	ldr	r2, [r2, #12]
 8002ed6:	4311      	orrs	r1, r2
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	430b      	orrs	r3, r1
 8002ede:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695a      	ldr	r2, [r3, #20]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0201 	orr.w	r2, r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	000186a0 	.word	0x000186a0
 8002f38:	001e847f 	.word	0x001e847f
 8002f3c:	003d08ff 	.word	0x003d08ff
 8002f40:	431bde83 	.word	0x431bde83
 8002f44:	10624dd3 	.word	0x10624dd3

08002f48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e264      	b.n	8003424 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d075      	beq.n	8003052 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f66:	4ba3      	ldr	r3, [pc, #652]	; (80031f4 <HAL_RCC_OscConfig+0x2ac>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d00c      	beq.n	8002f8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f72:	4ba0      	ldr	r3, [pc, #640]	; (80031f4 <HAL_RCC_OscConfig+0x2ac>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d112      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f7e:	4b9d      	ldr	r3, [pc, #628]	; (80031f4 <HAL_RCC_OscConfig+0x2ac>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f8a:	d10b      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f8c:	4b99      	ldr	r3, [pc, #612]	; (80031f4 <HAL_RCC_OscConfig+0x2ac>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d05b      	beq.n	8003050 <HAL_RCC_OscConfig+0x108>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d157      	bne.n	8003050 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e23f      	b.n	8003424 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fac:	d106      	bne.n	8002fbc <HAL_RCC_OscConfig+0x74>
 8002fae:	4b91      	ldr	r3, [pc, #580]	; (80031f4 <HAL_RCC_OscConfig+0x2ac>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a90      	ldr	r2, [pc, #576]	; (80031f4 <HAL_RCC_OscConfig+0x2ac>)
 8002fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	e01d      	b.n	8002ff8 <HAL_RCC_OscConfig+0xb0>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fc4:	d10c      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x98>
 8002fc6:	4b8b      	ldr	r3, [pc, #556]	; (80031f4 <HAL_RCC_OscConfig+0x2ac>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a8a      	ldr	r2, [pc, #552]	; (80031f4 <HAL_RCC_OscConfig+0x2ac>)
 8002fcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	4b88      	ldr	r3, [pc, #544]	; (80031f4 <HAL_RCC_OscConfig+0x2ac>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a87      	ldr	r2, [pc, #540]	; (80031f4 <HAL_RCC_OscConfig+0x2ac>)
 8002fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fdc:	6013      	str	r3, [r2, #0]
 8002fde:	e00b      	b.n	8002ff8 <HAL_RCC_OscConfig+0xb0>
 8002fe0:	4b84      	ldr	r3, [pc, #528]	; (80031f4 <HAL_RCC_OscConfig+0x2ac>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a83      	ldr	r2, [pc, #524]	; (80031f4 <HAL_RCC_OscConfig+0x2ac>)
 8002fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	4b81      	ldr	r3, [pc, #516]	; (80031f4 <HAL_RCC_OscConfig+0x2ac>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a80      	ldr	r2, [pc, #512]	; (80031f4 <HAL_RCC_OscConfig+0x2ac>)
 8002ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ff6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d013      	beq.n	8003028 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003000:	f7fe fccc 	bl	800199c <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003008:	f7fe fcc8 	bl	800199c <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b64      	cmp	r3, #100	; 0x64
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e204      	b.n	8003424 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301a:	4b76      	ldr	r3, [pc, #472]	; (80031f4 <HAL_RCC_OscConfig+0x2ac>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f0      	beq.n	8003008 <HAL_RCC_OscConfig+0xc0>
 8003026:	e014      	b.n	8003052 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003028:	f7fe fcb8 	bl	800199c <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003030:	f7fe fcb4 	bl	800199c <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b64      	cmp	r3, #100	; 0x64
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e1f0      	b.n	8003424 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003042:	4b6c      	ldr	r3, [pc, #432]	; (80031f4 <HAL_RCC_OscConfig+0x2ac>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0xe8>
 800304e:	e000      	b.n	8003052 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d063      	beq.n	8003126 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800305e:	4b65      	ldr	r3, [pc, #404]	; (80031f4 <HAL_RCC_OscConfig+0x2ac>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 030c 	and.w	r3, r3, #12
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00b      	beq.n	8003082 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800306a:	4b62      	ldr	r3, [pc, #392]	; (80031f4 <HAL_RCC_OscConfig+0x2ac>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003072:	2b08      	cmp	r3, #8
 8003074:	d11c      	bne.n	80030b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003076:	4b5f      	ldr	r3, [pc, #380]	; (80031f4 <HAL_RCC_OscConfig+0x2ac>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d116      	bne.n	80030b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003082:	4b5c      	ldr	r3, [pc, #368]	; (80031f4 <HAL_RCC_OscConfig+0x2ac>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d005      	beq.n	800309a <HAL_RCC_OscConfig+0x152>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d001      	beq.n	800309a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e1c4      	b.n	8003424 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800309a:	4b56      	ldr	r3, [pc, #344]	; (80031f4 <HAL_RCC_OscConfig+0x2ac>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	4952      	ldr	r1, [pc, #328]	; (80031f4 <HAL_RCC_OscConfig+0x2ac>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ae:	e03a      	b.n	8003126 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d020      	beq.n	80030fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030b8:	4b4f      	ldr	r3, [pc, #316]	; (80031f8 <HAL_RCC_OscConfig+0x2b0>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030be:	f7fe fc6d 	bl	800199c <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030c6:	f7fe fc69 	bl	800199c <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e1a5      	b.n	8003424 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d8:	4b46      	ldr	r3, [pc, #280]	; (80031f4 <HAL_RCC_OscConfig+0x2ac>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e4:	4b43      	ldr	r3, [pc, #268]	; (80031f4 <HAL_RCC_OscConfig+0x2ac>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	4940      	ldr	r1, [pc, #256]	; (80031f4 <HAL_RCC_OscConfig+0x2ac>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	600b      	str	r3, [r1, #0]
 80030f8:	e015      	b.n	8003126 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030fa:	4b3f      	ldr	r3, [pc, #252]	; (80031f8 <HAL_RCC_OscConfig+0x2b0>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003100:	f7fe fc4c 	bl	800199c <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003108:	f7fe fc48 	bl	800199c <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e184      	b.n	8003424 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800311a:	4b36      	ldr	r3, [pc, #216]	; (80031f4 <HAL_RCC_OscConfig+0x2ac>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1f0      	bne.n	8003108 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d030      	beq.n	8003194 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d016      	beq.n	8003168 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800313a:	4b30      	ldr	r3, [pc, #192]	; (80031fc <HAL_RCC_OscConfig+0x2b4>)
 800313c:	2201      	movs	r2, #1
 800313e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003140:	f7fe fc2c 	bl	800199c <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003148:	f7fe fc28 	bl	800199c <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e164      	b.n	8003424 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800315a:	4b26      	ldr	r3, [pc, #152]	; (80031f4 <HAL_RCC_OscConfig+0x2ac>)
 800315c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f0      	beq.n	8003148 <HAL_RCC_OscConfig+0x200>
 8003166:	e015      	b.n	8003194 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003168:	4b24      	ldr	r3, [pc, #144]	; (80031fc <HAL_RCC_OscConfig+0x2b4>)
 800316a:	2200      	movs	r2, #0
 800316c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800316e:	f7fe fc15 	bl	800199c <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003176:	f7fe fc11 	bl	800199c <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e14d      	b.n	8003424 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003188:	4b1a      	ldr	r3, [pc, #104]	; (80031f4 <HAL_RCC_OscConfig+0x2ac>)
 800318a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1f0      	bne.n	8003176 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 80a0 	beq.w	80032e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031a2:	2300      	movs	r3, #0
 80031a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031a6:	4b13      	ldr	r3, [pc, #76]	; (80031f4 <HAL_RCC_OscConfig+0x2ac>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10f      	bne.n	80031d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031b2:	2300      	movs	r3, #0
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	4b0f      	ldr	r3, [pc, #60]	; (80031f4 <HAL_RCC_OscConfig+0x2ac>)
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	4a0e      	ldr	r2, [pc, #56]	; (80031f4 <HAL_RCC_OscConfig+0x2ac>)
 80031bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c0:	6413      	str	r3, [r2, #64]	; 0x40
 80031c2:	4b0c      	ldr	r3, [pc, #48]	; (80031f4 <HAL_RCC_OscConfig+0x2ac>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ce:	2301      	movs	r3, #1
 80031d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d2:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <HAL_RCC_OscConfig+0x2b8>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d121      	bne.n	8003222 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031de:	4b08      	ldr	r3, [pc, #32]	; (8003200 <HAL_RCC_OscConfig+0x2b8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a07      	ldr	r2, [pc, #28]	; (8003200 <HAL_RCC_OscConfig+0x2b8>)
 80031e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ea:	f7fe fbd7 	bl	800199c <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f0:	e011      	b.n	8003216 <HAL_RCC_OscConfig+0x2ce>
 80031f2:	bf00      	nop
 80031f4:	40023800 	.word	0x40023800
 80031f8:	42470000 	.word	0x42470000
 80031fc:	42470e80 	.word	0x42470e80
 8003200:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003204:	f7fe fbca 	bl	800199c <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e106      	b.n	8003424 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003216:	4b85      	ldr	r3, [pc, #532]	; (800342c <HAL_RCC_OscConfig+0x4e4>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0f0      	beq.n	8003204 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d106      	bne.n	8003238 <HAL_RCC_OscConfig+0x2f0>
 800322a:	4b81      	ldr	r3, [pc, #516]	; (8003430 <HAL_RCC_OscConfig+0x4e8>)
 800322c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322e:	4a80      	ldr	r2, [pc, #512]	; (8003430 <HAL_RCC_OscConfig+0x4e8>)
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	6713      	str	r3, [r2, #112]	; 0x70
 8003236:	e01c      	b.n	8003272 <HAL_RCC_OscConfig+0x32a>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b05      	cmp	r3, #5
 800323e:	d10c      	bne.n	800325a <HAL_RCC_OscConfig+0x312>
 8003240:	4b7b      	ldr	r3, [pc, #492]	; (8003430 <HAL_RCC_OscConfig+0x4e8>)
 8003242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003244:	4a7a      	ldr	r2, [pc, #488]	; (8003430 <HAL_RCC_OscConfig+0x4e8>)
 8003246:	f043 0304 	orr.w	r3, r3, #4
 800324a:	6713      	str	r3, [r2, #112]	; 0x70
 800324c:	4b78      	ldr	r3, [pc, #480]	; (8003430 <HAL_RCC_OscConfig+0x4e8>)
 800324e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003250:	4a77      	ldr	r2, [pc, #476]	; (8003430 <HAL_RCC_OscConfig+0x4e8>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	6713      	str	r3, [r2, #112]	; 0x70
 8003258:	e00b      	b.n	8003272 <HAL_RCC_OscConfig+0x32a>
 800325a:	4b75      	ldr	r3, [pc, #468]	; (8003430 <HAL_RCC_OscConfig+0x4e8>)
 800325c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325e:	4a74      	ldr	r2, [pc, #464]	; (8003430 <HAL_RCC_OscConfig+0x4e8>)
 8003260:	f023 0301 	bic.w	r3, r3, #1
 8003264:	6713      	str	r3, [r2, #112]	; 0x70
 8003266:	4b72      	ldr	r3, [pc, #456]	; (8003430 <HAL_RCC_OscConfig+0x4e8>)
 8003268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326a:	4a71      	ldr	r2, [pc, #452]	; (8003430 <HAL_RCC_OscConfig+0x4e8>)
 800326c:	f023 0304 	bic.w	r3, r3, #4
 8003270:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d015      	beq.n	80032a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327a:	f7fe fb8f 	bl	800199c <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003280:	e00a      	b.n	8003298 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003282:	f7fe fb8b 	bl	800199c <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003290:	4293      	cmp	r3, r2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e0c5      	b.n	8003424 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003298:	4b65      	ldr	r3, [pc, #404]	; (8003430 <HAL_RCC_OscConfig+0x4e8>)
 800329a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0ee      	beq.n	8003282 <HAL_RCC_OscConfig+0x33a>
 80032a4:	e014      	b.n	80032d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a6:	f7fe fb79 	bl	800199c <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ac:	e00a      	b.n	80032c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ae:	f7fe fb75 	bl	800199c <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032bc:	4293      	cmp	r3, r2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e0af      	b.n	8003424 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c4:	4b5a      	ldr	r3, [pc, #360]	; (8003430 <HAL_RCC_OscConfig+0x4e8>)
 80032c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1ee      	bne.n	80032ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032d0:	7dfb      	ldrb	r3, [r7, #23]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d105      	bne.n	80032e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d6:	4b56      	ldr	r3, [pc, #344]	; (8003430 <HAL_RCC_OscConfig+0x4e8>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	4a55      	ldr	r2, [pc, #340]	; (8003430 <HAL_RCC_OscConfig+0x4e8>)
 80032dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 809b 	beq.w	8003422 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032ec:	4b50      	ldr	r3, [pc, #320]	; (8003430 <HAL_RCC_OscConfig+0x4e8>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 030c 	and.w	r3, r3, #12
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d05c      	beq.n	80033b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d141      	bne.n	8003384 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003300:	4b4c      	ldr	r3, [pc, #304]	; (8003434 <HAL_RCC_OscConfig+0x4ec>)
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003306:	f7fe fb49 	bl	800199c <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800330e:	f7fe fb45 	bl	800199c <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e081      	b.n	8003424 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003320:	4b43      	ldr	r3, [pc, #268]	; (8003430 <HAL_RCC_OscConfig+0x4e8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1f0      	bne.n	800330e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	69da      	ldr	r2, [r3, #28]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	431a      	orrs	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	019b      	lsls	r3, r3, #6
 800333c:	431a      	orrs	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003342:	085b      	lsrs	r3, r3, #1
 8003344:	3b01      	subs	r3, #1
 8003346:	041b      	lsls	r3, r3, #16
 8003348:	431a      	orrs	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334e:	061b      	lsls	r3, r3, #24
 8003350:	4937      	ldr	r1, [pc, #220]	; (8003430 <HAL_RCC_OscConfig+0x4e8>)
 8003352:	4313      	orrs	r3, r2
 8003354:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003356:	4b37      	ldr	r3, [pc, #220]	; (8003434 <HAL_RCC_OscConfig+0x4ec>)
 8003358:	2201      	movs	r2, #1
 800335a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335c:	f7fe fb1e 	bl	800199c <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003364:	f7fe fb1a 	bl	800199c <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e056      	b.n	8003424 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003376:	4b2e      	ldr	r3, [pc, #184]	; (8003430 <HAL_RCC_OscConfig+0x4e8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0f0      	beq.n	8003364 <HAL_RCC_OscConfig+0x41c>
 8003382:	e04e      	b.n	8003422 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003384:	4b2b      	ldr	r3, [pc, #172]	; (8003434 <HAL_RCC_OscConfig+0x4ec>)
 8003386:	2200      	movs	r2, #0
 8003388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338a:	f7fe fb07 	bl	800199c <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003390:	e008      	b.n	80033a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003392:	f7fe fb03 	bl	800199c <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e03f      	b.n	8003424 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a4:	4b22      	ldr	r3, [pc, #136]	; (8003430 <HAL_RCC_OscConfig+0x4e8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1f0      	bne.n	8003392 <HAL_RCC_OscConfig+0x44a>
 80033b0:	e037      	b.n	8003422 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d101      	bne.n	80033be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e032      	b.n	8003424 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033be:	4b1c      	ldr	r3, [pc, #112]	; (8003430 <HAL_RCC_OscConfig+0x4e8>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d028      	beq.n	800341e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d121      	bne.n	800341e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d11a      	bne.n	800341e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033ee:	4013      	ands	r3, r2
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033f4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d111      	bne.n	800341e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003404:	085b      	lsrs	r3, r3, #1
 8003406:	3b01      	subs	r3, #1
 8003408:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800340a:	429a      	cmp	r2, r3
 800340c:	d107      	bne.n	800341e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003418:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800341a:	429a      	cmp	r2, r3
 800341c:	d001      	beq.n	8003422 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e000      	b.n	8003424 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40007000 	.word	0x40007000
 8003430:	40023800 	.word	0x40023800
 8003434:	42470060 	.word	0x42470060

08003438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e0cc      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800344c:	4b68      	ldr	r3, [pc, #416]	; (80035f0 <HAL_RCC_ClockConfig+0x1b8>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	429a      	cmp	r2, r3
 8003458:	d90c      	bls.n	8003474 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345a:	4b65      	ldr	r3, [pc, #404]	; (80035f0 <HAL_RCC_ClockConfig+0x1b8>)
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003462:	4b63      	ldr	r3, [pc, #396]	; (80035f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	429a      	cmp	r2, r3
 800346e:	d001      	beq.n	8003474 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e0b8      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d020      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	d005      	beq.n	8003498 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800348c:	4b59      	ldr	r3, [pc, #356]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	4a58      	ldr	r2, [pc, #352]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003496:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0308 	and.w	r3, r3, #8
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034a4:	4b53      	ldr	r3, [pc, #332]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	4a52      	ldr	r2, [pc, #328]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 80034aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034b0:	4b50      	ldr	r3, [pc, #320]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	494d      	ldr	r1, [pc, #308]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d044      	beq.n	8003558 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d107      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d6:	4b47      	ldr	r3, [pc, #284]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d119      	bne.n	8003516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e07f      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d003      	beq.n	80034f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034f2:	2b03      	cmp	r3, #3
 80034f4:	d107      	bne.n	8003506 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f6:	4b3f      	ldr	r3, [pc, #252]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d109      	bne.n	8003516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e06f      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003506:	4b3b      	ldr	r3, [pc, #236]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e067      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003516:	4b37      	ldr	r3, [pc, #220]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f023 0203 	bic.w	r2, r3, #3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	4934      	ldr	r1, [pc, #208]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003524:	4313      	orrs	r3, r2
 8003526:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003528:	f7fe fa38 	bl	800199c <HAL_GetTick>
 800352c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352e:	e00a      	b.n	8003546 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003530:	f7fe fa34 	bl	800199c <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	f241 3288 	movw	r2, #5000	; 0x1388
 800353e:	4293      	cmp	r3, r2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e04f      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003546:	4b2b      	ldr	r3, [pc, #172]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 020c 	and.w	r2, r3, #12
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	429a      	cmp	r2, r3
 8003556:	d1eb      	bne.n	8003530 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003558:	4b25      	ldr	r3, [pc, #148]	; (80035f0 <HAL_RCC_ClockConfig+0x1b8>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d20c      	bcs.n	8003580 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003566:	4b22      	ldr	r3, [pc, #136]	; (80035f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800356e:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	429a      	cmp	r2, r3
 800357a:	d001      	beq.n	8003580 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e032      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	d008      	beq.n	800359e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800358c:	4b19      	ldr	r3, [pc, #100]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	4916      	ldr	r1, [pc, #88]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 800359a:	4313      	orrs	r3, r2
 800359c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d009      	beq.n	80035be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035aa:	4b12      	ldr	r3, [pc, #72]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	490e      	ldr	r1, [pc, #56]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035be:	f000 f821 	bl	8003604 <HAL_RCC_GetSysClockFreq>
 80035c2:	4602      	mov	r2, r0
 80035c4:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	091b      	lsrs	r3, r3, #4
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	490a      	ldr	r1, [pc, #40]	; (80035f8 <HAL_RCC_ClockConfig+0x1c0>)
 80035d0:	5ccb      	ldrb	r3, [r1, r3]
 80035d2:	fa22 f303 	lsr.w	r3, r2, r3
 80035d6:	4a09      	ldr	r2, [pc, #36]	; (80035fc <HAL_RCC_ClockConfig+0x1c4>)
 80035d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035da:	4b09      	ldr	r3, [pc, #36]	; (8003600 <HAL_RCC_ClockConfig+0x1c8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fe f998 	bl	8001914 <HAL_InitTick>

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40023c00 	.word	0x40023c00
 80035f4:	40023800 	.word	0x40023800
 80035f8:	08005378 	.word	0x08005378
 80035fc:	20000000 	.word	0x20000000
 8003600:	20000004 	.word	0x20000004

08003604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003604:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003608:	b084      	sub	sp, #16
 800360a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	607b      	str	r3, [r7, #4]
 8003610:	2300      	movs	r3, #0
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	2300      	movs	r3, #0
 8003616:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800361c:	4b67      	ldr	r3, [pc, #412]	; (80037bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 030c 	and.w	r3, r3, #12
 8003624:	2b08      	cmp	r3, #8
 8003626:	d00d      	beq.n	8003644 <HAL_RCC_GetSysClockFreq+0x40>
 8003628:	2b08      	cmp	r3, #8
 800362a:	f200 80bd 	bhi.w	80037a8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800362e:	2b00      	cmp	r3, #0
 8003630:	d002      	beq.n	8003638 <HAL_RCC_GetSysClockFreq+0x34>
 8003632:	2b04      	cmp	r3, #4
 8003634:	d003      	beq.n	800363e <HAL_RCC_GetSysClockFreq+0x3a>
 8003636:	e0b7      	b.n	80037a8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003638:	4b61      	ldr	r3, [pc, #388]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800363a:	60bb      	str	r3, [r7, #8]
       break;
 800363c:	e0b7      	b.n	80037ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800363e:	4b61      	ldr	r3, [pc, #388]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003640:	60bb      	str	r3, [r7, #8]
      break;
 8003642:	e0b4      	b.n	80037ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003644:	4b5d      	ldr	r3, [pc, #372]	; (80037bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800364c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800364e:	4b5b      	ldr	r3, [pc, #364]	; (80037bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d04d      	beq.n	80036f6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800365a:	4b58      	ldr	r3, [pc, #352]	; (80037bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	099b      	lsrs	r3, r3, #6
 8003660:	461a      	mov	r2, r3
 8003662:	f04f 0300 	mov.w	r3, #0
 8003666:	f240 10ff 	movw	r0, #511	; 0x1ff
 800366a:	f04f 0100 	mov.w	r1, #0
 800366e:	ea02 0800 	and.w	r8, r2, r0
 8003672:	ea03 0901 	and.w	r9, r3, r1
 8003676:	4640      	mov	r0, r8
 8003678:	4649      	mov	r1, r9
 800367a:	f04f 0200 	mov.w	r2, #0
 800367e:	f04f 0300 	mov.w	r3, #0
 8003682:	014b      	lsls	r3, r1, #5
 8003684:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003688:	0142      	lsls	r2, r0, #5
 800368a:	4610      	mov	r0, r2
 800368c:	4619      	mov	r1, r3
 800368e:	ebb0 0008 	subs.w	r0, r0, r8
 8003692:	eb61 0109 	sbc.w	r1, r1, r9
 8003696:	f04f 0200 	mov.w	r2, #0
 800369a:	f04f 0300 	mov.w	r3, #0
 800369e:	018b      	lsls	r3, r1, #6
 80036a0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036a4:	0182      	lsls	r2, r0, #6
 80036a6:	1a12      	subs	r2, r2, r0
 80036a8:	eb63 0301 	sbc.w	r3, r3, r1
 80036ac:	f04f 0000 	mov.w	r0, #0
 80036b0:	f04f 0100 	mov.w	r1, #0
 80036b4:	00d9      	lsls	r1, r3, #3
 80036b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036ba:	00d0      	lsls	r0, r2, #3
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	eb12 0208 	adds.w	r2, r2, r8
 80036c4:	eb43 0309 	adc.w	r3, r3, r9
 80036c8:	f04f 0000 	mov.w	r0, #0
 80036cc:	f04f 0100 	mov.w	r1, #0
 80036d0:	0259      	lsls	r1, r3, #9
 80036d2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80036d6:	0250      	lsls	r0, r2, #9
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	4610      	mov	r0, r2
 80036de:	4619      	mov	r1, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	461a      	mov	r2, r3
 80036e4:	f04f 0300 	mov.w	r3, #0
 80036e8:	f7fc fdd2 	bl	8000290 <__aeabi_uldivmod>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	4613      	mov	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	e04a      	b.n	800378c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036f6:	4b31      	ldr	r3, [pc, #196]	; (80037bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	099b      	lsrs	r3, r3, #6
 80036fc:	461a      	mov	r2, r3
 80036fe:	f04f 0300 	mov.w	r3, #0
 8003702:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003706:	f04f 0100 	mov.w	r1, #0
 800370a:	ea02 0400 	and.w	r4, r2, r0
 800370e:	ea03 0501 	and.w	r5, r3, r1
 8003712:	4620      	mov	r0, r4
 8003714:	4629      	mov	r1, r5
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	f04f 0300 	mov.w	r3, #0
 800371e:	014b      	lsls	r3, r1, #5
 8003720:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003724:	0142      	lsls	r2, r0, #5
 8003726:	4610      	mov	r0, r2
 8003728:	4619      	mov	r1, r3
 800372a:	1b00      	subs	r0, r0, r4
 800372c:	eb61 0105 	sbc.w	r1, r1, r5
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	f04f 0300 	mov.w	r3, #0
 8003738:	018b      	lsls	r3, r1, #6
 800373a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800373e:	0182      	lsls	r2, r0, #6
 8003740:	1a12      	subs	r2, r2, r0
 8003742:	eb63 0301 	sbc.w	r3, r3, r1
 8003746:	f04f 0000 	mov.w	r0, #0
 800374a:	f04f 0100 	mov.w	r1, #0
 800374e:	00d9      	lsls	r1, r3, #3
 8003750:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003754:	00d0      	lsls	r0, r2, #3
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	1912      	adds	r2, r2, r4
 800375c:	eb45 0303 	adc.w	r3, r5, r3
 8003760:	f04f 0000 	mov.w	r0, #0
 8003764:	f04f 0100 	mov.w	r1, #0
 8003768:	0299      	lsls	r1, r3, #10
 800376a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800376e:	0290      	lsls	r0, r2, #10
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	4610      	mov	r0, r2
 8003776:	4619      	mov	r1, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	461a      	mov	r2, r3
 800377c:	f04f 0300 	mov.w	r3, #0
 8003780:	f7fc fd86 	bl	8000290 <__aeabi_uldivmod>
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	4613      	mov	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800378c:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	0c1b      	lsrs	r3, r3, #16
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	3301      	adds	r3, #1
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a4:	60bb      	str	r3, [r7, #8]
      break;
 80037a6:	e002      	b.n	80037ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80037aa:	60bb      	str	r3, [r7, #8]
      break;
 80037ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ae:	68bb      	ldr	r3, [r7, #8]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037ba:	bf00      	nop
 80037bc:	40023800 	.word	0x40023800
 80037c0:	00f42400 	.word	0x00f42400
 80037c4:	007a1200 	.word	0x007a1200

080037c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037cc:	4b03      	ldr	r3, [pc, #12]	; (80037dc <HAL_RCC_GetHCLKFreq+0x14>)
 80037ce:	681b      	ldr	r3, [r3, #0]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	20000000 	.word	0x20000000

080037e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037e4:	f7ff fff0 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 80037e8:	4602      	mov	r2, r0
 80037ea:	4b05      	ldr	r3, [pc, #20]	; (8003800 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	0a9b      	lsrs	r3, r3, #10
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	4903      	ldr	r1, [pc, #12]	; (8003804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037f6:	5ccb      	ldrb	r3, [r1, r3]
 80037f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40023800 	.word	0x40023800
 8003804:	08005388 	.word	0x08005388

08003808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800380c:	f7ff ffdc 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 8003810:	4602      	mov	r2, r0
 8003812:	4b05      	ldr	r3, [pc, #20]	; (8003828 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	0b5b      	lsrs	r3, r3, #13
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	4903      	ldr	r1, [pc, #12]	; (800382c <HAL_RCC_GetPCLK2Freq+0x24>)
 800381e:	5ccb      	ldrb	r3, [r1, r3]
 8003820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003824:	4618      	mov	r0, r3
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40023800 	.word	0x40023800
 800382c:	08005388 	.word	0x08005388

08003830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e041      	b.n	80038c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d106      	bne.n	800385c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fd fe10 	bl	800147c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3304      	adds	r3, #4
 800386c:	4619      	mov	r1, r3
 800386e:	4610      	mov	r0, r2
 8003870:	f000 fab6 	bl	8003de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b082      	sub	sp, #8
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e041      	b.n	8003964 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d106      	bne.n	80038fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7fd fe7b 	bl	80015f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2202      	movs	r2, #2
 80038fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	3304      	adds	r3, #4
 800390a:	4619      	mov	r1, r3
 800390c:	4610      	mov	r0, r2
 800390e:	f000 fa67 	bl	8003de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d109      	bne.n	8003990 <HAL_TIM_PWM_Start+0x24>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b01      	cmp	r3, #1
 8003986:	bf14      	ite	ne
 8003988:	2301      	movne	r3, #1
 800398a:	2300      	moveq	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	e022      	b.n	80039d6 <HAL_TIM_PWM_Start+0x6a>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	2b04      	cmp	r3, #4
 8003994:	d109      	bne.n	80039aa <HAL_TIM_PWM_Start+0x3e>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b01      	cmp	r3, #1
 80039a0:	bf14      	ite	ne
 80039a2:	2301      	movne	r3, #1
 80039a4:	2300      	moveq	r3, #0
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	e015      	b.n	80039d6 <HAL_TIM_PWM_Start+0x6a>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d109      	bne.n	80039c4 <HAL_TIM_PWM_Start+0x58>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	bf14      	ite	ne
 80039bc:	2301      	movne	r3, #1
 80039be:	2300      	moveq	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	e008      	b.n	80039d6 <HAL_TIM_PWM_Start+0x6a>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	bf14      	ite	ne
 80039d0:	2301      	movne	r3, #1
 80039d2:	2300      	moveq	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e068      	b.n	8003ab0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d104      	bne.n	80039ee <HAL_TIM_PWM_Start+0x82>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039ec:	e013      	b.n	8003a16 <HAL_TIM_PWM_Start+0xaa>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	d104      	bne.n	80039fe <HAL_TIM_PWM_Start+0x92>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039fc:	e00b      	b.n	8003a16 <HAL_TIM_PWM_Start+0xaa>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d104      	bne.n	8003a0e <HAL_TIM_PWM_Start+0xa2>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a0c:	e003      	b.n	8003a16 <HAL_TIM_PWM_Start+0xaa>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2202      	movs	r2, #2
 8003a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	6839      	ldr	r1, [r7, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 fc84 	bl	800432c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a23      	ldr	r2, [pc, #140]	; (8003ab8 <HAL_TIM_PWM_Start+0x14c>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d107      	bne.n	8003a3e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a1d      	ldr	r2, [pc, #116]	; (8003ab8 <HAL_TIM_PWM_Start+0x14c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d018      	beq.n	8003a7a <HAL_TIM_PWM_Start+0x10e>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a50:	d013      	beq.n	8003a7a <HAL_TIM_PWM_Start+0x10e>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a19      	ldr	r2, [pc, #100]	; (8003abc <HAL_TIM_PWM_Start+0x150>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00e      	beq.n	8003a7a <HAL_TIM_PWM_Start+0x10e>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a17      	ldr	r2, [pc, #92]	; (8003ac0 <HAL_TIM_PWM_Start+0x154>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d009      	beq.n	8003a7a <HAL_TIM_PWM_Start+0x10e>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a16      	ldr	r2, [pc, #88]	; (8003ac4 <HAL_TIM_PWM_Start+0x158>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d004      	beq.n	8003a7a <HAL_TIM_PWM_Start+0x10e>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a14      	ldr	r2, [pc, #80]	; (8003ac8 <HAL_TIM_PWM_Start+0x15c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d111      	bne.n	8003a9e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2b06      	cmp	r3, #6
 8003a8a:	d010      	beq.n	8003aae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a9c:	e007      	b.n	8003aae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f042 0201 	orr.w	r2, r2, #1
 8003aac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40010000 	.word	0x40010000
 8003abc:	40000400 	.word	0x40000400
 8003ac0:	40000800 	.word	0x40000800
 8003ac4:	40000c00 	.word	0x40000c00
 8003ac8:	40014000 	.word	0x40014000

08003acc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d101      	bne.n	8003aea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	e0ae      	b.n	8003c48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b0c      	cmp	r3, #12
 8003af6:	f200 809f 	bhi.w	8003c38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003afa:	a201      	add	r2, pc, #4	; (adr r2, 8003b00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b00:	08003b35 	.word	0x08003b35
 8003b04:	08003c39 	.word	0x08003c39
 8003b08:	08003c39 	.word	0x08003c39
 8003b0c:	08003c39 	.word	0x08003c39
 8003b10:	08003b75 	.word	0x08003b75
 8003b14:	08003c39 	.word	0x08003c39
 8003b18:	08003c39 	.word	0x08003c39
 8003b1c:	08003c39 	.word	0x08003c39
 8003b20:	08003bb7 	.word	0x08003bb7
 8003b24:	08003c39 	.word	0x08003c39
 8003b28:	08003c39 	.word	0x08003c39
 8003b2c:	08003c39 	.word	0x08003c39
 8003b30:	08003bf7 	.word	0x08003bf7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68b9      	ldr	r1, [r7, #8]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 f9d0 	bl	8003ee0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699a      	ldr	r2, [r3, #24]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0208 	orr.w	r2, r2, #8
 8003b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699a      	ldr	r2, [r3, #24]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0204 	bic.w	r2, r2, #4
 8003b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6999      	ldr	r1, [r3, #24]
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	691a      	ldr	r2, [r3, #16]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	619a      	str	r2, [r3, #24]
      break;
 8003b72:	e064      	b.n	8003c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68b9      	ldr	r1, [r7, #8]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fa16 	bl	8003fac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699a      	ldr	r2, [r3, #24]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6999      	ldr	r1, [r3, #24]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	021a      	lsls	r2, r3, #8
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	619a      	str	r2, [r3, #24]
      break;
 8003bb4:	e043      	b.n	8003c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68b9      	ldr	r1, [r7, #8]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 fa61 	bl	8004084 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69da      	ldr	r2, [r3, #28]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f042 0208 	orr.w	r2, r2, #8
 8003bd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69da      	ldr	r2, [r3, #28]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0204 	bic.w	r2, r2, #4
 8003be0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69d9      	ldr	r1, [r3, #28]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	61da      	str	r2, [r3, #28]
      break;
 8003bf4:	e023      	b.n	8003c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68b9      	ldr	r1, [r7, #8]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f000 faab 	bl	8004158 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	69da      	ldr	r2, [r3, #28]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	69da      	ldr	r2, [r3, #28]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	69d9      	ldr	r1, [r3, #28]
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	021a      	lsls	r2, r3, #8
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	61da      	str	r2, [r3, #28]
      break;
 8003c36:	e002      	b.n	8003c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d101      	bne.n	8003c6c <HAL_TIM_ConfigClockSource+0x1c>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	e0b4      	b.n	8003dd6 <HAL_TIM_ConfigClockSource+0x186>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca4:	d03e      	beq.n	8003d24 <HAL_TIM_ConfigClockSource+0xd4>
 8003ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003caa:	f200 8087 	bhi.w	8003dbc <HAL_TIM_ConfigClockSource+0x16c>
 8003cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb2:	f000 8086 	beq.w	8003dc2 <HAL_TIM_ConfigClockSource+0x172>
 8003cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cba:	d87f      	bhi.n	8003dbc <HAL_TIM_ConfigClockSource+0x16c>
 8003cbc:	2b70      	cmp	r3, #112	; 0x70
 8003cbe:	d01a      	beq.n	8003cf6 <HAL_TIM_ConfigClockSource+0xa6>
 8003cc0:	2b70      	cmp	r3, #112	; 0x70
 8003cc2:	d87b      	bhi.n	8003dbc <HAL_TIM_ConfigClockSource+0x16c>
 8003cc4:	2b60      	cmp	r3, #96	; 0x60
 8003cc6:	d050      	beq.n	8003d6a <HAL_TIM_ConfigClockSource+0x11a>
 8003cc8:	2b60      	cmp	r3, #96	; 0x60
 8003cca:	d877      	bhi.n	8003dbc <HAL_TIM_ConfigClockSource+0x16c>
 8003ccc:	2b50      	cmp	r3, #80	; 0x50
 8003cce:	d03c      	beq.n	8003d4a <HAL_TIM_ConfigClockSource+0xfa>
 8003cd0:	2b50      	cmp	r3, #80	; 0x50
 8003cd2:	d873      	bhi.n	8003dbc <HAL_TIM_ConfigClockSource+0x16c>
 8003cd4:	2b40      	cmp	r3, #64	; 0x40
 8003cd6:	d058      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0x13a>
 8003cd8:	2b40      	cmp	r3, #64	; 0x40
 8003cda:	d86f      	bhi.n	8003dbc <HAL_TIM_ConfigClockSource+0x16c>
 8003cdc:	2b30      	cmp	r3, #48	; 0x30
 8003cde:	d064      	beq.n	8003daa <HAL_TIM_ConfigClockSource+0x15a>
 8003ce0:	2b30      	cmp	r3, #48	; 0x30
 8003ce2:	d86b      	bhi.n	8003dbc <HAL_TIM_ConfigClockSource+0x16c>
 8003ce4:	2b20      	cmp	r3, #32
 8003ce6:	d060      	beq.n	8003daa <HAL_TIM_ConfigClockSource+0x15a>
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	d867      	bhi.n	8003dbc <HAL_TIM_ConfigClockSource+0x16c>
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d05c      	beq.n	8003daa <HAL_TIM_ConfigClockSource+0x15a>
 8003cf0:	2b10      	cmp	r3, #16
 8003cf2:	d05a      	beq.n	8003daa <HAL_TIM_ConfigClockSource+0x15a>
 8003cf4:	e062      	b.n	8003dbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	6899      	ldr	r1, [r3, #8]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f000 faf1 	bl	80042ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	609a      	str	r2, [r3, #8]
      break;
 8003d22:	e04f      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	6899      	ldr	r1, [r3, #8]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f000 fada 	bl	80042ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d46:	609a      	str	r2, [r3, #8]
      break;
 8003d48:	e03c      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6818      	ldr	r0, [r3, #0]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	6859      	ldr	r1, [r3, #4]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	461a      	mov	r2, r3
 8003d58:	f000 fa4e 	bl	80041f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2150      	movs	r1, #80	; 0x50
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 faa7 	bl	80042b6 <TIM_ITRx_SetConfig>
      break;
 8003d68:	e02c      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6818      	ldr	r0, [r3, #0]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	6859      	ldr	r1, [r3, #4]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	461a      	mov	r2, r3
 8003d78:	f000 fa6d 	bl	8004256 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2160      	movs	r1, #96	; 0x60
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 fa97 	bl	80042b6 <TIM_ITRx_SetConfig>
      break;
 8003d88:	e01c      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6818      	ldr	r0, [r3, #0]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	6859      	ldr	r1, [r3, #4]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	461a      	mov	r2, r3
 8003d98:	f000 fa2e 	bl	80041f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2140      	movs	r1, #64	; 0x40
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 fa87 	bl	80042b6 <TIM_ITRx_SetConfig>
      break;
 8003da8:	e00c      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4619      	mov	r1, r3
 8003db4:	4610      	mov	r0, r2
 8003db6:	f000 fa7e 	bl	80042b6 <TIM_ITRx_SetConfig>
      break;
 8003dba:	e003      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8003dc0:	e000      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
	...

08003de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a34      	ldr	r2, [pc, #208]	; (8003ec4 <TIM_Base_SetConfig+0xe4>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d00f      	beq.n	8003e18 <TIM_Base_SetConfig+0x38>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dfe:	d00b      	beq.n	8003e18 <TIM_Base_SetConfig+0x38>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a31      	ldr	r2, [pc, #196]	; (8003ec8 <TIM_Base_SetConfig+0xe8>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d007      	beq.n	8003e18 <TIM_Base_SetConfig+0x38>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a30      	ldr	r2, [pc, #192]	; (8003ecc <TIM_Base_SetConfig+0xec>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d003      	beq.n	8003e18 <TIM_Base_SetConfig+0x38>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a2f      	ldr	r2, [pc, #188]	; (8003ed0 <TIM_Base_SetConfig+0xf0>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d108      	bne.n	8003e2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a25      	ldr	r2, [pc, #148]	; (8003ec4 <TIM_Base_SetConfig+0xe4>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d01b      	beq.n	8003e6a <TIM_Base_SetConfig+0x8a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e38:	d017      	beq.n	8003e6a <TIM_Base_SetConfig+0x8a>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a22      	ldr	r2, [pc, #136]	; (8003ec8 <TIM_Base_SetConfig+0xe8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d013      	beq.n	8003e6a <TIM_Base_SetConfig+0x8a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a21      	ldr	r2, [pc, #132]	; (8003ecc <TIM_Base_SetConfig+0xec>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d00f      	beq.n	8003e6a <TIM_Base_SetConfig+0x8a>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a20      	ldr	r2, [pc, #128]	; (8003ed0 <TIM_Base_SetConfig+0xf0>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d00b      	beq.n	8003e6a <TIM_Base_SetConfig+0x8a>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a1f      	ldr	r2, [pc, #124]	; (8003ed4 <TIM_Base_SetConfig+0xf4>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d007      	beq.n	8003e6a <TIM_Base_SetConfig+0x8a>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a1e      	ldr	r2, [pc, #120]	; (8003ed8 <TIM_Base_SetConfig+0xf8>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d003      	beq.n	8003e6a <TIM_Base_SetConfig+0x8a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a1d      	ldr	r2, [pc, #116]	; (8003edc <TIM_Base_SetConfig+0xfc>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d108      	bne.n	8003e7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a08      	ldr	r2, [pc, #32]	; (8003ec4 <TIM_Base_SetConfig+0xe4>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d103      	bne.n	8003eb0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	691a      	ldr	r2, [r3, #16]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	615a      	str	r2, [r3, #20]
}
 8003eb6:	bf00      	nop
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	40010000 	.word	0x40010000
 8003ec8:	40000400 	.word	0x40000400
 8003ecc:	40000800 	.word	0x40000800
 8003ed0:	40000c00 	.word	0x40000c00
 8003ed4:	40014000 	.word	0x40014000
 8003ed8:	40014400 	.word	0x40014400
 8003edc:	40014800 	.word	0x40014800

08003ee0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	f023 0201 	bic.w	r2, r3, #1
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f023 0303 	bic.w	r3, r3, #3
 8003f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f023 0302 	bic.w	r3, r3, #2
 8003f28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a1c      	ldr	r2, [pc, #112]	; (8003fa8 <TIM_OC1_SetConfig+0xc8>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d10c      	bne.n	8003f56 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f023 0308 	bic.w	r3, r3, #8
 8003f42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f023 0304 	bic.w	r3, r3, #4
 8003f54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a13      	ldr	r2, [pc, #76]	; (8003fa8 <TIM_OC1_SetConfig+0xc8>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d111      	bne.n	8003f82 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	621a      	str	r2, [r3, #32]
}
 8003f9c:	bf00      	nop
 8003f9e:	371c      	adds	r7, #28
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	40010000 	.word	0x40010000

08003fac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	f023 0210 	bic.w	r2, r3, #16
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	021b      	lsls	r3, r3, #8
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f023 0320 	bic.w	r3, r3, #32
 8003ff6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	4313      	orrs	r3, r2
 8004002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a1e      	ldr	r2, [pc, #120]	; (8004080 <TIM_OC2_SetConfig+0xd4>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d10d      	bne.n	8004028 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004012:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	011b      	lsls	r3, r3, #4
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	4313      	orrs	r3, r2
 800401e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004026:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a15      	ldr	r2, [pc, #84]	; (8004080 <TIM_OC2_SetConfig+0xd4>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d113      	bne.n	8004058 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004036:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800403e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	4313      	orrs	r3, r2
 800404a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	4313      	orrs	r3, r2
 8004056:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	621a      	str	r2, [r3, #32]
}
 8004072:	bf00      	nop
 8004074:	371c      	adds	r7, #28
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	40010000 	.word	0x40010000

08004084 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f023 0303 	bic.w	r3, r3, #3
 80040ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	021b      	lsls	r3, r3, #8
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a1d      	ldr	r2, [pc, #116]	; (8004154 <TIM_OC3_SetConfig+0xd0>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d10d      	bne.n	80040fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	021b      	lsls	r3, r3, #8
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a14      	ldr	r2, [pc, #80]	; (8004154 <TIM_OC3_SetConfig+0xd0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d113      	bne.n	800412e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800410c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004114:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	011b      	lsls	r3, r3, #4
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4313      	orrs	r3, r2
 8004120:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4313      	orrs	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	621a      	str	r2, [r3, #32]
}
 8004148:	bf00      	nop
 800414a:	371c      	adds	r7, #28
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	40010000 	.word	0x40010000

08004158 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004158:	b480      	push	{r7}
 800415a:	b087      	sub	sp, #28
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800418e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	021b      	lsls	r3, r3, #8
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	4313      	orrs	r3, r2
 800419a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	031b      	lsls	r3, r3, #12
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a10      	ldr	r2, [pc, #64]	; (80041f4 <TIM_OC4_SetConfig+0x9c>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d109      	bne.n	80041cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	019b      	lsls	r3, r3, #6
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	621a      	str	r2, [r3, #32]
}
 80041e6:	bf00      	nop
 80041e8:	371c      	adds	r7, #28
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	40010000 	.word	0x40010000

080041f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	f023 0201 	bic.w	r2, r3, #1
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004222:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	4313      	orrs	r3, r2
 800422c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f023 030a 	bic.w	r3, r3, #10
 8004234:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	4313      	orrs	r3, r2
 800423c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	621a      	str	r2, [r3, #32]
}
 800424a:	bf00      	nop
 800424c:	371c      	adds	r7, #28
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004256:	b480      	push	{r7}
 8004258:	b087      	sub	sp, #28
 800425a:	af00      	add	r7, sp, #0
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	f023 0210 	bic.w	r2, r3, #16
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004280:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	031b      	lsls	r3, r3, #12
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4313      	orrs	r3, r2
 800428a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004292:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	4313      	orrs	r3, r2
 800429c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	621a      	str	r2, [r3, #32]
}
 80042aa:	bf00      	nop
 80042ac:	371c      	adds	r7, #28
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b085      	sub	sp, #20
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
 80042be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	f043 0307 	orr.w	r3, r3, #7
 80042d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	609a      	str	r2, [r3, #8]
}
 80042e0:	bf00      	nop
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b087      	sub	sp, #28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
 80042f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004306:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	021a      	lsls	r2, r3, #8
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	431a      	orrs	r2, r3
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	4313      	orrs	r3, r2
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	4313      	orrs	r3, r2
 8004318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	609a      	str	r2, [r3, #8]
}
 8004320:	bf00      	nop
 8004322:	371c      	adds	r7, #28
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f003 031f 	and.w	r3, r3, #31
 800433e:	2201      	movs	r2, #1
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6a1a      	ldr	r2, [r3, #32]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	43db      	mvns	r3, r3
 800434e:	401a      	ands	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a1a      	ldr	r2, [r3, #32]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f003 031f 	and.w	r3, r3, #31
 800435e:	6879      	ldr	r1, [r7, #4]
 8004360:	fa01 f303 	lsl.w	r3, r1, r3
 8004364:	431a      	orrs	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	621a      	str	r2, [r3, #32]
}
 800436a:	bf00      	nop
 800436c:	371c      	adds	r7, #28
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
	...

08004378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004388:	2b01      	cmp	r3, #1
 800438a:	d101      	bne.n	8004390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800438c:	2302      	movs	r3, #2
 800438e:	e050      	b.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a1c      	ldr	r2, [pc, #112]	; (8004440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d018      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043dc:	d013      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a18      	ldr	r2, [pc, #96]	; (8004444 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d00e      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a16      	ldr	r2, [pc, #88]	; (8004448 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d009      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a15      	ldr	r2, [pc, #84]	; (800444c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d004      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a13      	ldr	r2, [pc, #76]	; (8004450 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d10c      	bne.n	8004420 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800440c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	4313      	orrs	r3, r2
 8004416:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	40010000 	.word	0x40010000
 8004444:	40000400 	.word	0x40000400
 8004448:	40000800 	.word	0x40000800
 800444c:	40000c00 	.word	0x40000c00
 8004450:	40014000 	.word	0x40014000

08004454 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e03f      	b.n	80044e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7fd f9b6 	bl	80017ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2224      	movs	r2, #36	; 0x24
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004496:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f929 	bl	80046f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	691a      	ldr	r2, [r3, #16]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	695a      	ldr	r2, [r3, #20]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68da      	ldr	r2, [r3, #12]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2220      	movs	r2, #32
 80044e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b08a      	sub	sp, #40	; 0x28
 80044f2:	af02      	add	r7, sp, #8
 80044f4:	60f8      	str	r0, [r7, #12]
 80044f6:	60b9      	str	r1, [r7, #8]
 80044f8:	603b      	str	r3, [r7, #0]
 80044fa:	4613      	mov	r3, r2
 80044fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044fe:	2300      	movs	r3, #0
 8004500:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b20      	cmp	r3, #32
 800450c:	d17c      	bne.n	8004608 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <HAL_UART_Transmit+0x2c>
 8004514:	88fb      	ldrh	r3, [r7, #6]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e075      	b.n	800460a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004524:	2b01      	cmp	r3, #1
 8004526:	d101      	bne.n	800452c <HAL_UART_Transmit+0x3e>
 8004528:	2302      	movs	r3, #2
 800452a:	e06e      	b.n	800460a <HAL_UART_Transmit+0x11c>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2221      	movs	r2, #33	; 0x21
 800453e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004542:	f7fd fa2b 	bl	800199c <HAL_GetTick>
 8004546:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	88fa      	ldrh	r2, [r7, #6]
 800454c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	88fa      	ldrh	r2, [r7, #6]
 8004552:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800455c:	d108      	bne.n	8004570 <HAL_UART_Transmit+0x82>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d104      	bne.n	8004570 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004566:	2300      	movs	r3, #0
 8004568:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	61bb      	str	r3, [r7, #24]
 800456e:	e003      	b.n	8004578 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004574:	2300      	movs	r3, #0
 8004576:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004580:	e02a      	b.n	80045d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2200      	movs	r2, #0
 800458a:	2180      	movs	r1, #128	; 0x80
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 f840 	bl	8004612 <UART_WaitOnFlagUntilTimeout>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e036      	b.n	800460a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10b      	bne.n	80045ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	881b      	ldrh	r3, [r3, #0]
 80045a6:	461a      	mov	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	3302      	adds	r3, #2
 80045b6:	61bb      	str	r3, [r7, #24]
 80045b8:	e007      	b.n	80045ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	781a      	ldrb	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	3301      	adds	r3, #1
 80045c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045dc:	b29b      	uxth	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1cf      	bne.n	8004582 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	2200      	movs	r2, #0
 80045ea:	2140      	movs	r1, #64	; 0x40
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 f810 	bl	8004612 <UART_WaitOnFlagUntilTimeout>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e006      	b.n	800460a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2220      	movs	r2, #32
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004604:	2300      	movs	r3, #0
 8004606:	e000      	b.n	800460a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004608:	2302      	movs	r3, #2
  }
}
 800460a:	4618      	mov	r0, r3
 800460c:	3720      	adds	r7, #32
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b090      	sub	sp, #64	; 0x40
 8004616:	af00      	add	r7, sp, #0
 8004618:	60f8      	str	r0, [r7, #12]
 800461a:	60b9      	str	r1, [r7, #8]
 800461c:	603b      	str	r3, [r7, #0]
 800461e:	4613      	mov	r3, r2
 8004620:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004622:	e050      	b.n	80046c6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462a:	d04c      	beq.n	80046c6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800462c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800462e:	2b00      	cmp	r3, #0
 8004630:	d007      	beq.n	8004642 <UART_WaitOnFlagUntilTimeout+0x30>
 8004632:	f7fd f9b3 	bl	800199c <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800463e:	429a      	cmp	r2, r3
 8004640:	d241      	bcs.n	80046c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	330c      	adds	r3, #12
 8004648:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464c:	e853 3f00 	ldrex	r3, [r3]
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004658:	63fb      	str	r3, [r7, #60]	; 0x3c
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	330c      	adds	r3, #12
 8004660:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004662:	637a      	str	r2, [r7, #52]	; 0x34
 8004664:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004666:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004668:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800466a:	e841 2300 	strex	r3, r2, [r1]
 800466e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1e5      	bne.n	8004642 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3314      	adds	r3, #20
 800467c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	e853 3f00 	ldrex	r3, [r3]
 8004684:	613b      	str	r3, [r7, #16]
   return(result);
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f023 0301 	bic.w	r3, r3, #1
 800468c:	63bb      	str	r3, [r7, #56]	; 0x38
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3314      	adds	r3, #20
 8004694:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004696:	623a      	str	r2, [r7, #32]
 8004698:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469a:	69f9      	ldr	r1, [r7, #28]
 800469c:	6a3a      	ldr	r2, [r7, #32]
 800469e:	e841 2300 	strex	r3, r2, [r1]
 80046a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1e5      	bne.n	8004676 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2220      	movs	r2, #32
 80046ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e00f      	b.n	80046e6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	4013      	ands	r3, r2
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	bf0c      	ite	eq
 80046d6:	2301      	moveq	r3, #1
 80046d8:	2300      	movne	r3, #0
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	461a      	mov	r2, r3
 80046de:	79fb      	ldrb	r3, [r7, #7]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d09f      	beq.n	8004624 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3740      	adds	r7, #64	; 0x40
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046f4:	b09f      	sub	sp, #124	; 0x7c
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004706:	68d9      	ldr	r1, [r3, #12]
 8004708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	ea40 0301 	orr.w	r3, r0, r1
 8004710:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	431a      	orrs	r2, r3
 800471c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	431a      	orrs	r2, r3
 8004722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	4313      	orrs	r3, r2
 8004728:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800472a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004734:	f021 010c 	bic.w	r1, r1, #12
 8004738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800473e:	430b      	orrs	r3, r1
 8004740:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800474c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800474e:	6999      	ldr	r1, [r3, #24]
 8004750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	ea40 0301 	orr.w	r3, r0, r1
 8004758:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800475a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	4bc5      	ldr	r3, [pc, #788]	; (8004a74 <UART_SetConfig+0x384>)
 8004760:	429a      	cmp	r2, r3
 8004762:	d004      	beq.n	800476e <UART_SetConfig+0x7e>
 8004764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	4bc3      	ldr	r3, [pc, #780]	; (8004a78 <UART_SetConfig+0x388>)
 800476a:	429a      	cmp	r2, r3
 800476c:	d103      	bne.n	8004776 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800476e:	f7ff f84b 	bl	8003808 <HAL_RCC_GetPCLK2Freq>
 8004772:	6778      	str	r0, [r7, #116]	; 0x74
 8004774:	e002      	b.n	800477c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004776:	f7ff f833 	bl	80037e0 <HAL_RCC_GetPCLK1Freq>
 800477a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800477c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800477e:	69db      	ldr	r3, [r3, #28]
 8004780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004784:	f040 80b6 	bne.w	80048f4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004788:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800478a:	461c      	mov	r4, r3
 800478c:	f04f 0500 	mov.w	r5, #0
 8004790:	4622      	mov	r2, r4
 8004792:	462b      	mov	r3, r5
 8004794:	1891      	adds	r1, r2, r2
 8004796:	6439      	str	r1, [r7, #64]	; 0x40
 8004798:	415b      	adcs	r3, r3
 800479a:	647b      	str	r3, [r7, #68]	; 0x44
 800479c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047a0:	1912      	adds	r2, r2, r4
 80047a2:	eb45 0303 	adc.w	r3, r5, r3
 80047a6:	f04f 0000 	mov.w	r0, #0
 80047aa:	f04f 0100 	mov.w	r1, #0
 80047ae:	00d9      	lsls	r1, r3, #3
 80047b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047b4:	00d0      	lsls	r0, r2, #3
 80047b6:	4602      	mov	r2, r0
 80047b8:	460b      	mov	r3, r1
 80047ba:	1911      	adds	r1, r2, r4
 80047bc:	6639      	str	r1, [r7, #96]	; 0x60
 80047be:	416b      	adcs	r3, r5
 80047c0:	667b      	str	r3, [r7, #100]	; 0x64
 80047c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	461a      	mov	r2, r3
 80047c8:	f04f 0300 	mov.w	r3, #0
 80047cc:	1891      	adds	r1, r2, r2
 80047ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80047d0:	415b      	adcs	r3, r3
 80047d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80047d8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80047dc:	f7fb fd58 	bl	8000290 <__aeabi_uldivmod>
 80047e0:	4602      	mov	r2, r0
 80047e2:	460b      	mov	r3, r1
 80047e4:	4ba5      	ldr	r3, [pc, #660]	; (8004a7c <UART_SetConfig+0x38c>)
 80047e6:	fba3 2302 	umull	r2, r3, r3, r2
 80047ea:	095b      	lsrs	r3, r3, #5
 80047ec:	011e      	lsls	r6, r3, #4
 80047ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047f0:	461c      	mov	r4, r3
 80047f2:	f04f 0500 	mov.w	r5, #0
 80047f6:	4622      	mov	r2, r4
 80047f8:	462b      	mov	r3, r5
 80047fa:	1891      	adds	r1, r2, r2
 80047fc:	6339      	str	r1, [r7, #48]	; 0x30
 80047fe:	415b      	adcs	r3, r3
 8004800:	637b      	str	r3, [r7, #52]	; 0x34
 8004802:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004806:	1912      	adds	r2, r2, r4
 8004808:	eb45 0303 	adc.w	r3, r5, r3
 800480c:	f04f 0000 	mov.w	r0, #0
 8004810:	f04f 0100 	mov.w	r1, #0
 8004814:	00d9      	lsls	r1, r3, #3
 8004816:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800481a:	00d0      	lsls	r0, r2, #3
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	1911      	adds	r1, r2, r4
 8004822:	65b9      	str	r1, [r7, #88]	; 0x58
 8004824:	416b      	adcs	r3, r5
 8004826:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	461a      	mov	r2, r3
 800482e:	f04f 0300 	mov.w	r3, #0
 8004832:	1891      	adds	r1, r2, r2
 8004834:	62b9      	str	r1, [r7, #40]	; 0x28
 8004836:	415b      	adcs	r3, r3
 8004838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800483a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800483e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004842:	f7fb fd25 	bl	8000290 <__aeabi_uldivmod>
 8004846:	4602      	mov	r2, r0
 8004848:	460b      	mov	r3, r1
 800484a:	4b8c      	ldr	r3, [pc, #560]	; (8004a7c <UART_SetConfig+0x38c>)
 800484c:	fba3 1302 	umull	r1, r3, r3, r2
 8004850:	095b      	lsrs	r3, r3, #5
 8004852:	2164      	movs	r1, #100	; 0x64
 8004854:	fb01 f303 	mul.w	r3, r1, r3
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	3332      	adds	r3, #50	; 0x32
 800485e:	4a87      	ldr	r2, [pc, #540]	; (8004a7c <UART_SetConfig+0x38c>)
 8004860:	fba2 2303 	umull	r2, r3, r2, r3
 8004864:	095b      	lsrs	r3, r3, #5
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800486c:	441e      	add	r6, r3
 800486e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004870:	4618      	mov	r0, r3
 8004872:	f04f 0100 	mov.w	r1, #0
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	1894      	adds	r4, r2, r2
 800487c:	623c      	str	r4, [r7, #32]
 800487e:	415b      	adcs	r3, r3
 8004880:	627b      	str	r3, [r7, #36]	; 0x24
 8004882:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004886:	1812      	adds	r2, r2, r0
 8004888:	eb41 0303 	adc.w	r3, r1, r3
 800488c:	f04f 0400 	mov.w	r4, #0
 8004890:	f04f 0500 	mov.w	r5, #0
 8004894:	00dd      	lsls	r5, r3, #3
 8004896:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800489a:	00d4      	lsls	r4, r2, #3
 800489c:	4622      	mov	r2, r4
 800489e:	462b      	mov	r3, r5
 80048a0:	1814      	adds	r4, r2, r0
 80048a2:	653c      	str	r4, [r7, #80]	; 0x50
 80048a4:	414b      	adcs	r3, r1
 80048a6:	657b      	str	r3, [r7, #84]	; 0x54
 80048a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	461a      	mov	r2, r3
 80048ae:	f04f 0300 	mov.w	r3, #0
 80048b2:	1891      	adds	r1, r2, r2
 80048b4:	61b9      	str	r1, [r7, #24]
 80048b6:	415b      	adcs	r3, r3
 80048b8:	61fb      	str	r3, [r7, #28]
 80048ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048be:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80048c2:	f7fb fce5 	bl	8000290 <__aeabi_uldivmod>
 80048c6:	4602      	mov	r2, r0
 80048c8:	460b      	mov	r3, r1
 80048ca:	4b6c      	ldr	r3, [pc, #432]	; (8004a7c <UART_SetConfig+0x38c>)
 80048cc:	fba3 1302 	umull	r1, r3, r3, r2
 80048d0:	095b      	lsrs	r3, r3, #5
 80048d2:	2164      	movs	r1, #100	; 0x64
 80048d4:	fb01 f303 	mul.w	r3, r1, r3
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	3332      	adds	r3, #50	; 0x32
 80048de:	4a67      	ldr	r2, [pc, #412]	; (8004a7c <UART_SetConfig+0x38c>)
 80048e0:	fba2 2303 	umull	r2, r3, r2, r3
 80048e4:	095b      	lsrs	r3, r3, #5
 80048e6:	f003 0207 	and.w	r2, r3, #7
 80048ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4432      	add	r2, r6
 80048f0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048f2:	e0b9      	b.n	8004a68 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048f6:	461c      	mov	r4, r3
 80048f8:	f04f 0500 	mov.w	r5, #0
 80048fc:	4622      	mov	r2, r4
 80048fe:	462b      	mov	r3, r5
 8004900:	1891      	adds	r1, r2, r2
 8004902:	6139      	str	r1, [r7, #16]
 8004904:	415b      	adcs	r3, r3
 8004906:	617b      	str	r3, [r7, #20]
 8004908:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800490c:	1912      	adds	r2, r2, r4
 800490e:	eb45 0303 	adc.w	r3, r5, r3
 8004912:	f04f 0000 	mov.w	r0, #0
 8004916:	f04f 0100 	mov.w	r1, #0
 800491a:	00d9      	lsls	r1, r3, #3
 800491c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004920:	00d0      	lsls	r0, r2, #3
 8004922:	4602      	mov	r2, r0
 8004924:	460b      	mov	r3, r1
 8004926:	eb12 0804 	adds.w	r8, r2, r4
 800492a:	eb43 0905 	adc.w	r9, r3, r5
 800492e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	4618      	mov	r0, r3
 8004934:	f04f 0100 	mov.w	r1, #0
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	f04f 0300 	mov.w	r3, #0
 8004940:	008b      	lsls	r3, r1, #2
 8004942:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004946:	0082      	lsls	r2, r0, #2
 8004948:	4640      	mov	r0, r8
 800494a:	4649      	mov	r1, r9
 800494c:	f7fb fca0 	bl	8000290 <__aeabi_uldivmod>
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	4b49      	ldr	r3, [pc, #292]	; (8004a7c <UART_SetConfig+0x38c>)
 8004956:	fba3 2302 	umull	r2, r3, r3, r2
 800495a:	095b      	lsrs	r3, r3, #5
 800495c:	011e      	lsls	r6, r3, #4
 800495e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004960:	4618      	mov	r0, r3
 8004962:	f04f 0100 	mov.w	r1, #0
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	1894      	adds	r4, r2, r2
 800496c:	60bc      	str	r4, [r7, #8]
 800496e:	415b      	adcs	r3, r3
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004976:	1812      	adds	r2, r2, r0
 8004978:	eb41 0303 	adc.w	r3, r1, r3
 800497c:	f04f 0400 	mov.w	r4, #0
 8004980:	f04f 0500 	mov.w	r5, #0
 8004984:	00dd      	lsls	r5, r3, #3
 8004986:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800498a:	00d4      	lsls	r4, r2, #3
 800498c:	4622      	mov	r2, r4
 800498e:	462b      	mov	r3, r5
 8004990:	1814      	adds	r4, r2, r0
 8004992:	64bc      	str	r4, [r7, #72]	; 0x48
 8004994:	414b      	adcs	r3, r1
 8004996:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	4618      	mov	r0, r3
 800499e:	f04f 0100 	mov.w	r1, #0
 80049a2:	f04f 0200 	mov.w	r2, #0
 80049a6:	f04f 0300 	mov.w	r3, #0
 80049aa:	008b      	lsls	r3, r1, #2
 80049ac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80049b0:	0082      	lsls	r2, r0, #2
 80049b2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80049b6:	f7fb fc6b 	bl	8000290 <__aeabi_uldivmod>
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
 80049be:	4b2f      	ldr	r3, [pc, #188]	; (8004a7c <UART_SetConfig+0x38c>)
 80049c0:	fba3 1302 	umull	r1, r3, r3, r2
 80049c4:	095b      	lsrs	r3, r3, #5
 80049c6:	2164      	movs	r1, #100	; 0x64
 80049c8:	fb01 f303 	mul.w	r3, r1, r3
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	011b      	lsls	r3, r3, #4
 80049d0:	3332      	adds	r3, #50	; 0x32
 80049d2:	4a2a      	ldr	r2, [pc, #168]	; (8004a7c <UART_SetConfig+0x38c>)
 80049d4:	fba2 2303 	umull	r2, r3, r2, r3
 80049d8:	095b      	lsrs	r3, r3, #5
 80049da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049de:	441e      	add	r6, r3
 80049e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049e2:	4618      	mov	r0, r3
 80049e4:	f04f 0100 	mov.w	r1, #0
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	1894      	adds	r4, r2, r2
 80049ee:	603c      	str	r4, [r7, #0]
 80049f0:	415b      	adcs	r3, r3
 80049f2:	607b      	str	r3, [r7, #4]
 80049f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049f8:	1812      	adds	r2, r2, r0
 80049fa:	eb41 0303 	adc.w	r3, r1, r3
 80049fe:	f04f 0400 	mov.w	r4, #0
 8004a02:	f04f 0500 	mov.w	r5, #0
 8004a06:	00dd      	lsls	r5, r3, #3
 8004a08:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a0c:	00d4      	lsls	r4, r2, #3
 8004a0e:	4622      	mov	r2, r4
 8004a10:	462b      	mov	r3, r5
 8004a12:	eb12 0a00 	adds.w	sl, r2, r0
 8004a16:	eb43 0b01 	adc.w	fp, r3, r1
 8004a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f04f 0100 	mov.w	r1, #0
 8004a24:	f04f 0200 	mov.w	r2, #0
 8004a28:	f04f 0300 	mov.w	r3, #0
 8004a2c:	008b      	lsls	r3, r1, #2
 8004a2e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a32:	0082      	lsls	r2, r0, #2
 8004a34:	4650      	mov	r0, sl
 8004a36:	4659      	mov	r1, fp
 8004a38:	f7fb fc2a 	bl	8000290 <__aeabi_uldivmod>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4b0e      	ldr	r3, [pc, #56]	; (8004a7c <UART_SetConfig+0x38c>)
 8004a42:	fba3 1302 	umull	r1, r3, r3, r2
 8004a46:	095b      	lsrs	r3, r3, #5
 8004a48:	2164      	movs	r1, #100	; 0x64
 8004a4a:	fb01 f303 	mul.w	r3, r1, r3
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	011b      	lsls	r3, r3, #4
 8004a52:	3332      	adds	r3, #50	; 0x32
 8004a54:	4a09      	ldr	r2, [pc, #36]	; (8004a7c <UART_SetConfig+0x38c>)
 8004a56:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5a:	095b      	lsrs	r3, r3, #5
 8004a5c:	f003 020f 	and.w	r2, r3, #15
 8004a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4432      	add	r2, r6
 8004a66:	609a      	str	r2, [r3, #8]
}
 8004a68:	bf00      	nop
 8004a6a:	377c      	adds	r7, #124	; 0x7c
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a72:	bf00      	nop
 8004a74:	40011000 	.word	0x40011000
 8004a78:	40011400 	.word	0x40011400
 8004a7c:	51eb851f 	.word	0x51eb851f

08004a80 <__errno>:
 8004a80:	4b01      	ldr	r3, [pc, #4]	; (8004a88 <__errno+0x8>)
 8004a82:	6818      	ldr	r0, [r3, #0]
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	2000000c 	.word	0x2000000c

08004a8c <__libc_init_array>:
 8004a8c:	b570      	push	{r4, r5, r6, lr}
 8004a8e:	4d0d      	ldr	r5, [pc, #52]	; (8004ac4 <__libc_init_array+0x38>)
 8004a90:	4c0d      	ldr	r4, [pc, #52]	; (8004ac8 <__libc_init_array+0x3c>)
 8004a92:	1b64      	subs	r4, r4, r5
 8004a94:	10a4      	asrs	r4, r4, #2
 8004a96:	2600      	movs	r6, #0
 8004a98:	42a6      	cmp	r6, r4
 8004a9a:	d109      	bne.n	8004ab0 <__libc_init_array+0x24>
 8004a9c:	4d0b      	ldr	r5, [pc, #44]	; (8004acc <__libc_init_array+0x40>)
 8004a9e:	4c0c      	ldr	r4, [pc, #48]	; (8004ad0 <__libc_init_array+0x44>)
 8004aa0:	f000 fc56 	bl	8005350 <_init>
 8004aa4:	1b64      	subs	r4, r4, r5
 8004aa6:	10a4      	asrs	r4, r4, #2
 8004aa8:	2600      	movs	r6, #0
 8004aaa:	42a6      	cmp	r6, r4
 8004aac:	d105      	bne.n	8004aba <__libc_init_array+0x2e>
 8004aae:	bd70      	pop	{r4, r5, r6, pc}
 8004ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ab4:	4798      	blx	r3
 8004ab6:	3601      	adds	r6, #1
 8004ab8:	e7ee      	b.n	8004a98 <__libc_init_array+0xc>
 8004aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004abe:	4798      	blx	r3
 8004ac0:	3601      	adds	r6, #1
 8004ac2:	e7f2      	b.n	8004aaa <__libc_init_array+0x1e>
 8004ac4:	080053d4 	.word	0x080053d4
 8004ac8:	080053d4 	.word	0x080053d4
 8004acc:	080053d4 	.word	0x080053d4
 8004ad0:	080053d8 	.word	0x080053d8

08004ad4 <malloc>:
 8004ad4:	4b02      	ldr	r3, [pc, #8]	; (8004ae0 <malloc+0xc>)
 8004ad6:	4601      	mov	r1, r0
 8004ad8:	6818      	ldr	r0, [r3, #0]
 8004ada:	f000 b85b 	b.w	8004b94 <_malloc_r>
 8004ade:	bf00      	nop
 8004ae0:	2000000c 	.word	0x2000000c

08004ae4 <memset>:
 8004ae4:	4402      	add	r2, r0
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d100      	bne.n	8004aee <memset+0xa>
 8004aec:	4770      	bx	lr
 8004aee:	f803 1b01 	strb.w	r1, [r3], #1
 8004af2:	e7f9      	b.n	8004ae8 <memset+0x4>

08004af4 <_free_r>:
 8004af4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004af6:	2900      	cmp	r1, #0
 8004af8:	d048      	beq.n	8004b8c <_free_r+0x98>
 8004afa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004afe:	9001      	str	r0, [sp, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f1a1 0404 	sub.w	r4, r1, #4
 8004b06:	bfb8      	it	lt
 8004b08:	18e4      	addlt	r4, r4, r3
 8004b0a:	f000 f8cd 	bl	8004ca8 <__malloc_lock>
 8004b0e:	4a20      	ldr	r2, [pc, #128]	; (8004b90 <_free_r+0x9c>)
 8004b10:	9801      	ldr	r0, [sp, #4]
 8004b12:	6813      	ldr	r3, [r2, #0]
 8004b14:	4615      	mov	r5, r2
 8004b16:	b933      	cbnz	r3, 8004b26 <_free_r+0x32>
 8004b18:	6063      	str	r3, [r4, #4]
 8004b1a:	6014      	str	r4, [r2, #0]
 8004b1c:	b003      	add	sp, #12
 8004b1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b22:	f000 b8c7 	b.w	8004cb4 <__malloc_unlock>
 8004b26:	42a3      	cmp	r3, r4
 8004b28:	d90b      	bls.n	8004b42 <_free_r+0x4e>
 8004b2a:	6821      	ldr	r1, [r4, #0]
 8004b2c:	1862      	adds	r2, r4, r1
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	bf04      	itt	eq
 8004b32:	681a      	ldreq	r2, [r3, #0]
 8004b34:	685b      	ldreq	r3, [r3, #4]
 8004b36:	6063      	str	r3, [r4, #4]
 8004b38:	bf04      	itt	eq
 8004b3a:	1852      	addeq	r2, r2, r1
 8004b3c:	6022      	streq	r2, [r4, #0]
 8004b3e:	602c      	str	r4, [r5, #0]
 8004b40:	e7ec      	b.n	8004b1c <_free_r+0x28>
 8004b42:	461a      	mov	r2, r3
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	b10b      	cbz	r3, 8004b4c <_free_r+0x58>
 8004b48:	42a3      	cmp	r3, r4
 8004b4a:	d9fa      	bls.n	8004b42 <_free_r+0x4e>
 8004b4c:	6811      	ldr	r1, [r2, #0]
 8004b4e:	1855      	adds	r5, r2, r1
 8004b50:	42a5      	cmp	r5, r4
 8004b52:	d10b      	bne.n	8004b6c <_free_r+0x78>
 8004b54:	6824      	ldr	r4, [r4, #0]
 8004b56:	4421      	add	r1, r4
 8004b58:	1854      	adds	r4, r2, r1
 8004b5a:	42a3      	cmp	r3, r4
 8004b5c:	6011      	str	r1, [r2, #0]
 8004b5e:	d1dd      	bne.n	8004b1c <_free_r+0x28>
 8004b60:	681c      	ldr	r4, [r3, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	6053      	str	r3, [r2, #4]
 8004b66:	4421      	add	r1, r4
 8004b68:	6011      	str	r1, [r2, #0]
 8004b6a:	e7d7      	b.n	8004b1c <_free_r+0x28>
 8004b6c:	d902      	bls.n	8004b74 <_free_r+0x80>
 8004b6e:	230c      	movs	r3, #12
 8004b70:	6003      	str	r3, [r0, #0]
 8004b72:	e7d3      	b.n	8004b1c <_free_r+0x28>
 8004b74:	6825      	ldr	r5, [r4, #0]
 8004b76:	1961      	adds	r1, r4, r5
 8004b78:	428b      	cmp	r3, r1
 8004b7a:	bf04      	itt	eq
 8004b7c:	6819      	ldreq	r1, [r3, #0]
 8004b7e:	685b      	ldreq	r3, [r3, #4]
 8004b80:	6063      	str	r3, [r4, #4]
 8004b82:	bf04      	itt	eq
 8004b84:	1949      	addeq	r1, r1, r5
 8004b86:	6021      	streq	r1, [r4, #0]
 8004b88:	6054      	str	r4, [r2, #4]
 8004b8a:	e7c7      	b.n	8004b1c <_free_r+0x28>
 8004b8c:	b003      	add	sp, #12
 8004b8e:	bd30      	pop	{r4, r5, pc}
 8004b90:	20000090 	.word	0x20000090

08004b94 <_malloc_r>:
 8004b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b96:	1ccd      	adds	r5, r1, #3
 8004b98:	f025 0503 	bic.w	r5, r5, #3
 8004b9c:	3508      	adds	r5, #8
 8004b9e:	2d0c      	cmp	r5, #12
 8004ba0:	bf38      	it	cc
 8004ba2:	250c      	movcc	r5, #12
 8004ba4:	2d00      	cmp	r5, #0
 8004ba6:	4606      	mov	r6, r0
 8004ba8:	db01      	blt.n	8004bae <_malloc_r+0x1a>
 8004baa:	42a9      	cmp	r1, r5
 8004bac:	d903      	bls.n	8004bb6 <_malloc_r+0x22>
 8004bae:	230c      	movs	r3, #12
 8004bb0:	6033      	str	r3, [r6, #0]
 8004bb2:	2000      	movs	r0, #0
 8004bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bb6:	f000 f877 	bl	8004ca8 <__malloc_lock>
 8004bba:	4921      	ldr	r1, [pc, #132]	; (8004c40 <_malloc_r+0xac>)
 8004bbc:	680a      	ldr	r2, [r1, #0]
 8004bbe:	4614      	mov	r4, r2
 8004bc0:	b99c      	cbnz	r4, 8004bea <_malloc_r+0x56>
 8004bc2:	4f20      	ldr	r7, [pc, #128]	; (8004c44 <_malloc_r+0xb0>)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	b923      	cbnz	r3, 8004bd2 <_malloc_r+0x3e>
 8004bc8:	4621      	mov	r1, r4
 8004bca:	4630      	mov	r0, r6
 8004bcc:	f000 f83c 	bl	8004c48 <_sbrk_r>
 8004bd0:	6038      	str	r0, [r7, #0]
 8004bd2:	4629      	mov	r1, r5
 8004bd4:	4630      	mov	r0, r6
 8004bd6:	f000 f837 	bl	8004c48 <_sbrk_r>
 8004bda:	1c43      	adds	r3, r0, #1
 8004bdc:	d123      	bne.n	8004c26 <_malloc_r+0x92>
 8004bde:	230c      	movs	r3, #12
 8004be0:	6033      	str	r3, [r6, #0]
 8004be2:	4630      	mov	r0, r6
 8004be4:	f000 f866 	bl	8004cb4 <__malloc_unlock>
 8004be8:	e7e3      	b.n	8004bb2 <_malloc_r+0x1e>
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	1b5b      	subs	r3, r3, r5
 8004bee:	d417      	bmi.n	8004c20 <_malloc_r+0x8c>
 8004bf0:	2b0b      	cmp	r3, #11
 8004bf2:	d903      	bls.n	8004bfc <_malloc_r+0x68>
 8004bf4:	6023      	str	r3, [r4, #0]
 8004bf6:	441c      	add	r4, r3
 8004bf8:	6025      	str	r5, [r4, #0]
 8004bfa:	e004      	b.n	8004c06 <_malloc_r+0x72>
 8004bfc:	6863      	ldr	r3, [r4, #4]
 8004bfe:	42a2      	cmp	r2, r4
 8004c00:	bf0c      	ite	eq
 8004c02:	600b      	streq	r3, [r1, #0]
 8004c04:	6053      	strne	r3, [r2, #4]
 8004c06:	4630      	mov	r0, r6
 8004c08:	f000 f854 	bl	8004cb4 <__malloc_unlock>
 8004c0c:	f104 000b 	add.w	r0, r4, #11
 8004c10:	1d23      	adds	r3, r4, #4
 8004c12:	f020 0007 	bic.w	r0, r0, #7
 8004c16:	1ac2      	subs	r2, r0, r3
 8004c18:	d0cc      	beq.n	8004bb4 <_malloc_r+0x20>
 8004c1a:	1a1b      	subs	r3, r3, r0
 8004c1c:	50a3      	str	r3, [r4, r2]
 8004c1e:	e7c9      	b.n	8004bb4 <_malloc_r+0x20>
 8004c20:	4622      	mov	r2, r4
 8004c22:	6864      	ldr	r4, [r4, #4]
 8004c24:	e7cc      	b.n	8004bc0 <_malloc_r+0x2c>
 8004c26:	1cc4      	adds	r4, r0, #3
 8004c28:	f024 0403 	bic.w	r4, r4, #3
 8004c2c:	42a0      	cmp	r0, r4
 8004c2e:	d0e3      	beq.n	8004bf8 <_malloc_r+0x64>
 8004c30:	1a21      	subs	r1, r4, r0
 8004c32:	4630      	mov	r0, r6
 8004c34:	f000 f808 	bl	8004c48 <_sbrk_r>
 8004c38:	3001      	adds	r0, #1
 8004c3a:	d1dd      	bne.n	8004bf8 <_malloc_r+0x64>
 8004c3c:	e7cf      	b.n	8004bde <_malloc_r+0x4a>
 8004c3e:	bf00      	nop
 8004c40:	20000090 	.word	0x20000090
 8004c44:	20000094 	.word	0x20000094

08004c48 <_sbrk_r>:
 8004c48:	b538      	push	{r3, r4, r5, lr}
 8004c4a:	4d06      	ldr	r5, [pc, #24]	; (8004c64 <_sbrk_r+0x1c>)
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	4604      	mov	r4, r0
 8004c50:	4608      	mov	r0, r1
 8004c52:	602b      	str	r3, [r5, #0]
 8004c54:	f7fc fa56 	bl	8001104 <_sbrk>
 8004c58:	1c43      	adds	r3, r0, #1
 8004c5a:	d102      	bne.n	8004c62 <_sbrk_r+0x1a>
 8004c5c:	682b      	ldr	r3, [r5, #0]
 8004c5e:	b103      	cbz	r3, 8004c62 <_sbrk_r+0x1a>
 8004c60:	6023      	str	r3, [r4, #0]
 8004c62:	bd38      	pop	{r3, r4, r5, pc}
 8004c64:	200003bc 	.word	0x200003bc

08004c68 <siprintf>:
 8004c68:	b40e      	push	{r1, r2, r3}
 8004c6a:	b500      	push	{lr}
 8004c6c:	b09c      	sub	sp, #112	; 0x70
 8004c6e:	ab1d      	add	r3, sp, #116	; 0x74
 8004c70:	9002      	str	r0, [sp, #8]
 8004c72:	9006      	str	r0, [sp, #24]
 8004c74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c78:	4809      	ldr	r0, [pc, #36]	; (8004ca0 <siprintf+0x38>)
 8004c7a:	9107      	str	r1, [sp, #28]
 8004c7c:	9104      	str	r1, [sp, #16]
 8004c7e:	4909      	ldr	r1, [pc, #36]	; (8004ca4 <siprintf+0x3c>)
 8004c80:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c84:	9105      	str	r1, [sp, #20]
 8004c86:	6800      	ldr	r0, [r0, #0]
 8004c88:	9301      	str	r3, [sp, #4]
 8004c8a:	a902      	add	r1, sp, #8
 8004c8c:	f000 f874 	bl	8004d78 <_svfiprintf_r>
 8004c90:	9b02      	ldr	r3, [sp, #8]
 8004c92:	2200      	movs	r2, #0
 8004c94:	701a      	strb	r2, [r3, #0]
 8004c96:	b01c      	add	sp, #112	; 0x70
 8004c98:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c9c:	b003      	add	sp, #12
 8004c9e:	4770      	bx	lr
 8004ca0:	2000000c 	.word	0x2000000c
 8004ca4:	ffff0208 	.word	0xffff0208

08004ca8 <__malloc_lock>:
 8004ca8:	4801      	ldr	r0, [pc, #4]	; (8004cb0 <__malloc_lock+0x8>)
 8004caa:	f000 baf9 	b.w	80052a0 <__retarget_lock_acquire_recursive>
 8004cae:	bf00      	nop
 8004cb0:	200003c4 	.word	0x200003c4

08004cb4 <__malloc_unlock>:
 8004cb4:	4801      	ldr	r0, [pc, #4]	; (8004cbc <__malloc_unlock+0x8>)
 8004cb6:	f000 baf4 	b.w	80052a2 <__retarget_lock_release_recursive>
 8004cba:	bf00      	nop
 8004cbc:	200003c4 	.word	0x200003c4

08004cc0 <__ssputs_r>:
 8004cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cc4:	688e      	ldr	r6, [r1, #8]
 8004cc6:	429e      	cmp	r6, r3
 8004cc8:	4682      	mov	sl, r0
 8004cca:	460c      	mov	r4, r1
 8004ccc:	4690      	mov	r8, r2
 8004cce:	461f      	mov	r7, r3
 8004cd0:	d838      	bhi.n	8004d44 <__ssputs_r+0x84>
 8004cd2:	898a      	ldrh	r2, [r1, #12]
 8004cd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004cd8:	d032      	beq.n	8004d40 <__ssputs_r+0x80>
 8004cda:	6825      	ldr	r5, [r4, #0]
 8004cdc:	6909      	ldr	r1, [r1, #16]
 8004cde:	eba5 0901 	sub.w	r9, r5, r1
 8004ce2:	6965      	ldr	r5, [r4, #20]
 8004ce4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ce8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004cec:	3301      	adds	r3, #1
 8004cee:	444b      	add	r3, r9
 8004cf0:	106d      	asrs	r5, r5, #1
 8004cf2:	429d      	cmp	r5, r3
 8004cf4:	bf38      	it	cc
 8004cf6:	461d      	movcc	r5, r3
 8004cf8:	0553      	lsls	r3, r2, #21
 8004cfa:	d531      	bpl.n	8004d60 <__ssputs_r+0xa0>
 8004cfc:	4629      	mov	r1, r5
 8004cfe:	f7ff ff49 	bl	8004b94 <_malloc_r>
 8004d02:	4606      	mov	r6, r0
 8004d04:	b950      	cbnz	r0, 8004d1c <__ssputs_r+0x5c>
 8004d06:	230c      	movs	r3, #12
 8004d08:	f8ca 3000 	str.w	r3, [sl]
 8004d0c:	89a3      	ldrh	r3, [r4, #12]
 8004d0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d12:	81a3      	strh	r3, [r4, #12]
 8004d14:	f04f 30ff 	mov.w	r0, #4294967295
 8004d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d1c:	6921      	ldr	r1, [r4, #16]
 8004d1e:	464a      	mov	r2, r9
 8004d20:	f000 fac0 	bl	80052a4 <memcpy>
 8004d24:	89a3      	ldrh	r3, [r4, #12]
 8004d26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d2e:	81a3      	strh	r3, [r4, #12]
 8004d30:	6126      	str	r6, [r4, #16]
 8004d32:	6165      	str	r5, [r4, #20]
 8004d34:	444e      	add	r6, r9
 8004d36:	eba5 0509 	sub.w	r5, r5, r9
 8004d3a:	6026      	str	r6, [r4, #0]
 8004d3c:	60a5      	str	r5, [r4, #8]
 8004d3e:	463e      	mov	r6, r7
 8004d40:	42be      	cmp	r6, r7
 8004d42:	d900      	bls.n	8004d46 <__ssputs_r+0x86>
 8004d44:	463e      	mov	r6, r7
 8004d46:	4632      	mov	r2, r6
 8004d48:	6820      	ldr	r0, [r4, #0]
 8004d4a:	4641      	mov	r1, r8
 8004d4c:	f000 fab8 	bl	80052c0 <memmove>
 8004d50:	68a3      	ldr	r3, [r4, #8]
 8004d52:	6822      	ldr	r2, [r4, #0]
 8004d54:	1b9b      	subs	r3, r3, r6
 8004d56:	4432      	add	r2, r6
 8004d58:	60a3      	str	r3, [r4, #8]
 8004d5a:	6022      	str	r2, [r4, #0]
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	e7db      	b.n	8004d18 <__ssputs_r+0x58>
 8004d60:	462a      	mov	r2, r5
 8004d62:	f000 fac7 	bl	80052f4 <_realloc_r>
 8004d66:	4606      	mov	r6, r0
 8004d68:	2800      	cmp	r0, #0
 8004d6a:	d1e1      	bne.n	8004d30 <__ssputs_r+0x70>
 8004d6c:	6921      	ldr	r1, [r4, #16]
 8004d6e:	4650      	mov	r0, sl
 8004d70:	f7ff fec0 	bl	8004af4 <_free_r>
 8004d74:	e7c7      	b.n	8004d06 <__ssputs_r+0x46>
	...

08004d78 <_svfiprintf_r>:
 8004d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d7c:	4698      	mov	r8, r3
 8004d7e:	898b      	ldrh	r3, [r1, #12]
 8004d80:	061b      	lsls	r3, r3, #24
 8004d82:	b09d      	sub	sp, #116	; 0x74
 8004d84:	4607      	mov	r7, r0
 8004d86:	460d      	mov	r5, r1
 8004d88:	4614      	mov	r4, r2
 8004d8a:	d50e      	bpl.n	8004daa <_svfiprintf_r+0x32>
 8004d8c:	690b      	ldr	r3, [r1, #16]
 8004d8e:	b963      	cbnz	r3, 8004daa <_svfiprintf_r+0x32>
 8004d90:	2140      	movs	r1, #64	; 0x40
 8004d92:	f7ff feff 	bl	8004b94 <_malloc_r>
 8004d96:	6028      	str	r0, [r5, #0]
 8004d98:	6128      	str	r0, [r5, #16]
 8004d9a:	b920      	cbnz	r0, 8004da6 <_svfiprintf_r+0x2e>
 8004d9c:	230c      	movs	r3, #12
 8004d9e:	603b      	str	r3, [r7, #0]
 8004da0:	f04f 30ff 	mov.w	r0, #4294967295
 8004da4:	e0d1      	b.n	8004f4a <_svfiprintf_r+0x1d2>
 8004da6:	2340      	movs	r3, #64	; 0x40
 8004da8:	616b      	str	r3, [r5, #20]
 8004daa:	2300      	movs	r3, #0
 8004dac:	9309      	str	r3, [sp, #36]	; 0x24
 8004dae:	2320      	movs	r3, #32
 8004db0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004db4:	f8cd 800c 	str.w	r8, [sp, #12]
 8004db8:	2330      	movs	r3, #48	; 0x30
 8004dba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004f64 <_svfiprintf_r+0x1ec>
 8004dbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004dc2:	f04f 0901 	mov.w	r9, #1
 8004dc6:	4623      	mov	r3, r4
 8004dc8:	469a      	mov	sl, r3
 8004dca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dce:	b10a      	cbz	r2, 8004dd4 <_svfiprintf_r+0x5c>
 8004dd0:	2a25      	cmp	r2, #37	; 0x25
 8004dd2:	d1f9      	bne.n	8004dc8 <_svfiprintf_r+0x50>
 8004dd4:	ebba 0b04 	subs.w	fp, sl, r4
 8004dd8:	d00b      	beq.n	8004df2 <_svfiprintf_r+0x7a>
 8004dda:	465b      	mov	r3, fp
 8004ddc:	4622      	mov	r2, r4
 8004dde:	4629      	mov	r1, r5
 8004de0:	4638      	mov	r0, r7
 8004de2:	f7ff ff6d 	bl	8004cc0 <__ssputs_r>
 8004de6:	3001      	adds	r0, #1
 8004de8:	f000 80aa 	beq.w	8004f40 <_svfiprintf_r+0x1c8>
 8004dec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004dee:	445a      	add	r2, fp
 8004df0:	9209      	str	r2, [sp, #36]	; 0x24
 8004df2:	f89a 3000 	ldrb.w	r3, [sl]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f000 80a2 	beq.w	8004f40 <_svfiprintf_r+0x1c8>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8004e02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e06:	f10a 0a01 	add.w	sl, sl, #1
 8004e0a:	9304      	str	r3, [sp, #16]
 8004e0c:	9307      	str	r3, [sp, #28]
 8004e0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e12:	931a      	str	r3, [sp, #104]	; 0x68
 8004e14:	4654      	mov	r4, sl
 8004e16:	2205      	movs	r2, #5
 8004e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e1c:	4851      	ldr	r0, [pc, #324]	; (8004f64 <_svfiprintf_r+0x1ec>)
 8004e1e:	f7fb f9e7 	bl	80001f0 <memchr>
 8004e22:	9a04      	ldr	r2, [sp, #16]
 8004e24:	b9d8      	cbnz	r0, 8004e5e <_svfiprintf_r+0xe6>
 8004e26:	06d0      	lsls	r0, r2, #27
 8004e28:	bf44      	itt	mi
 8004e2a:	2320      	movmi	r3, #32
 8004e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e30:	0711      	lsls	r1, r2, #28
 8004e32:	bf44      	itt	mi
 8004e34:	232b      	movmi	r3, #43	; 0x2b
 8004e36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e3a:	f89a 3000 	ldrb.w	r3, [sl]
 8004e3e:	2b2a      	cmp	r3, #42	; 0x2a
 8004e40:	d015      	beq.n	8004e6e <_svfiprintf_r+0xf6>
 8004e42:	9a07      	ldr	r2, [sp, #28]
 8004e44:	4654      	mov	r4, sl
 8004e46:	2000      	movs	r0, #0
 8004e48:	f04f 0c0a 	mov.w	ip, #10
 8004e4c:	4621      	mov	r1, r4
 8004e4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e52:	3b30      	subs	r3, #48	; 0x30
 8004e54:	2b09      	cmp	r3, #9
 8004e56:	d94e      	bls.n	8004ef6 <_svfiprintf_r+0x17e>
 8004e58:	b1b0      	cbz	r0, 8004e88 <_svfiprintf_r+0x110>
 8004e5a:	9207      	str	r2, [sp, #28]
 8004e5c:	e014      	b.n	8004e88 <_svfiprintf_r+0x110>
 8004e5e:	eba0 0308 	sub.w	r3, r0, r8
 8004e62:	fa09 f303 	lsl.w	r3, r9, r3
 8004e66:	4313      	orrs	r3, r2
 8004e68:	9304      	str	r3, [sp, #16]
 8004e6a:	46a2      	mov	sl, r4
 8004e6c:	e7d2      	b.n	8004e14 <_svfiprintf_r+0x9c>
 8004e6e:	9b03      	ldr	r3, [sp, #12]
 8004e70:	1d19      	adds	r1, r3, #4
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	9103      	str	r1, [sp, #12]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	bfbb      	ittet	lt
 8004e7a:	425b      	neglt	r3, r3
 8004e7c:	f042 0202 	orrlt.w	r2, r2, #2
 8004e80:	9307      	strge	r3, [sp, #28]
 8004e82:	9307      	strlt	r3, [sp, #28]
 8004e84:	bfb8      	it	lt
 8004e86:	9204      	strlt	r2, [sp, #16]
 8004e88:	7823      	ldrb	r3, [r4, #0]
 8004e8a:	2b2e      	cmp	r3, #46	; 0x2e
 8004e8c:	d10c      	bne.n	8004ea8 <_svfiprintf_r+0x130>
 8004e8e:	7863      	ldrb	r3, [r4, #1]
 8004e90:	2b2a      	cmp	r3, #42	; 0x2a
 8004e92:	d135      	bne.n	8004f00 <_svfiprintf_r+0x188>
 8004e94:	9b03      	ldr	r3, [sp, #12]
 8004e96:	1d1a      	adds	r2, r3, #4
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	9203      	str	r2, [sp, #12]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	bfb8      	it	lt
 8004ea0:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ea4:	3402      	adds	r4, #2
 8004ea6:	9305      	str	r3, [sp, #20]
 8004ea8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004f74 <_svfiprintf_r+0x1fc>
 8004eac:	7821      	ldrb	r1, [r4, #0]
 8004eae:	2203      	movs	r2, #3
 8004eb0:	4650      	mov	r0, sl
 8004eb2:	f7fb f99d 	bl	80001f0 <memchr>
 8004eb6:	b140      	cbz	r0, 8004eca <_svfiprintf_r+0x152>
 8004eb8:	2340      	movs	r3, #64	; 0x40
 8004eba:	eba0 000a 	sub.w	r0, r0, sl
 8004ebe:	fa03 f000 	lsl.w	r0, r3, r0
 8004ec2:	9b04      	ldr	r3, [sp, #16]
 8004ec4:	4303      	orrs	r3, r0
 8004ec6:	3401      	adds	r4, #1
 8004ec8:	9304      	str	r3, [sp, #16]
 8004eca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ece:	4826      	ldr	r0, [pc, #152]	; (8004f68 <_svfiprintf_r+0x1f0>)
 8004ed0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ed4:	2206      	movs	r2, #6
 8004ed6:	f7fb f98b 	bl	80001f0 <memchr>
 8004eda:	2800      	cmp	r0, #0
 8004edc:	d038      	beq.n	8004f50 <_svfiprintf_r+0x1d8>
 8004ede:	4b23      	ldr	r3, [pc, #140]	; (8004f6c <_svfiprintf_r+0x1f4>)
 8004ee0:	bb1b      	cbnz	r3, 8004f2a <_svfiprintf_r+0x1b2>
 8004ee2:	9b03      	ldr	r3, [sp, #12]
 8004ee4:	3307      	adds	r3, #7
 8004ee6:	f023 0307 	bic.w	r3, r3, #7
 8004eea:	3308      	adds	r3, #8
 8004eec:	9303      	str	r3, [sp, #12]
 8004eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ef0:	4433      	add	r3, r6
 8004ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ef4:	e767      	b.n	8004dc6 <_svfiprintf_r+0x4e>
 8004ef6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004efa:	460c      	mov	r4, r1
 8004efc:	2001      	movs	r0, #1
 8004efe:	e7a5      	b.n	8004e4c <_svfiprintf_r+0xd4>
 8004f00:	2300      	movs	r3, #0
 8004f02:	3401      	adds	r4, #1
 8004f04:	9305      	str	r3, [sp, #20]
 8004f06:	4619      	mov	r1, r3
 8004f08:	f04f 0c0a 	mov.w	ip, #10
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f12:	3a30      	subs	r2, #48	; 0x30
 8004f14:	2a09      	cmp	r2, #9
 8004f16:	d903      	bls.n	8004f20 <_svfiprintf_r+0x1a8>
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0c5      	beq.n	8004ea8 <_svfiprintf_r+0x130>
 8004f1c:	9105      	str	r1, [sp, #20]
 8004f1e:	e7c3      	b.n	8004ea8 <_svfiprintf_r+0x130>
 8004f20:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f24:	4604      	mov	r4, r0
 8004f26:	2301      	movs	r3, #1
 8004f28:	e7f0      	b.n	8004f0c <_svfiprintf_r+0x194>
 8004f2a:	ab03      	add	r3, sp, #12
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	462a      	mov	r2, r5
 8004f30:	4b0f      	ldr	r3, [pc, #60]	; (8004f70 <_svfiprintf_r+0x1f8>)
 8004f32:	a904      	add	r1, sp, #16
 8004f34:	4638      	mov	r0, r7
 8004f36:	f3af 8000 	nop.w
 8004f3a:	1c42      	adds	r2, r0, #1
 8004f3c:	4606      	mov	r6, r0
 8004f3e:	d1d6      	bne.n	8004eee <_svfiprintf_r+0x176>
 8004f40:	89ab      	ldrh	r3, [r5, #12]
 8004f42:	065b      	lsls	r3, r3, #25
 8004f44:	f53f af2c 	bmi.w	8004da0 <_svfiprintf_r+0x28>
 8004f48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f4a:	b01d      	add	sp, #116	; 0x74
 8004f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f50:	ab03      	add	r3, sp, #12
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	462a      	mov	r2, r5
 8004f56:	4b06      	ldr	r3, [pc, #24]	; (8004f70 <_svfiprintf_r+0x1f8>)
 8004f58:	a904      	add	r1, sp, #16
 8004f5a:	4638      	mov	r0, r7
 8004f5c:	f000 f87a 	bl	8005054 <_printf_i>
 8004f60:	e7eb      	b.n	8004f3a <_svfiprintf_r+0x1c2>
 8004f62:	bf00      	nop
 8004f64:	08005398 	.word	0x08005398
 8004f68:	080053a2 	.word	0x080053a2
 8004f6c:	00000000 	.word	0x00000000
 8004f70:	08004cc1 	.word	0x08004cc1
 8004f74:	0800539e 	.word	0x0800539e

08004f78 <_printf_common>:
 8004f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f7c:	4616      	mov	r6, r2
 8004f7e:	4699      	mov	r9, r3
 8004f80:	688a      	ldr	r2, [r1, #8]
 8004f82:	690b      	ldr	r3, [r1, #16]
 8004f84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	bfb8      	it	lt
 8004f8c:	4613      	movlt	r3, r2
 8004f8e:	6033      	str	r3, [r6, #0]
 8004f90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f94:	4607      	mov	r7, r0
 8004f96:	460c      	mov	r4, r1
 8004f98:	b10a      	cbz	r2, 8004f9e <_printf_common+0x26>
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	6033      	str	r3, [r6, #0]
 8004f9e:	6823      	ldr	r3, [r4, #0]
 8004fa0:	0699      	lsls	r1, r3, #26
 8004fa2:	bf42      	ittt	mi
 8004fa4:	6833      	ldrmi	r3, [r6, #0]
 8004fa6:	3302      	addmi	r3, #2
 8004fa8:	6033      	strmi	r3, [r6, #0]
 8004faa:	6825      	ldr	r5, [r4, #0]
 8004fac:	f015 0506 	ands.w	r5, r5, #6
 8004fb0:	d106      	bne.n	8004fc0 <_printf_common+0x48>
 8004fb2:	f104 0a19 	add.w	sl, r4, #25
 8004fb6:	68e3      	ldr	r3, [r4, #12]
 8004fb8:	6832      	ldr	r2, [r6, #0]
 8004fba:	1a9b      	subs	r3, r3, r2
 8004fbc:	42ab      	cmp	r3, r5
 8004fbe:	dc26      	bgt.n	800500e <_printf_common+0x96>
 8004fc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fc4:	1e13      	subs	r3, r2, #0
 8004fc6:	6822      	ldr	r2, [r4, #0]
 8004fc8:	bf18      	it	ne
 8004fca:	2301      	movne	r3, #1
 8004fcc:	0692      	lsls	r2, r2, #26
 8004fce:	d42b      	bmi.n	8005028 <_printf_common+0xb0>
 8004fd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fd4:	4649      	mov	r1, r9
 8004fd6:	4638      	mov	r0, r7
 8004fd8:	47c0      	blx	r8
 8004fda:	3001      	adds	r0, #1
 8004fdc:	d01e      	beq.n	800501c <_printf_common+0xa4>
 8004fde:	6823      	ldr	r3, [r4, #0]
 8004fe0:	68e5      	ldr	r5, [r4, #12]
 8004fe2:	6832      	ldr	r2, [r6, #0]
 8004fe4:	f003 0306 	and.w	r3, r3, #6
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	bf08      	it	eq
 8004fec:	1aad      	subeq	r5, r5, r2
 8004fee:	68a3      	ldr	r3, [r4, #8]
 8004ff0:	6922      	ldr	r2, [r4, #16]
 8004ff2:	bf0c      	ite	eq
 8004ff4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ff8:	2500      	movne	r5, #0
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	bfc4      	itt	gt
 8004ffe:	1a9b      	subgt	r3, r3, r2
 8005000:	18ed      	addgt	r5, r5, r3
 8005002:	2600      	movs	r6, #0
 8005004:	341a      	adds	r4, #26
 8005006:	42b5      	cmp	r5, r6
 8005008:	d11a      	bne.n	8005040 <_printf_common+0xc8>
 800500a:	2000      	movs	r0, #0
 800500c:	e008      	b.n	8005020 <_printf_common+0xa8>
 800500e:	2301      	movs	r3, #1
 8005010:	4652      	mov	r2, sl
 8005012:	4649      	mov	r1, r9
 8005014:	4638      	mov	r0, r7
 8005016:	47c0      	blx	r8
 8005018:	3001      	adds	r0, #1
 800501a:	d103      	bne.n	8005024 <_printf_common+0xac>
 800501c:	f04f 30ff 	mov.w	r0, #4294967295
 8005020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005024:	3501      	adds	r5, #1
 8005026:	e7c6      	b.n	8004fb6 <_printf_common+0x3e>
 8005028:	18e1      	adds	r1, r4, r3
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	2030      	movs	r0, #48	; 0x30
 800502e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005032:	4422      	add	r2, r4
 8005034:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005038:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800503c:	3302      	adds	r3, #2
 800503e:	e7c7      	b.n	8004fd0 <_printf_common+0x58>
 8005040:	2301      	movs	r3, #1
 8005042:	4622      	mov	r2, r4
 8005044:	4649      	mov	r1, r9
 8005046:	4638      	mov	r0, r7
 8005048:	47c0      	blx	r8
 800504a:	3001      	adds	r0, #1
 800504c:	d0e6      	beq.n	800501c <_printf_common+0xa4>
 800504e:	3601      	adds	r6, #1
 8005050:	e7d9      	b.n	8005006 <_printf_common+0x8e>
	...

08005054 <_printf_i>:
 8005054:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005058:	460c      	mov	r4, r1
 800505a:	4691      	mov	r9, r2
 800505c:	7e27      	ldrb	r7, [r4, #24]
 800505e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005060:	2f78      	cmp	r7, #120	; 0x78
 8005062:	4680      	mov	r8, r0
 8005064:	469a      	mov	sl, r3
 8005066:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800506a:	d807      	bhi.n	800507c <_printf_i+0x28>
 800506c:	2f62      	cmp	r7, #98	; 0x62
 800506e:	d80a      	bhi.n	8005086 <_printf_i+0x32>
 8005070:	2f00      	cmp	r7, #0
 8005072:	f000 80d8 	beq.w	8005226 <_printf_i+0x1d2>
 8005076:	2f58      	cmp	r7, #88	; 0x58
 8005078:	f000 80a3 	beq.w	80051c2 <_printf_i+0x16e>
 800507c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005080:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005084:	e03a      	b.n	80050fc <_printf_i+0xa8>
 8005086:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800508a:	2b15      	cmp	r3, #21
 800508c:	d8f6      	bhi.n	800507c <_printf_i+0x28>
 800508e:	a001      	add	r0, pc, #4	; (adr r0, 8005094 <_printf_i+0x40>)
 8005090:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005094:	080050ed 	.word	0x080050ed
 8005098:	08005101 	.word	0x08005101
 800509c:	0800507d 	.word	0x0800507d
 80050a0:	0800507d 	.word	0x0800507d
 80050a4:	0800507d 	.word	0x0800507d
 80050a8:	0800507d 	.word	0x0800507d
 80050ac:	08005101 	.word	0x08005101
 80050b0:	0800507d 	.word	0x0800507d
 80050b4:	0800507d 	.word	0x0800507d
 80050b8:	0800507d 	.word	0x0800507d
 80050bc:	0800507d 	.word	0x0800507d
 80050c0:	0800520d 	.word	0x0800520d
 80050c4:	08005131 	.word	0x08005131
 80050c8:	080051ef 	.word	0x080051ef
 80050cc:	0800507d 	.word	0x0800507d
 80050d0:	0800507d 	.word	0x0800507d
 80050d4:	0800522f 	.word	0x0800522f
 80050d8:	0800507d 	.word	0x0800507d
 80050dc:	08005131 	.word	0x08005131
 80050e0:	0800507d 	.word	0x0800507d
 80050e4:	0800507d 	.word	0x0800507d
 80050e8:	080051f7 	.word	0x080051f7
 80050ec:	680b      	ldr	r3, [r1, #0]
 80050ee:	1d1a      	adds	r2, r3, #4
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	600a      	str	r2, [r1, #0]
 80050f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80050f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050fc:	2301      	movs	r3, #1
 80050fe:	e0a3      	b.n	8005248 <_printf_i+0x1f4>
 8005100:	6825      	ldr	r5, [r4, #0]
 8005102:	6808      	ldr	r0, [r1, #0]
 8005104:	062e      	lsls	r6, r5, #24
 8005106:	f100 0304 	add.w	r3, r0, #4
 800510a:	d50a      	bpl.n	8005122 <_printf_i+0xce>
 800510c:	6805      	ldr	r5, [r0, #0]
 800510e:	600b      	str	r3, [r1, #0]
 8005110:	2d00      	cmp	r5, #0
 8005112:	da03      	bge.n	800511c <_printf_i+0xc8>
 8005114:	232d      	movs	r3, #45	; 0x2d
 8005116:	426d      	negs	r5, r5
 8005118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800511c:	485e      	ldr	r0, [pc, #376]	; (8005298 <_printf_i+0x244>)
 800511e:	230a      	movs	r3, #10
 8005120:	e019      	b.n	8005156 <_printf_i+0x102>
 8005122:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005126:	6805      	ldr	r5, [r0, #0]
 8005128:	600b      	str	r3, [r1, #0]
 800512a:	bf18      	it	ne
 800512c:	b22d      	sxthne	r5, r5
 800512e:	e7ef      	b.n	8005110 <_printf_i+0xbc>
 8005130:	680b      	ldr	r3, [r1, #0]
 8005132:	6825      	ldr	r5, [r4, #0]
 8005134:	1d18      	adds	r0, r3, #4
 8005136:	6008      	str	r0, [r1, #0]
 8005138:	0628      	lsls	r0, r5, #24
 800513a:	d501      	bpl.n	8005140 <_printf_i+0xec>
 800513c:	681d      	ldr	r5, [r3, #0]
 800513e:	e002      	b.n	8005146 <_printf_i+0xf2>
 8005140:	0669      	lsls	r1, r5, #25
 8005142:	d5fb      	bpl.n	800513c <_printf_i+0xe8>
 8005144:	881d      	ldrh	r5, [r3, #0]
 8005146:	4854      	ldr	r0, [pc, #336]	; (8005298 <_printf_i+0x244>)
 8005148:	2f6f      	cmp	r7, #111	; 0x6f
 800514a:	bf0c      	ite	eq
 800514c:	2308      	moveq	r3, #8
 800514e:	230a      	movne	r3, #10
 8005150:	2100      	movs	r1, #0
 8005152:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005156:	6866      	ldr	r6, [r4, #4]
 8005158:	60a6      	str	r6, [r4, #8]
 800515a:	2e00      	cmp	r6, #0
 800515c:	bfa2      	ittt	ge
 800515e:	6821      	ldrge	r1, [r4, #0]
 8005160:	f021 0104 	bicge.w	r1, r1, #4
 8005164:	6021      	strge	r1, [r4, #0]
 8005166:	b90d      	cbnz	r5, 800516c <_printf_i+0x118>
 8005168:	2e00      	cmp	r6, #0
 800516a:	d04d      	beq.n	8005208 <_printf_i+0x1b4>
 800516c:	4616      	mov	r6, r2
 800516e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005172:	fb03 5711 	mls	r7, r3, r1, r5
 8005176:	5dc7      	ldrb	r7, [r0, r7]
 8005178:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800517c:	462f      	mov	r7, r5
 800517e:	42bb      	cmp	r3, r7
 8005180:	460d      	mov	r5, r1
 8005182:	d9f4      	bls.n	800516e <_printf_i+0x11a>
 8005184:	2b08      	cmp	r3, #8
 8005186:	d10b      	bne.n	80051a0 <_printf_i+0x14c>
 8005188:	6823      	ldr	r3, [r4, #0]
 800518a:	07df      	lsls	r7, r3, #31
 800518c:	d508      	bpl.n	80051a0 <_printf_i+0x14c>
 800518e:	6923      	ldr	r3, [r4, #16]
 8005190:	6861      	ldr	r1, [r4, #4]
 8005192:	4299      	cmp	r1, r3
 8005194:	bfde      	ittt	le
 8005196:	2330      	movle	r3, #48	; 0x30
 8005198:	f806 3c01 	strble.w	r3, [r6, #-1]
 800519c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80051a0:	1b92      	subs	r2, r2, r6
 80051a2:	6122      	str	r2, [r4, #16]
 80051a4:	f8cd a000 	str.w	sl, [sp]
 80051a8:	464b      	mov	r3, r9
 80051aa:	aa03      	add	r2, sp, #12
 80051ac:	4621      	mov	r1, r4
 80051ae:	4640      	mov	r0, r8
 80051b0:	f7ff fee2 	bl	8004f78 <_printf_common>
 80051b4:	3001      	adds	r0, #1
 80051b6:	d14c      	bne.n	8005252 <_printf_i+0x1fe>
 80051b8:	f04f 30ff 	mov.w	r0, #4294967295
 80051bc:	b004      	add	sp, #16
 80051be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051c2:	4835      	ldr	r0, [pc, #212]	; (8005298 <_printf_i+0x244>)
 80051c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80051c8:	6823      	ldr	r3, [r4, #0]
 80051ca:	680e      	ldr	r6, [r1, #0]
 80051cc:	061f      	lsls	r7, r3, #24
 80051ce:	f856 5b04 	ldr.w	r5, [r6], #4
 80051d2:	600e      	str	r6, [r1, #0]
 80051d4:	d514      	bpl.n	8005200 <_printf_i+0x1ac>
 80051d6:	07d9      	lsls	r1, r3, #31
 80051d8:	bf44      	itt	mi
 80051da:	f043 0320 	orrmi.w	r3, r3, #32
 80051de:	6023      	strmi	r3, [r4, #0]
 80051e0:	b91d      	cbnz	r5, 80051ea <_printf_i+0x196>
 80051e2:	6823      	ldr	r3, [r4, #0]
 80051e4:	f023 0320 	bic.w	r3, r3, #32
 80051e8:	6023      	str	r3, [r4, #0]
 80051ea:	2310      	movs	r3, #16
 80051ec:	e7b0      	b.n	8005150 <_printf_i+0xfc>
 80051ee:	6823      	ldr	r3, [r4, #0]
 80051f0:	f043 0320 	orr.w	r3, r3, #32
 80051f4:	6023      	str	r3, [r4, #0]
 80051f6:	2378      	movs	r3, #120	; 0x78
 80051f8:	4828      	ldr	r0, [pc, #160]	; (800529c <_printf_i+0x248>)
 80051fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051fe:	e7e3      	b.n	80051c8 <_printf_i+0x174>
 8005200:	065e      	lsls	r6, r3, #25
 8005202:	bf48      	it	mi
 8005204:	b2ad      	uxthmi	r5, r5
 8005206:	e7e6      	b.n	80051d6 <_printf_i+0x182>
 8005208:	4616      	mov	r6, r2
 800520a:	e7bb      	b.n	8005184 <_printf_i+0x130>
 800520c:	680b      	ldr	r3, [r1, #0]
 800520e:	6826      	ldr	r6, [r4, #0]
 8005210:	6960      	ldr	r0, [r4, #20]
 8005212:	1d1d      	adds	r5, r3, #4
 8005214:	600d      	str	r5, [r1, #0]
 8005216:	0635      	lsls	r5, r6, #24
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	d501      	bpl.n	8005220 <_printf_i+0x1cc>
 800521c:	6018      	str	r0, [r3, #0]
 800521e:	e002      	b.n	8005226 <_printf_i+0x1d2>
 8005220:	0671      	lsls	r1, r6, #25
 8005222:	d5fb      	bpl.n	800521c <_printf_i+0x1c8>
 8005224:	8018      	strh	r0, [r3, #0]
 8005226:	2300      	movs	r3, #0
 8005228:	6123      	str	r3, [r4, #16]
 800522a:	4616      	mov	r6, r2
 800522c:	e7ba      	b.n	80051a4 <_printf_i+0x150>
 800522e:	680b      	ldr	r3, [r1, #0]
 8005230:	1d1a      	adds	r2, r3, #4
 8005232:	600a      	str	r2, [r1, #0]
 8005234:	681e      	ldr	r6, [r3, #0]
 8005236:	6862      	ldr	r2, [r4, #4]
 8005238:	2100      	movs	r1, #0
 800523a:	4630      	mov	r0, r6
 800523c:	f7fa ffd8 	bl	80001f0 <memchr>
 8005240:	b108      	cbz	r0, 8005246 <_printf_i+0x1f2>
 8005242:	1b80      	subs	r0, r0, r6
 8005244:	6060      	str	r0, [r4, #4]
 8005246:	6863      	ldr	r3, [r4, #4]
 8005248:	6123      	str	r3, [r4, #16]
 800524a:	2300      	movs	r3, #0
 800524c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005250:	e7a8      	b.n	80051a4 <_printf_i+0x150>
 8005252:	6923      	ldr	r3, [r4, #16]
 8005254:	4632      	mov	r2, r6
 8005256:	4649      	mov	r1, r9
 8005258:	4640      	mov	r0, r8
 800525a:	47d0      	blx	sl
 800525c:	3001      	adds	r0, #1
 800525e:	d0ab      	beq.n	80051b8 <_printf_i+0x164>
 8005260:	6823      	ldr	r3, [r4, #0]
 8005262:	079b      	lsls	r3, r3, #30
 8005264:	d413      	bmi.n	800528e <_printf_i+0x23a>
 8005266:	68e0      	ldr	r0, [r4, #12]
 8005268:	9b03      	ldr	r3, [sp, #12]
 800526a:	4298      	cmp	r0, r3
 800526c:	bfb8      	it	lt
 800526e:	4618      	movlt	r0, r3
 8005270:	e7a4      	b.n	80051bc <_printf_i+0x168>
 8005272:	2301      	movs	r3, #1
 8005274:	4632      	mov	r2, r6
 8005276:	4649      	mov	r1, r9
 8005278:	4640      	mov	r0, r8
 800527a:	47d0      	blx	sl
 800527c:	3001      	adds	r0, #1
 800527e:	d09b      	beq.n	80051b8 <_printf_i+0x164>
 8005280:	3501      	adds	r5, #1
 8005282:	68e3      	ldr	r3, [r4, #12]
 8005284:	9903      	ldr	r1, [sp, #12]
 8005286:	1a5b      	subs	r3, r3, r1
 8005288:	42ab      	cmp	r3, r5
 800528a:	dcf2      	bgt.n	8005272 <_printf_i+0x21e>
 800528c:	e7eb      	b.n	8005266 <_printf_i+0x212>
 800528e:	2500      	movs	r5, #0
 8005290:	f104 0619 	add.w	r6, r4, #25
 8005294:	e7f5      	b.n	8005282 <_printf_i+0x22e>
 8005296:	bf00      	nop
 8005298:	080053a9 	.word	0x080053a9
 800529c:	080053ba 	.word	0x080053ba

080052a0 <__retarget_lock_acquire_recursive>:
 80052a0:	4770      	bx	lr

080052a2 <__retarget_lock_release_recursive>:
 80052a2:	4770      	bx	lr

080052a4 <memcpy>:
 80052a4:	440a      	add	r2, r1
 80052a6:	4291      	cmp	r1, r2
 80052a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80052ac:	d100      	bne.n	80052b0 <memcpy+0xc>
 80052ae:	4770      	bx	lr
 80052b0:	b510      	push	{r4, lr}
 80052b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052ba:	4291      	cmp	r1, r2
 80052bc:	d1f9      	bne.n	80052b2 <memcpy+0xe>
 80052be:	bd10      	pop	{r4, pc}

080052c0 <memmove>:
 80052c0:	4288      	cmp	r0, r1
 80052c2:	b510      	push	{r4, lr}
 80052c4:	eb01 0402 	add.w	r4, r1, r2
 80052c8:	d902      	bls.n	80052d0 <memmove+0x10>
 80052ca:	4284      	cmp	r4, r0
 80052cc:	4623      	mov	r3, r4
 80052ce:	d807      	bhi.n	80052e0 <memmove+0x20>
 80052d0:	1e43      	subs	r3, r0, #1
 80052d2:	42a1      	cmp	r1, r4
 80052d4:	d008      	beq.n	80052e8 <memmove+0x28>
 80052d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80052de:	e7f8      	b.n	80052d2 <memmove+0x12>
 80052e0:	4402      	add	r2, r0
 80052e2:	4601      	mov	r1, r0
 80052e4:	428a      	cmp	r2, r1
 80052e6:	d100      	bne.n	80052ea <memmove+0x2a>
 80052e8:	bd10      	pop	{r4, pc}
 80052ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052f2:	e7f7      	b.n	80052e4 <memmove+0x24>

080052f4 <_realloc_r>:
 80052f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f6:	4607      	mov	r7, r0
 80052f8:	4614      	mov	r4, r2
 80052fa:	460e      	mov	r6, r1
 80052fc:	b921      	cbnz	r1, 8005308 <_realloc_r+0x14>
 80052fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005302:	4611      	mov	r1, r2
 8005304:	f7ff bc46 	b.w	8004b94 <_malloc_r>
 8005308:	b922      	cbnz	r2, 8005314 <_realloc_r+0x20>
 800530a:	f7ff fbf3 	bl	8004af4 <_free_r>
 800530e:	4625      	mov	r5, r4
 8005310:	4628      	mov	r0, r5
 8005312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005314:	f000 f814 	bl	8005340 <_malloc_usable_size_r>
 8005318:	42a0      	cmp	r0, r4
 800531a:	d20f      	bcs.n	800533c <_realloc_r+0x48>
 800531c:	4621      	mov	r1, r4
 800531e:	4638      	mov	r0, r7
 8005320:	f7ff fc38 	bl	8004b94 <_malloc_r>
 8005324:	4605      	mov	r5, r0
 8005326:	2800      	cmp	r0, #0
 8005328:	d0f2      	beq.n	8005310 <_realloc_r+0x1c>
 800532a:	4631      	mov	r1, r6
 800532c:	4622      	mov	r2, r4
 800532e:	f7ff ffb9 	bl	80052a4 <memcpy>
 8005332:	4631      	mov	r1, r6
 8005334:	4638      	mov	r0, r7
 8005336:	f7ff fbdd 	bl	8004af4 <_free_r>
 800533a:	e7e9      	b.n	8005310 <_realloc_r+0x1c>
 800533c:	4635      	mov	r5, r6
 800533e:	e7e7      	b.n	8005310 <_realloc_r+0x1c>

08005340 <_malloc_usable_size_r>:
 8005340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005344:	1f18      	subs	r0, r3, #4
 8005346:	2b00      	cmp	r3, #0
 8005348:	bfbc      	itt	lt
 800534a:	580b      	ldrlt	r3, [r1, r0]
 800534c:	18c0      	addlt	r0, r0, r3
 800534e:	4770      	bx	lr

08005350 <_init>:
 8005350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005352:	bf00      	nop
 8005354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005356:	bc08      	pop	{r3}
 8005358:	469e      	mov	lr, r3
 800535a:	4770      	bx	lr

0800535c <_fini>:
 800535c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535e:	bf00      	nop
 8005360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005362:	bc08      	pop	{r3}
 8005364:	469e      	mov	lr, r3
 8005366:	4770      	bx	lr
