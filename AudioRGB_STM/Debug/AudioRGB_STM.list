
AudioRGB_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08005358  08005358  00015358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053b4  080053b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080053b4  080053b4  000153b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053bc  080053bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053bc  080053bc  000153bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053c0  080053c0  000153c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080053c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000070  08005434  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  08005434  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001584c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c57  00000000  00000000  000358ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  00038548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  000396c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019079  00000000  00000000  0003a728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000174f7  00000000  00000000  000537a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c477  00000000  00000000  0006ac98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010710f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d14  00000000  00000000  00107164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005340 	.word	0x08005340

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005340 	.word	0x08005340

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <ADC_Select_CH1>:

/* USER CODE BEGIN 0 */
// Copied generated code from MX_ADC1_Init(), but modified for one channel readout
// left audio channel
void ADC_Select_CH1(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800058e:	463b      	mov	r3, r7
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_1;
 800059a:	2301      	movs	r3, #1
 800059c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1; // has to be 1, because it's only one channel selected
 800059e:	2301      	movs	r3, #1
 80005a0:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a6:	463b      	mov	r3, r7
 80005a8:	4619      	mov	r1, r3
 80005aa:	4806      	ldr	r0, [pc, #24]	; (80005c4 <ADC_Select_CH1+0x3c>)
 80005ac:	f001 fbe2 	bl	8001d74 <HAL_ADC_ConfigChannel>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <ADC_Select_CH1+0x32>
	{
		Error_Handler();
 80005b6:	f000 fd27 	bl	8001008 <Error_Handler>
	}
}
 80005ba:	bf00      	nop
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000098 	.word	0x20000098

080005c8 <ADC_Select_CH4>:
// right audio channel
void ADC_Select_CH4(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80005ce:	463b      	mov	r3, r7
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_4;
 80005da:	2304      	movs	r3, #4
 80005dc:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1; // has to be 1, because it's only one channel selected
 80005de:	2301      	movs	r3, #1
 80005e0:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e6:	463b      	mov	r3, r7
 80005e8:	4619      	mov	r1, r3
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <ADC_Select_CH4+0x3c>)
 80005ec:	f001 fbc2 	bl	8001d74 <HAL_ADC_ConfigChannel>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <ADC_Select_CH4+0x32>
	{
		Error_Handler();
 80005f6:	f000 fd07 	bl	8001008 <Error_Handler>
	}
}
 80005fa:	bf00      	nop
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000098 	.word	0x20000098

08000608 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	463b      	mov	r3, r7
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	*/
  	// Copied from below for editing as user code and skip generated code with goto
	hadc1.Instance = ADC1;
 800061a:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <MX_ADC1_Init+0x7c>)
 800061c:	4a1a      	ldr	r2, [pc, #104]	; (8000688 <MX_ADC1_Init+0x80>)
 800061e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000620:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_ADC1_Init+0x7c>)
 8000622:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000626:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000628:	4b16      	ldr	r3, [pc, #88]	; (8000684 <MX_ADC1_Init+0x7c>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_ADC1_Init+0x7c>)
 8000630:	2201      	movs	r2, #1
 8000632:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000634:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MX_ADC1_Init+0x7c>)
 8000636:	2201      	movs	r2, #1
 8000638:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_ADC1_Init+0x7c>)
 800063c:	2200      	movs	r2, #0
 800063e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <MX_ADC1_Init+0x7c>)
 8000644:	2200      	movs	r2, #0
 8000646:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000648:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_ADC1_Init+0x7c>)
 800064a:	4a10      	ldr	r2, [pc, #64]	; (800068c <MX_ADC1_Init+0x84>)
 800064c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800064e:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <MX_ADC1_Init+0x7c>)
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;	// setup with 3 for getting rank settings, later set manually to 1
 8000654:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <MX_ADC1_Init+0x7c>)
 8000656:	2201      	movs	r2, #1
 8000658:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800065a:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <MX_ADC1_Init+0x7c>)
 800065c:	2200      	movs	r2, #0
 800065e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <MX_ADC1_Init+0x7c>)
 8000664:	2201      	movs	r2, #1
 8000666:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4806      	ldr	r0, [pc, #24]	; (8000684 <MX_ADC1_Init+0x7c>)
 800066a:	f001 f9bf 	bl	80019ec <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 8000674:	f000 fcc8 	bl	8001008 <Error_Handler>
	}

	// jump to user code ADC1_Init 2
	goto SKIP_ADC1_INIT_Generated;
 8000678:	bf00      	nop
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

	SKIP_ADC1_INIT_Generated:
	asm("nop");
 800067a:	bf00      	nop
  /* USER CODE END ADC1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000098 	.word	0x20000098
 8000688:	40012000 	.word	0x40012000
 800068c:	0f000001 	.word	0x0f000001

08000690 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a24      	ldr	r2, [pc, #144]	; (8000740 <HAL_ADC_MspInit+0xb0>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d141      	bne.n	8000736 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	4b23      	ldr	r3, [pc, #140]	; (8000744 <HAL_ADC_MspInit+0xb4>)
 80006b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ba:	4a22      	ldr	r2, [pc, #136]	; (8000744 <HAL_ADC_MspInit+0xb4>)
 80006bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c0:	6453      	str	r3, [r2, #68]	; 0x44
 80006c2:	4b20      	ldr	r3, [pc, #128]	; (8000744 <HAL_ADC_MspInit+0xb4>)
 80006c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	4b1c      	ldr	r3, [pc, #112]	; (8000744 <HAL_ADC_MspInit+0xb4>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a1b      	ldr	r2, [pc, #108]	; (8000744 <HAL_ADC_MspInit+0xb4>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b19      	ldr	r3, [pc, #100]	; (8000744 <HAL_ADC_MspInit+0xb4>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	4b15      	ldr	r3, [pc, #84]	; (8000744 <HAL_ADC_MspInit+0xb4>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a14      	ldr	r2, [pc, #80]	; (8000744 <HAL_ADC_MspInit+0xb4>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b12      	ldr	r3, [pc, #72]	; (8000744 <HAL_ADC_MspInit+0xb4>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = RNG_Pin;
 8000706:	2304      	movs	r3, #4
 8000708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800070a:	2303      	movs	r3, #3
 800070c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RNG_GPIO_Port, &GPIO_InitStruct);
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4619      	mov	r1, r3
 8000718:	480b      	ldr	r0, [pc, #44]	; (8000748 <HAL_ADC_MspInit+0xb8>)
 800071a:	f002 f945 	bl	80029a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUX_L_Pin|AUX_R_Pin;
 800071e:	2312      	movs	r3, #18
 8000720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000722:	2303      	movs	r3, #3
 8000724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	4619      	mov	r1, r3
 8000730:	4806      	ldr	r0, [pc, #24]	; (800074c <HAL_ADC_MspInit+0xbc>)
 8000732:	f002 f939 	bl	80029a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000736:	bf00      	nop
 8000738:	3728      	adds	r7, #40	; 0x28
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40012000 	.word	0x40012000
 8000744:	40023800 	.word	0x40023800
 8000748:	40020800 	.word	0x40020800
 800074c:	40020000 	.word	0x40020000

08000750 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_DMA_Init+0x5c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a13      	ldr	r2, [pc, #76]	; (80007ac <MX_DMA_Init+0x5c>)
 8000760:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_DMA_Init+0x5c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2100      	movs	r1, #0
 8000776:	200b      	movs	r0, #11
 8000778:	f001 fdf5 	bl	8002366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800077c:	200b      	movs	r0, #11
 800077e:	f001 fe0e 	bl	800239e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2100      	movs	r1, #0
 8000786:	200f      	movs	r0, #15
 8000788:	f001 fded 	bl	8002366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800078c:	200f      	movs	r0, #15
 800078e:	f001 fe06 	bl	800239e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	2100      	movs	r1, #0
 8000796:	2010      	movs	r0, #16
 8000798:	f001 fde5 	bl	8002366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800079c:	2010      	movs	r0, #16
 800079e:	f001 fdfe 	bl	800239e <HAL_NVIC_EnableIRQ>

}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800

080007b0 <min>:

// --------
// min, max
// --------

float min(float a, float b) { return (a < b) ? a : b; }
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80007ba:	edc7 0a00 	vstr	s1, [r7]
 80007be:	ed97 7a01 	vldr	s14, [r7, #4]
 80007c2:	edd7 7a00 	vldr	s15, [r7]
 80007c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ce:	d501      	bpl.n	80007d4 <min+0x24>
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	e000      	b.n	80007d6 <min+0x26>
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	ee07 3a90 	vmov	s15, r3
 80007da:	eeb0 0a67 	vmov.f32	s0, s15
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <fillArray>:

// ------
// arrays
// ------

void fillArray(int val, int *arr, const size_t arrLen) { for(int i=0; i < arrLen; i++) arr[i] = val; }
 80007e8:	b480      	push	{r7}
 80007ea:	b087      	sub	sp, #28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	e008      	b.n	800080c <fillArray+0x24>
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	68ba      	ldr	r2, [r7, #8]
 8000800:	4413      	add	r3, r2
 8000802:	68fa      	ldr	r2, [r7, #12]
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	3301      	adds	r3, #1
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	429a      	cmp	r2, r3
 8000812:	d8f2      	bhi.n	80007fa <fillArray+0x12>
 8000814:	bf00      	nop
 8000816:	bf00      	nop
 8000818:	371c      	adds	r7, #28
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <emptyArray>:
void emptyArray(int *arr, const size_t arrLen) { fillArray(0, arr, arrLen); }
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
 800082a:	6039      	str	r1, [r7, #0]
 800082c:	683a      	ldr	r2, [r7, #0]
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	2000      	movs	r0, #0
 8000832:	f7ff ffd9 	bl	80007e8 <fillArray>
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <arraySum>:

int arraySum(int *arr, const size_t arrLen)
{
 800083e:	b480      	push	{r7}
 8000840:	b085      	sub	sp, #20
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
 8000846:	6039      	str	r1, [r7, #0]
	int sum = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
	for(size_t i=0; i < arrLen; i++) sum += arr[i];
 800084c:	2300      	movs	r3, #0
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	e00a      	b.n	8000868 <arraySum+0x2a>
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	4413      	add	r3, r2
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	68fa      	ldr	r2, [r7, #12]
 800085e:	4413      	add	r3, r2
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	3301      	adds	r3, #1
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68ba      	ldr	r2, [r7, #8]
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	429a      	cmp	r2, r3
 800086e:	d3f0      	bcc.n	8000852 <arraySum+0x14>
	return sum;
 8000870:	68fb      	ldr	r3, [r7, #12]
}
 8000872:	4618      	mov	r0, r3
 8000874:	3714      	adds	r7, #20
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <arrayAvr>:
float arrayAvr(int *arr, const size_t arrLen) { return (float)arraySum(arr, arrLen) / (float)arrLen; }
 800087e:	b580      	push	{r7, lr}
 8000880:	b082      	sub	sp, #8
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
 8000886:	6039      	str	r1, [r7, #0]
 8000888:	6839      	ldr	r1, [r7, #0]
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff ffd7 	bl	800083e <arraySum>
 8000890:	ee07 0a90 	vmov	s15, r0
 8000894:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	ee07 3a90 	vmov	s15, r3
 800089e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80008a6:	eef0 7a66 	vmov.f32	s15, s13
 80008aa:	eeb0 0a67 	vmov.f32	s0, s15
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <bufferAppend>:

// implements an append function for a circular array
// when the array is full, the values at the beginning are overwritten
// the buffer array contains the last measured ADC elements to smooth the audio signal
void bufferAppend(int val, int *arr, size_t *ind)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
	*ind = (*ind+1 > BUFFER_SIZE_AUX-1) ? 0 : *ind+1;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	3301      	adds	r3, #1
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d803      	bhi.n	80008d2 <bufferAppend+0x1e>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	3301      	adds	r3, #1
 80008d0:	e000      	b.n	80008d4 <bufferAppend+0x20>
 80008d2:	2300      	movs	r3, #0
 80008d4:	687a      	ldr	r2, [r7, #4]
 80008d6:	6013      	str	r3, [r2, #0]
	arr[*ind] = val;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	4413      	add	r3, r2
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	601a      	str	r2, [r3, #0]
}
 80008e6:	bf00      	nop
 80008e8:	3714      	adds	r7, #20
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <bufferFilter>:

// apply an average-filter to the last elements of the buffer array
float bufferFilter(int *arr)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b082      	sub	sp, #8
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
	return arrayAvr(arr, BUFFER_SIZE_AUX);
 80008fa:	2102      	movs	r1, #2
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff ffbe 	bl	800087e <arrayAvr>
 8000902:	eef0 7a40 	vmov.f32	s15, s0
}
 8000906:	eeb0 0a67 	vmov.f32	s0, s15
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <saturateLimits>:

// ----------------------------
// saturate, transform, amplify
// ----------------------------

float saturateLimits(float val, float lowerLim, float upperLim) { return (val < lowerLim) ? lowerLim : ((val > upperLim) ? upperLim : val); }
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	ed87 0a03 	vstr	s0, [r7, #12]
 800091a:	edc7 0a02 	vstr	s1, [r7, #8]
 800091e:	ed87 1a01 	vstr	s2, [r7, #4]
 8000922:	ed97 7a03 	vldr	s14, [r7, #12]
 8000926:	edd7 7a02 	vldr	s15, [r7, #8]
 800092a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800092e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000932:	d501      	bpl.n	8000938 <saturateLimits+0x28>
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	e00b      	b.n	8000950 <saturateLimits+0x40>
 8000938:	ed97 7a03 	vldr	s14, [r7, #12]
 800093c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000940:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000948:	dd01      	ble.n	800094e <saturateLimits+0x3e>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	e000      	b.n	8000950 <saturateLimits+0x40>
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	ee07 3a90 	vmov	s15, r3
 8000954:	eeb0 0a67 	vmov.f32	s0, s15
 8000958:	3714      	adds	r7, #20
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
	...

08000964 <saturate>:
float saturate(float val) { return saturateLimits(val, COLOR_MIN, COLOR_MAX); }
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	ed87 0a01 	vstr	s0, [r7, #4]
 800096e:	ed9f 1a07 	vldr	s2, [pc, #28]	; 800098c <saturate+0x28>
 8000972:	eddf 0a07 	vldr	s1, [pc, #28]	; 8000990 <saturate+0x2c>
 8000976:	ed97 0a01 	vldr	s0, [r7, #4]
 800097a:	f7ff ffc9 	bl	8000910 <saturateLimits>
 800097e:	eef0 7a40 	vmov.f32	s15, s0
 8000982:	eeb0 0a67 	vmov.f32	s0, s15
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	437f0000 	.word	0x437f0000
 8000990:	00000000 	.word	0x00000000

08000994 <transform>:

float transform(float val, float inMin, float inMax, float outMin, float outMax)
{
 8000994:	b480      	push	{r7}
 8000996:	b089      	sub	sp, #36	; 0x24
 8000998:	af00      	add	r7, sp, #0
 800099a:	ed87 0a05 	vstr	s0, [r7, #20]
 800099e:	edc7 0a04 	vstr	s1, [r7, #16]
 80009a2:	ed87 1a03 	vstr	s2, [r7, #12]
 80009a6:	edc7 1a02 	vstr	s3, [r7, #8]
 80009aa:	ed87 2a01 	vstr	s4, [r7, #4]
	float inHalf = inMin + (inMax - inMin) / 2;
 80009ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80009b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80009b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009ba:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80009be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80009c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009ca:	edc7 7a07 	vstr	s15, [r7, #28]
	float outHalf = outMin + (outMax - outMin) / 2;
 80009ce:	ed97 7a01 	vldr	s14, [r7, #4]
 80009d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80009d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009da:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80009de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80009e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009ea:	edc7 7a06 	vstr	s15, [r7, #24]
	return val - (inHalf - outHalf);
 80009ee:	ed97 7a07 	vldr	s14, [r7, #28]
 80009f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80009f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80009fe:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8000a02:	eeb0 0a67 	vmov.f32	s0, s15
 8000a06:	3724      	adds	r7, #36	; 0x24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <amplifyFactor>:

float amplifyFactor(float val, float fac) { return val * fac; }
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a1a:	edc7 0a00 	vstr	s1, [r7]
 8000a1e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000a22:	edd7 7a00 	vldr	s15, [r7]
 8000a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <amplify>:
float amplify(float val) { return amplifyFactor(val, VOLUME_BOOST); }
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a42:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000a46:	ed97 0a01 	vldr	s0, [r7, #4]
 8000a4a:	f7ff ffe1 	bl	8000a10 <amplifyFactor>
 8000a4e:	eef0 7a40 	vmov.f32	s15, s0
 8000a52:	eeb0 0a67 	vmov.f32	s0, s15
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <writeRGB>:
// ----
// rgbs
// ----

void writeRGB(int r, int g, int b)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
	// prevent higher pulses than period
	TIM4->CCR1 = (int)min(saturate(r), TIM4->ARR);
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	ee07 3a90 	vmov	s15, r3
 8000a6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a72:	eeb0 0a67 	vmov.f32	s0, s15
 8000a76:	f7ff ff75 	bl	8000964 <saturate>
 8000a7a:	eeb0 7a40 	vmov.f32	s14, s0
 8000a7e:	4b2b      	ldr	r3, [pc, #172]	; (8000b2c <writeRGB+0xd0>)
 8000a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a82:	ee07 3a90 	vmov	s15, r3
 8000a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a8a:	eef0 0a67 	vmov.f32	s1, s15
 8000a8e:	eeb0 0a47 	vmov.f32	s0, s14
 8000a92:	f7ff fe8d 	bl	80007b0 <min>
 8000a96:	eef0 7a40 	vmov.f32	s15, s0
 8000a9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a9e:	4b23      	ldr	r3, [pc, #140]	; (8000b2c <writeRGB+0xd0>)
 8000aa0:	ee17 2a90 	vmov	r2, s15
 8000aa4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = (int)min(saturate(g), TIM3->ARR);
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	ee07 3a90 	vmov	s15, r3
 8000aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ab4:	f7ff ff56 	bl	8000964 <saturate>
 8000ab8:	eeb0 7a40 	vmov.f32	s14, s0
 8000abc:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <writeRGB+0xd4>)
 8000abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac0:	ee07 3a90 	vmov	s15, r3
 8000ac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ac8:	eef0 0a67 	vmov.f32	s1, s15
 8000acc:	eeb0 0a47 	vmov.f32	s0, s14
 8000ad0:	f7ff fe6e 	bl	80007b0 <min>
 8000ad4:	eef0 7a40 	vmov.f32	s15, s0
 8000ad8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000adc:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <writeRGB+0xd4>)
 8000ade:	ee17 2a90 	vmov	r2, s15
 8000ae2:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR1 = (int)min(saturate(b), TIM3->ARR);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	ee07 3a90 	vmov	s15, r3
 8000aea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aee:	eeb0 0a67 	vmov.f32	s0, s15
 8000af2:	f7ff ff37 	bl	8000964 <saturate>
 8000af6:	eeb0 7a40 	vmov.f32	s14, s0
 8000afa:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <writeRGB+0xd4>)
 8000afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000afe:	ee07 3a90 	vmov	s15, r3
 8000b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b06:	eef0 0a67 	vmov.f32	s1, s15
 8000b0a:	eeb0 0a47 	vmov.f32	s0, s14
 8000b0e:	f7ff fe4f 	bl	80007b0 <min>
 8000b12:	eef0 7a40 	vmov.f32	s15, s0
 8000b16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b1a:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <writeRGB+0xd4>)
 8000b1c:	ee17 2a90 	vmov	r2, s15
 8000b20:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b22:	bf00      	nop
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40000800 	.word	0x40000800
 8000b30:	40000400 	.word	0x40000400

08000b34 <writeRGBArray>:
void writeRGBArray(int *rgb) { writeRGB(rgb[0], rgb[1], rgb[2]); }
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6818      	ldr	r0, [r3, #0]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3304      	adds	r3, #4
 8000b44:	6819      	ldr	r1, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	3308      	adds	r3, #8
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	f7ff ff85 	bl	8000a5c <writeRGB>
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <generatorLimit>:

// color generator
float generatorLimit(float val, float lowerLim, float upperLim)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	ed87 0a03 	vstr	s0, [r7, #12]
 8000b66:	edc7 0a02 	vstr	s1, [r7, #8]
 8000b6a:	ed87 1a01 	vstr	s2, [r7, #4]
	float t = transform(
 8000b6e:	ed9f 2a0c 	vldr	s4, [pc, #48]	; 8000ba0 <generatorLimit+0x44>
 8000b72:	eddf 1a0c 	vldr	s3, [pc, #48]	; 8000ba4 <generatorLimit+0x48>
 8000b76:	ed97 1a01 	vldr	s2, [r7, #4]
 8000b7a:	edd7 0a02 	vldr	s1, [r7, #8]
 8000b7e:	ed97 0a03 	vldr	s0, [r7, #12]
 8000b82:	f7ff ff07 	bl	8000994 <transform>
 8000b86:	ed87 0a05 	vstr	s0, [r7, #20]
		lowerLim,
		upperLim,
		COLOR_MIN,
		COLOR_MAX
	);
	return t + COLOR_SHIFT;
 8000b8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b8e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000ba8 <generatorLimit+0x4c>
 8000b92:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8000b96:	eeb0 0a67 	vmov.f32	s0, s15
 8000b9a:	3718      	adds	r7, #24
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	437f0000 	.word	0x437f0000
 8000ba4:	00000000 	.word	0x00000000
 8000ba8:	44424000 	.word	0x44424000

08000bac <generator>:
float generator(float val) { return generatorLimit(amplify(val), VOLUME_MIN, VOLUME_MAX); }
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000bb6:	ed97 0a01 	vldr	s0, [r7, #4]
 8000bba:	f7ff ff3d 	bl	8000a38 <amplify>
 8000bbe:	eef0 7a40 	vmov.f32	s15, s0
 8000bc2:	ed9f 1a07 	vldr	s2, [pc, #28]	; 8000be0 <generator+0x34>
 8000bc6:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8000bca:	eeb0 0a67 	vmov.f32	s0, s15
 8000bce:	f7ff ffc5 	bl	8000b5c <generatorLimit>
 8000bd2:	eef0 7a40 	vmov.f32	s15, s0
 8000bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	44e10000 	.word	0x44e10000

08000be4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	4b1e      	ldr	r3, [pc, #120]	; (8000c68 <MX_GPIO_Init+0x84>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a1d      	ldr	r2, [pc, #116]	; (8000c68 <MX_GPIO_Init+0x84>)
 8000bf4:	f043 0304 	orr.w	r3, r3, #4
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <MX_GPIO_Init+0x84>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0304 	and.w	r3, r3, #4
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <MX_GPIO_Init+0x84>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a16      	ldr	r2, [pc, #88]	; (8000c68 <MX_GPIO_Init+0x84>)
 8000c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <MX_GPIO_Init+0x84>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <MX_GPIO_Init+0x84>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a0f      	ldr	r2, [pc, #60]	; (8000c68 <MX_GPIO_Init+0x84>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <MX_GPIO_Init+0x84>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	603b      	str	r3, [r7, #0]
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_GPIO_Init+0x84>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a08      	ldr	r2, [pc, #32]	; (8000c68 <MX_GPIO_Init+0x84>)
 8000c48:	f043 0302 	orr.w	r3, r3, #2
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <MX_GPIO_Init+0x84>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]

}
 8000c5a:	bf00      	nop
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800

08000c6c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <MX_I2C1_Init+0x50>)
 8000c72:	4a13      	ldr	r2, [pc, #76]	; (8000cc0 <MX_I2C1_Init+0x54>)
 8000c74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <MX_I2C1_Init+0x50>)
 8000c78:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <MX_I2C1_Init+0x58>)
 8000c7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <MX_I2C1_Init+0x50>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <MX_I2C1_Init+0x50>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_I2C1_Init+0x50>)
 8000c8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c90:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <MX_I2C1_Init+0x50>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <MX_I2C1_Init+0x50>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c9c:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <MX_I2C1_Init+0x50>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <MX_I2C1_Init+0x50>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ca8:	4804      	ldr	r0, [pc, #16]	; (8000cbc <MX_I2C1_Init+0x50>)
 8000caa:	f002 f801 	bl	8002cb0 <HAL_I2C_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cb4:	f000 f9a8 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	200000e0 	.word	0x200000e0
 8000cc0:	40005400 	.word	0x40005400
 8000cc4:	000186a0 	.word	0x000186a0

08000cc8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	; 0x28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a19      	ldr	r2, [pc, #100]	; (8000d4c <HAL_I2C_MspInit+0x84>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d12c      	bne.n	8000d44 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a17      	ldr	r2, [pc, #92]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_I2C_SCL_Pin|LCD_I2C_SDA_Pin;
 8000d06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d0c:	2312      	movs	r3, #18
 8000d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d14:	2302      	movs	r3, #2
 8000d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d18:	2304      	movs	r3, #4
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	480c      	ldr	r0, [pc, #48]	; (8000d54 <HAL_I2C_MspInit+0x8c>)
 8000d24:	f001 fe40 	bl	80029a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	4a07      	ldr	r2, [pc, #28]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000d32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d36:	6413      	str	r3, [r2, #64]	; 0x40
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d44:	bf00      	nop
 8000d46:	3728      	adds	r7, #40	; 0x28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40005400 	.word	0x40005400
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020400 	.word	0x40020400

08000d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b096      	sub	sp, #88	; 0x58
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	// left audio channel
	int *buffArrL = (int *)malloc(BUFFER_SIZE_AUX * sizeof(int));
 8000d5e:	2008      	movs	r0, #8
 8000d60:	f003 feb0 	bl	8004ac4 <malloc>
 8000d64:	4603      	mov	r3, r0
 8000d66:	64bb      	str	r3, [r7, #72]	; 0x48
	emptyArray(buffArrL, BUFFER_SIZE_AUX);
 8000d68:	2102      	movs	r1, #2
 8000d6a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000d6c:	f7ff fd59 	bl	8000822 <emptyArray>
	size_t buffIndL = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61bb      	str	r3, [r7, #24]
	int auxValL = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	647b      	str	r3, [r7, #68]	; 0x44
	float auxFilterL = 0;
 8000d78:	f04f 0300 	mov.w	r3, #0
 8000d7c:	657b      	str	r3, [r7, #84]	; 0x54

	// right audio channel
	int *buffArrR = (int *)malloc(BUFFER_SIZE_AUX * sizeof(int));
 8000d7e:	2008      	movs	r0, #8
 8000d80:	f003 fea0 	bl	8004ac4 <malloc>
 8000d84:	4603      	mov	r3, r0
 8000d86:	643b      	str	r3, [r7, #64]	; 0x40
	emptyArray(buffArrR, BUFFER_SIZE_AUX);
 8000d88:	2102      	movs	r1, #2
 8000d8a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000d8c:	f7ff fd49 	bl	8000822 <emptyArray>
	size_t buffIndR = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
	int auxValR = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	63fb      	str	r3, [r7, #60]	; 0x3c
	float auxFilterR = 0;
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	653b      	str	r3, [r7, #80]	; 0x50

	// rgb led (uint8_t doesn't work)
	int *rgbArr = (int *)malloc(CHANNEL_COUNT_RGB * sizeof(int));
 8000d9e:	200c      	movs	r0, #12
 8000da0:	f003 fe90 	bl	8004ac4 <malloc>
 8000da4:	4603      	mov	r3, r0
 8000da6:	63bb      	str	r3, [r7, #56]	; 0x38
	emptyArray(rgbArr, CHANNEL_COUNT_RGB);
 8000da8:	2103      	movs	r1, #3
 8000daa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000dac:	f7ff fd39 	bl	8000822 <emptyArray>
	int r = 0, g = 0, b = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	637b      	str	r3, [r7, #52]	; 0x34
 8000db4:	2300      	movs	r3, #0
 8000db6:	633b      	str	r3, [r7, #48]	; 0x30
 8000db8:	2300      	movs	r3, #0
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
	size_t colSel = 0, colSelPrev = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
	int colVal = 0, colValPrev = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61fb      	str	r3, [r7, #28]

	// nanokernel tick counter
	uint32_t ticks = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd0:	f000 fd76 	bl	80018c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd4:	f000 f8ac 	bl	8000f30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd8:	f7ff ff04 	bl	8000be4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ddc:	f000 fcd4 	bl	8001788 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000de0:	f7ff fcb6 	bl	8000750 <MX_DMA_Init>
  MX_ADC1_Init();
 8000de4:	f7ff fc10 	bl	8000608 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000de8:	f7ff ff40 	bl	8000c6c <MX_I2C1_Init>
  MX_TIM1_Init();
 8000dec:	f000 f9ca 	bl	8001184 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000df0:	f000 fa18 	bl	8001224 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000df4:	f000 fa62 	bl	80012bc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000df8:	f000 fae0 	bl	80013bc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	// setup rgb led
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4847      	ldr	r0, [pc, #284]	; (8000f1c <main+0x1c4>)
 8000e00:	f002 fdac 	bl	800395c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000e04:	2104      	movs	r1, #4
 8000e06:	4846      	ldr	r0, [pc, #280]	; (8000f20 <main+0x1c8>)
 8000e08:	f002 fda8 	bl	800395c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4844      	ldr	r0, [pc, #272]	; (8000f20 <main+0x1c8>)
 8000e10:	f002 fda4 	bl	800395c <HAL_TIM_PWM_Start>
	writeRGB(r, g, b);
 8000e14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000e18:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000e1a:	f7ff fe1f 	bl	8000a5c <writeRGB>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// get left audio channel from adc
		ADC_Select_CH1();
 8000e1e:	f7ff fbb3 	bl	8000588 <ADC_Select_CH1>
		HAL_ADC_Start(&hadc1);
 8000e22:	4840      	ldr	r0, [pc, #256]	; (8000f24 <main+0x1cc>)
 8000e24:	f000 fe26 	bl	8001a74 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, TIMEOUT_ADC) == HAL_OK)
 8000e28:	2101      	movs	r1, #1
 8000e2a:	483e      	ldr	r0, [pc, #248]	; (8000f24 <main+0x1cc>)
 8000e2c:	f000 ff09 	bl	8001c42 <HAL_ADC_PollForConversion>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d113      	bne.n	8000e5e <main+0x106>
		{
			auxValL = HAL_ADC_GetValue(&hadc1);
 8000e36:	483b      	ldr	r0, [pc, #236]	; (8000f24 <main+0x1cc>)
 8000e38:	f000 ff8e 	bl	8001d58 <HAL_ADC_GetValue>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	647b      	str	r3, [r7, #68]	; 0x44
			HAL_ADC_Stop(&hadc1);
 8000e40:	4838      	ldr	r0, [pc, #224]	; (8000f24 <main+0x1cc>)
 8000e42:	f000 fecb 	bl	8001bdc <HAL_ADC_Stop>
			// write buffer and apply filter
			bufferAppend(auxValL, buffArrL, &buffIndL);
 8000e46:	f107 0318 	add.w	r3, r7, #24
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000e4e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000e50:	f7ff fd30 	bl	80008b4 <bufferAppend>
			auxFilterL = bufferFilter(buffArrL);
 8000e54:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000e56:	f7ff fd4c 	bl	80008f2 <bufferFilter>
 8000e5a:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
		}

		// get right audio channel from adc
		ADC_Select_CH4();
 8000e5e:	f7ff fbb3 	bl	80005c8 <ADC_Select_CH4>
		HAL_ADC_Start(&hadc1);
 8000e62:	4830      	ldr	r0, [pc, #192]	; (8000f24 <main+0x1cc>)
 8000e64:	f000 fe06 	bl	8001a74 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, TIMEOUT_ADC) == HAL_OK)
 8000e68:	2101      	movs	r1, #1
 8000e6a:	482e      	ldr	r0, [pc, #184]	; (8000f24 <main+0x1cc>)
 8000e6c:	f000 fee9 	bl	8001c42 <HAL_ADC_PollForConversion>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d113      	bne.n	8000e9e <main+0x146>
		{
			auxValR = HAL_ADC_GetValue(&hadc1);
 8000e76:	482b      	ldr	r0, [pc, #172]	; (8000f24 <main+0x1cc>)
 8000e78:	f000 ff6e 	bl	8001d58 <HAL_ADC_GetValue>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
			HAL_ADC_Stop(&hadc1);
 8000e80:	4828      	ldr	r0, [pc, #160]	; (8000f24 <main+0x1cc>)
 8000e82:	f000 feab 	bl	8001bdc <HAL_ADC_Stop>
			// write buffer and apply filter
			bufferAppend(auxValR, buffArrR, &buffIndR);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000e8e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000e90:	f7ff fd10 	bl	80008b4 <bufferAppend>
			auxFilterR = bufferFilter(buffArrR);
 8000e94:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000e96:	f7ff fd2c 	bl	80008f2 <bufferFilter>
 8000e9a:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
		}

		// generate color
		rgbArr[0] = (int)generator(auxFilterL);
 8000e9e:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8000ea2:	f7ff fe83 	bl	8000bac <generator>
 8000ea6:	eef0 7a40 	vmov.f32	s15, s0
 8000eaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eae:	ee17 2a90 	vmov	r2, s15
 8000eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eb4:	601a      	str	r2, [r3, #0]
		rgbArr[1] = 5;
 8000eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eb8:	3304      	adds	r3, #4
 8000eba:	2205      	movs	r2, #5
 8000ebc:	601a      	str	r2, [r3, #0]
		rgbArr[2] = (int)generator(auxFilterR);
 8000ebe:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8000ec2:	f7ff fe73 	bl	8000bac <generator>
 8000ec6:	eef0 7a40 	vmov.f32	s15, s0
 8000eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ecc:	3308      	adds	r3, #8
 8000ece:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ed2:	ee17 2a90 	vmov	r2, s15
 8000ed6:	601a      	str	r2, [r3, #0]

		// write rgb
		writeRGBArray(rgbArr);
 8000ed8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000eda:	f7ff fe2b 	bl	8000b34 <writeRGBArray>

		// debug via uart
		if (DEBUG)
		{
			sprintf(
 8000ede:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8000ee2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4638      	mov	r0, r7
 8000eec:	ee17 2a90 	vmov	r2, s15
 8000ef0:	490d      	ldr	r1, [pc, #52]	; (8000f28 <main+0x1d0>)
 8000ef2:	f003 feb1 	bl	8004c58 <siprintf>
				buffMsg,
				"%d,%d\n",
				(int)auxFilterL,
				(int)rgbArr[0]
			);
			HAL_UART_Transmit(&huart2, (uint8_t *)buffMsg, strlen(buffMsg), HAL_MAX_DELAY);
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff f971 	bl	80001e0 <strlen>
 8000efe:	4603      	mov	r3, r0
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	4639      	mov	r1, r7
 8000f04:	f04f 33ff 	mov.w	r3, #4294967295
 8000f08:	4808      	ldr	r0, [pc, #32]	; (8000f2c <main+0x1d4>)
 8000f0a:	f003 fae8 	bl	80044de <HAL_UART_Transmit>
		}

		// update nanokernel tick and wait
		ticks++;
 8000f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f10:	3301      	adds	r3, #1
 8000f12:	64fb      	str	r3, [r7, #76]	; 0x4c
		HAL_Delay(DELAY);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f000 fd45 	bl	80019a4 <HAL_Delay>
	{
 8000f1a:	e780      	b.n	8000e1e <main+0xc6>
 8000f1c:	20000134 	.word	0x20000134
 8000f20:	2000017c 	.word	0x2000017c
 8000f24:	20000098 	.word	0x20000098
 8000f28:	08005358 	.word	0x08005358
 8000f2c:	20000374 	.word	0x20000374

08000f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b094      	sub	sp, #80	; 0x50
 8000f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f36:	f107 0320 	add.w	r3, r7, #32
 8000f3a:	2230      	movs	r2, #48	; 0x30
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f003 fdc8 	bl	8004ad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	4b29      	ldr	r3, [pc, #164]	; (8001000 <SystemClock_Config+0xd0>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	4a28      	ldr	r2, [pc, #160]	; (8001000 <SystemClock_Config+0xd0>)
 8000f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f62:	6413      	str	r3, [r2, #64]	; 0x40
 8000f64:	4b26      	ldr	r3, [pc, #152]	; (8001000 <SystemClock_Config+0xd0>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f70:	2300      	movs	r3, #0
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	4b23      	ldr	r3, [pc, #140]	; (8001004 <SystemClock_Config+0xd4>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f7c:	4a21      	ldr	r2, [pc, #132]	; (8001004 <SystemClock_Config+0xd4>)
 8000f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <SystemClock_Config+0xd4>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f90:	2302      	movs	r3, #2
 8000f92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f94:	2301      	movs	r3, #1
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f98:	2310      	movs	r3, #16
 8000f9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fa4:	2310      	movs	r3, #16
 8000fa6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fa8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fb2:	2307      	movs	r3, #7
 8000fb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb6:	f107 0320 	add.w	r3, r7, #32
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f001 ffbc 	bl	8002f38 <HAL_RCC_OscConfig>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fc6:	f000 f81f 	bl	8001008 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fca:	230f      	movs	r3, #15
 8000fcc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fda:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	2102      	movs	r1, #2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f002 fa1e 	bl	8003428 <HAL_RCC_ClockConfig>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ff2:	f000 f809 	bl	8001008 <Error_Handler>
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	3750      	adds	r7, #80	; 0x50
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800
 8001004:	40007000 	.word	0x40007000

08001008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800100c:	b672      	cpsid	i
}
 800100e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001010:	e7fe      	b.n	8001010 <Error_Handler+0x8>
	...

08001014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <HAL_MspInit+0x4c>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	4a0f      	ldr	r2, [pc, #60]	; (8001060 <HAL_MspInit+0x4c>)
 8001024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001028:	6453      	str	r3, [r2, #68]	; 0x44
 800102a:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <HAL_MspInit+0x4c>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <HAL_MspInit+0x4c>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	4a08      	ldr	r2, [pc, #32]	; (8001060 <HAL_MspInit+0x4c>)
 8001040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001044:	6413      	str	r3, [r2, #64]	; 0x40
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_MspInit+0x4c>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001052:	2007      	movs	r0, #7
 8001054:	f001 f97c 	bl	8002350 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40023800 	.word	0x40023800

08001064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <NMI_Handler+0x4>

0800106a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106e:	e7fe      	b.n	800106e <HardFault_Handler+0x4>

08001070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <MemManage_Handler+0x4>

08001076 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107a:	e7fe      	b.n	800107a <BusFault_Handler+0x4>

0800107c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <UsageFault_Handler+0x4>

08001082 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b0:	f000 fc58 	bl	8001964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <DMA1_Stream0_IRQHandler+0x10>)
 80010be:	f001 fa37 	bl	8002530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000314 	.word	0x20000314

080010cc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <DMA1_Stream4_IRQHandler+0x10>)
 80010d2:	f001 fa2d 	bl	8002530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200001c4 	.word	0x200001c4

080010e0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <DMA1_Stream5_IRQHandler+0x10>)
 80010e6:	f001 fa23 	bl	8002530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000224 	.word	0x20000224

080010f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010fc:	4a14      	ldr	r2, [pc, #80]	; (8001150 <_sbrk+0x5c>)
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <_sbrk+0x60>)
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001108:	4b13      	ldr	r3, [pc, #76]	; (8001158 <_sbrk+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d102      	bne.n	8001116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <_sbrk+0x64>)
 8001112:	4a12      	ldr	r2, [pc, #72]	; (800115c <_sbrk+0x68>)
 8001114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <_sbrk+0x64>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	429a      	cmp	r2, r3
 8001122:	d207      	bcs.n	8001134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001124:	f003 fca4 	bl	8004a70 <__errno>
 8001128:	4603      	mov	r3, r0
 800112a:	220c      	movs	r2, #12
 800112c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800112e:	f04f 33ff 	mov.w	r3, #4294967295
 8001132:	e009      	b.n	8001148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <_sbrk+0x64>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800113a:	4b07      	ldr	r3, [pc, #28]	; (8001158 <_sbrk+0x64>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	4a05      	ldr	r2, [pc, #20]	; (8001158 <_sbrk+0x64>)
 8001144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001146:	68fb      	ldr	r3, [r7, #12]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20018000 	.word	0x20018000
 8001154:	00000400 	.word	0x00000400
 8001158:	2000008c 	.word	0x2000008c
 800115c:	200003d0 	.word	0x200003d0

08001160 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <SystemInit+0x20>)
 8001166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800116a:	4a05      	ldr	r2, [pc, #20]	; (8001180 <SystemInit+0x20>)
 800116c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001170:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim3_ch1_trig;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800118a:	f107 0308 	add.w	r3, r7, #8
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001198:	463b      	mov	r3, r7
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011a0:	4b1e      	ldr	r3, [pc, #120]	; (800121c <MX_TIM1_Init+0x98>)
 80011a2:	4a1f      	ldr	r2, [pc, #124]	; (8001220 <MX_TIM1_Init+0x9c>)
 80011a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011a6:	4b1d      	ldr	r3, [pc, #116]	; (800121c <MX_TIM1_Init+0x98>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <MX_TIM1_Init+0x98>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80011b2:	4b1a      	ldr	r3, [pc, #104]	; (800121c <MX_TIM1_Init+0x98>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <MX_TIM1_Init+0x98>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011be:	4b17      	ldr	r3, [pc, #92]	; (800121c <MX_TIM1_Init+0x98>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c4:	4b15      	ldr	r3, [pc, #84]	; (800121c <MX_TIM1_Init+0x98>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011ca:	4814      	ldr	r0, [pc, #80]	; (800121c <MX_TIM1_Init+0x98>)
 80011cc:	f002 fb28 	bl	8003820 <HAL_TIM_Base_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 80011d6:	f7ff ff17 	bl	8001008 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011e0:	f107 0308 	add.w	r3, r7, #8
 80011e4:	4619      	mov	r1, r3
 80011e6:	480d      	ldr	r0, [pc, #52]	; (800121c <MX_TIM1_Init+0x98>)
 80011e8:	f002 fd2a 	bl	8003c40 <HAL_TIM_ConfigClockSource>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 80011f2:	f7ff ff09 	bl	8001008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f6:	2300      	movs	r3, #0
 80011f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011fe:	463b      	mov	r3, r7
 8001200:	4619      	mov	r1, r3
 8001202:	4806      	ldr	r0, [pc, #24]	; (800121c <MX_TIM1_Init+0x98>)
 8001204:	f003 f8b0 	bl	8004368 <HAL_TIMEx_MasterConfigSynchronization>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800120e:	f7ff fefb 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000284 	.word	0x20000284
 8001220:	40010000 	.word	0x40010000

08001224 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001238:	463b      	mov	r3, r7
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001240:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <MX_TIM2_Init+0x94>)
 8001242:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001246:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001248:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <MX_TIM2_Init+0x94>)
 800124a:	2200      	movs	r2, #0
 800124c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <MX_TIM2_Init+0x94>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <MX_TIM2_Init+0x94>)
 8001256:	f04f 32ff 	mov.w	r2, #4294967295
 800125a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125c:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <MX_TIM2_Init+0x94>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <MX_TIM2_Init+0x94>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001268:	4813      	ldr	r0, [pc, #76]	; (80012b8 <MX_TIM2_Init+0x94>)
 800126a:	f002 fad9 	bl	8003820 <HAL_TIM_Base_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001274:	f7ff fec8 	bl	8001008 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800127e:	f107 0308 	add.w	r3, r7, #8
 8001282:	4619      	mov	r1, r3
 8001284:	480c      	ldr	r0, [pc, #48]	; (80012b8 <MX_TIM2_Init+0x94>)
 8001286:	f002 fcdb 	bl	8003c40 <HAL_TIM_ConfigClockSource>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001290:	f7ff feba 	bl	8001008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800129c:	463b      	mov	r3, r7
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_TIM2_Init+0x94>)
 80012a2:	f003 f861 	bl	8004368 <HAL_TIMEx_MasterConfigSynchronization>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012ac:	f7ff feac 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200002cc 	.word	0x200002cc

080012bc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08e      	sub	sp, #56	; 0x38
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d0:	f107 0320 	add.w	r3, r7, #32
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
 80012e8:	615a      	str	r2, [r3, #20]
 80012ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012ec:	4b31      	ldr	r3, [pc, #196]	; (80013b4 <MX_TIM3_Init+0xf8>)
 80012ee:	4a32      	ldr	r2, [pc, #200]	; (80013b8 <MX_TIM3_Init+0xfc>)
 80012f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80012f2:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <MX_TIM3_Init+0xf8>)
 80012f4:	2253      	movs	r2, #83	; 0x53
 80012f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f8:	4b2e      	ldr	r3, [pc, #184]	; (80013b4 <MX_TIM3_Init+0xf8>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255-1;
 80012fe:	4b2d      	ldr	r3, [pc, #180]	; (80013b4 <MX_TIM3_Init+0xf8>)
 8001300:	22fe      	movs	r2, #254	; 0xfe
 8001302:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001304:	4b2b      	ldr	r3, [pc, #172]	; (80013b4 <MX_TIM3_Init+0xf8>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130a:	4b2a      	ldr	r3, [pc, #168]	; (80013b4 <MX_TIM3_Init+0xf8>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001310:	4828      	ldr	r0, [pc, #160]	; (80013b4 <MX_TIM3_Init+0xf8>)
 8001312:	f002 fa85 	bl	8003820 <HAL_TIM_Base_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800131c:	f7ff fe74 	bl	8001008 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001324:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001326:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800132a:	4619      	mov	r1, r3
 800132c:	4821      	ldr	r0, [pc, #132]	; (80013b4 <MX_TIM3_Init+0xf8>)
 800132e:	f002 fc87 	bl	8003c40 <HAL_TIM_ConfigClockSource>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001338:	f7ff fe66 	bl	8001008 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800133c:	481d      	ldr	r0, [pc, #116]	; (80013b4 <MX_TIM3_Init+0xf8>)
 800133e:	f002 fabe 	bl	80038be <HAL_TIM_PWM_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001348:	f7ff fe5e 	bl	8001008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134c:	2300      	movs	r3, #0
 800134e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001354:	f107 0320 	add.w	r3, r7, #32
 8001358:	4619      	mov	r1, r3
 800135a:	4816      	ldr	r0, [pc, #88]	; (80013b4 <MX_TIM3_Init+0xf8>)
 800135c:	f003 f804 	bl	8004368 <HAL_TIMEx_MasterConfigSynchronization>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001366:	f7ff fe4f 	bl	8001008 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800136a:	2360      	movs	r3, #96	; 0x60
 800136c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 255;
 800136e:	23ff      	movs	r3, #255	; 0xff
 8001370:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2200      	movs	r2, #0
 800137e:	4619      	mov	r1, r3
 8001380:	480c      	ldr	r0, [pc, #48]	; (80013b4 <MX_TIM3_Init+0xf8>)
 8001382:	f002 fb9b 	bl	8003abc <HAL_TIM_PWM_ConfigChannel>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800138c:	f7ff fe3c 	bl	8001008 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	2204      	movs	r2, #4
 8001394:	4619      	mov	r1, r3
 8001396:	4807      	ldr	r0, [pc, #28]	; (80013b4 <MX_TIM3_Init+0xf8>)
 8001398:	f002 fb90 	bl	8003abc <HAL_TIM_PWM_ConfigChannel>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 80013a2:	f7ff fe31 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013a6:	4803      	ldr	r0, [pc, #12]	; (80013b4 <MX_TIM3_Init+0xf8>)
 80013a8:	f000 f96e 	bl	8001688 <HAL_TIM_MspPostInit>

}
 80013ac:	bf00      	nop
 80013ae:	3738      	adds	r7, #56	; 0x38
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	2000017c 	.word	0x2000017c
 80013b8:	40000400 	.word	0x40000400

080013bc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c2:	f107 0320 	add.w	r3, r7, #32
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	611a      	str	r2, [r3, #16]
 80013da:	615a      	str	r2, [r3, #20]
 80013dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013de:	4b21      	ldr	r3, [pc, #132]	; (8001464 <MX_TIM4_Init+0xa8>)
 80013e0:	4a21      	ldr	r2, [pc, #132]	; (8001468 <MX_TIM4_Init+0xac>)
 80013e2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 80013e4:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <MX_TIM4_Init+0xa8>)
 80013e6:	2253      	movs	r2, #83	; 0x53
 80013e8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ea:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <MX_TIM4_Init+0xa8>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255-1;
 80013f0:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <MX_TIM4_Init+0xa8>)
 80013f2:	22fe      	movs	r2, #254	; 0xfe
 80013f4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f6:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <MX_TIM4_Init+0xa8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fc:	4b19      	ldr	r3, [pc, #100]	; (8001464 <MX_TIM4_Init+0xa8>)
 80013fe:	2200      	movs	r2, #0
 8001400:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001402:	4818      	ldr	r0, [pc, #96]	; (8001464 <MX_TIM4_Init+0xa8>)
 8001404:	f002 fa5b 	bl	80038be <HAL_TIM_PWM_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800140e:	f7ff fdfb 	bl	8001008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001412:	2300      	movs	r3, #0
 8001414:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001416:	2300      	movs	r3, #0
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800141a:	f107 0320 	add.w	r3, r7, #32
 800141e:	4619      	mov	r1, r3
 8001420:	4810      	ldr	r0, [pc, #64]	; (8001464 <MX_TIM4_Init+0xa8>)
 8001422:	f002 ffa1 	bl	8004368 <HAL_TIMEx_MasterConfigSynchronization>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 800142c:	f7ff fdec 	bl	8001008 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001430:	2360      	movs	r3, #96	; 0x60
 8001432:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 255;
 8001434:	23ff      	movs	r3, #255	; 0xff
 8001436:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	2200      	movs	r2, #0
 8001444:	4619      	mov	r1, r3
 8001446:	4807      	ldr	r0, [pc, #28]	; (8001464 <MX_TIM4_Init+0xa8>)
 8001448:	f002 fb38 	bl	8003abc <HAL_TIM_PWM_ConfigChannel>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001452:	f7ff fdd9 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001456:	4803      	ldr	r0, [pc, #12]	; (8001464 <MX_TIM4_Init+0xa8>)
 8001458:	f000 f916 	bl	8001688 <HAL_TIM_MspPostInit>

}
 800145c:	bf00      	nop
 800145e:	3728      	adds	r7, #40	; 0x28
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000134 	.word	0x20000134
 8001468:	40000800 	.word	0x40000800

0800146c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a52      	ldr	r2, [pc, #328]	; (80015c4 <HAL_TIM_Base_MspInit+0x158>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d10e      	bne.n	800149c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	4b51      	ldr	r3, [pc, #324]	; (80015c8 <HAL_TIM_Base_MspInit+0x15c>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	4a50      	ldr	r2, [pc, #320]	; (80015c8 <HAL_TIM_Base_MspInit+0x15c>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6453      	str	r3, [r2, #68]	; 0x44
 800148e:	4b4e      	ldr	r3, [pc, #312]	; (80015c8 <HAL_TIM_Base_MspInit+0x15c>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	697b      	ldr	r3, [r7, #20]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800149a:	e08e      	b.n	80015ba <HAL_TIM_Base_MspInit+0x14e>
  else if(tim_baseHandle->Instance==TIM2)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014a4:	d10e      	bne.n	80014c4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	4b47      	ldr	r3, [pc, #284]	; (80015c8 <HAL_TIM_Base_MspInit+0x15c>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	4a46      	ldr	r2, [pc, #280]	; (80015c8 <HAL_TIM_Base_MspInit+0x15c>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6413      	str	r3, [r2, #64]	; 0x40
 80014b6:	4b44      	ldr	r3, [pc, #272]	; (80015c8 <HAL_TIM_Base_MspInit+0x15c>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]
}
 80014c2:	e07a      	b.n	80015ba <HAL_TIM_Base_MspInit+0x14e>
  else if(tim_baseHandle->Instance==TIM3)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a40      	ldr	r2, [pc, #256]	; (80015cc <HAL_TIM_Base_MspInit+0x160>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d175      	bne.n	80015ba <HAL_TIM_Base_MspInit+0x14e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b3d      	ldr	r3, [pc, #244]	; (80015c8 <HAL_TIM_Base_MspInit+0x15c>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	4a3c      	ldr	r2, [pc, #240]	; (80015c8 <HAL_TIM_Base_MspInit+0x15c>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	6413      	str	r3, [r2, #64]	; 0x40
 80014de:	4b3a      	ldr	r3, [pc, #232]	; (80015c8 <HAL_TIM_Base_MspInit+0x15c>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 80014ea:	4b39      	ldr	r3, [pc, #228]	; (80015d0 <HAL_TIM_Base_MspInit+0x164>)
 80014ec:	4a39      	ldr	r2, [pc, #228]	; (80015d4 <HAL_TIM_Base_MspInit+0x168>)
 80014ee:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 80014f0:	4b37      	ldr	r3, [pc, #220]	; (80015d0 <HAL_TIM_Base_MspInit+0x164>)
 80014f2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80014f6:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014f8:	4b35      	ldr	r3, [pc, #212]	; (80015d0 <HAL_TIM_Base_MspInit+0x164>)
 80014fa:	2240      	movs	r2, #64	; 0x40
 80014fc:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80014fe:	4b34      	ldr	r3, [pc, #208]	; (80015d0 <HAL_TIM_Base_MspInit+0x164>)
 8001500:	2200      	movs	r2, #0
 8001502:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001504:	4b32      	ldr	r3, [pc, #200]	; (80015d0 <HAL_TIM_Base_MspInit+0x164>)
 8001506:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800150a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800150c:	4b30      	ldr	r3, [pc, #192]	; (80015d0 <HAL_TIM_Base_MspInit+0x164>)
 800150e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001512:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001514:	4b2e      	ldr	r3, [pc, #184]	; (80015d0 <HAL_TIM_Base_MspInit+0x164>)
 8001516:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800151a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 800151c:	4b2c      	ldr	r3, [pc, #176]	; (80015d0 <HAL_TIM_Base_MspInit+0x164>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8001522:	4b2b      	ldr	r3, [pc, #172]	; (80015d0 <HAL_TIM_Base_MspInit+0x164>)
 8001524:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001528:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800152a:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <HAL_TIM_Base_MspInit+0x164>)
 800152c:	2200      	movs	r2, #0
 800152e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8001530:	4827      	ldr	r0, [pc, #156]	; (80015d0 <HAL_TIM_Base_MspInit+0x164>)
 8001532:	f000 ff4f 	bl	80023d4 <HAL_DMA_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <HAL_TIM_Base_MspInit+0xd4>
      Error_Handler();
 800153c:	f7ff fd64 	bl	8001008 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a23      	ldr	r2, [pc, #140]	; (80015d0 <HAL_TIM_Base_MspInit+0x164>)
 8001544:	629a      	str	r2, [r3, #40]	; 0x28
 8001546:	4a22      	ldr	r2, [pc, #136]	; (80015d0 <HAL_TIM_Base_MspInit+0x164>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 800154c:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <HAL_TIM_Base_MspInit+0x16c>)
 800154e:	4a23      	ldr	r2, [pc, #140]	; (80015dc <HAL_TIM_Base_MspInit+0x170>)
 8001550:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8001552:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <HAL_TIM_Base_MspInit+0x16c>)
 8001554:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001558:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800155a:	4b1f      	ldr	r3, [pc, #124]	; (80015d8 <HAL_TIM_Base_MspInit+0x16c>)
 800155c:	2240      	movs	r2, #64	; 0x40
 800155e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001560:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <HAL_TIM_Base_MspInit+0x16c>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001566:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <HAL_TIM_Base_MspInit+0x16c>)
 8001568:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800156c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <HAL_TIM_Base_MspInit+0x16c>)
 8001570:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001574:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001576:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <HAL_TIM_Base_MspInit+0x16c>)
 8001578:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800157c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 800157e:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <HAL_TIM_Base_MspInit+0x16c>)
 8001580:	2200      	movs	r2, #0
 8001582:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <HAL_TIM_Base_MspInit+0x16c>)
 8001586:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800158a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_TIM_Base_MspInit+0x16c>)
 800158e:	2200      	movs	r2, #0
 8001590:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001592:	4811      	ldr	r0, [pc, #68]	; (80015d8 <HAL_TIM_Base_MspInit+0x16c>)
 8001594:	f000 ff1e 	bl	80023d4 <HAL_DMA_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_TIM_Base_MspInit+0x136>
      Error_Handler();
 800159e:	f7ff fd33 	bl	8001008 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a0c      	ldr	r2, [pc, #48]	; (80015d8 <HAL_TIM_Base_MspInit+0x16c>)
 80015a6:	625a      	str	r2, [r3, #36]	; 0x24
 80015a8:	4a0b      	ldr	r2, [pc, #44]	; (80015d8 <HAL_TIM_Base_MspInit+0x16c>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a09      	ldr	r2, [pc, #36]	; (80015d8 <HAL_TIM_Base_MspInit+0x16c>)
 80015b2:	639a      	str	r2, [r3, #56]	; 0x38
 80015b4:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <HAL_TIM_Base_MspInit+0x16c>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80015ba:	bf00      	nop
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40010000 	.word	0x40010000
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40000400 	.word	0x40000400
 80015d0:	20000224 	.word	0x20000224
 80015d4:	40026088 	.word	0x40026088
 80015d8:	200001c4 	.word	0x200001c4
 80015dc:	40026070 	.word	0x40026070

080015e0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a22      	ldr	r2, [pc, #136]	; (8001678 <HAL_TIM_PWM_MspInit+0x98>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d13e      	bne.n	8001670 <HAL_TIM_PWM_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	4b21      	ldr	r3, [pc, #132]	; (800167c <HAL_TIM_PWM_MspInit+0x9c>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	4a20      	ldr	r2, [pc, #128]	; (800167c <HAL_TIM_PWM_MspInit+0x9c>)
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	6413      	str	r3, [r2, #64]	; 0x40
 8001602:	4b1e      	ldr	r3, [pc, #120]	; (800167c <HAL_TIM_PWM_MspInit+0x9c>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 800160e:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <HAL_TIM_PWM_MspInit+0xa0>)
 8001610:	4a1c      	ldr	r2, [pc, #112]	; (8001684 <HAL_TIM_PWM_MspInit+0xa4>)
 8001612:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8001614:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <HAL_TIM_PWM_MspInit+0xa0>)
 8001616:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800161a:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800161c:	4b18      	ldr	r3, [pc, #96]	; (8001680 <HAL_TIM_PWM_MspInit+0xa0>)
 800161e:	2240      	movs	r2, #64	; 0x40
 8001620:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001622:	4b17      	ldr	r3, [pc, #92]	; (8001680 <HAL_TIM_PWM_MspInit+0xa0>)
 8001624:	2200      	movs	r2, #0
 8001626:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001628:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_TIM_PWM_MspInit+0xa0>)
 800162a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800162e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001630:	4b13      	ldr	r3, [pc, #76]	; (8001680 <HAL_TIM_PWM_MspInit+0xa0>)
 8001632:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001636:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001638:	4b11      	ldr	r3, [pc, #68]	; (8001680 <HAL_TIM_PWM_MspInit+0xa0>)
 800163a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800163e:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <HAL_TIM_PWM_MspInit+0xa0>)
 8001642:	2200      	movs	r2, #0
 8001644:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <HAL_TIM_PWM_MspInit+0xa0>)
 8001648:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800164c:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800164e:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <HAL_TIM_PWM_MspInit+0xa0>)
 8001650:	2200      	movs	r2, #0
 8001652:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8001654:	480a      	ldr	r0, [pc, #40]	; (8001680 <HAL_TIM_PWM_MspInit+0xa0>)
 8001656:	f000 febd 	bl	80023d4 <HAL_DMA_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <HAL_TIM_PWM_MspInit+0x84>
    {
      Error_Handler();
 8001660:	f7ff fcd2 	bl	8001008 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a06      	ldr	r2, [pc, #24]	; (8001680 <HAL_TIM_PWM_MspInit+0xa0>)
 8001668:	625a      	str	r2, [r3, #36]	; 0x24
 800166a:	4a05      	ldr	r2, [pc, #20]	; (8001680 <HAL_TIM_PWM_MspInit+0xa0>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001670:	bf00      	nop
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40000800 	.word	0x40000800
 800167c:	40023800 	.word	0x40023800
 8001680:	20000314 	.word	0x20000314
 8001684:	40026010 	.word	0x40026010

08001688 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a33      	ldr	r2, [pc, #204]	; (8001774 <HAL_TIM_MspPostInit+0xec>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d13c      	bne.n	8001724 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	4b32      	ldr	r3, [pc, #200]	; (8001778 <HAL_TIM_MspPostInit+0xf0>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a31      	ldr	r2, [pc, #196]	; (8001778 <HAL_TIM_MspPostInit+0xf0>)
 80016b4:	f043 0304 	orr.w	r3, r3, #4
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b2f      	ldr	r3, [pc, #188]	; (8001778 <HAL_TIM_MspPostInit+0xf0>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0304 	and.w	r3, r3, #4
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <HAL_TIM_MspPostInit+0xf0>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a2a      	ldr	r2, [pc, #168]	; (8001778 <HAL_TIM_MspPostInit+0xf0>)
 80016d0:	f043 0302 	orr.w	r3, r3, #2
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b28      	ldr	r3, [pc, #160]	; (8001778 <HAL_TIM_MspPostInit+0xf0>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = LED_G_Pin;
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	2302      	movs	r3, #2
 80016e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016ea:	2302      	movs	r3, #2
 80016ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ee:	2302      	movs	r3, #2
 80016f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016f2:	2302      	movs	r3, #2
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 80016f6:	f107 0314 	add.w	r3, r7, #20
 80016fa:	4619      	mov	r1, r3
 80016fc:	481f      	ldr	r0, [pc, #124]	; (800177c <HAL_TIM_MspPostInit+0xf4>)
 80016fe:	f001 f953 	bl	80029a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_B_Pin;
 8001702:	2310      	movs	r3, #16
 8001704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	2302      	movs	r3, #2
 8001708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800170a:	2302      	movs	r3, #2
 800170c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800170e:	2302      	movs	r3, #2
 8001710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001712:	2302      	movs	r3, #2
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	4619      	mov	r1, r3
 800171c:	4818      	ldr	r0, [pc, #96]	; (8001780 <HAL_TIM_MspPostInit+0xf8>)
 800171e:	f001 f943 	bl	80029a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001722:	e022      	b.n	800176a <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM4)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a16      	ldr	r2, [pc, #88]	; (8001784 <HAL_TIM_MspPostInit+0xfc>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d11d      	bne.n	800176a <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <HAL_TIM_MspPostInit+0xf0>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a10      	ldr	r2, [pc, #64]	; (8001778 <HAL_TIM_MspPostInit+0xf0>)
 8001738:	f043 0302 	orr.w	r3, r3, #2
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <HAL_TIM_MspPostInit+0xf0>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LED_R_Pin;
 800174a:	2340      	movs	r3, #64	; 0x40
 800174c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001752:	2302      	movs	r3, #2
 8001754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001756:	2302      	movs	r3, #2
 8001758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800175a:	2302      	movs	r3, #2
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	4619      	mov	r1, r3
 8001764:	4806      	ldr	r0, [pc, #24]	; (8001780 <HAL_TIM_MspPostInit+0xf8>)
 8001766:	f001 f91f 	bl	80029a8 <HAL_GPIO_Init>
}
 800176a:	bf00      	nop
 800176c:	3728      	adds	r7, #40	; 0x28
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40000400 	.word	0x40000400
 8001778:	40023800 	.word	0x40023800
 800177c:	40020800 	.word	0x40020800
 8001780:	40020400 	.word	0x40020400
 8001784:	40000800 	.word	0x40000800

08001788 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <MX_USART2_UART_Init+0x4c>)
 800178e:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <MX_USART2_UART_Init+0x50>)
 8001790:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <MX_USART2_UART_Init+0x4c>)
 8001794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001798:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <MX_USART2_UART_Init+0x4c>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <MX_USART2_UART_Init+0x4c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <MX_USART2_UART_Init+0x4c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <MX_USART2_UART_Init+0x4c>)
 80017ae:	220c      	movs	r2, #12
 80017b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <MX_USART2_UART_Init+0x4c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <MX_USART2_UART_Init+0x4c>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017be:	4805      	ldr	r0, [pc, #20]	; (80017d4 <MX_USART2_UART_Init+0x4c>)
 80017c0:	f002 fe40 	bl	8004444 <HAL_UART_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017ca:	f7ff fc1d 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000374 	.word	0x20000374
 80017d8:	40004400 	.word	0x40004400

080017dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a19      	ldr	r2, [pc, #100]	; (8001860 <HAL_UART_MspInit+0x84>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d12b      	bne.n	8001856 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	4b18      	ldr	r3, [pc, #96]	; (8001864 <HAL_UART_MspInit+0x88>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	4a17      	ldr	r2, [pc, #92]	; (8001864 <HAL_UART_MspInit+0x88>)
 8001808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800180c:	6413      	str	r3, [r2, #64]	; 0x40
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <HAL_UART_MspInit+0x88>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	4b11      	ldr	r3, [pc, #68]	; (8001864 <HAL_UART_MspInit+0x88>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a10      	ldr	r2, [pc, #64]	; (8001864 <HAL_UART_MspInit+0x88>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <HAL_UART_MspInit+0x88>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001836:	230c      	movs	r3, #12
 8001838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2300      	movs	r3, #0
 8001844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001846:	2307      	movs	r3, #7
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	4805      	ldr	r0, [pc, #20]	; (8001868 <HAL_UART_MspInit+0x8c>)
 8001852:	f001 f8a9 	bl	80029a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001856:	bf00      	nop
 8001858:	3728      	adds	r7, #40	; 0x28
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40004400 	.word	0x40004400
 8001864:	40023800 	.word	0x40023800
 8001868:	40020000 	.word	0x40020000

0800186c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800186c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001870:	480d      	ldr	r0, [pc, #52]	; (80018a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001872:	490e      	ldr	r1, [pc, #56]	; (80018ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001874:	4a0e      	ldr	r2, [pc, #56]	; (80018b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001878:	e002      	b.n	8001880 <LoopCopyDataInit>

0800187a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800187c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187e:	3304      	adds	r3, #4

08001880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001884:	d3f9      	bcc.n	800187a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001886:	4a0b      	ldr	r2, [pc, #44]	; (80018b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001888:	4c0b      	ldr	r4, [pc, #44]	; (80018b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800188c:	e001      	b.n	8001892 <LoopFillZerobss>

0800188e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001890:	3204      	adds	r2, #4

08001892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001894:	d3fb      	bcc.n	800188e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001896:	f7ff fc63 	bl	8001160 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800189a:	f003 f8ef 	bl	8004a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800189e:	f7ff fa5b 	bl	8000d58 <main>
  bx  lr    
 80018a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80018a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018ac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80018b0:	080053c4 	.word	0x080053c4
  ldr r2, =_sbss
 80018b4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80018b8:	200003cc 	.word	0x200003cc

080018bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018bc:	e7fe      	b.n	80018bc <ADC_IRQHandler>
	...

080018c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018c4:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <HAL_Init+0x40>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a0d      	ldr	r2, [pc, #52]	; (8001900 <HAL_Init+0x40>)
 80018ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_Init+0x40>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <HAL_Init+0x40>)
 80018d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <HAL_Init+0x40>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a07      	ldr	r2, [pc, #28]	; (8001900 <HAL_Init+0x40>)
 80018e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e8:	2003      	movs	r0, #3
 80018ea:	f000 fd31 	bl	8002350 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ee:	2000      	movs	r0, #0
 80018f0:	f000 f808 	bl	8001904 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f4:	f7ff fb8e 	bl	8001014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40023c00 	.word	0x40023c00

08001904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_InitTick+0x54>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4b12      	ldr	r3, [pc, #72]	; (800195c <HAL_InitTick+0x58>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	4619      	mov	r1, r3
 8001916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191a:	fbb3 f3f1 	udiv	r3, r3, r1
 800191e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001922:	4618      	mov	r0, r3
 8001924:	f000 fd49 	bl	80023ba <HAL_SYSTICK_Config>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e00e      	b.n	8001950 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b0f      	cmp	r3, #15
 8001936:	d80a      	bhi.n	800194e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001938:	2200      	movs	r2, #0
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	f04f 30ff 	mov.w	r0, #4294967295
 8001940:	f000 fd11 	bl	8002366 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001944:	4a06      	ldr	r2, [pc, #24]	; (8001960 <HAL_InitTick+0x5c>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800194a:	2300      	movs	r3, #0
 800194c:	e000      	b.n	8001950 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
}
 8001950:	4618      	mov	r0, r3
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20000000 	.word	0x20000000
 800195c:	20000008 	.word	0x20000008
 8001960:	20000004 	.word	0x20000004

08001964 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_IncTick+0x20>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	461a      	mov	r2, r3
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_IncTick+0x24>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4413      	add	r3, r2
 8001974:	4a04      	ldr	r2, [pc, #16]	; (8001988 <HAL_IncTick+0x24>)
 8001976:	6013      	str	r3, [r2, #0]
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20000008 	.word	0x20000008
 8001988:	200003b8 	.word	0x200003b8

0800198c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return uwTick;
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <HAL_GetTick+0x14>)
 8001992:	681b      	ldr	r3, [r3, #0]
}
 8001994:	4618      	mov	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	200003b8 	.word	0x200003b8

080019a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019ac:	f7ff ffee 	bl	800198c <HAL_GetTick>
 80019b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019bc:	d005      	beq.n	80019ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_Delay+0x44>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	461a      	mov	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4413      	add	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ca:	bf00      	nop
 80019cc:	f7ff ffde 	bl	800198c <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d8f7      	bhi.n	80019cc <HAL_Delay+0x28>
  {
  }
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000008 	.word	0x20000008

080019ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019f4:	2300      	movs	r3, #0
 80019f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e033      	b.n	8001a6a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d109      	bne.n	8001a1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7fe fe40 	bl	8000690 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	f003 0310 	and.w	r3, r3, #16
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d118      	bne.n	8001a5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a32:	f023 0302 	bic.w	r3, r3, #2
 8001a36:	f043 0202 	orr.w	r2, r3, #2
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 faba 	bl	8001fb8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f023 0303 	bic.w	r3, r3, #3
 8001a52:	f043 0201 	orr.w	r2, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	641a      	str	r2, [r3, #64]	; 0x40
 8001a5a:	e001      	b.n	8001a60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d101      	bne.n	8001a8e <HAL_ADC_Start+0x1a>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e097      	b.n	8001bbe <HAL_ADC_Start+0x14a>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d018      	beq.n	8001ad6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 0201 	orr.w	r2, r2, #1
 8001ab2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ab4:	4b45      	ldr	r3, [pc, #276]	; (8001bcc <HAL_ADC_Start+0x158>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a45      	ldr	r2, [pc, #276]	; (8001bd0 <HAL_ADC_Start+0x15c>)
 8001aba:	fba2 2303 	umull	r2, r3, r2, r3
 8001abe:	0c9a      	lsrs	r2, r3, #18
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	4413      	add	r3, r2
 8001ac6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ac8:	e002      	b.n	8001ad0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f9      	bne.n	8001aca <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d15f      	bne.n	8001ba4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001aec:	f023 0301 	bic.w	r3, r3, #1
 8001af0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d007      	beq.n	8001b16 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b0e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b22:	d106      	bne.n	8001b32 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b28:	f023 0206 	bic.w	r2, r3, #6
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	645a      	str	r2, [r3, #68]	; 0x44
 8001b30:	e002      	b.n	8001b38 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b40:	4b24      	ldr	r3, [pc, #144]	; (8001bd4 <HAL_ADC_Start+0x160>)
 8001b42:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b4c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 031f 	and.w	r3, r3, #31
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10f      	bne.n	8001b7a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d129      	bne.n	8001bbc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	e020      	b.n	8001bbc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a16      	ldr	r2, [pc, #88]	; (8001bd8 <HAL_ADC_Start+0x164>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d11b      	bne.n	8001bbc <HAL_ADC_Start+0x148>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d114      	bne.n	8001bbc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	e00b      	b.n	8001bbc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	f043 0210 	orr.w	r2, r3, #16
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb4:	f043 0201 	orr.w	r2, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	431bde83 	.word	0x431bde83
 8001bd4:	40012300 	.word	0x40012300
 8001bd8:	40012000 	.word	0x40012000

08001bdc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d101      	bne.n	8001bf2 <HAL_ADC_Stop+0x16>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e021      	b.n	8001c36 <HAL_ADC_Stop+0x5a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0201 	bic.w	r2, r2, #1
 8001c08:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d109      	bne.n	8001c2c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c20:	f023 0301 	bic.w	r3, r3, #1
 8001c24:	f043 0201 	orr.w	r2, r3, #1
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b084      	sub	sp, #16
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c5e:	d113      	bne.n	8001c88 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c6e:	d10b      	bne.n	8001c88 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c74:	f043 0220 	orr.w	r2, r3, #32
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e063      	b.n	8001d50 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001c88:	f7ff fe80 	bl	800198c <HAL_GetTick>
 8001c8c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c8e:	e021      	b.n	8001cd4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c96:	d01d      	beq.n	8001cd4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d007      	beq.n	8001cae <HAL_ADC_PollForConversion+0x6c>
 8001c9e:	f7ff fe75 	bl	800198c <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d212      	bcs.n	8001cd4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d00b      	beq.n	8001cd4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	f043 0204 	orr.w	r2, r3, #4
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e03d      	b.n	8001d50 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d1d6      	bne.n	8001c90 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f06f 0212 	mvn.w	r2, #18
 8001cea:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d123      	bne.n	8001d4e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d11f      	bne.n	8001d4e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d14:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d006      	beq.n	8001d2a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d111      	bne.n	8001d4e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d105      	bne.n	8001d4e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f043 0201 	orr.w	r2, r3, #1
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x1c>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e105      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x228>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b09      	cmp	r3, #9
 8001d9e:	d925      	bls.n	8001dec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68d9      	ldr	r1, [r3, #12]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	461a      	mov	r2, r3
 8001dae:	4613      	mov	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4413      	add	r3, r2
 8001db4:	3b1e      	subs	r3, #30
 8001db6:	2207      	movs	r2, #7
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43da      	mvns	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	400a      	ands	r2, r1
 8001dc4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68d9      	ldr	r1, [r3, #12]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	4603      	mov	r3, r0
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	4403      	add	r3, r0
 8001dde:	3b1e      	subs	r3, #30
 8001de0:	409a      	lsls	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	e022      	b.n	8001e32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6919      	ldr	r1, [r3, #16]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	4413      	add	r3, r2
 8001e00:	2207      	movs	r2, #7
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43da      	mvns	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	400a      	ands	r2, r1
 8001e0e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6919      	ldr	r1, [r3, #16]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	4618      	mov	r0, r3
 8001e22:	4603      	mov	r3, r0
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4403      	add	r3, r0
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b06      	cmp	r3, #6
 8001e38:	d824      	bhi.n	8001e84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	3b05      	subs	r3, #5
 8001e4c:	221f      	movs	r2, #31
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43da      	mvns	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	400a      	ands	r2, r1
 8001e5a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	4618      	mov	r0, r3
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	3b05      	subs	r3, #5
 8001e76:	fa00 f203 	lsl.w	r2, r0, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	635a      	str	r2, [r3, #52]	; 0x34
 8001e82:	e04c      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b0c      	cmp	r3, #12
 8001e8a:	d824      	bhi.n	8001ed6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3b23      	subs	r3, #35	; 0x23
 8001e9e:	221f      	movs	r2, #31
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43da      	mvns	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	400a      	ands	r2, r1
 8001eac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	4618      	mov	r0, r3
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	3b23      	subs	r3, #35	; 0x23
 8001ec8:	fa00 f203 	lsl.w	r2, r0, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ed4:	e023      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3b41      	subs	r3, #65	; 0x41
 8001ee8:	221f      	movs	r2, #31
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43da      	mvns	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	400a      	ands	r2, r1
 8001ef6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	4618      	mov	r0, r3
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	3b41      	subs	r3, #65	; 0x41
 8001f12:	fa00 f203 	lsl.w	r2, r0, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f1e:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <HAL_ADC_ConfigChannel+0x234>)
 8001f20:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a21      	ldr	r2, [pc, #132]	; (8001fac <HAL_ADC_ConfigChannel+0x238>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d109      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x1cc>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b12      	cmp	r3, #18
 8001f32:	d105      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a19      	ldr	r2, [pc, #100]	; (8001fac <HAL_ADC_ConfigChannel+0x238>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d123      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x21e>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2b10      	cmp	r3, #16
 8001f50:	d003      	beq.n	8001f5a <HAL_ADC_ConfigChannel+0x1e6>
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b11      	cmp	r3, #17
 8001f58:	d11b      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2b10      	cmp	r3, #16
 8001f6c:	d111      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f6e:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <HAL_ADC_ConfigChannel+0x23c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a10      	ldr	r2, [pc, #64]	; (8001fb4 <HAL_ADC_ConfigChannel+0x240>)
 8001f74:	fba2 2303 	umull	r2, r3, r2, r3
 8001f78:	0c9a      	lsrs	r2, r3, #18
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f84:	e002      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f9      	bne.n	8001f86 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	40012300 	.word	0x40012300
 8001fac:	40012000 	.word	0x40012000
 8001fb0:	20000000 	.word	0x20000000
 8001fb4:	431bde83 	.word	0x431bde83

08001fb8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fc0:	4b79      	ldr	r3, [pc, #484]	; (80021a8 <ADC_Init+0x1f0>)
 8001fc2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6859      	ldr	r1, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	021a      	lsls	r2, r3, #8
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002010:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6859      	ldr	r1, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002032:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6899      	ldr	r1, [r3, #8]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204a:	4a58      	ldr	r2, [pc, #352]	; (80021ac <ADC_Init+0x1f4>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d022      	beq.n	8002096 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800205e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6899      	ldr	r1, [r3, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002080:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6899      	ldr	r1, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	e00f      	b.n	80020b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 0202 	bic.w	r2, r2, #2
 80020c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6899      	ldr	r1, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	7e1b      	ldrb	r3, [r3, #24]
 80020d0:	005a      	lsls	r2, r3, #1
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d01b      	beq.n	800211c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002102:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6859      	ldr	r1, [r3, #4]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210e:	3b01      	subs	r3, #1
 8002110:	035a      	lsls	r2, r3, #13
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	e007      	b.n	800212c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800212a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800213a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	3b01      	subs	r3, #1
 8002148:	051a      	lsls	r2, r3, #20
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	430a      	orrs	r2, r1
 8002150:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002160:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6899      	ldr	r1, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800216e:	025a      	lsls	r2, r3, #9
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002186:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6899      	ldr	r1, [r3, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	029a      	lsls	r2, r3, #10
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	609a      	str	r2, [r3, #8]
}
 800219c:	bf00      	nop
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	40012300 	.word	0x40012300
 80021ac:	0f000001 	.word	0x0f000001

080021b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <__NVIC_SetPriorityGrouping+0x44>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021cc:	4013      	ands	r3, r2
 80021ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021e2:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <__NVIC_SetPriorityGrouping+0x44>)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	60d3      	str	r3, [r2, #12]
}
 80021e8:	bf00      	nop
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021fc:	4b04      	ldr	r3, [pc, #16]	; (8002210 <__NVIC_GetPriorityGrouping+0x18>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	0a1b      	lsrs	r3, r3, #8
 8002202:	f003 0307 	and.w	r3, r3, #7
}
 8002206:	4618      	mov	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	2b00      	cmp	r3, #0
 8002224:	db0b      	blt.n	800223e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	f003 021f 	and.w	r2, r3, #31
 800222c:	4907      	ldr	r1, [pc, #28]	; (800224c <__NVIC_EnableIRQ+0x38>)
 800222e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002232:	095b      	lsrs	r3, r3, #5
 8002234:	2001      	movs	r0, #1
 8002236:	fa00 f202 	lsl.w	r2, r0, r2
 800223a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	e000e100 	.word	0xe000e100

08002250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	6039      	str	r1, [r7, #0]
 800225a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800225c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002260:	2b00      	cmp	r3, #0
 8002262:	db0a      	blt.n	800227a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	b2da      	uxtb	r2, r3
 8002268:	490c      	ldr	r1, [pc, #48]	; (800229c <__NVIC_SetPriority+0x4c>)
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	0112      	lsls	r2, r2, #4
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	440b      	add	r3, r1
 8002274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002278:	e00a      	b.n	8002290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	b2da      	uxtb	r2, r3
 800227e:	4908      	ldr	r1, [pc, #32]	; (80022a0 <__NVIC_SetPriority+0x50>)
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	3b04      	subs	r3, #4
 8002288:	0112      	lsls	r2, r2, #4
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	440b      	add	r3, r1
 800228e:	761a      	strb	r2, [r3, #24]
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	e000e100 	.word	0xe000e100
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b089      	sub	sp, #36	; 0x24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f1c3 0307 	rsb	r3, r3, #7
 80022be:	2b04      	cmp	r3, #4
 80022c0:	bf28      	it	cs
 80022c2:	2304      	movcs	r3, #4
 80022c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3304      	adds	r3, #4
 80022ca:	2b06      	cmp	r3, #6
 80022cc:	d902      	bls.n	80022d4 <NVIC_EncodePriority+0x30>
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3b03      	subs	r3, #3
 80022d2:	e000      	b.n	80022d6 <NVIC_EncodePriority+0x32>
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d8:	f04f 32ff 	mov.w	r2, #4294967295
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43da      	mvns	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	401a      	ands	r2, r3
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022ec:	f04f 31ff 	mov.w	r1, #4294967295
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	fa01 f303 	lsl.w	r3, r1, r3
 80022f6:	43d9      	mvns	r1, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022fc:	4313      	orrs	r3, r2
         );
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3724      	adds	r7, #36	; 0x24
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
	...

0800230c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3b01      	subs	r3, #1
 8002318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800231c:	d301      	bcc.n	8002322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800231e:	2301      	movs	r3, #1
 8002320:	e00f      	b.n	8002342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002322:	4a0a      	ldr	r2, [pc, #40]	; (800234c <SysTick_Config+0x40>)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3b01      	subs	r3, #1
 8002328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800232a:	210f      	movs	r1, #15
 800232c:	f04f 30ff 	mov.w	r0, #4294967295
 8002330:	f7ff ff8e 	bl	8002250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002334:	4b05      	ldr	r3, [pc, #20]	; (800234c <SysTick_Config+0x40>)
 8002336:	2200      	movs	r2, #0
 8002338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800233a:	4b04      	ldr	r3, [pc, #16]	; (800234c <SysTick_Config+0x40>)
 800233c:	2207      	movs	r2, #7
 800233e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	e000e010 	.word	0xe000e010

08002350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7ff ff29 	bl	80021b0 <__NVIC_SetPriorityGrouping>
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002366:	b580      	push	{r7, lr}
 8002368:	b086      	sub	sp, #24
 800236a:	af00      	add	r7, sp, #0
 800236c:	4603      	mov	r3, r0
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
 8002372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002378:	f7ff ff3e 	bl	80021f8 <__NVIC_GetPriorityGrouping>
 800237c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	6978      	ldr	r0, [r7, #20]
 8002384:	f7ff ff8e 	bl	80022a4 <NVIC_EncodePriority>
 8002388:	4602      	mov	r2, r0
 800238a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800238e:	4611      	mov	r1, r2
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff5d 	bl	8002250 <__NVIC_SetPriority>
}
 8002396:	bf00      	nop
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	4603      	mov	r3, r0
 80023a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff ff31 	bl	8002214 <__NVIC_EnableIRQ>
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff ffa2 	bl	800230c <SysTick_Config>
 80023c8:	4603      	mov	r3, r0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023e0:	f7ff fad4 	bl	800198c <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e099      	b.n	8002524 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2202      	movs	r2, #2
 80023f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0201 	bic.w	r2, r2, #1
 800240e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002410:	e00f      	b.n	8002432 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002412:	f7ff fabb 	bl	800198c <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b05      	cmp	r3, #5
 800241e:	d908      	bls.n	8002432 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2220      	movs	r2, #32
 8002424:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2203      	movs	r2, #3
 800242a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e078      	b.n	8002524 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1e8      	bne.n	8002412 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	4b38      	ldr	r3, [pc, #224]	; (800252c <HAL_DMA_Init+0x158>)
 800244c:	4013      	ands	r3, r2
 800244e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800245e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800246a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002476:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	4313      	orrs	r3, r2
 8002482:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	2b04      	cmp	r3, #4
 800248a:	d107      	bne.n	800249c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	4313      	orrs	r3, r2
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	4313      	orrs	r3, r2
 800249a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	f023 0307 	bic.w	r3, r3, #7
 80024b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d117      	bne.n	80024f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00e      	beq.n	80024f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f9e9 	bl	80028b0 <DMA_CheckFifoParam>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d008      	beq.n	80024f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2240      	movs	r2, #64	; 0x40
 80024e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024f2:	2301      	movs	r3, #1
 80024f4:	e016      	b.n	8002524 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f9a0 	bl	8002844 <DMA_CalcBaseAndBitshift>
 8002504:	4603      	mov	r3, r0
 8002506:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250c:	223f      	movs	r2, #63	; 0x3f
 800250e:	409a      	lsls	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	f010803f 	.word	0xf010803f

08002530 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800253c:	4b92      	ldr	r3, [pc, #584]	; (8002788 <HAL_DMA_IRQHandler+0x258>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a92      	ldr	r2, [pc, #584]	; (800278c <HAL_DMA_IRQHandler+0x25c>)
 8002542:	fba2 2303 	umull	r2, r3, r2, r3
 8002546:	0a9b      	lsrs	r3, r3, #10
 8002548:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255a:	2208      	movs	r2, #8
 800255c:	409a      	lsls	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4013      	ands	r3, r2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d01a      	beq.n	800259c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	d013      	beq.n	800259c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0204 	bic.w	r2, r2, #4
 8002582:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002588:	2208      	movs	r2, #8
 800258a:	409a      	lsls	r2, r3
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002594:	f043 0201 	orr.w	r2, r3, #1
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a0:	2201      	movs	r2, #1
 80025a2:	409a      	lsls	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4013      	ands	r3, r2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d012      	beq.n	80025d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00b      	beq.n	80025d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025be:	2201      	movs	r2, #1
 80025c0:	409a      	lsls	r2, r3
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ca:	f043 0202 	orr.w	r2, r3, #2
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d6:	2204      	movs	r2, #4
 80025d8:	409a      	lsls	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	4013      	ands	r3, r2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d012      	beq.n	8002608 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00b      	beq.n	8002608 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f4:	2204      	movs	r2, #4
 80025f6:	409a      	lsls	r2, r3
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002600:	f043 0204 	orr.w	r2, r3, #4
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260c:	2210      	movs	r2, #16
 800260e:	409a      	lsls	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4013      	ands	r3, r2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d043      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d03c      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262a:	2210      	movs	r2, #16
 800262c:	409a      	lsls	r2, r3
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d018      	beq.n	8002672 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d108      	bne.n	8002660 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	2b00      	cmp	r3, #0
 8002654:	d024      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	4798      	blx	r3
 800265e:	e01f      	b.n	80026a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002664:	2b00      	cmp	r3, #0
 8002666:	d01b      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	4798      	blx	r3
 8002670:	e016      	b.n	80026a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267c:	2b00      	cmp	r3, #0
 800267e:	d107      	bne.n	8002690 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0208 	bic.w	r2, r2, #8
 800268e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a4:	2220      	movs	r2, #32
 80026a6:	409a      	lsls	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4013      	ands	r3, r2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 808e 	beq.w	80027ce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 8086 	beq.w	80027ce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c6:	2220      	movs	r2, #32
 80026c8:	409a      	lsls	r2, r3
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b05      	cmp	r3, #5
 80026d8:	d136      	bne.n	8002748 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0216 	bic.w	r2, r2, #22
 80026e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	695a      	ldr	r2, [r3, #20]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d103      	bne.n	800270a <HAL_DMA_IRQHandler+0x1da>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002706:	2b00      	cmp	r3, #0
 8002708:	d007      	beq.n	800271a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0208 	bic.w	r2, r2, #8
 8002718:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271e:	223f      	movs	r2, #63	; 0x3f
 8002720:	409a      	lsls	r2, r3
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800273a:	2b00      	cmp	r3, #0
 800273c:	d07d      	beq.n	800283a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	4798      	blx	r3
        }
        return;
 8002746:	e078      	b.n	800283a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d01c      	beq.n	8002790 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d108      	bne.n	8002776 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002768:	2b00      	cmp	r3, #0
 800276a:	d030      	beq.n	80027ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	4798      	blx	r3
 8002774:	e02b      	b.n	80027ce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277a:	2b00      	cmp	r3, #0
 800277c:	d027      	beq.n	80027ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	4798      	blx	r3
 8002786:	e022      	b.n	80027ce <HAL_DMA_IRQHandler+0x29e>
 8002788:	20000000 	.word	0x20000000
 800278c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10f      	bne.n	80027be <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0210 	bic.w	r2, r2, #16
 80027ac:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d032      	beq.n	800283c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d022      	beq.n	8002828 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2205      	movs	r2, #5
 80027e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0201 	bic.w	r2, r2, #1
 80027f8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	3301      	adds	r3, #1
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	429a      	cmp	r2, r3
 8002804:	d307      	bcc.n	8002816 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1f2      	bne.n	80027fa <HAL_DMA_IRQHandler+0x2ca>
 8002814:	e000      	b.n	8002818 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002816:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	4798      	blx	r3
 8002838:	e000      	b.n	800283c <HAL_DMA_IRQHandler+0x30c>
        return;
 800283a:	bf00      	nop
    }
  }
}
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop

08002844 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	3b10      	subs	r3, #16
 8002854:	4a14      	ldr	r2, [pc, #80]	; (80028a8 <DMA_CalcBaseAndBitshift+0x64>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	091b      	lsrs	r3, r3, #4
 800285c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800285e:	4a13      	ldr	r2, [pc, #76]	; (80028ac <DMA_CalcBaseAndBitshift+0x68>)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4413      	add	r3, r2
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	461a      	mov	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2b03      	cmp	r3, #3
 8002870:	d909      	bls.n	8002886 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800287a:	f023 0303 	bic.w	r3, r3, #3
 800287e:	1d1a      	adds	r2, r3, #4
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	659a      	str	r2, [r3, #88]	; 0x58
 8002884:	e007      	b.n	8002896 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800288e:	f023 0303 	bic.w	r3, r3, #3
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800289a:	4618      	mov	r0, r3
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	aaaaaaab 	.word	0xaaaaaaab
 80028ac:	08005378 	.word	0x08005378

080028b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028b8:	2300      	movs	r3, #0
 80028ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d11f      	bne.n	800290a <DMA_CheckFifoParam+0x5a>
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d856      	bhi.n	800297e <DMA_CheckFifoParam+0xce>
 80028d0:	a201      	add	r2, pc, #4	; (adr r2, 80028d8 <DMA_CheckFifoParam+0x28>)
 80028d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d6:	bf00      	nop
 80028d8:	080028e9 	.word	0x080028e9
 80028dc:	080028fb 	.word	0x080028fb
 80028e0:	080028e9 	.word	0x080028e9
 80028e4:	0800297f 	.word	0x0800297f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d046      	beq.n	8002982 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028f8:	e043      	b.n	8002982 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002902:	d140      	bne.n	8002986 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002908:	e03d      	b.n	8002986 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002912:	d121      	bne.n	8002958 <DMA_CheckFifoParam+0xa8>
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2b03      	cmp	r3, #3
 8002918:	d837      	bhi.n	800298a <DMA_CheckFifoParam+0xda>
 800291a:	a201      	add	r2, pc, #4	; (adr r2, 8002920 <DMA_CheckFifoParam+0x70>)
 800291c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002920:	08002931 	.word	0x08002931
 8002924:	08002937 	.word	0x08002937
 8002928:	08002931 	.word	0x08002931
 800292c:	08002949 	.word	0x08002949
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	73fb      	strb	r3, [r7, #15]
      break;
 8002934:	e030      	b.n	8002998 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d025      	beq.n	800298e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002946:	e022      	b.n	800298e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002950:	d11f      	bne.n	8002992 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002956:	e01c      	b.n	8002992 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d903      	bls.n	8002966 <DMA_CheckFifoParam+0xb6>
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2b03      	cmp	r3, #3
 8002962:	d003      	beq.n	800296c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002964:	e018      	b.n	8002998 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	73fb      	strb	r3, [r7, #15]
      break;
 800296a:	e015      	b.n	8002998 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00e      	beq.n	8002996 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	73fb      	strb	r3, [r7, #15]
      break;
 800297c:	e00b      	b.n	8002996 <DMA_CheckFifoParam+0xe6>
      break;
 800297e:	bf00      	nop
 8002980:	e00a      	b.n	8002998 <DMA_CheckFifoParam+0xe8>
      break;
 8002982:	bf00      	nop
 8002984:	e008      	b.n	8002998 <DMA_CheckFifoParam+0xe8>
      break;
 8002986:	bf00      	nop
 8002988:	e006      	b.n	8002998 <DMA_CheckFifoParam+0xe8>
      break;
 800298a:	bf00      	nop
 800298c:	e004      	b.n	8002998 <DMA_CheckFifoParam+0xe8>
      break;
 800298e:	bf00      	nop
 8002990:	e002      	b.n	8002998 <DMA_CheckFifoParam+0xe8>
      break;   
 8002992:	bf00      	nop
 8002994:	e000      	b.n	8002998 <DMA_CheckFifoParam+0xe8>
      break;
 8002996:	bf00      	nop
    }
  } 
  
  return status; 
 8002998:	7bfb      	ldrb	r3, [r7, #15]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop

080029a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b089      	sub	sp, #36	; 0x24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029be:	2300      	movs	r3, #0
 80029c0:	61fb      	str	r3, [r7, #28]
 80029c2:	e159      	b.n	8002c78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029c4:	2201      	movs	r2, #1
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	4013      	ands	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	429a      	cmp	r2, r3
 80029de:	f040 8148 	bne.w	8002c72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d005      	beq.n	80029fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d130      	bne.n	8002a5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	2203      	movs	r2, #3
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a30:	2201      	movs	r2, #1
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	091b      	lsrs	r3, r3, #4
 8002a46:	f003 0201 	and.w	r2, r3, #1
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 0303 	and.w	r3, r3, #3
 8002a64:	2b03      	cmp	r3, #3
 8002a66:	d017      	beq.n	8002a98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	2203      	movs	r2, #3
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 0303 	and.w	r3, r3, #3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d123      	bne.n	8002aec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	08da      	lsrs	r2, r3, #3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3208      	adds	r2, #8
 8002aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	220f      	movs	r2, #15
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	691a      	ldr	r2, [r3, #16]
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	08da      	lsrs	r2, r3, #3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	3208      	adds	r2, #8
 8002ae6:	69b9      	ldr	r1, [r7, #24]
 8002ae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	2203      	movs	r2, #3
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 0203 	and.w	r2, r3, #3
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 80a2 	beq.w	8002c72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	4b57      	ldr	r3, [pc, #348]	; (8002c90 <HAL_GPIO_Init+0x2e8>)
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	4a56      	ldr	r2, [pc, #344]	; (8002c90 <HAL_GPIO_Init+0x2e8>)
 8002b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b3e:	4b54      	ldr	r3, [pc, #336]	; (8002c90 <HAL_GPIO_Init+0x2e8>)
 8002b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b4a:	4a52      	ldr	r2, [pc, #328]	; (8002c94 <HAL_GPIO_Init+0x2ec>)
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	089b      	lsrs	r3, r3, #2
 8002b50:	3302      	adds	r3, #2
 8002b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	220f      	movs	r2, #15
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	43db      	mvns	r3, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a49      	ldr	r2, [pc, #292]	; (8002c98 <HAL_GPIO_Init+0x2f0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d019      	beq.n	8002baa <HAL_GPIO_Init+0x202>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a48      	ldr	r2, [pc, #288]	; (8002c9c <HAL_GPIO_Init+0x2f4>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d013      	beq.n	8002ba6 <HAL_GPIO_Init+0x1fe>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a47      	ldr	r2, [pc, #284]	; (8002ca0 <HAL_GPIO_Init+0x2f8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d00d      	beq.n	8002ba2 <HAL_GPIO_Init+0x1fa>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a46      	ldr	r2, [pc, #280]	; (8002ca4 <HAL_GPIO_Init+0x2fc>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d007      	beq.n	8002b9e <HAL_GPIO_Init+0x1f6>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a45      	ldr	r2, [pc, #276]	; (8002ca8 <HAL_GPIO_Init+0x300>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d101      	bne.n	8002b9a <HAL_GPIO_Init+0x1f2>
 8002b96:	2304      	movs	r3, #4
 8002b98:	e008      	b.n	8002bac <HAL_GPIO_Init+0x204>
 8002b9a:	2307      	movs	r3, #7
 8002b9c:	e006      	b.n	8002bac <HAL_GPIO_Init+0x204>
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e004      	b.n	8002bac <HAL_GPIO_Init+0x204>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e002      	b.n	8002bac <HAL_GPIO_Init+0x204>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <HAL_GPIO_Init+0x204>
 8002baa:	2300      	movs	r3, #0
 8002bac:	69fa      	ldr	r2, [r7, #28]
 8002bae:	f002 0203 	and.w	r2, r2, #3
 8002bb2:	0092      	lsls	r2, r2, #2
 8002bb4:	4093      	lsls	r3, r2
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bbc:	4935      	ldr	r1, [pc, #212]	; (8002c94 <HAL_GPIO_Init+0x2ec>)
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	089b      	lsrs	r3, r3, #2
 8002bc2:	3302      	adds	r3, #2
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bca:	4b38      	ldr	r3, [pc, #224]	; (8002cac <HAL_GPIO_Init+0x304>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bee:	4a2f      	ldr	r2, [pc, #188]	; (8002cac <HAL_GPIO_Init+0x304>)
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002bf4:	4b2d      	ldr	r3, [pc, #180]	; (8002cac <HAL_GPIO_Init+0x304>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4013      	ands	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c18:	4a24      	ldr	r2, [pc, #144]	; (8002cac <HAL_GPIO_Init+0x304>)
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c1e:	4b23      	ldr	r3, [pc, #140]	; (8002cac <HAL_GPIO_Init+0x304>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	43db      	mvns	r3, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c42:	4a1a      	ldr	r2, [pc, #104]	; (8002cac <HAL_GPIO_Init+0x304>)
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c48:	4b18      	ldr	r3, [pc, #96]	; (8002cac <HAL_GPIO_Init+0x304>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c6c:	4a0f      	ldr	r2, [pc, #60]	; (8002cac <HAL_GPIO_Init+0x304>)
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	3301      	adds	r3, #1
 8002c76:	61fb      	str	r3, [r7, #28]
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	2b0f      	cmp	r3, #15
 8002c7c:	f67f aea2 	bls.w	80029c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop
 8002c84:	3724      	adds	r7, #36	; 0x24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	40023800 	.word	0x40023800
 8002c94:	40013800 	.word	0x40013800
 8002c98:	40020000 	.word	0x40020000
 8002c9c:	40020400 	.word	0x40020400
 8002ca0:	40020800 	.word	0x40020800
 8002ca4:	40020c00 	.word	0x40020c00
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40013c00 	.word	0x40013c00

08002cb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e12b      	b.n	8002f1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d106      	bne.n	8002cdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fd fff6 	bl	8000cc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2224      	movs	r2, #36	; 0x24
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0201 	bic.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d14:	f000 fd5c 	bl	80037d0 <HAL_RCC_GetPCLK1Freq>
 8002d18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	4a81      	ldr	r2, [pc, #516]	; (8002f24 <HAL_I2C_Init+0x274>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d807      	bhi.n	8002d34 <HAL_I2C_Init+0x84>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4a80      	ldr	r2, [pc, #512]	; (8002f28 <HAL_I2C_Init+0x278>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	bf94      	ite	ls
 8002d2c:	2301      	movls	r3, #1
 8002d2e:	2300      	movhi	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	e006      	b.n	8002d42 <HAL_I2C_Init+0x92>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4a7d      	ldr	r2, [pc, #500]	; (8002f2c <HAL_I2C_Init+0x27c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	bf94      	ite	ls
 8002d3c:	2301      	movls	r3, #1
 8002d3e:	2300      	movhi	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e0e7      	b.n	8002f1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4a78      	ldr	r2, [pc, #480]	; (8002f30 <HAL_I2C_Init+0x280>)
 8002d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d52:	0c9b      	lsrs	r3, r3, #18
 8002d54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	4a6a      	ldr	r2, [pc, #424]	; (8002f24 <HAL_I2C_Init+0x274>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d802      	bhi.n	8002d84 <HAL_I2C_Init+0xd4>
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	3301      	adds	r3, #1
 8002d82:	e009      	b.n	8002d98 <HAL_I2C_Init+0xe8>
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d8a:	fb02 f303 	mul.w	r3, r2, r3
 8002d8e:	4a69      	ldr	r2, [pc, #420]	; (8002f34 <HAL_I2C_Init+0x284>)
 8002d90:	fba2 2303 	umull	r2, r3, r2, r3
 8002d94:	099b      	lsrs	r3, r3, #6
 8002d96:	3301      	adds	r3, #1
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6812      	ldr	r2, [r2, #0]
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002daa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	495c      	ldr	r1, [pc, #368]	; (8002f24 <HAL_I2C_Init+0x274>)
 8002db4:	428b      	cmp	r3, r1
 8002db6:	d819      	bhi.n	8002dec <HAL_I2C_Init+0x13c>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	1e59      	subs	r1, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dc6:	1c59      	adds	r1, r3, #1
 8002dc8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002dcc:	400b      	ands	r3, r1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <HAL_I2C_Init+0x138>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1e59      	subs	r1, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002de0:	3301      	adds	r3, #1
 8002de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de6:	e051      	b.n	8002e8c <HAL_I2C_Init+0x1dc>
 8002de8:	2304      	movs	r3, #4
 8002dea:	e04f      	b.n	8002e8c <HAL_I2C_Init+0x1dc>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d111      	bne.n	8002e18 <HAL_I2C_Init+0x168>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	1e58      	subs	r0, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6859      	ldr	r1, [r3, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	440b      	add	r3, r1
 8002e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e06:	3301      	adds	r3, #1
 8002e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	bf0c      	ite	eq
 8002e10:	2301      	moveq	r3, #1
 8002e12:	2300      	movne	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	e012      	b.n	8002e3e <HAL_I2C_Init+0x18e>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	1e58      	subs	r0, r3, #1
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6859      	ldr	r1, [r3, #4]
 8002e20:	460b      	mov	r3, r1
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	0099      	lsls	r1, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e2e:	3301      	adds	r3, #1
 8002e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bf0c      	ite	eq
 8002e38:	2301      	moveq	r3, #1
 8002e3a:	2300      	movne	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <HAL_I2C_Init+0x196>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e022      	b.n	8002e8c <HAL_I2C_Init+0x1dc>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10e      	bne.n	8002e6c <HAL_I2C_Init+0x1bc>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	1e58      	subs	r0, r3, #1
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6859      	ldr	r1, [r3, #4]
 8002e56:	460b      	mov	r3, r1
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	440b      	add	r3, r1
 8002e5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e60:	3301      	adds	r3, #1
 8002e62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e6a:	e00f      	b.n	8002e8c <HAL_I2C_Init+0x1dc>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	1e58      	subs	r0, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6859      	ldr	r1, [r3, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	0099      	lsls	r1, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e82:	3301      	adds	r3, #1
 8002e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	6809      	ldr	r1, [r1, #0]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69da      	ldr	r2, [r3, #28]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002eba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6911      	ldr	r1, [r2, #16]
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	68d2      	ldr	r2, [r2, #12]
 8002ec6:	4311      	orrs	r1, r2
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6812      	ldr	r2, [r2, #0]
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0201 	orr.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2220      	movs	r2, #32
 8002f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	000186a0 	.word	0x000186a0
 8002f28:	001e847f 	.word	0x001e847f
 8002f2c:	003d08ff 	.word	0x003d08ff
 8002f30:	431bde83 	.word	0x431bde83
 8002f34:	10624dd3 	.word	0x10624dd3

08002f38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e264      	b.n	8003414 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d075      	beq.n	8003042 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f56:	4ba3      	ldr	r3, [pc, #652]	; (80031e4 <HAL_RCC_OscConfig+0x2ac>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d00c      	beq.n	8002f7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f62:	4ba0      	ldr	r3, [pc, #640]	; (80031e4 <HAL_RCC_OscConfig+0x2ac>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d112      	bne.n	8002f94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f6e:	4b9d      	ldr	r3, [pc, #628]	; (80031e4 <HAL_RCC_OscConfig+0x2ac>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f7a:	d10b      	bne.n	8002f94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f7c:	4b99      	ldr	r3, [pc, #612]	; (80031e4 <HAL_RCC_OscConfig+0x2ac>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d05b      	beq.n	8003040 <HAL_RCC_OscConfig+0x108>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d157      	bne.n	8003040 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e23f      	b.n	8003414 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f9c:	d106      	bne.n	8002fac <HAL_RCC_OscConfig+0x74>
 8002f9e:	4b91      	ldr	r3, [pc, #580]	; (80031e4 <HAL_RCC_OscConfig+0x2ac>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a90      	ldr	r2, [pc, #576]	; (80031e4 <HAL_RCC_OscConfig+0x2ac>)
 8002fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	e01d      	b.n	8002fe8 <HAL_RCC_OscConfig+0xb0>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fb4:	d10c      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x98>
 8002fb6:	4b8b      	ldr	r3, [pc, #556]	; (80031e4 <HAL_RCC_OscConfig+0x2ac>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a8a      	ldr	r2, [pc, #552]	; (80031e4 <HAL_RCC_OscConfig+0x2ac>)
 8002fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	4b88      	ldr	r3, [pc, #544]	; (80031e4 <HAL_RCC_OscConfig+0x2ac>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a87      	ldr	r2, [pc, #540]	; (80031e4 <HAL_RCC_OscConfig+0x2ac>)
 8002fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	e00b      	b.n	8002fe8 <HAL_RCC_OscConfig+0xb0>
 8002fd0:	4b84      	ldr	r3, [pc, #528]	; (80031e4 <HAL_RCC_OscConfig+0x2ac>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a83      	ldr	r2, [pc, #524]	; (80031e4 <HAL_RCC_OscConfig+0x2ac>)
 8002fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	4b81      	ldr	r3, [pc, #516]	; (80031e4 <HAL_RCC_OscConfig+0x2ac>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a80      	ldr	r2, [pc, #512]	; (80031e4 <HAL_RCC_OscConfig+0x2ac>)
 8002fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d013      	beq.n	8003018 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff0:	f7fe fccc 	bl	800198c <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ff8:	f7fe fcc8 	bl	800198c <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b64      	cmp	r3, #100	; 0x64
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e204      	b.n	8003414 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300a:	4b76      	ldr	r3, [pc, #472]	; (80031e4 <HAL_RCC_OscConfig+0x2ac>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCC_OscConfig+0xc0>
 8003016:	e014      	b.n	8003042 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003018:	f7fe fcb8 	bl	800198c <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003020:	f7fe fcb4 	bl	800198c <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b64      	cmp	r3, #100	; 0x64
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e1f0      	b.n	8003414 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003032:	4b6c      	ldr	r3, [pc, #432]	; (80031e4 <HAL_RCC_OscConfig+0x2ac>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f0      	bne.n	8003020 <HAL_RCC_OscConfig+0xe8>
 800303e:	e000      	b.n	8003042 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d063      	beq.n	8003116 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800304e:	4b65      	ldr	r3, [pc, #404]	; (80031e4 <HAL_RCC_OscConfig+0x2ac>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00b      	beq.n	8003072 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800305a:	4b62      	ldr	r3, [pc, #392]	; (80031e4 <HAL_RCC_OscConfig+0x2ac>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003062:	2b08      	cmp	r3, #8
 8003064:	d11c      	bne.n	80030a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003066:	4b5f      	ldr	r3, [pc, #380]	; (80031e4 <HAL_RCC_OscConfig+0x2ac>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d116      	bne.n	80030a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003072:	4b5c      	ldr	r3, [pc, #368]	; (80031e4 <HAL_RCC_OscConfig+0x2ac>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d005      	beq.n	800308a <HAL_RCC_OscConfig+0x152>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d001      	beq.n	800308a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e1c4      	b.n	8003414 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308a:	4b56      	ldr	r3, [pc, #344]	; (80031e4 <HAL_RCC_OscConfig+0x2ac>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4952      	ldr	r1, [pc, #328]	; (80031e4 <HAL_RCC_OscConfig+0x2ac>)
 800309a:	4313      	orrs	r3, r2
 800309c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800309e:	e03a      	b.n	8003116 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d020      	beq.n	80030ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030a8:	4b4f      	ldr	r3, [pc, #316]	; (80031e8 <HAL_RCC_OscConfig+0x2b0>)
 80030aa:	2201      	movs	r2, #1
 80030ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ae:	f7fe fc6d 	bl	800198c <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030b6:	f7fe fc69 	bl	800198c <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e1a5      	b.n	8003414 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c8:	4b46      	ldr	r3, [pc, #280]	; (80031e4 <HAL_RCC_OscConfig+0x2ac>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0f0      	beq.n	80030b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d4:	4b43      	ldr	r3, [pc, #268]	; (80031e4 <HAL_RCC_OscConfig+0x2ac>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4940      	ldr	r1, [pc, #256]	; (80031e4 <HAL_RCC_OscConfig+0x2ac>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	600b      	str	r3, [r1, #0]
 80030e8:	e015      	b.n	8003116 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ea:	4b3f      	ldr	r3, [pc, #252]	; (80031e8 <HAL_RCC_OscConfig+0x2b0>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f0:	f7fe fc4c 	bl	800198c <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030f8:	f7fe fc48 	bl	800198c <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e184      	b.n	8003414 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800310a:	4b36      	ldr	r3, [pc, #216]	; (80031e4 <HAL_RCC_OscConfig+0x2ac>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d030      	beq.n	8003184 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d016      	beq.n	8003158 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800312a:	4b30      	ldr	r3, [pc, #192]	; (80031ec <HAL_RCC_OscConfig+0x2b4>)
 800312c:	2201      	movs	r2, #1
 800312e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003130:	f7fe fc2c 	bl	800198c <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003138:	f7fe fc28 	bl	800198c <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e164      	b.n	8003414 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800314a:	4b26      	ldr	r3, [pc, #152]	; (80031e4 <HAL_RCC_OscConfig+0x2ac>)
 800314c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCC_OscConfig+0x200>
 8003156:	e015      	b.n	8003184 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003158:	4b24      	ldr	r3, [pc, #144]	; (80031ec <HAL_RCC_OscConfig+0x2b4>)
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800315e:	f7fe fc15 	bl	800198c <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003166:	f7fe fc11 	bl	800198c <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e14d      	b.n	8003414 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003178:	4b1a      	ldr	r3, [pc, #104]	; (80031e4 <HAL_RCC_OscConfig+0x2ac>)
 800317a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1f0      	bne.n	8003166 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80a0 	beq.w	80032d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003192:	2300      	movs	r3, #0
 8003194:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003196:	4b13      	ldr	r3, [pc, #76]	; (80031e4 <HAL_RCC_OscConfig+0x2ac>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10f      	bne.n	80031c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	60bb      	str	r3, [r7, #8]
 80031a6:	4b0f      	ldr	r3, [pc, #60]	; (80031e4 <HAL_RCC_OscConfig+0x2ac>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	4a0e      	ldr	r2, [pc, #56]	; (80031e4 <HAL_RCC_OscConfig+0x2ac>)
 80031ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b0:	6413      	str	r3, [r2, #64]	; 0x40
 80031b2:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <HAL_RCC_OscConfig+0x2ac>)
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ba:	60bb      	str	r3, [r7, #8]
 80031bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031be:	2301      	movs	r3, #1
 80031c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c2:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <HAL_RCC_OscConfig+0x2b8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d121      	bne.n	8003212 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ce:	4b08      	ldr	r3, [pc, #32]	; (80031f0 <HAL_RCC_OscConfig+0x2b8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a07      	ldr	r2, [pc, #28]	; (80031f0 <HAL_RCC_OscConfig+0x2b8>)
 80031d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031da:	f7fe fbd7 	bl	800198c <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e0:	e011      	b.n	8003206 <HAL_RCC_OscConfig+0x2ce>
 80031e2:	bf00      	nop
 80031e4:	40023800 	.word	0x40023800
 80031e8:	42470000 	.word	0x42470000
 80031ec:	42470e80 	.word	0x42470e80
 80031f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f4:	f7fe fbca 	bl	800198c <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e106      	b.n	8003414 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003206:	4b85      	ldr	r3, [pc, #532]	; (800341c <HAL_RCC_OscConfig+0x4e4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d106      	bne.n	8003228 <HAL_RCC_OscConfig+0x2f0>
 800321a:	4b81      	ldr	r3, [pc, #516]	; (8003420 <HAL_RCC_OscConfig+0x4e8>)
 800321c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321e:	4a80      	ldr	r2, [pc, #512]	; (8003420 <HAL_RCC_OscConfig+0x4e8>)
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	6713      	str	r3, [r2, #112]	; 0x70
 8003226:	e01c      	b.n	8003262 <HAL_RCC_OscConfig+0x32a>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	2b05      	cmp	r3, #5
 800322e:	d10c      	bne.n	800324a <HAL_RCC_OscConfig+0x312>
 8003230:	4b7b      	ldr	r3, [pc, #492]	; (8003420 <HAL_RCC_OscConfig+0x4e8>)
 8003232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003234:	4a7a      	ldr	r2, [pc, #488]	; (8003420 <HAL_RCC_OscConfig+0x4e8>)
 8003236:	f043 0304 	orr.w	r3, r3, #4
 800323a:	6713      	str	r3, [r2, #112]	; 0x70
 800323c:	4b78      	ldr	r3, [pc, #480]	; (8003420 <HAL_RCC_OscConfig+0x4e8>)
 800323e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003240:	4a77      	ldr	r2, [pc, #476]	; (8003420 <HAL_RCC_OscConfig+0x4e8>)
 8003242:	f043 0301 	orr.w	r3, r3, #1
 8003246:	6713      	str	r3, [r2, #112]	; 0x70
 8003248:	e00b      	b.n	8003262 <HAL_RCC_OscConfig+0x32a>
 800324a:	4b75      	ldr	r3, [pc, #468]	; (8003420 <HAL_RCC_OscConfig+0x4e8>)
 800324c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324e:	4a74      	ldr	r2, [pc, #464]	; (8003420 <HAL_RCC_OscConfig+0x4e8>)
 8003250:	f023 0301 	bic.w	r3, r3, #1
 8003254:	6713      	str	r3, [r2, #112]	; 0x70
 8003256:	4b72      	ldr	r3, [pc, #456]	; (8003420 <HAL_RCC_OscConfig+0x4e8>)
 8003258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325a:	4a71      	ldr	r2, [pc, #452]	; (8003420 <HAL_RCC_OscConfig+0x4e8>)
 800325c:	f023 0304 	bic.w	r3, r3, #4
 8003260:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d015      	beq.n	8003296 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326a:	f7fe fb8f 	bl	800198c <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003270:	e00a      	b.n	8003288 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003272:	f7fe fb8b 	bl	800198c <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003280:	4293      	cmp	r3, r2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e0c5      	b.n	8003414 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003288:	4b65      	ldr	r3, [pc, #404]	; (8003420 <HAL_RCC_OscConfig+0x4e8>)
 800328a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0ee      	beq.n	8003272 <HAL_RCC_OscConfig+0x33a>
 8003294:	e014      	b.n	80032c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003296:	f7fe fb79 	bl	800198c <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800329c:	e00a      	b.n	80032b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800329e:	f7fe fb75 	bl	800198c <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e0af      	b.n	8003414 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032b4:	4b5a      	ldr	r3, [pc, #360]	; (8003420 <HAL_RCC_OscConfig+0x4e8>)
 80032b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1ee      	bne.n	800329e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032c0:	7dfb      	ldrb	r3, [r7, #23]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d105      	bne.n	80032d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c6:	4b56      	ldr	r3, [pc, #344]	; (8003420 <HAL_RCC_OscConfig+0x4e8>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	4a55      	ldr	r2, [pc, #340]	; (8003420 <HAL_RCC_OscConfig+0x4e8>)
 80032cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 809b 	beq.w	8003412 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032dc:	4b50      	ldr	r3, [pc, #320]	; (8003420 <HAL_RCC_OscConfig+0x4e8>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f003 030c 	and.w	r3, r3, #12
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d05c      	beq.n	80033a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d141      	bne.n	8003374 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f0:	4b4c      	ldr	r3, [pc, #304]	; (8003424 <HAL_RCC_OscConfig+0x4ec>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f6:	f7fe fb49 	bl	800198c <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fc:	e008      	b.n	8003310 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032fe:	f7fe fb45 	bl	800198c <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e081      	b.n	8003414 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003310:	4b43      	ldr	r3, [pc, #268]	; (8003420 <HAL_RCC_OscConfig+0x4e8>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1f0      	bne.n	80032fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	69da      	ldr	r2, [r3, #28]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	019b      	lsls	r3, r3, #6
 800332c:	431a      	orrs	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003332:	085b      	lsrs	r3, r3, #1
 8003334:	3b01      	subs	r3, #1
 8003336:	041b      	lsls	r3, r3, #16
 8003338:	431a      	orrs	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333e:	061b      	lsls	r3, r3, #24
 8003340:	4937      	ldr	r1, [pc, #220]	; (8003420 <HAL_RCC_OscConfig+0x4e8>)
 8003342:	4313      	orrs	r3, r2
 8003344:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003346:	4b37      	ldr	r3, [pc, #220]	; (8003424 <HAL_RCC_OscConfig+0x4ec>)
 8003348:	2201      	movs	r2, #1
 800334a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334c:	f7fe fb1e 	bl	800198c <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003354:	f7fe fb1a 	bl	800198c <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e056      	b.n	8003414 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003366:	4b2e      	ldr	r3, [pc, #184]	; (8003420 <HAL_RCC_OscConfig+0x4e8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0f0      	beq.n	8003354 <HAL_RCC_OscConfig+0x41c>
 8003372:	e04e      	b.n	8003412 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003374:	4b2b      	ldr	r3, [pc, #172]	; (8003424 <HAL_RCC_OscConfig+0x4ec>)
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337a:	f7fe fb07 	bl	800198c <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003382:	f7fe fb03 	bl	800198c <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e03f      	b.n	8003414 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003394:	4b22      	ldr	r3, [pc, #136]	; (8003420 <HAL_RCC_OscConfig+0x4e8>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1f0      	bne.n	8003382 <HAL_RCC_OscConfig+0x44a>
 80033a0:	e037      	b.n	8003412 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d101      	bne.n	80033ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e032      	b.n	8003414 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033ae:	4b1c      	ldr	r3, [pc, #112]	; (8003420 <HAL_RCC_OscConfig+0x4e8>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d028      	beq.n	800340e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d121      	bne.n	800340e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d11a      	bne.n	800340e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033de:	4013      	ands	r3, r2
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033e4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d111      	bne.n	800340e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	085b      	lsrs	r3, r3, #1
 80033f6:	3b01      	subs	r3, #1
 80033f8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d107      	bne.n	800340e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800340a:	429a      	cmp	r2, r3
 800340c:	d001      	beq.n	8003412 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40007000 	.word	0x40007000
 8003420:	40023800 	.word	0x40023800
 8003424:	42470060 	.word	0x42470060

08003428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e0cc      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800343c:	4b68      	ldr	r3, [pc, #416]	; (80035e0 <HAL_RCC_ClockConfig+0x1b8>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	429a      	cmp	r2, r3
 8003448:	d90c      	bls.n	8003464 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344a:	4b65      	ldr	r3, [pc, #404]	; (80035e0 <HAL_RCC_ClockConfig+0x1b8>)
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003452:	4b63      	ldr	r3, [pc, #396]	; (80035e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	429a      	cmp	r2, r3
 800345e:	d001      	beq.n	8003464 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0b8      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d020      	beq.n	80034b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800347c:	4b59      	ldr	r3, [pc, #356]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	4a58      	ldr	r2, [pc, #352]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003486:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003494:	4b53      	ldr	r3, [pc, #332]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	4a52      	ldr	r2, [pc, #328]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800349e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a0:	4b50      	ldr	r3, [pc, #320]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	494d      	ldr	r1, [pc, #308]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d044      	beq.n	8003548 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d107      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c6:	4b47      	ldr	r3, [pc, #284]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d119      	bne.n	8003506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e07f      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d003      	beq.n	80034e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034e2:	2b03      	cmp	r3, #3
 80034e4:	d107      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e6:	4b3f      	ldr	r3, [pc, #252]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d109      	bne.n	8003506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e06f      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f6:	4b3b      	ldr	r3, [pc, #236]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e067      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003506:	4b37      	ldr	r3, [pc, #220]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f023 0203 	bic.w	r2, r3, #3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	4934      	ldr	r1, [pc, #208]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003514:	4313      	orrs	r3, r2
 8003516:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003518:	f7fe fa38 	bl	800198c <HAL_GetTick>
 800351c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351e:	e00a      	b.n	8003536 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003520:	f7fe fa34 	bl	800198c <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	f241 3288 	movw	r2, #5000	; 0x1388
 800352e:	4293      	cmp	r3, r2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e04f      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003536:	4b2b      	ldr	r3, [pc, #172]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 020c 	and.w	r2, r3, #12
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	429a      	cmp	r2, r3
 8003546:	d1eb      	bne.n	8003520 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003548:	4b25      	ldr	r3, [pc, #148]	; (80035e0 <HAL_RCC_ClockConfig+0x1b8>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d20c      	bcs.n	8003570 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003556:	4b22      	ldr	r3, [pc, #136]	; (80035e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800355e:	4b20      	ldr	r3, [pc, #128]	; (80035e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	429a      	cmp	r2, r3
 800356a:	d001      	beq.n	8003570 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e032      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d008      	beq.n	800358e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800357c:	4b19      	ldr	r3, [pc, #100]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	4916      	ldr	r1, [pc, #88]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	4313      	orrs	r3, r2
 800358c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0308 	and.w	r3, r3, #8
 8003596:	2b00      	cmp	r3, #0
 8003598:	d009      	beq.n	80035ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800359a:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	490e      	ldr	r1, [pc, #56]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035ae:	f000 f821 	bl	80035f4 <HAL_RCC_GetSysClockFreq>
 80035b2:	4602      	mov	r2, r0
 80035b4:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	091b      	lsrs	r3, r3, #4
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	490a      	ldr	r1, [pc, #40]	; (80035e8 <HAL_RCC_ClockConfig+0x1c0>)
 80035c0:	5ccb      	ldrb	r3, [r1, r3]
 80035c2:	fa22 f303 	lsr.w	r3, r2, r3
 80035c6:	4a09      	ldr	r2, [pc, #36]	; (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 80035c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035ca:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <HAL_RCC_ClockConfig+0x1c8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fe f998 	bl	8001904 <HAL_InitTick>

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40023c00 	.word	0x40023c00
 80035e4:	40023800 	.word	0x40023800
 80035e8:	08005360 	.word	0x08005360
 80035ec:	20000000 	.word	0x20000000
 80035f0:	20000004 	.word	0x20000004

080035f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035f8:	b084      	sub	sp, #16
 80035fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	607b      	str	r3, [r7, #4]
 8003600:	2300      	movs	r3, #0
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	2300      	movs	r3, #0
 8003606:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800360c:	4b67      	ldr	r3, [pc, #412]	; (80037ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 030c 	and.w	r3, r3, #12
 8003614:	2b08      	cmp	r3, #8
 8003616:	d00d      	beq.n	8003634 <HAL_RCC_GetSysClockFreq+0x40>
 8003618:	2b08      	cmp	r3, #8
 800361a:	f200 80bd 	bhi.w	8003798 <HAL_RCC_GetSysClockFreq+0x1a4>
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <HAL_RCC_GetSysClockFreq+0x34>
 8003622:	2b04      	cmp	r3, #4
 8003624:	d003      	beq.n	800362e <HAL_RCC_GetSysClockFreq+0x3a>
 8003626:	e0b7      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003628:	4b61      	ldr	r3, [pc, #388]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800362a:	60bb      	str	r3, [r7, #8]
       break;
 800362c:	e0b7      	b.n	800379e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800362e:	4b61      	ldr	r3, [pc, #388]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003630:	60bb      	str	r3, [r7, #8]
      break;
 8003632:	e0b4      	b.n	800379e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003634:	4b5d      	ldr	r3, [pc, #372]	; (80037ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800363c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800363e:	4b5b      	ldr	r3, [pc, #364]	; (80037ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d04d      	beq.n	80036e6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800364a:	4b58      	ldr	r3, [pc, #352]	; (80037ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	099b      	lsrs	r3, r3, #6
 8003650:	461a      	mov	r2, r3
 8003652:	f04f 0300 	mov.w	r3, #0
 8003656:	f240 10ff 	movw	r0, #511	; 0x1ff
 800365a:	f04f 0100 	mov.w	r1, #0
 800365e:	ea02 0800 	and.w	r8, r2, r0
 8003662:	ea03 0901 	and.w	r9, r3, r1
 8003666:	4640      	mov	r0, r8
 8003668:	4649      	mov	r1, r9
 800366a:	f04f 0200 	mov.w	r2, #0
 800366e:	f04f 0300 	mov.w	r3, #0
 8003672:	014b      	lsls	r3, r1, #5
 8003674:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003678:	0142      	lsls	r2, r0, #5
 800367a:	4610      	mov	r0, r2
 800367c:	4619      	mov	r1, r3
 800367e:	ebb0 0008 	subs.w	r0, r0, r8
 8003682:	eb61 0109 	sbc.w	r1, r1, r9
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	f04f 0300 	mov.w	r3, #0
 800368e:	018b      	lsls	r3, r1, #6
 8003690:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003694:	0182      	lsls	r2, r0, #6
 8003696:	1a12      	subs	r2, r2, r0
 8003698:	eb63 0301 	sbc.w	r3, r3, r1
 800369c:	f04f 0000 	mov.w	r0, #0
 80036a0:	f04f 0100 	mov.w	r1, #0
 80036a4:	00d9      	lsls	r1, r3, #3
 80036a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036aa:	00d0      	lsls	r0, r2, #3
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	eb12 0208 	adds.w	r2, r2, r8
 80036b4:	eb43 0309 	adc.w	r3, r3, r9
 80036b8:	f04f 0000 	mov.w	r0, #0
 80036bc:	f04f 0100 	mov.w	r1, #0
 80036c0:	0259      	lsls	r1, r3, #9
 80036c2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80036c6:	0250      	lsls	r0, r2, #9
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	4610      	mov	r0, r2
 80036ce:	4619      	mov	r1, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	461a      	mov	r2, r3
 80036d4:	f04f 0300 	mov.w	r3, #0
 80036d8:	f7fc fdda 	bl	8000290 <__aeabi_uldivmod>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4613      	mov	r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	e04a      	b.n	800377c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036e6:	4b31      	ldr	r3, [pc, #196]	; (80037ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	099b      	lsrs	r3, r3, #6
 80036ec:	461a      	mov	r2, r3
 80036ee:	f04f 0300 	mov.w	r3, #0
 80036f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80036f6:	f04f 0100 	mov.w	r1, #0
 80036fa:	ea02 0400 	and.w	r4, r2, r0
 80036fe:	ea03 0501 	and.w	r5, r3, r1
 8003702:	4620      	mov	r0, r4
 8003704:	4629      	mov	r1, r5
 8003706:	f04f 0200 	mov.w	r2, #0
 800370a:	f04f 0300 	mov.w	r3, #0
 800370e:	014b      	lsls	r3, r1, #5
 8003710:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003714:	0142      	lsls	r2, r0, #5
 8003716:	4610      	mov	r0, r2
 8003718:	4619      	mov	r1, r3
 800371a:	1b00      	subs	r0, r0, r4
 800371c:	eb61 0105 	sbc.w	r1, r1, r5
 8003720:	f04f 0200 	mov.w	r2, #0
 8003724:	f04f 0300 	mov.w	r3, #0
 8003728:	018b      	lsls	r3, r1, #6
 800372a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800372e:	0182      	lsls	r2, r0, #6
 8003730:	1a12      	subs	r2, r2, r0
 8003732:	eb63 0301 	sbc.w	r3, r3, r1
 8003736:	f04f 0000 	mov.w	r0, #0
 800373a:	f04f 0100 	mov.w	r1, #0
 800373e:	00d9      	lsls	r1, r3, #3
 8003740:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003744:	00d0      	lsls	r0, r2, #3
 8003746:	4602      	mov	r2, r0
 8003748:	460b      	mov	r3, r1
 800374a:	1912      	adds	r2, r2, r4
 800374c:	eb45 0303 	adc.w	r3, r5, r3
 8003750:	f04f 0000 	mov.w	r0, #0
 8003754:	f04f 0100 	mov.w	r1, #0
 8003758:	0299      	lsls	r1, r3, #10
 800375a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800375e:	0290      	lsls	r0, r2, #10
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4610      	mov	r0, r2
 8003766:	4619      	mov	r1, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	461a      	mov	r2, r3
 800376c:	f04f 0300 	mov.w	r3, #0
 8003770:	f7fc fd8e 	bl	8000290 <__aeabi_uldivmod>
 8003774:	4602      	mov	r2, r0
 8003776:	460b      	mov	r3, r1
 8003778:	4613      	mov	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800377c:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	0c1b      	lsrs	r3, r3, #16
 8003782:	f003 0303 	and.w	r3, r3, #3
 8003786:	3301      	adds	r3, #1
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	fbb2 f3f3 	udiv	r3, r2, r3
 8003794:	60bb      	str	r3, [r7, #8]
      break;
 8003796:	e002      	b.n	800379e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003798:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800379a:	60bb      	str	r3, [r7, #8]
      break;
 800379c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800379e:	68bb      	ldr	r3, [r7, #8]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037aa:	bf00      	nop
 80037ac:	40023800 	.word	0x40023800
 80037b0:	00f42400 	.word	0x00f42400
 80037b4:	007a1200 	.word	0x007a1200

080037b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037bc:	4b03      	ldr	r3, [pc, #12]	; (80037cc <HAL_RCC_GetHCLKFreq+0x14>)
 80037be:	681b      	ldr	r3, [r3, #0]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	20000000 	.word	0x20000000

080037d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037d4:	f7ff fff0 	bl	80037b8 <HAL_RCC_GetHCLKFreq>
 80037d8:	4602      	mov	r2, r0
 80037da:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	0a9b      	lsrs	r3, r3, #10
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	4903      	ldr	r1, [pc, #12]	; (80037f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037e6:	5ccb      	ldrb	r3, [r1, r3]
 80037e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40023800 	.word	0x40023800
 80037f4:	08005370 	.word	0x08005370

080037f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037fc:	f7ff ffdc 	bl	80037b8 <HAL_RCC_GetHCLKFreq>
 8003800:	4602      	mov	r2, r0
 8003802:	4b05      	ldr	r3, [pc, #20]	; (8003818 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	0b5b      	lsrs	r3, r3, #13
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	4903      	ldr	r1, [pc, #12]	; (800381c <HAL_RCC_GetPCLK2Freq+0x24>)
 800380e:	5ccb      	ldrb	r3, [r1, r3]
 8003810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003814:	4618      	mov	r0, r3
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40023800 	.word	0x40023800
 800381c:	08005370 	.word	0x08005370

08003820 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e041      	b.n	80038b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d106      	bne.n	800384c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7fd fe10 	bl	800146c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3304      	adds	r3, #4
 800385c:	4619      	mov	r1, r3
 800385e:	4610      	mov	r0, r2
 8003860:	f000 fab6 	bl	8003dd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b082      	sub	sp, #8
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e041      	b.n	8003954 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d106      	bne.n	80038ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7fd fe7b 	bl	80015e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2202      	movs	r2, #2
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3304      	adds	r3, #4
 80038fa:	4619      	mov	r1, r3
 80038fc:	4610      	mov	r0, r2
 80038fe:	f000 fa67 	bl	8003dd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d109      	bne.n	8003980 <HAL_TIM_PWM_Start+0x24>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b01      	cmp	r3, #1
 8003976:	bf14      	ite	ne
 8003978:	2301      	movne	r3, #1
 800397a:	2300      	moveq	r3, #0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	e022      	b.n	80039c6 <HAL_TIM_PWM_Start+0x6a>
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	2b04      	cmp	r3, #4
 8003984:	d109      	bne.n	800399a <HAL_TIM_PWM_Start+0x3e>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b01      	cmp	r3, #1
 8003990:	bf14      	ite	ne
 8003992:	2301      	movne	r3, #1
 8003994:	2300      	moveq	r3, #0
 8003996:	b2db      	uxtb	r3, r3
 8003998:	e015      	b.n	80039c6 <HAL_TIM_PWM_Start+0x6a>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b08      	cmp	r3, #8
 800399e:	d109      	bne.n	80039b4 <HAL_TIM_PWM_Start+0x58>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	bf14      	ite	ne
 80039ac:	2301      	movne	r3, #1
 80039ae:	2300      	moveq	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	e008      	b.n	80039c6 <HAL_TIM_PWM_Start+0x6a>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	bf14      	ite	ne
 80039c0:	2301      	movne	r3, #1
 80039c2:	2300      	moveq	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e068      	b.n	8003aa0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d104      	bne.n	80039de <HAL_TIM_PWM_Start+0x82>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039dc:	e013      	b.n	8003a06 <HAL_TIM_PWM_Start+0xaa>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b04      	cmp	r3, #4
 80039e2:	d104      	bne.n	80039ee <HAL_TIM_PWM_Start+0x92>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039ec:	e00b      	b.n	8003a06 <HAL_TIM_PWM_Start+0xaa>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d104      	bne.n	80039fe <HAL_TIM_PWM_Start+0xa2>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039fc:	e003      	b.n	8003a06 <HAL_TIM_PWM_Start+0xaa>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2202      	movs	r2, #2
 8003a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	6839      	ldr	r1, [r7, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 fc84 	bl	800431c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a23      	ldr	r2, [pc, #140]	; (8003aa8 <HAL_TIM_PWM_Start+0x14c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d107      	bne.n	8003a2e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a1d      	ldr	r2, [pc, #116]	; (8003aa8 <HAL_TIM_PWM_Start+0x14c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d018      	beq.n	8003a6a <HAL_TIM_PWM_Start+0x10e>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a40:	d013      	beq.n	8003a6a <HAL_TIM_PWM_Start+0x10e>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a19      	ldr	r2, [pc, #100]	; (8003aac <HAL_TIM_PWM_Start+0x150>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d00e      	beq.n	8003a6a <HAL_TIM_PWM_Start+0x10e>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a17      	ldr	r2, [pc, #92]	; (8003ab0 <HAL_TIM_PWM_Start+0x154>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d009      	beq.n	8003a6a <HAL_TIM_PWM_Start+0x10e>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a16      	ldr	r2, [pc, #88]	; (8003ab4 <HAL_TIM_PWM_Start+0x158>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d004      	beq.n	8003a6a <HAL_TIM_PWM_Start+0x10e>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a14      	ldr	r2, [pc, #80]	; (8003ab8 <HAL_TIM_PWM_Start+0x15c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d111      	bne.n	8003a8e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2b06      	cmp	r3, #6
 8003a7a:	d010      	beq.n	8003a9e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0201 	orr.w	r2, r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a8c:	e007      	b.n	8003a9e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f042 0201 	orr.w	r2, r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40010000 	.word	0x40010000
 8003aac:	40000400 	.word	0x40000400
 8003ab0:	40000800 	.word	0x40000800
 8003ab4:	40000c00 	.word	0x40000c00
 8003ab8:	40014000 	.word	0x40014000

08003abc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d101      	bne.n	8003ada <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e0ae      	b.n	8003c38 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b0c      	cmp	r3, #12
 8003ae6:	f200 809f 	bhi.w	8003c28 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003aea:	a201      	add	r2, pc, #4	; (adr r2, 8003af0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af0:	08003b25 	.word	0x08003b25
 8003af4:	08003c29 	.word	0x08003c29
 8003af8:	08003c29 	.word	0x08003c29
 8003afc:	08003c29 	.word	0x08003c29
 8003b00:	08003b65 	.word	0x08003b65
 8003b04:	08003c29 	.word	0x08003c29
 8003b08:	08003c29 	.word	0x08003c29
 8003b0c:	08003c29 	.word	0x08003c29
 8003b10:	08003ba7 	.word	0x08003ba7
 8003b14:	08003c29 	.word	0x08003c29
 8003b18:	08003c29 	.word	0x08003c29
 8003b1c:	08003c29 	.word	0x08003c29
 8003b20:	08003be7 	.word	0x08003be7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68b9      	ldr	r1, [r7, #8]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 f9d0 	bl	8003ed0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0208 	orr.w	r2, r2, #8
 8003b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699a      	ldr	r2, [r3, #24]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0204 	bic.w	r2, r2, #4
 8003b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6999      	ldr	r1, [r3, #24]
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	691a      	ldr	r2, [r3, #16]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	619a      	str	r2, [r3, #24]
      break;
 8003b62:	e064      	b.n	8003c2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68b9      	ldr	r1, [r7, #8]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 fa16 	bl	8003f9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699a      	ldr	r2, [r3, #24]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6999      	ldr	r1, [r3, #24]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	021a      	lsls	r2, r3, #8
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	619a      	str	r2, [r3, #24]
      break;
 8003ba4:	e043      	b.n	8003c2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68b9      	ldr	r1, [r7, #8]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 fa61 	bl	8004074 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69da      	ldr	r2, [r3, #28]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f042 0208 	orr.w	r2, r2, #8
 8003bc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69da      	ldr	r2, [r3, #28]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0204 	bic.w	r2, r2, #4
 8003bd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69d9      	ldr	r1, [r3, #28]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	61da      	str	r2, [r3, #28]
      break;
 8003be4:	e023      	b.n	8003c2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68b9      	ldr	r1, [r7, #8]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 faab 	bl	8004148 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	69da      	ldr	r2, [r3, #28]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	69da      	ldr	r2, [r3, #28]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	69d9      	ldr	r1, [r3, #28]
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	021a      	lsls	r2, r3, #8
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	61da      	str	r2, [r3, #28]
      break;
 8003c26:	e002      	b.n	8003c2e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <HAL_TIM_ConfigClockSource+0x1c>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e0b4      	b.n	8003dc6 <HAL_TIM_ConfigClockSource+0x186>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c94:	d03e      	beq.n	8003d14 <HAL_TIM_ConfigClockSource+0xd4>
 8003c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c9a:	f200 8087 	bhi.w	8003dac <HAL_TIM_ConfigClockSource+0x16c>
 8003c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca2:	f000 8086 	beq.w	8003db2 <HAL_TIM_ConfigClockSource+0x172>
 8003ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003caa:	d87f      	bhi.n	8003dac <HAL_TIM_ConfigClockSource+0x16c>
 8003cac:	2b70      	cmp	r3, #112	; 0x70
 8003cae:	d01a      	beq.n	8003ce6 <HAL_TIM_ConfigClockSource+0xa6>
 8003cb0:	2b70      	cmp	r3, #112	; 0x70
 8003cb2:	d87b      	bhi.n	8003dac <HAL_TIM_ConfigClockSource+0x16c>
 8003cb4:	2b60      	cmp	r3, #96	; 0x60
 8003cb6:	d050      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0x11a>
 8003cb8:	2b60      	cmp	r3, #96	; 0x60
 8003cba:	d877      	bhi.n	8003dac <HAL_TIM_ConfigClockSource+0x16c>
 8003cbc:	2b50      	cmp	r3, #80	; 0x50
 8003cbe:	d03c      	beq.n	8003d3a <HAL_TIM_ConfigClockSource+0xfa>
 8003cc0:	2b50      	cmp	r3, #80	; 0x50
 8003cc2:	d873      	bhi.n	8003dac <HAL_TIM_ConfigClockSource+0x16c>
 8003cc4:	2b40      	cmp	r3, #64	; 0x40
 8003cc6:	d058      	beq.n	8003d7a <HAL_TIM_ConfigClockSource+0x13a>
 8003cc8:	2b40      	cmp	r3, #64	; 0x40
 8003cca:	d86f      	bhi.n	8003dac <HAL_TIM_ConfigClockSource+0x16c>
 8003ccc:	2b30      	cmp	r3, #48	; 0x30
 8003cce:	d064      	beq.n	8003d9a <HAL_TIM_ConfigClockSource+0x15a>
 8003cd0:	2b30      	cmp	r3, #48	; 0x30
 8003cd2:	d86b      	bhi.n	8003dac <HAL_TIM_ConfigClockSource+0x16c>
 8003cd4:	2b20      	cmp	r3, #32
 8003cd6:	d060      	beq.n	8003d9a <HAL_TIM_ConfigClockSource+0x15a>
 8003cd8:	2b20      	cmp	r3, #32
 8003cda:	d867      	bhi.n	8003dac <HAL_TIM_ConfigClockSource+0x16c>
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d05c      	beq.n	8003d9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ce0:	2b10      	cmp	r3, #16
 8003ce2:	d05a      	beq.n	8003d9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ce4:	e062      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6818      	ldr	r0, [r3, #0]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	6899      	ldr	r1, [r3, #8]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	f000 faf1 	bl	80042dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	609a      	str	r2, [r3, #8]
      break;
 8003d12:	e04f      	b.n	8003db4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6818      	ldr	r0, [r3, #0]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	6899      	ldr	r1, [r3, #8]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f000 fada 	bl	80042dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d36:	609a      	str	r2, [r3, #8]
      break;
 8003d38:	e03c      	b.n	8003db4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6818      	ldr	r0, [r3, #0]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	6859      	ldr	r1, [r3, #4]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	461a      	mov	r2, r3
 8003d48:	f000 fa4e 	bl	80041e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2150      	movs	r1, #80	; 0x50
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 faa7 	bl	80042a6 <TIM_ITRx_SetConfig>
      break;
 8003d58:	e02c      	b.n	8003db4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6818      	ldr	r0, [r3, #0]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	6859      	ldr	r1, [r3, #4]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	461a      	mov	r2, r3
 8003d68:	f000 fa6d 	bl	8004246 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2160      	movs	r1, #96	; 0x60
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 fa97 	bl	80042a6 <TIM_ITRx_SetConfig>
      break;
 8003d78:	e01c      	b.n	8003db4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6818      	ldr	r0, [r3, #0]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	6859      	ldr	r1, [r3, #4]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	461a      	mov	r2, r3
 8003d88:	f000 fa2e 	bl	80041e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2140      	movs	r1, #64	; 0x40
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fa87 	bl	80042a6 <TIM_ITRx_SetConfig>
      break;
 8003d98:	e00c      	b.n	8003db4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4619      	mov	r1, r3
 8003da4:	4610      	mov	r0, r2
 8003da6:	f000 fa7e 	bl	80042a6 <TIM_ITRx_SetConfig>
      break;
 8003daa:	e003      	b.n	8003db4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	73fb      	strb	r3, [r7, #15]
      break;
 8003db0:	e000      	b.n	8003db4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003db2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a34      	ldr	r2, [pc, #208]	; (8003eb4 <TIM_Base_SetConfig+0xe4>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d00f      	beq.n	8003e08 <TIM_Base_SetConfig+0x38>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dee:	d00b      	beq.n	8003e08 <TIM_Base_SetConfig+0x38>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a31      	ldr	r2, [pc, #196]	; (8003eb8 <TIM_Base_SetConfig+0xe8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d007      	beq.n	8003e08 <TIM_Base_SetConfig+0x38>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a30      	ldr	r2, [pc, #192]	; (8003ebc <TIM_Base_SetConfig+0xec>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d003      	beq.n	8003e08 <TIM_Base_SetConfig+0x38>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a2f      	ldr	r2, [pc, #188]	; (8003ec0 <TIM_Base_SetConfig+0xf0>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d108      	bne.n	8003e1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a25      	ldr	r2, [pc, #148]	; (8003eb4 <TIM_Base_SetConfig+0xe4>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d01b      	beq.n	8003e5a <TIM_Base_SetConfig+0x8a>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e28:	d017      	beq.n	8003e5a <TIM_Base_SetConfig+0x8a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a22      	ldr	r2, [pc, #136]	; (8003eb8 <TIM_Base_SetConfig+0xe8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d013      	beq.n	8003e5a <TIM_Base_SetConfig+0x8a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a21      	ldr	r2, [pc, #132]	; (8003ebc <TIM_Base_SetConfig+0xec>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d00f      	beq.n	8003e5a <TIM_Base_SetConfig+0x8a>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a20      	ldr	r2, [pc, #128]	; (8003ec0 <TIM_Base_SetConfig+0xf0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d00b      	beq.n	8003e5a <TIM_Base_SetConfig+0x8a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a1f      	ldr	r2, [pc, #124]	; (8003ec4 <TIM_Base_SetConfig+0xf4>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d007      	beq.n	8003e5a <TIM_Base_SetConfig+0x8a>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a1e      	ldr	r2, [pc, #120]	; (8003ec8 <TIM_Base_SetConfig+0xf8>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d003      	beq.n	8003e5a <TIM_Base_SetConfig+0x8a>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a1d      	ldr	r2, [pc, #116]	; (8003ecc <TIM_Base_SetConfig+0xfc>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d108      	bne.n	8003e6c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a08      	ldr	r2, [pc, #32]	; (8003eb4 <TIM_Base_SetConfig+0xe4>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d103      	bne.n	8003ea0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	691a      	ldr	r2, [r3, #16]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	615a      	str	r2, [r3, #20]
}
 8003ea6:	bf00      	nop
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	40010000 	.word	0x40010000
 8003eb8:	40000400 	.word	0x40000400
 8003ebc:	40000800 	.word	0x40000800
 8003ec0:	40000c00 	.word	0x40000c00
 8003ec4:	40014000 	.word	0x40014000
 8003ec8:	40014400 	.word	0x40014400
 8003ecc:	40014800 	.word	0x40014800

08003ed0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	f023 0201 	bic.w	r2, r3, #1
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f023 0303 	bic.w	r3, r3, #3
 8003f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f023 0302 	bic.w	r3, r3, #2
 8003f18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a1c      	ldr	r2, [pc, #112]	; (8003f98 <TIM_OC1_SetConfig+0xc8>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d10c      	bne.n	8003f46 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f023 0308 	bic.w	r3, r3, #8
 8003f32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f023 0304 	bic.w	r3, r3, #4
 8003f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a13      	ldr	r2, [pc, #76]	; (8003f98 <TIM_OC1_SetConfig+0xc8>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d111      	bne.n	8003f72 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	621a      	str	r2, [r3, #32]
}
 8003f8c:	bf00      	nop
 8003f8e:	371c      	adds	r7, #28
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr
 8003f98:	40010000 	.word	0x40010000

08003f9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	f023 0210 	bic.w	r2, r3, #16
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	021b      	lsls	r3, r3, #8
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f023 0320 	bic.w	r3, r3, #32
 8003fe6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	011b      	lsls	r3, r3, #4
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a1e      	ldr	r2, [pc, #120]	; (8004070 <TIM_OC2_SetConfig+0xd4>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d10d      	bne.n	8004018 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004002:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	4313      	orrs	r3, r2
 800400e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004016:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a15      	ldr	r2, [pc, #84]	; (8004070 <TIM_OC2_SetConfig+0xd4>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d113      	bne.n	8004048 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004026:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800402e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	4313      	orrs	r3, r2
 800403a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	4313      	orrs	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	621a      	str	r2, [r3, #32]
}
 8004062:	bf00      	nop
 8004064:	371c      	adds	r7, #28
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	40010000 	.word	0x40010000

08004074 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004074:	b480      	push	{r7}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f023 0303 	bic.w	r3, r3, #3
 80040aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	021b      	lsls	r3, r3, #8
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a1d      	ldr	r2, [pc, #116]	; (8004144 <TIM_OC3_SetConfig+0xd0>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d10d      	bne.n	80040ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	021b      	lsls	r3, r3, #8
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a14      	ldr	r2, [pc, #80]	; (8004144 <TIM_OC3_SetConfig+0xd0>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d113      	bne.n	800411e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004104:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	4313      	orrs	r3, r2
 8004110:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	011b      	lsls	r3, r3, #4
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	4313      	orrs	r3, r2
 800411c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	621a      	str	r2, [r3, #32]
}
 8004138:	bf00      	nop
 800413a:	371c      	adds	r7, #28
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	40010000 	.word	0x40010000

08004148 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800417e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	021b      	lsls	r3, r3, #8
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	4313      	orrs	r3, r2
 800418a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004192:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	031b      	lsls	r3, r3, #12
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4313      	orrs	r3, r2
 800419e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a10      	ldr	r2, [pc, #64]	; (80041e4 <TIM_OC4_SetConfig+0x9c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d109      	bne.n	80041bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	019b      	lsls	r3, r3, #6
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	621a      	str	r2, [r3, #32]
}
 80041d6:	bf00      	nop
 80041d8:	371c      	adds	r7, #28
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	40010000 	.word	0x40010000

080041e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	f023 0201 	bic.w	r2, r3, #1
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004212:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	4313      	orrs	r3, r2
 800421c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f023 030a 	bic.w	r3, r3, #10
 8004224:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	4313      	orrs	r3, r2
 800422c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	621a      	str	r2, [r3, #32]
}
 800423a:	bf00      	nop
 800423c:	371c      	adds	r7, #28
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004246:	b480      	push	{r7}
 8004248:	b087      	sub	sp, #28
 800424a:	af00      	add	r7, sp, #0
 800424c:	60f8      	str	r0, [r7, #12]
 800424e:	60b9      	str	r1, [r7, #8]
 8004250:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	f023 0210 	bic.w	r2, r3, #16
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004270:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	031b      	lsls	r3, r3, #12
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	4313      	orrs	r3, r2
 800427a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004282:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	4313      	orrs	r3, r2
 800428c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	621a      	str	r2, [r3, #32]
}
 800429a:	bf00      	nop
 800429c:	371c      	adds	r7, #28
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b085      	sub	sp, #20
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
 80042ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	f043 0307 	orr.w	r3, r3, #7
 80042c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	609a      	str	r2, [r3, #8]
}
 80042d0:	bf00      	nop
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042dc:	b480      	push	{r7}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
 80042e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	021a      	lsls	r2, r3, #8
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	431a      	orrs	r2, r3
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	4313      	orrs	r3, r2
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	4313      	orrs	r3, r2
 8004308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	609a      	str	r2, [r3, #8]
}
 8004310:	bf00      	nop
 8004312:	371c      	adds	r7, #28
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f003 031f 	and.w	r3, r3, #31
 800432e:	2201      	movs	r2, #1
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a1a      	ldr	r2, [r3, #32]
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	43db      	mvns	r3, r3
 800433e:	401a      	ands	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6a1a      	ldr	r2, [r3, #32]
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	f003 031f 	and.w	r3, r3, #31
 800434e:	6879      	ldr	r1, [r7, #4]
 8004350:	fa01 f303 	lsl.w	r3, r1, r3
 8004354:	431a      	orrs	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	621a      	str	r2, [r3, #32]
}
 800435a:	bf00      	nop
 800435c:	371c      	adds	r7, #28
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
	...

08004368 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004378:	2b01      	cmp	r3, #1
 800437a:	d101      	bne.n	8004380 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800437c:	2302      	movs	r3, #2
 800437e:	e050      	b.n	8004422 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a1c      	ldr	r2, [pc, #112]	; (8004430 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d018      	beq.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043cc:	d013      	beq.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a18      	ldr	r2, [pc, #96]	; (8004434 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d00e      	beq.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a16      	ldr	r2, [pc, #88]	; (8004438 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d009      	beq.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a15      	ldr	r2, [pc, #84]	; (800443c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d004      	beq.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a13      	ldr	r2, [pc, #76]	; (8004440 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d10c      	bne.n	8004410 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	4313      	orrs	r3, r2
 8004406:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40010000 	.word	0x40010000
 8004434:	40000400 	.word	0x40000400
 8004438:	40000800 	.word	0x40000800
 800443c:	40000c00 	.word	0x40000c00
 8004440:	40014000 	.word	0x40014000

08004444 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e03f      	b.n	80044d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d106      	bne.n	8004470 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7fd f9b6 	bl	80017dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2224      	movs	r2, #36	; 0x24
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68da      	ldr	r2, [r3, #12]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004486:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f929 	bl	80046e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	691a      	ldr	r2, [r3, #16]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800449c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	695a      	ldr	r2, [r3, #20]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68da      	ldr	r2, [r3, #12]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b08a      	sub	sp, #40	; 0x28
 80044e2:	af02      	add	r7, sp, #8
 80044e4:	60f8      	str	r0, [r7, #12]
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	603b      	str	r3, [r7, #0]
 80044ea:	4613      	mov	r3, r2
 80044ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044ee:	2300      	movs	r3, #0
 80044f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b20      	cmp	r3, #32
 80044fc:	d17c      	bne.n	80045f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <HAL_UART_Transmit+0x2c>
 8004504:	88fb      	ldrh	r3, [r7, #6]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e075      	b.n	80045fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004514:	2b01      	cmp	r3, #1
 8004516:	d101      	bne.n	800451c <HAL_UART_Transmit+0x3e>
 8004518:	2302      	movs	r3, #2
 800451a:	e06e      	b.n	80045fa <HAL_UART_Transmit+0x11c>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2221      	movs	r2, #33	; 0x21
 800452e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004532:	f7fd fa2b 	bl	800198c <HAL_GetTick>
 8004536:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	88fa      	ldrh	r2, [r7, #6]
 800453c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	88fa      	ldrh	r2, [r7, #6]
 8004542:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800454c:	d108      	bne.n	8004560 <HAL_UART_Transmit+0x82>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d104      	bne.n	8004560 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004556:	2300      	movs	r3, #0
 8004558:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	61bb      	str	r3, [r7, #24]
 800455e:	e003      	b.n	8004568 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004564:	2300      	movs	r3, #0
 8004566:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004570:	e02a      	b.n	80045c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2200      	movs	r2, #0
 800457a:	2180      	movs	r1, #128	; 0x80
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 f840 	bl	8004602 <UART_WaitOnFlagUntilTimeout>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e036      	b.n	80045fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10b      	bne.n	80045aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	3302      	adds	r3, #2
 80045a6:	61bb      	str	r3, [r7, #24]
 80045a8:	e007      	b.n	80045ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	781a      	ldrb	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	3301      	adds	r3, #1
 80045b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045be:	b29b      	uxth	r3, r3
 80045c0:	3b01      	subs	r3, #1
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1cf      	bne.n	8004572 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2200      	movs	r2, #0
 80045da:	2140      	movs	r1, #64	; 0x40
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 f810 	bl	8004602 <UART_WaitOnFlagUntilTimeout>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e006      	b.n	80045fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2220      	movs	r2, #32
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045f4:	2300      	movs	r3, #0
 80045f6:	e000      	b.n	80045fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80045f8:	2302      	movs	r3, #2
  }
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3720      	adds	r7, #32
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b090      	sub	sp, #64	; 0x40
 8004606:	af00      	add	r7, sp, #0
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	603b      	str	r3, [r7, #0]
 800460e:	4613      	mov	r3, r2
 8004610:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004612:	e050      	b.n	80046b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461a:	d04c      	beq.n	80046b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800461c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800461e:	2b00      	cmp	r3, #0
 8004620:	d007      	beq.n	8004632 <UART_WaitOnFlagUntilTimeout+0x30>
 8004622:	f7fd f9b3 	bl	800198c <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800462e:	429a      	cmp	r2, r3
 8004630:	d241      	bcs.n	80046b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	330c      	adds	r3, #12
 8004638:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463c:	e853 3f00 	ldrex	r3, [r3]
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	330c      	adds	r3, #12
 8004650:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004652:	637a      	str	r2, [r7, #52]	; 0x34
 8004654:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004656:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004658:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800465a:	e841 2300 	strex	r3, r2, [r1]
 800465e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1e5      	bne.n	8004632 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	3314      	adds	r3, #20
 800466c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	e853 3f00 	ldrex	r3, [r3]
 8004674:	613b      	str	r3, [r7, #16]
   return(result);
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	f023 0301 	bic.w	r3, r3, #1
 800467c:	63bb      	str	r3, [r7, #56]	; 0x38
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	3314      	adds	r3, #20
 8004684:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004686:	623a      	str	r2, [r7, #32]
 8004688:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468a:	69f9      	ldr	r1, [r7, #28]
 800468c:	6a3a      	ldr	r2, [r7, #32]
 800468e:	e841 2300 	strex	r3, r2, [r1]
 8004692:	61bb      	str	r3, [r7, #24]
   return(result);
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1e5      	bne.n	8004666 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2220      	movs	r2, #32
 800469e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2220      	movs	r2, #32
 80046a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e00f      	b.n	80046d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	4013      	ands	r3, r2
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	bf0c      	ite	eq
 80046c6:	2301      	moveq	r3, #1
 80046c8:	2300      	movne	r3, #0
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	461a      	mov	r2, r3
 80046ce:	79fb      	ldrb	r3, [r7, #7]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d09f      	beq.n	8004614 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3740      	adds	r7, #64	; 0x40
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e4:	b09f      	sub	sp, #124	; 0x7c
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f6:	68d9      	ldr	r1, [r3, #12]
 80046f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	ea40 0301 	orr.w	r3, r0, r1
 8004700:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004704:	689a      	ldr	r2, [r3, #8]
 8004706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	431a      	orrs	r2, r3
 800470c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	431a      	orrs	r2, r3
 8004712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	4313      	orrs	r3, r2
 8004718:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800471a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004724:	f021 010c 	bic.w	r1, r1, #12
 8004728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800472e:	430b      	orrs	r3, r1
 8004730:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800473c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800473e:	6999      	ldr	r1, [r3, #24]
 8004740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	ea40 0301 	orr.w	r3, r0, r1
 8004748:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800474a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	4bc5      	ldr	r3, [pc, #788]	; (8004a64 <UART_SetConfig+0x384>)
 8004750:	429a      	cmp	r2, r3
 8004752:	d004      	beq.n	800475e <UART_SetConfig+0x7e>
 8004754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	4bc3      	ldr	r3, [pc, #780]	; (8004a68 <UART_SetConfig+0x388>)
 800475a:	429a      	cmp	r2, r3
 800475c:	d103      	bne.n	8004766 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800475e:	f7ff f84b 	bl	80037f8 <HAL_RCC_GetPCLK2Freq>
 8004762:	6778      	str	r0, [r7, #116]	; 0x74
 8004764:	e002      	b.n	800476c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004766:	f7ff f833 	bl	80037d0 <HAL_RCC_GetPCLK1Freq>
 800476a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800476c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800476e:	69db      	ldr	r3, [r3, #28]
 8004770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004774:	f040 80b6 	bne.w	80048e4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004778:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800477a:	461c      	mov	r4, r3
 800477c:	f04f 0500 	mov.w	r5, #0
 8004780:	4622      	mov	r2, r4
 8004782:	462b      	mov	r3, r5
 8004784:	1891      	adds	r1, r2, r2
 8004786:	6439      	str	r1, [r7, #64]	; 0x40
 8004788:	415b      	adcs	r3, r3
 800478a:	647b      	str	r3, [r7, #68]	; 0x44
 800478c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004790:	1912      	adds	r2, r2, r4
 8004792:	eb45 0303 	adc.w	r3, r5, r3
 8004796:	f04f 0000 	mov.w	r0, #0
 800479a:	f04f 0100 	mov.w	r1, #0
 800479e:	00d9      	lsls	r1, r3, #3
 80047a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047a4:	00d0      	lsls	r0, r2, #3
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	1911      	adds	r1, r2, r4
 80047ac:	6639      	str	r1, [r7, #96]	; 0x60
 80047ae:	416b      	adcs	r3, r5
 80047b0:	667b      	str	r3, [r7, #100]	; 0x64
 80047b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	461a      	mov	r2, r3
 80047b8:	f04f 0300 	mov.w	r3, #0
 80047bc:	1891      	adds	r1, r2, r2
 80047be:	63b9      	str	r1, [r7, #56]	; 0x38
 80047c0:	415b      	adcs	r3, r3
 80047c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80047c8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80047cc:	f7fb fd60 	bl	8000290 <__aeabi_uldivmod>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4ba5      	ldr	r3, [pc, #660]	; (8004a6c <UART_SetConfig+0x38c>)
 80047d6:	fba3 2302 	umull	r2, r3, r3, r2
 80047da:	095b      	lsrs	r3, r3, #5
 80047dc:	011e      	lsls	r6, r3, #4
 80047de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047e0:	461c      	mov	r4, r3
 80047e2:	f04f 0500 	mov.w	r5, #0
 80047e6:	4622      	mov	r2, r4
 80047e8:	462b      	mov	r3, r5
 80047ea:	1891      	adds	r1, r2, r2
 80047ec:	6339      	str	r1, [r7, #48]	; 0x30
 80047ee:	415b      	adcs	r3, r3
 80047f0:	637b      	str	r3, [r7, #52]	; 0x34
 80047f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80047f6:	1912      	adds	r2, r2, r4
 80047f8:	eb45 0303 	adc.w	r3, r5, r3
 80047fc:	f04f 0000 	mov.w	r0, #0
 8004800:	f04f 0100 	mov.w	r1, #0
 8004804:	00d9      	lsls	r1, r3, #3
 8004806:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800480a:	00d0      	lsls	r0, r2, #3
 800480c:	4602      	mov	r2, r0
 800480e:	460b      	mov	r3, r1
 8004810:	1911      	adds	r1, r2, r4
 8004812:	65b9      	str	r1, [r7, #88]	; 0x58
 8004814:	416b      	adcs	r3, r5
 8004816:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	461a      	mov	r2, r3
 800481e:	f04f 0300 	mov.w	r3, #0
 8004822:	1891      	adds	r1, r2, r2
 8004824:	62b9      	str	r1, [r7, #40]	; 0x28
 8004826:	415b      	adcs	r3, r3
 8004828:	62fb      	str	r3, [r7, #44]	; 0x2c
 800482a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800482e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004832:	f7fb fd2d 	bl	8000290 <__aeabi_uldivmod>
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	4b8c      	ldr	r3, [pc, #560]	; (8004a6c <UART_SetConfig+0x38c>)
 800483c:	fba3 1302 	umull	r1, r3, r3, r2
 8004840:	095b      	lsrs	r3, r3, #5
 8004842:	2164      	movs	r1, #100	; 0x64
 8004844:	fb01 f303 	mul.w	r3, r1, r3
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	3332      	adds	r3, #50	; 0x32
 800484e:	4a87      	ldr	r2, [pc, #540]	; (8004a6c <UART_SetConfig+0x38c>)
 8004850:	fba2 2303 	umull	r2, r3, r2, r3
 8004854:	095b      	lsrs	r3, r3, #5
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800485c:	441e      	add	r6, r3
 800485e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004860:	4618      	mov	r0, r3
 8004862:	f04f 0100 	mov.w	r1, #0
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	1894      	adds	r4, r2, r2
 800486c:	623c      	str	r4, [r7, #32]
 800486e:	415b      	adcs	r3, r3
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
 8004872:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004876:	1812      	adds	r2, r2, r0
 8004878:	eb41 0303 	adc.w	r3, r1, r3
 800487c:	f04f 0400 	mov.w	r4, #0
 8004880:	f04f 0500 	mov.w	r5, #0
 8004884:	00dd      	lsls	r5, r3, #3
 8004886:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800488a:	00d4      	lsls	r4, r2, #3
 800488c:	4622      	mov	r2, r4
 800488e:	462b      	mov	r3, r5
 8004890:	1814      	adds	r4, r2, r0
 8004892:	653c      	str	r4, [r7, #80]	; 0x50
 8004894:	414b      	adcs	r3, r1
 8004896:	657b      	str	r3, [r7, #84]	; 0x54
 8004898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	461a      	mov	r2, r3
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	1891      	adds	r1, r2, r2
 80048a4:	61b9      	str	r1, [r7, #24]
 80048a6:	415b      	adcs	r3, r3
 80048a8:	61fb      	str	r3, [r7, #28]
 80048aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80048b2:	f7fb fced 	bl	8000290 <__aeabi_uldivmod>
 80048b6:	4602      	mov	r2, r0
 80048b8:	460b      	mov	r3, r1
 80048ba:	4b6c      	ldr	r3, [pc, #432]	; (8004a6c <UART_SetConfig+0x38c>)
 80048bc:	fba3 1302 	umull	r1, r3, r3, r2
 80048c0:	095b      	lsrs	r3, r3, #5
 80048c2:	2164      	movs	r1, #100	; 0x64
 80048c4:	fb01 f303 	mul.w	r3, r1, r3
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	3332      	adds	r3, #50	; 0x32
 80048ce:	4a67      	ldr	r2, [pc, #412]	; (8004a6c <UART_SetConfig+0x38c>)
 80048d0:	fba2 2303 	umull	r2, r3, r2, r3
 80048d4:	095b      	lsrs	r3, r3, #5
 80048d6:	f003 0207 	and.w	r2, r3, #7
 80048da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4432      	add	r2, r6
 80048e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048e2:	e0b9      	b.n	8004a58 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048e6:	461c      	mov	r4, r3
 80048e8:	f04f 0500 	mov.w	r5, #0
 80048ec:	4622      	mov	r2, r4
 80048ee:	462b      	mov	r3, r5
 80048f0:	1891      	adds	r1, r2, r2
 80048f2:	6139      	str	r1, [r7, #16]
 80048f4:	415b      	adcs	r3, r3
 80048f6:	617b      	str	r3, [r7, #20]
 80048f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80048fc:	1912      	adds	r2, r2, r4
 80048fe:	eb45 0303 	adc.w	r3, r5, r3
 8004902:	f04f 0000 	mov.w	r0, #0
 8004906:	f04f 0100 	mov.w	r1, #0
 800490a:	00d9      	lsls	r1, r3, #3
 800490c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004910:	00d0      	lsls	r0, r2, #3
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	eb12 0804 	adds.w	r8, r2, r4
 800491a:	eb43 0905 	adc.w	r9, r3, r5
 800491e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	4618      	mov	r0, r3
 8004924:	f04f 0100 	mov.w	r1, #0
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	f04f 0300 	mov.w	r3, #0
 8004930:	008b      	lsls	r3, r1, #2
 8004932:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004936:	0082      	lsls	r2, r0, #2
 8004938:	4640      	mov	r0, r8
 800493a:	4649      	mov	r1, r9
 800493c:	f7fb fca8 	bl	8000290 <__aeabi_uldivmod>
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	4b49      	ldr	r3, [pc, #292]	; (8004a6c <UART_SetConfig+0x38c>)
 8004946:	fba3 2302 	umull	r2, r3, r3, r2
 800494a:	095b      	lsrs	r3, r3, #5
 800494c:	011e      	lsls	r6, r3, #4
 800494e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004950:	4618      	mov	r0, r3
 8004952:	f04f 0100 	mov.w	r1, #0
 8004956:	4602      	mov	r2, r0
 8004958:	460b      	mov	r3, r1
 800495a:	1894      	adds	r4, r2, r2
 800495c:	60bc      	str	r4, [r7, #8]
 800495e:	415b      	adcs	r3, r3
 8004960:	60fb      	str	r3, [r7, #12]
 8004962:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004966:	1812      	adds	r2, r2, r0
 8004968:	eb41 0303 	adc.w	r3, r1, r3
 800496c:	f04f 0400 	mov.w	r4, #0
 8004970:	f04f 0500 	mov.w	r5, #0
 8004974:	00dd      	lsls	r5, r3, #3
 8004976:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800497a:	00d4      	lsls	r4, r2, #3
 800497c:	4622      	mov	r2, r4
 800497e:	462b      	mov	r3, r5
 8004980:	1814      	adds	r4, r2, r0
 8004982:	64bc      	str	r4, [r7, #72]	; 0x48
 8004984:	414b      	adcs	r3, r1
 8004986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	4618      	mov	r0, r3
 800498e:	f04f 0100 	mov.w	r1, #0
 8004992:	f04f 0200 	mov.w	r2, #0
 8004996:	f04f 0300 	mov.w	r3, #0
 800499a:	008b      	lsls	r3, r1, #2
 800499c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80049a0:	0082      	lsls	r2, r0, #2
 80049a2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80049a6:	f7fb fc73 	bl	8000290 <__aeabi_uldivmod>
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	4b2f      	ldr	r3, [pc, #188]	; (8004a6c <UART_SetConfig+0x38c>)
 80049b0:	fba3 1302 	umull	r1, r3, r3, r2
 80049b4:	095b      	lsrs	r3, r3, #5
 80049b6:	2164      	movs	r1, #100	; 0x64
 80049b8:	fb01 f303 	mul.w	r3, r1, r3
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	3332      	adds	r3, #50	; 0x32
 80049c2:	4a2a      	ldr	r2, [pc, #168]	; (8004a6c <UART_SetConfig+0x38c>)
 80049c4:	fba2 2303 	umull	r2, r3, r2, r3
 80049c8:	095b      	lsrs	r3, r3, #5
 80049ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049ce:	441e      	add	r6, r3
 80049d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049d2:	4618      	mov	r0, r3
 80049d4:	f04f 0100 	mov.w	r1, #0
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	1894      	adds	r4, r2, r2
 80049de:	603c      	str	r4, [r7, #0]
 80049e0:	415b      	adcs	r3, r3
 80049e2:	607b      	str	r3, [r7, #4]
 80049e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049e8:	1812      	adds	r2, r2, r0
 80049ea:	eb41 0303 	adc.w	r3, r1, r3
 80049ee:	f04f 0400 	mov.w	r4, #0
 80049f2:	f04f 0500 	mov.w	r5, #0
 80049f6:	00dd      	lsls	r5, r3, #3
 80049f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80049fc:	00d4      	lsls	r4, r2, #3
 80049fe:	4622      	mov	r2, r4
 8004a00:	462b      	mov	r3, r5
 8004a02:	eb12 0a00 	adds.w	sl, r2, r0
 8004a06:	eb43 0b01 	adc.w	fp, r3, r1
 8004a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f04f 0100 	mov.w	r1, #0
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	f04f 0300 	mov.w	r3, #0
 8004a1c:	008b      	lsls	r3, r1, #2
 8004a1e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a22:	0082      	lsls	r2, r0, #2
 8004a24:	4650      	mov	r0, sl
 8004a26:	4659      	mov	r1, fp
 8004a28:	f7fb fc32 	bl	8000290 <__aeabi_uldivmod>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	460b      	mov	r3, r1
 8004a30:	4b0e      	ldr	r3, [pc, #56]	; (8004a6c <UART_SetConfig+0x38c>)
 8004a32:	fba3 1302 	umull	r1, r3, r3, r2
 8004a36:	095b      	lsrs	r3, r3, #5
 8004a38:	2164      	movs	r1, #100	; 0x64
 8004a3a:	fb01 f303 	mul.w	r3, r1, r3
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	011b      	lsls	r3, r3, #4
 8004a42:	3332      	adds	r3, #50	; 0x32
 8004a44:	4a09      	ldr	r2, [pc, #36]	; (8004a6c <UART_SetConfig+0x38c>)
 8004a46:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	f003 020f 	and.w	r2, r3, #15
 8004a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4432      	add	r2, r6
 8004a56:	609a      	str	r2, [r3, #8]
}
 8004a58:	bf00      	nop
 8004a5a:	377c      	adds	r7, #124	; 0x7c
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a62:	bf00      	nop
 8004a64:	40011000 	.word	0x40011000
 8004a68:	40011400 	.word	0x40011400
 8004a6c:	51eb851f 	.word	0x51eb851f

08004a70 <__errno>:
 8004a70:	4b01      	ldr	r3, [pc, #4]	; (8004a78 <__errno+0x8>)
 8004a72:	6818      	ldr	r0, [r3, #0]
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	2000000c 	.word	0x2000000c

08004a7c <__libc_init_array>:
 8004a7c:	b570      	push	{r4, r5, r6, lr}
 8004a7e:	4d0d      	ldr	r5, [pc, #52]	; (8004ab4 <__libc_init_array+0x38>)
 8004a80:	4c0d      	ldr	r4, [pc, #52]	; (8004ab8 <__libc_init_array+0x3c>)
 8004a82:	1b64      	subs	r4, r4, r5
 8004a84:	10a4      	asrs	r4, r4, #2
 8004a86:	2600      	movs	r6, #0
 8004a88:	42a6      	cmp	r6, r4
 8004a8a:	d109      	bne.n	8004aa0 <__libc_init_array+0x24>
 8004a8c:	4d0b      	ldr	r5, [pc, #44]	; (8004abc <__libc_init_array+0x40>)
 8004a8e:	4c0c      	ldr	r4, [pc, #48]	; (8004ac0 <__libc_init_array+0x44>)
 8004a90:	f000 fc56 	bl	8005340 <_init>
 8004a94:	1b64      	subs	r4, r4, r5
 8004a96:	10a4      	asrs	r4, r4, #2
 8004a98:	2600      	movs	r6, #0
 8004a9a:	42a6      	cmp	r6, r4
 8004a9c:	d105      	bne.n	8004aaa <__libc_init_array+0x2e>
 8004a9e:	bd70      	pop	{r4, r5, r6, pc}
 8004aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aa4:	4798      	blx	r3
 8004aa6:	3601      	adds	r6, #1
 8004aa8:	e7ee      	b.n	8004a88 <__libc_init_array+0xc>
 8004aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aae:	4798      	blx	r3
 8004ab0:	3601      	adds	r6, #1
 8004ab2:	e7f2      	b.n	8004a9a <__libc_init_array+0x1e>
 8004ab4:	080053bc 	.word	0x080053bc
 8004ab8:	080053bc 	.word	0x080053bc
 8004abc:	080053bc 	.word	0x080053bc
 8004ac0:	080053c0 	.word	0x080053c0

08004ac4 <malloc>:
 8004ac4:	4b02      	ldr	r3, [pc, #8]	; (8004ad0 <malloc+0xc>)
 8004ac6:	4601      	mov	r1, r0
 8004ac8:	6818      	ldr	r0, [r3, #0]
 8004aca:	f000 b85b 	b.w	8004b84 <_malloc_r>
 8004ace:	bf00      	nop
 8004ad0:	2000000c 	.word	0x2000000c

08004ad4 <memset>:
 8004ad4:	4402      	add	r2, r0
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d100      	bne.n	8004ade <memset+0xa>
 8004adc:	4770      	bx	lr
 8004ade:	f803 1b01 	strb.w	r1, [r3], #1
 8004ae2:	e7f9      	b.n	8004ad8 <memset+0x4>

08004ae4 <_free_r>:
 8004ae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ae6:	2900      	cmp	r1, #0
 8004ae8:	d048      	beq.n	8004b7c <_free_r+0x98>
 8004aea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004aee:	9001      	str	r0, [sp, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f1a1 0404 	sub.w	r4, r1, #4
 8004af6:	bfb8      	it	lt
 8004af8:	18e4      	addlt	r4, r4, r3
 8004afa:	f000 f8cd 	bl	8004c98 <__malloc_lock>
 8004afe:	4a20      	ldr	r2, [pc, #128]	; (8004b80 <_free_r+0x9c>)
 8004b00:	9801      	ldr	r0, [sp, #4]
 8004b02:	6813      	ldr	r3, [r2, #0]
 8004b04:	4615      	mov	r5, r2
 8004b06:	b933      	cbnz	r3, 8004b16 <_free_r+0x32>
 8004b08:	6063      	str	r3, [r4, #4]
 8004b0a:	6014      	str	r4, [r2, #0]
 8004b0c:	b003      	add	sp, #12
 8004b0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b12:	f000 b8c7 	b.w	8004ca4 <__malloc_unlock>
 8004b16:	42a3      	cmp	r3, r4
 8004b18:	d90b      	bls.n	8004b32 <_free_r+0x4e>
 8004b1a:	6821      	ldr	r1, [r4, #0]
 8004b1c:	1862      	adds	r2, r4, r1
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	bf04      	itt	eq
 8004b22:	681a      	ldreq	r2, [r3, #0]
 8004b24:	685b      	ldreq	r3, [r3, #4]
 8004b26:	6063      	str	r3, [r4, #4]
 8004b28:	bf04      	itt	eq
 8004b2a:	1852      	addeq	r2, r2, r1
 8004b2c:	6022      	streq	r2, [r4, #0]
 8004b2e:	602c      	str	r4, [r5, #0]
 8004b30:	e7ec      	b.n	8004b0c <_free_r+0x28>
 8004b32:	461a      	mov	r2, r3
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	b10b      	cbz	r3, 8004b3c <_free_r+0x58>
 8004b38:	42a3      	cmp	r3, r4
 8004b3a:	d9fa      	bls.n	8004b32 <_free_r+0x4e>
 8004b3c:	6811      	ldr	r1, [r2, #0]
 8004b3e:	1855      	adds	r5, r2, r1
 8004b40:	42a5      	cmp	r5, r4
 8004b42:	d10b      	bne.n	8004b5c <_free_r+0x78>
 8004b44:	6824      	ldr	r4, [r4, #0]
 8004b46:	4421      	add	r1, r4
 8004b48:	1854      	adds	r4, r2, r1
 8004b4a:	42a3      	cmp	r3, r4
 8004b4c:	6011      	str	r1, [r2, #0]
 8004b4e:	d1dd      	bne.n	8004b0c <_free_r+0x28>
 8004b50:	681c      	ldr	r4, [r3, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	6053      	str	r3, [r2, #4]
 8004b56:	4421      	add	r1, r4
 8004b58:	6011      	str	r1, [r2, #0]
 8004b5a:	e7d7      	b.n	8004b0c <_free_r+0x28>
 8004b5c:	d902      	bls.n	8004b64 <_free_r+0x80>
 8004b5e:	230c      	movs	r3, #12
 8004b60:	6003      	str	r3, [r0, #0]
 8004b62:	e7d3      	b.n	8004b0c <_free_r+0x28>
 8004b64:	6825      	ldr	r5, [r4, #0]
 8004b66:	1961      	adds	r1, r4, r5
 8004b68:	428b      	cmp	r3, r1
 8004b6a:	bf04      	itt	eq
 8004b6c:	6819      	ldreq	r1, [r3, #0]
 8004b6e:	685b      	ldreq	r3, [r3, #4]
 8004b70:	6063      	str	r3, [r4, #4]
 8004b72:	bf04      	itt	eq
 8004b74:	1949      	addeq	r1, r1, r5
 8004b76:	6021      	streq	r1, [r4, #0]
 8004b78:	6054      	str	r4, [r2, #4]
 8004b7a:	e7c7      	b.n	8004b0c <_free_r+0x28>
 8004b7c:	b003      	add	sp, #12
 8004b7e:	bd30      	pop	{r4, r5, pc}
 8004b80:	20000090 	.word	0x20000090

08004b84 <_malloc_r>:
 8004b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b86:	1ccd      	adds	r5, r1, #3
 8004b88:	f025 0503 	bic.w	r5, r5, #3
 8004b8c:	3508      	adds	r5, #8
 8004b8e:	2d0c      	cmp	r5, #12
 8004b90:	bf38      	it	cc
 8004b92:	250c      	movcc	r5, #12
 8004b94:	2d00      	cmp	r5, #0
 8004b96:	4606      	mov	r6, r0
 8004b98:	db01      	blt.n	8004b9e <_malloc_r+0x1a>
 8004b9a:	42a9      	cmp	r1, r5
 8004b9c:	d903      	bls.n	8004ba6 <_malloc_r+0x22>
 8004b9e:	230c      	movs	r3, #12
 8004ba0:	6033      	str	r3, [r6, #0]
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ba6:	f000 f877 	bl	8004c98 <__malloc_lock>
 8004baa:	4921      	ldr	r1, [pc, #132]	; (8004c30 <_malloc_r+0xac>)
 8004bac:	680a      	ldr	r2, [r1, #0]
 8004bae:	4614      	mov	r4, r2
 8004bb0:	b99c      	cbnz	r4, 8004bda <_malloc_r+0x56>
 8004bb2:	4f20      	ldr	r7, [pc, #128]	; (8004c34 <_malloc_r+0xb0>)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	b923      	cbnz	r3, 8004bc2 <_malloc_r+0x3e>
 8004bb8:	4621      	mov	r1, r4
 8004bba:	4630      	mov	r0, r6
 8004bbc:	f000 f83c 	bl	8004c38 <_sbrk_r>
 8004bc0:	6038      	str	r0, [r7, #0]
 8004bc2:	4629      	mov	r1, r5
 8004bc4:	4630      	mov	r0, r6
 8004bc6:	f000 f837 	bl	8004c38 <_sbrk_r>
 8004bca:	1c43      	adds	r3, r0, #1
 8004bcc:	d123      	bne.n	8004c16 <_malloc_r+0x92>
 8004bce:	230c      	movs	r3, #12
 8004bd0:	6033      	str	r3, [r6, #0]
 8004bd2:	4630      	mov	r0, r6
 8004bd4:	f000 f866 	bl	8004ca4 <__malloc_unlock>
 8004bd8:	e7e3      	b.n	8004ba2 <_malloc_r+0x1e>
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	1b5b      	subs	r3, r3, r5
 8004bde:	d417      	bmi.n	8004c10 <_malloc_r+0x8c>
 8004be0:	2b0b      	cmp	r3, #11
 8004be2:	d903      	bls.n	8004bec <_malloc_r+0x68>
 8004be4:	6023      	str	r3, [r4, #0]
 8004be6:	441c      	add	r4, r3
 8004be8:	6025      	str	r5, [r4, #0]
 8004bea:	e004      	b.n	8004bf6 <_malloc_r+0x72>
 8004bec:	6863      	ldr	r3, [r4, #4]
 8004bee:	42a2      	cmp	r2, r4
 8004bf0:	bf0c      	ite	eq
 8004bf2:	600b      	streq	r3, [r1, #0]
 8004bf4:	6053      	strne	r3, [r2, #4]
 8004bf6:	4630      	mov	r0, r6
 8004bf8:	f000 f854 	bl	8004ca4 <__malloc_unlock>
 8004bfc:	f104 000b 	add.w	r0, r4, #11
 8004c00:	1d23      	adds	r3, r4, #4
 8004c02:	f020 0007 	bic.w	r0, r0, #7
 8004c06:	1ac2      	subs	r2, r0, r3
 8004c08:	d0cc      	beq.n	8004ba4 <_malloc_r+0x20>
 8004c0a:	1a1b      	subs	r3, r3, r0
 8004c0c:	50a3      	str	r3, [r4, r2]
 8004c0e:	e7c9      	b.n	8004ba4 <_malloc_r+0x20>
 8004c10:	4622      	mov	r2, r4
 8004c12:	6864      	ldr	r4, [r4, #4]
 8004c14:	e7cc      	b.n	8004bb0 <_malloc_r+0x2c>
 8004c16:	1cc4      	adds	r4, r0, #3
 8004c18:	f024 0403 	bic.w	r4, r4, #3
 8004c1c:	42a0      	cmp	r0, r4
 8004c1e:	d0e3      	beq.n	8004be8 <_malloc_r+0x64>
 8004c20:	1a21      	subs	r1, r4, r0
 8004c22:	4630      	mov	r0, r6
 8004c24:	f000 f808 	bl	8004c38 <_sbrk_r>
 8004c28:	3001      	adds	r0, #1
 8004c2a:	d1dd      	bne.n	8004be8 <_malloc_r+0x64>
 8004c2c:	e7cf      	b.n	8004bce <_malloc_r+0x4a>
 8004c2e:	bf00      	nop
 8004c30:	20000090 	.word	0x20000090
 8004c34:	20000094 	.word	0x20000094

08004c38 <_sbrk_r>:
 8004c38:	b538      	push	{r3, r4, r5, lr}
 8004c3a:	4d06      	ldr	r5, [pc, #24]	; (8004c54 <_sbrk_r+0x1c>)
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	4604      	mov	r4, r0
 8004c40:	4608      	mov	r0, r1
 8004c42:	602b      	str	r3, [r5, #0]
 8004c44:	f7fc fa56 	bl	80010f4 <_sbrk>
 8004c48:	1c43      	adds	r3, r0, #1
 8004c4a:	d102      	bne.n	8004c52 <_sbrk_r+0x1a>
 8004c4c:	682b      	ldr	r3, [r5, #0]
 8004c4e:	b103      	cbz	r3, 8004c52 <_sbrk_r+0x1a>
 8004c50:	6023      	str	r3, [r4, #0]
 8004c52:	bd38      	pop	{r3, r4, r5, pc}
 8004c54:	200003bc 	.word	0x200003bc

08004c58 <siprintf>:
 8004c58:	b40e      	push	{r1, r2, r3}
 8004c5a:	b500      	push	{lr}
 8004c5c:	b09c      	sub	sp, #112	; 0x70
 8004c5e:	ab1d      	add	r3, sp, #116	; 0x74
 8004c60:	9002      	str	r0, [sp, #8]
 8004c62:	9006      	str	r0, [sp, #24]
 8004c64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c68:	4809      	ldr	r0, [pc, #36]	; (8004c90 <siprintf+0x38>)
 8004c6a:	9107      	str	r1, [sp, #28]
 8004c6c:	9104      	str	r1, [sp, #16]
 8004c6e:	4909      	ldr	r1, [pc, #36]	; (8004c94 <siprintf+0x3c>)
 8004c70:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c74:	9105      	str	r1, [sp, #20]
 8004c76:	6800      	ldr	r0, [r0, #0]
 8004c78:	9301      	str	r3, [sp, #4]
 8004c7a:	a902      	add	r1, sp, #8
 8004c7c:	f000 f874 	bl	8004d68 <_svfiprintf_r>
 8004c80:	9b02      	ldr	r3, [sp, #8]
 8004c82:	2200      	movs	r2, #0
 8004c84:	701a      	strb	r2, [r3, #0]
 8004c86:	b01c      	add	sp, #112	; 0x70
 8004c88:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c8c:	b003      	add	sp, #12
 8004c8e:	4770      	bx	lr
 8004c90:	2000000c 	.word	0x2000000c
 8004c94:	ffff0208 	.word	0xffff0208

08004c98 <__malloc_lock>:
 8004c98:	4801      	ldr	r0, [pc, #4]	; (8004ca0 <__malloc_lock+0x8>)
 8004c9a:	f000 baf9 	b.w	8005290 <__retarget_lock_acquire_recursive>
 8004c9e:	bf00      	nop
 8004ca0:	200003c4 	.word	0x200003c4

08004ca4 <__malloc_unlock>:
 8004ca4:	4801      	ldr	r0, [pc, #4]	; (8004cac <__malloc_unlock+0x8>)
 8004ca6:	f000 baf4 	b.w	8005292 <__retarget_lock_release_recursive>
 8004caa:	bf00      	nop
 8004cac:	200003c4 	.word	0x200003c4

08004cb0 <__ssputs_r>:
 8004cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb4:	688e      	ldr	r6, [r1, #8]
 8004cb6:	429e      	cmp	r6, r3
 8004cb8:	4682      	mov	sl, r0
 8004cba:	460c      	mov	r4, r1
 8004cbc:	4690      	mov	r8, r2
 8004cbe:	461f      	mov	r7, r3
 8004cc0:	d838      	bhi.n	8004d34 <__ssputs_r+0x84>
 8004cc2:	898a      	ldrh	r2, [r1, #12]
 8004cc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004cc8:	d032      	beq.n	8004d30 <__ssputs_r+0x80>
 8004cca:	6825      	ldr	r5, [r4, #0]
 8004ccc:	6909      	ldr	r1, [r1, #16]
 8004cce:	eba5 0901 	sub.w	r9, r5, r1
 8004cd2:	6965      	ldr	r5, [r4, #20]
 8004cd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004cd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004cdc:	3301      	adds	r3, #1
 8004cde:	444b      	add	r3, r9
 8004ce0:	106d      	asrs	r5, r5, #1
 8004ce2:	429d      	cmp	r5, r3
 8004ce4:	bf38      	it	cc
 8004ce6:	461d      	movcc	r5, r3
 8004ce8:	0553      	lsls	r3, r2, #21
 8004cea:	d531      	bpl.n	8004d50 <__ssputs_r+0xa0>
 8004cec:	4629      	mov	r1, r5
 8004cee:	f7ff ff49 	bl	8004b84 <_malloc_r>
 8004cf2:	4606      	mov	r6, r0
 8004cf4:	b950      	cbnz	r0, 8004d0c <__ssputs_r+0x5c>
 8004cf6:	230c      	movs	r3, #12
 8004cf8:	f8ca 3000 	str.w	r3, [sl]
 8004cfc:	89a3      	ldrh	r3, [r4, #12]
 8004cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d02:	81a3      	strh	r3, [r4, #12]
 8004d04:	f04f 30ff 	mov.w	r0, #4294967295
 8004d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d0c:	6921      	ldr	r1, [r4, #16]
 8004d0e:	464a      	mov	r2, r9
 8004d10:	f000 fac0 	bl	8005294 <memcpy>
 8004d14:	89a3      	ldrh	r3, [r4, #12]
 8004d16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d1e:	81a3      	strh	r3, [r4, #12]
 8004d20:	6126      	str	r6, [r4, #16]
 8004d22:	6165      	str	r5, [r4, #20]
 8004d24:	444e      	add	r6, r9
 8004d26:	eba5 0509 	sub.w	r5, r5, r9
 8004d2a:	6026      	str	r6, [r4, #0]
 8004d2c:	60a5      	str	r5, [r4, #8]
 8004d2e:	463e      	mov	r6, r7
 8004d30:	42be      	cmp	r6, r7
 8004d32:	d900      	bls.n	8004d36 <__ssputs_r+0x86>
 8004d34:	463e      	mov	r6, r7
 8004d36:	4632      	mov	r2, r6
 8004d38:	6820      	ldr	r0, [r4, #0]
 8004d3a:	4641      	mov	r1, r8
 8004d3c:	f000 fab8 	bl	80052b0 <memmove>
 8004d40:	68a3      	ldr	r3, [r4, #8]
 8004d42:	6822      	ldr	r2, [r4, #0]
 8004d44:	1b9b      	subs	r3, r3, r6
 8004d46:	4432      	add	r2, r6
 8004d48:	60a3      	str	r3, [r4, #8]
 8004d4a:	6022      	str	r2, [r4, #0]
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	e7db      	b.n	8004d08 <__ssputs_r+0x58>
 8004d50:	462a      	mov	r2, r5
 8004d52:	f000 fac7 	bl	80052e4 <_realloc_r>
 8004d56:	4606      	mov	r6, r0
 8004d58:	2800      	cmp	r0, #0
 8004d5a:	d1e1      	bne.n	8004d20 <__ssputs_r+0x70>
 8004d5c:	6921      	ldr	r1, [r4, #16]
 8004d5e:	4650      	mov	r0, sl
 8004d60:	f7ff fec0 	bl	8004ae4 <_free_r>
 8004d64:	e7c7      	b.n	8004cf6 <__ssputs_r+0x46>
	...

08004d68 <_svfiprintf_r>:
 8004d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d6c:	4698      	mov	r8, r3
 8004d6e:	898b      	ldrh	r3, [r1, #12]
 8004d70:	061b      	lsls	r3, r3, #24
 8004d72:	b09d      	sub	sp, #116	; 0x74
 8004d74:	4607      	mov	r7, r0
 8004d76:	460d      	mov	r5, r1
 8004d78:	4614      	mov	r4, r2
 8004d7a:	d50e      	bpl.n	8004d9a <_svfiprintf_r+0x32>
 8004d7c:	690b      	ldr	r3, [r1, #16]
 8004d7e:	b963      	cbnz	r3, 8004d9a <_svfiprintf_r+0x32>
 8004d80:	2140      	movs	r1, #64	; 0x40
 8004d82:	f7ff feff 	bl	8004b84 <_malloc_r>
 8004d86:	6028      	str	r0, [r5, #0]
 8004d88:	6128      	str	r0, [r5, #16]
 8004d8a:	b920      	cbnz	r0, 8004d96 <_svfiprintf_r+0x2e>
 8004d8c:	230c      	movs	r3, #12
 8004d8e:	603b      	str	r3, [r7, #0]
 8004d90:	f04f 30ff 	mov.w	r0, #4294967295
 8004d94:	e0d1      	b.n	8004f3a <_svfiprintf_r+0x1d2>
 8004d96:	2340      	movs	r3, #64	; 0x40
 8004d98:	616b      	str	r3, [r5, #20]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8004d9e:	2320      	movs	r3, #32
 8004da0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004da4:	f8cd 800c 	str.w	r8, [sp, #12]
 8004da8:	2330      	movs	r3, #48	; 0x30
 8004daa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004f54 <_svfiprintf_r+0x1ec>
 8004dae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004db2:	f04f 0901 	mov.w	r9, #1
 8004db6:	4623      	mov	r3, r4
 8004db8:	469a      	mov	sl, r3
 8004dba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dbe:	b10a      	cbz	r2, 8004dc4 <_svfiprintf_r+0x5c>
 8004dc0:	2a25      	cmp	r2, #37	; 0x25
 8004dc2:	d1f9      	bne.n	8004db8 <_svfiprintf_r+0x50>
 8004dc4:	ebba 0b04 	subs.w	fp, sl, r4
 8004dc8:	d00b      	beq.n	8004de2 <_svfiprintf_r+0x7a>
 8004dca:	465b      	mov	r3, fp
 8004dcc:	4622      	mov	r2, r4
 8004dce:	4629      	mov	r1, r5
 8004dd0:	4638      	mov	r0, r7
 8004dd2:	f7ff ff6d 	bl	8004cb0 <__ssputs_r>
 8004dd6:	3001      	adds	r0, #1
 8004dd8:	f000 80aa 	beq.w	8004f30 <_svfiprintf_r+0x1c8>
 8004ddc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004dde:	445a      	add	r2, fp
 8004de0:	9209      	str	r2, [sp, #36]	; 0x24
 8004de2:	f89a 3000 	ldrb.w	r3, [sl]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 80a2 	beq.w	8004f30 <_svfiprintf_r+0x1c8>
 8004dec:	2300      	movs	r3, #0
 8004dee:	f04f 32ff 	mov.w	r2, #4294967295
 8004df2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004df6:	f10a 0a01 	add.w	sl, sl, #1
 8004dfa:	9304      	str	r3, [sp, #16]
 8004dfc:	9307      	str	r3, [sp, #28]
 8004dfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e02:	931a      	str	r3, [sp, #104]	; 0x68
 8004e04:	4654      	mov	r4, sl
 8004e06:	2205      	movs	r2, #5
 8004e08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e0c:	4851      	ldr	r0, [pc, #324]	; (8004f54 <_svfiprintf_r+0x1ec>)
 8004e0e:	f7fb f9ef 	bl	80001f0 <memchr>
 8004e12:	9a04      	ldr	r2, [sp, #16]
 8004e14:	b9d8      	cbnz	r0, 8004e4e <_svfiprintf_r+0xe6>
 8004e16:	06d0      	lsls	r0, r2, #27
 8004e18:	bf44      	itt	mi
 8004e1a:	2320      	movmi	r3, #32
 8004e1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e20:	0711      	lsls	r1, r2, #28
 8004e22:	bf44      	itt	mi
 8004e24:	232b      	movmi	r3, #43	; 0x2b
 8004e26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8004e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8004e30:	d015      	beq.n	8004e5e <_svfiprintf_r+0xf6>
 8004e32:	9a07      	ldr	r2, [sp, #28]
 8004e34:	4654      	mov	r4, sl
 8004e36:	2000      	movs	r0, #0
 8004e38:	f04f 0c0a 	mov.w	ip, #10
 8004e3c:	4621      	mov	r1, r4
 8004e3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e42:	3b30      	subs	r3, #48	; 0x30
 8004e44:	2b09      	cmp	r3, #9
 8004e46:	d94e      	bls.n	8004ee6 <_svfiprintf_r+0x17e>
 8004e48:	b1b0      	cbz	r0, 8004e78 <_svfiprintf_r+0x110>
 8004e4a:	9207      	str	r2, [sp, #28]
 8004e4c:	e014      	b.n	8004e78 <_svfiprintf_r+0x110>
 8004e4e:	eba0 0308 	sub.w	r3, r0, r8
 8004e52:	fa09 f303 	lsl.w	r3, r9, r3
 8004e56:	4313      	orrs	r3, r2
 8004e58:	9304      	str	r3, [sp, #16]
 8004e5a:	46a2      	mov	sl, r4
 8004e5c:	e7d2      	b.n	8004e04 <_svfiprintf_r+0x9c>
 8004e5e:	9b03      	ldr	r3, [sp, #12]
 8004e60:	1d19      	adds	r1, r3, #4
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	9103      	str	r1, [sp, #12]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	bfbb      	ittet	lt
 8004e6a:	425b      	neglt	r3, r3
 8004e6c:	f042 0202 	orrlt.w	r2, r2, #2
 8004e70:	9307      	strge	r3, [sp, #28]
 8004e72:	9307      	strlt	r3, [sp, #28]
 8004e74:	bfb8      	it	lt
 8004e76:	9204      	strlt	r2, [sp, #16]
 8004e78:	7823      	ldrb	r3, [r4, #0]
 8004e7a:	2b2e      	cmp	r3, #46	; 0x2e
 8004e7c:	d10c      	bne.n	8004e98 <_svfiprintf_r+0x130>
 8004e7e:	7863      	ldrb	r3, [r4, #1]
 8004e80:	2b2a      	cmp	r3, #42	; 0x2a
 8004e82:	d135      	bne.n	8004ef0 <_svfiprintf_r+0x188>
 8004e84:	9b03      	ldr	r3, [sp, #12]
 8004e86:	1d1a      	adds	r2, r3, #4
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	9203      	str	r2, [sp, #12]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	bfb8      	it	lt
 8004e90:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e94:	3402      	adds	r4, #2
 8004e96:	9305      	str	r3, [sp, #20]
 8004e98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004f64 <_svfiprintf_r+0x1fc>
 8004e9c:	7821      	ldrb	r1, [r4, #0]
 8004e9e:	2203      	movs	r2, #3
 8004ea0:	4650      	mov	r0, sl
 8004ea2:	f7fb f9a5 	bl	80001f0 <memchr>
 8004ea6:	b140      	cbz	r0, 8004eba <_svfiprintf_r+0x152>
 8004ea8:	2340      	movs	r3, #64	; 0x40
 8004eaa:	eba0 000a 	sub.w	r0, r0, sl
 8004eae:	fa03 f000 	lsl.w	r0, r3, r0
 8004eb2:	9b04      	ldr	r3, [sp, #16]
 8004eb4:	4303      	orrs	r3, r0
 8004eb6:	3401      	adds	r4, #1
 8004eb8:	9304      	str	r3, [sp, #16]
 8004eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ebe:	4826      	ldr	r0, [pc, #152]	; (8004f58 <_svfiprintf_r+0x1f0>)
 8004ec0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ec4:	2206      	movs	r2, #6
 8004ec6:	f7fb f993 	bl	80001f0 <memchr>
 8004eca:	2800      	cmp	r0, #0
 8004ecc:	d038      	beq.n	8004f40 <_svfiprintf_r+0x1d8>
 8004ece:	4b23      	ldr	r3, [pc, #140]	; (8004f5c <_svfiprintf_r+0x1f4>)
 8004ed0:	bb1b      	cbnz	r3, 8004f1a <_svfiprintf_r+0x1b2>
 8004ed2:	9b03      	ldr	r3, [sp, #12]
 8004ed4:	3307      	adds	r3, #7
 8004ed6:	f023 0307 	bic.w	r3, r3, #7
 8004eda:	3308      	adds	r3, #8
 8004edc:	9303      	str	r3, [sp, #12]
 8004ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ee0:	4433      	add	r3, r6
 8004ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ee4:	e767      	b.n	8004db6 <_svfiprintf_r+0x4e>
 8004ee6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004eea:	460c      	mov	r4, r1
 8004eec:	2001      	movs	r0, #1
 8004eee:	e7a5      	b.n	8004e3c <_svfiprintf_r+0xd4>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	3401      	adds	r4, #1
 8004ef4:	9305      	str	r3, [sp, #20]
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	f04f 0c0a 	mov.w	ip, #10
 8004efc:	4620      	mov	r0, r4
 8004efe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f02:	3a30      	subs	r2, #48	; 0x30
 8004f04:	2a09      	cmp	r2, #9
 8004f06:	d903      	bls.n	8004f10 <_svfiprintf_r+0x1a8>
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0c5      	beq.n	8004e98 <_svfiprintf_r+0x130>
 8004f0c:	9105      	str	r1, [sp, #20]
 8004f0e:	e7c3      	b.n	8004e98 <_svfiprintf_r+0x130>
 8004f10:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f14:	4604      	mov	r4, r0
 8004f16:	2301      	movs	r3, #1
 8004f18:	e7f0      	b.n	8004efc <_svfiprintf_r+0x194>
 8004f1a:	ab03      	add	r3, sp, #12
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	462a      	mov	r2, r5
 8004f20:	4b0f      	ldr	r3, [pc, #60]	; (8004f60 <_svfiprintf_r+0x1f8>)
 8004f22:	a904      	add	r1, sp, #16
 8004f24:	4638      	mov	r0, r7
 8004f26:	f3af 8000 	nop.w
 8004f2a:	1c42      	adds	r2, r0, #1
 8004f2c:	4606      	mov	r6, r0
 8004f2e:	d1d6      	bne.n	8004ede <_svfiprintf_r+0x176>
 8004f30:	89ab      	ldrh	r3, [r5, #12]
 8004f32:	065b      	lsls	r3, r3, #25
 8004f34:	f53f af2c 	bmi.w	8004d90 <_svfiprintf_r+0x28>
 8004f38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f3a:	b01d      	add	sp, #116	; 0x74
 8004f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f40:	ab03      	add	r3, sp, #12
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	462a      	mov	r2, r5
 8004f46:	4b06      	ldr	r3, [pc, #24]	; (8004f60 <_svfiprintf_r+0x1f8>)
 8004f48:	a904      	add	r1, sp, #16
 8004f4a:	4638      	mov	r0, r7
 8004f4c:	f000 f87a 	bl	8005044 <_printf_i>
 8004f50:	e7eb      	b.n	8004f2a <_svfiprintf_r+0x1c2>
 8004f52:	bf00      	nop
 8004f54:	08005380 	.word	0x08005380
 8004f58:	0800538a 	.word	0x0800538a
 8004f5c:	00000000 	.word	0x00000000
 8004f60:	08004cb1 	.word	0x08004cb1
 8004f64:	08005386 	.word	0x08005386

08004f68 <_printf_common>:
 8004f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f6c:	4616      	mov	r6, r2
 8004f6e:	4699      	mov	r9, r3
 8004f70:	688a      	ldr	r2, [r1, #8]
 8004f72:	690b      	ldr	r3, [r1, #16]
 8004f74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	bfb8      	it	lt
 8004f7c:	4613      	movlt	r3, r2
 8004f7e:	6033      	str	r3, [r6, #0]
 8004f80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f84:	4607      	mov	r7, r0
 8004f86:	460c      	mov	r4, r1
 8004f88:	b10a      	cbz	r2, 8004f8e <_printf_common+0x26>
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	6033      	str	r3, [r6, #0]
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	0699      	lsls	r1, r3, #26
 8004f92:	bf42      	ittt	mi
 8004f94:	6833      	ldrmi	r3, [r6, #0]
 8004f96:	3302      	addmi	r3, #2
 8004f98:	6033      	strmi	r3, [r6, #0]
 8004f9a:	6825      	ldr	r5, [r4, #0]
 8004f9c:	f015 0506 	ands.w	r5, r5, #6
 8004fa0:	d106      	bne.n	8004fb0 <_printf_common+0x48>
 8004fa2:	f104 0a19 	add.w	sl, r4, #25
 8004fa6:	68e3      	ldr	r3, [r4, #12]
 8004fa8:	6832      	ldr	r2, [r6, #0]
 8004faa:	1a9b      	subs	r3, r3, r2
 8004fac:	42ab      	cmp	r3, r5
 8004fae:	dc26      	bgt.n	8004ffe <_printf_common+0x96>
 8004fb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fb4:	1e13      	subs	r3, r2, #0
 8004fb6:	6822      	ldr	r2, [r4, #0]
 8004fb8:	bf18      	it	ne
 8004fba:	2301      	movne	r3, #1
 8004fbc:	0692      	lsls	r2, r2, #26
 8004fbe:	d42b      	bmi.n	8005018 <_printf_common+0xb0>
 8004fc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fc4:	4649      	mov	r1, r9
 8004fc6:	4638      	mov	r0, r7
 8004fc8:	47c0      	blx	r8
 8004fca:	3001      	adds	r0, #1
 8004fcc:	d01e      	beq.n	800500c <_printf_common+0xa4>
 8004fce:	6823      	ldr	r3, [r4, #0]
 8004fd0:	68e5      	ldr	r5, [r4, #12]
 8004fd2:	6832      	ldr	r2, [r6, #0]
 8004fd4:	f003 0306 	and.w	r3, r3, #6
 8004fd8:	2b04      	cmp	r3, #4
 8004fda:	bf08      	it	eq
 8004fdc:	1aad      	subeq	r5, r5, r2
 8004fde:	68a3      	ldr	r3, [r4, #8]
 8004fe0:	6922      	ldr	r2, [r4, #16]
 8004fe2:	bf0c      	ite	eq
 8004fe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fe8:	2500      	movne	r5, #0
 8004fea:	4293      	cmp	r3, r2
 8004fec:	bfc4      	itt	gt
 8004fee:	1a9b      	subgt	r3, r3, r2
 8004ff0:	18ed      	addgt	r5, r5, r3
 8004ff2:	2600      	movs	r6, #0
 8004ff4:	341a      	adds	r4, #26
 8004ff6:	42b5      	cmp	r5, r6
 8004ff8:	d11a      	bne.n	8005030 <_printf_common+0xc8>
 8004ffa:	2000      	movs	r0, #0
 8004ffc:	e008      	b.n	8005010 <_printf_common+0xa8>
 8004ffe:	2301      	movs	r3, #1
 8005000:	4652      	mov	r2, sl
 8005002:	4649      	mov	r1, r9
 8005004:	4638      	mov	r0, r7
 8005006:	47c0      	blx	r8
 8005008:	3001      	adds	r0, #1
 800500a:	d103      	bne.n	8005014 <_printf_common+0xac>
 800500c:	f04f 30ff 	mov.w	r0, #4294967295
 8005010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005014:	3501      	adds	r5, #1
 8005016:	e7c6      	b.n	8004fa6 <_printf_common+0x3e>
 8005018:	18e1      	adds	r1, r4, r3
 800501a:	1c5a      	adds	r2, r3, #1
 800501c:	2030      	movs	r0, #48	; 0x30
 800501e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005022:	4422      	add	r2, r4
 8005024:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005028:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800502c:	3302      	adds	r3, #2
 800502e:	e7c7      	b.n	8004fc0 <_printf_common+0x58>
 8005030:	2301      	movs	r3, #1
 8005032:	4622      	mov	r2, r4
 8005034:	4649      	mov	r1, r9
 8005036:	4638      	mov	r0, r7
 8005038:	47c0      	blx	r8
 800503a:	3001      	adds	r0, #1
 800503c:	d0e6      	beq.n	800500c <_printf_common+0xa4>
 800503e:	3601      	adds	r6, #1
 8005040:	e7d9      	b.n	8004ff6 <_printf_common+0x8e>
	...

08005044 <_printf_i>:
 8005044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005048:	460c      	mov	r4, r1
 800504a:	4691      	mov	r9, r2
 800504c:	7e27      	ldrb	r7, [r4, #24]
 800504e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005050:	2f78      	cmp	r7, #120	; 0x78
 8005052:	4680      	mov	r8, r0
 8005054:	469a      	mov	sl, r3
 8005056:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800505a:	d807      	bhi.n	800506c <_printf_i+0x28>
 800505c:	2f62      	cmp	r7, #98	; 0x62
 800505e:	d80a      	bhi.n	8005076 <_printf_i+0x32>
 8005060:	2f00      	cmp	r7, #0
 8005062:	f000 80d8 	beq.w	8005216 <_printf_i+0x1d2>
 8005066:	2f58      	cmp	r7, #88	; 0x58
 8005068:	f000 80a3 	beq.w	80051b2 <_printf_i+0x16e>
 800506c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005070:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005074:	e03a      	b.n	80050ec <_printf_i+0xa8>
 8005076:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800507a:	2b15      	cmp	r3, #21
 800507c:	d8f6      	bhi.n	800506c <_printf_i+0x28>
 800507e:	a001      	add	r0, pc, #4	; (adr r0, 8005084 <_printf_i+0x40>)
 8005080:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005084:	080050dd 	.word	0x080050dd
 8005088:	080050f1 	.word	0x080050f1
 800508c:	0800506d 	.word	0x0800506d
 8005090:	0800506d 	.word	0x0800506d
 8005094:	0800506d 	.word	0x0800506d
 8005098:	0800506d 	.word	0x0800506d
 800509c:	080050f1 	.word	0x080050f1
 80050a0:	0800506d 	.word	0x0800506d
 80050a4:	0800506d 	.word	0x0800506d
 80050a8:	0800506d 	.word	0x0800506d
 80050ac:	0800506d 	.word	0x0800506d
 80050b0:	080051fd 	.word	0x080051fd
 80050b4:	08005121 	.word	0x08005121
 80050b8:	080051df 	.word	0x080051df
 80050bc:	0800506d 	.word	0x0800506d
 80050c0:	0800506d 	.word	0x0800506d
 80050c4:	0800521f 	.word	0x0800521f
 80050c8:	0800506d 	.word	0x0800506d
 80050cc:	08005121 	.word	0x08005121
 80050d0:	0800506d 	.word	0x0800506d
 80050d4:	0800506d 	.word	0x0800506d
 80050d8:	080051e7 	.word	0x080051e7
 80050dc:	680b      	ldr	r3, [r1, #0]
 80050de:	1d1a      	adds	r2, r3, #4
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	600a      	str	r2, [r1, #0]
 80050e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80050e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050ec:	2301      	movs	r3, #1
 80050ee:	e0a3      	b.n	8005238 <_printf_i+0x1f4>
 80050f0:	6825      	ldr	r5, [r4, #0]
 80050f2:	6808      	ldr	r0, [r1, #0]
 80050f4:	062e      	lsls	r6, r5, #24
 80050f6:	f100 0304 	add.w	r3, r0, #4
 80050fa:	d50a      	bpl.n	8005112 <_printf_i+0xce>
 80050fc:	6805      	ldr	r5, [r0, #0]
 80050fe:	600b      	str	r3, [r1, #0]
 8005100:	2d00      	cmp	r5, #0
 8005102:	da03      	bge.n	800510c <_printf_i+0xc8>
 8005104:	232d      	movs	r3, #45	; 0x2d
 8005106:	426d      	negs	r5, r5
 8005108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800510c:	485e      	ldr	r0, [pc, #376]	; (8005288 <_printf_i+0x244>)
 800510e:	230a      	movs	r3, #10
 8005110:	e019      	b.n	8005146 <_printf_i+0x102>
 8005112:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005116:	6805      	ldr	r5, [r0, #0]
 8005118:	600b      	str	r3, [r1, #0]
 800511a:	bf18      	it	ne
 800511c:	b22d      	sxthne	r5, r5
 800511e:	e7ef      	b.n	8005100 <_printf_i+0xbc>
 8005120:	680b      	ldr	r3, [r1, #0]
 8005122:	6825      	ldr	r5, [r4, #0]
 8005124:	1d18      	adds	r0, r3, #4
 8005126:	6008      	str	r0, [r1, #0]
 8005128:	0628      	lsls	r0, r5, #24
 800512a:	d501      	bpl.n	8005130 <_printf_i+0xec>
 800512c:	681d      	ldr	r5, [r3, #0]
 800512e:	e002      	b.n	8005136 <_printf_i+0xf2>
 8005130:	0669      	lsls	r1, r5, #25
 8005132:	d5fb      	bpl.n	800512c <_printf_i+0xe8>
 8005134:	881d      	ldrh	r5, [r3, #0]
 8005136:	4854      	ldr	r0, [pc, #336]	; (8005288 <_printf_i+0x244>)
 8005138:	2f6f      	cmp	r7, #111	; 0x6f
 800513a:	bf0c      	ite	eq
 800513c:	2308      	moveq	r3, #8
 800513e:	230a      	movne	r3, #10
 8005140:	2100      	movs	r1, #0
 8005142:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005146:	6866      	ldr	r6, [r4, #4]
 8005148:	60a6      	str	r6, [r4, #8]
 800514a:	2e00      	cmp	r6, #0
 800514c:	bfa2      	ittt	ge
 800514e:	6821      	ldrge	r1, [r4, #0]
 8005150:	f021 0104 	bicge.w	r1, r1, #4
 8005154:	6021      	strge	r1, [r4, #0]
 8005156:	b90d      	cbnz	r5, 800515c <_printf_i+0x118>
 8005158:	2e00      	cmp	r6, #0
 800515a:	d04d      	beq.n	80051f8 <_printf_i+0x1b4>
 800515c:	4616      	mov	r6, r2
 800515e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005162:	fb03 5711 	mls	r7, r3, r1, r5
 8005166:	5dc7      	ldrb	r7, [r0, r7]
 8005168:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800516c:	462f      	mov	r7, r5
 800516e:	42bb      	cmp	r3, r7
 8005170:	460d      	mov	r5, r1
 8005172:	d9f4      	bls.n	800515e <_printf_i+0x11a>
 8005174:	2b08      	cmp	r3, #8
 8005176:	d10b      	bne.n	8005190 <_printf_i+0x14c>
 8005178:	6823      	ldr	r3, [r4, #0]
 800517a:	07df      	lsls	r7, r3, #31
 800517c:	d508      	bpl.n	8005190 <_printf_i+0x14c>
 800517e:	6923      	ldr	r3, [r4, #16]
 8005180:	6861      	ldr	r1, [r4, #4]
 8005182:	4299      	cmp	r1, r3
 8005184:	bfde      	ittt	le
 8005186:	2330      	movle	r3, #48	; 0x30
 8005188:	f806 3c01 	strble.w	r3, [r6, #-1]
 800518c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005190:	1b92      	subs	r2, r2, r6
 8005192:	6122      	str	r2, [r4, #16]
 8005194:	f8cd a000 	str.w	sl, [sp]
 8005198:	464b      	mov	r3, r9
 800519a:	aa03      	add	r2, sp, #12
 800519c:	4621      	mov	r1, r4
 800519e:	4640      	mov	r0, r8
 80051a0:	f7ff fee2 	bl	8004f68 <_printf_common>
 80051a4:	3001      	adds	r0, #1
 80051a6:	d14c      	bne.n	8005242 <_printf_i+0x1fe>
 80051a8:	f04f 30ff 	mov.w	r0, #4294967295
 80051ac:	b004      	add	sp, #16
 80051ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051b2:	4835      	ldr	r0, [pc, #212]	; (8005288 <_printf_i+0x244>)
 80051b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80051b8:	6823      	ldr	r3, [r4, #0]
 80051ba:	680e      	ldr	r6, [r1, #0]
 80051bc:	061f      	lsls	r7, r3, #24
 80051be:	f856 5b04 	ldr.w	r5, [r6], #4
 80051c2:	600e      	str	r6, [r1, #0]
 80051c4:	d514      	bpl.n	80051f0 <_printf_i+0x1ac>
 80051c6:	07d9      	lsls	r1, r3, #31
 80051c8:	bf44      	itt	mi
 80051ca:	f043 0320 	orrmi.w	r3, r3, #32
 80051ce:	6023      	strmi	r3, [r4, #0]
 80051d0:	b91d      	cbnz	r5, 80051da <_printf_i+0x196>
 80051d2:	6823      	ldr	r3, [r4, #0]
 80051d4:	f023 0320 	bic.w	r3, r3, #32
 80051d8:	6023      	str	r3, [r4, #0]
 80051da:	2310      	movs	r3, #16
 80051dc:	e7b0      	b.n	8005140 <_printf_i+0xfc>
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	f043 0320 	orr.w	r3, r3, #32
 80051e4:	6023      	str	r3, [r4, #0]
 80051e6:	2378      	movs	r3, #120	; 0x78
 80051e8:	4828      	ldr	r0, [pc, #160]	; (800528c <_printf_i+0x248>)
 80051ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051ee:	e7e3      	b.n	80051b8 <_printf_i+0x174>
 80051f0:	065e      	lsls	r6, r3, #25
 80051f2:	bf48      	it	mi
 80051f4:	b2ad      	uxthmi	r5, r5
 80051f6:	e7e6      	b.n	80051c6 <_printf_i+0x182>
 80051f8:	4616      	mov	r6, r2
 80051fa:	e7bb      	b.n	8005174 <_printf_i+0x130>
 80051fc:	680b      	ldr	r3, [r1, #0]
 80051fe:	6826      	ldr	r6, [r4, #0]
 8005200:	6960      	ldr	r0, [r4, #20]
 8005202:	1d1d      	adds	r5, r3, #4
 8005204:	600d      	str	r5, [r1, #0]
 8005206:	0635      	lsls	r5, r6, #24
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	d501      	bpl.n	8005210 <_printf_i+0x1cc>
 800520c:	6018      	str	r0, [r3, #0]
 800520e:	e002      	b.n	8005216 <_printf_i+0x1d2>
 8005210:	0671      	lsls	r1, r6, #25
 8005212:	d5fb      	bpl.n	800520c <_printf_i+0x1c8>
 8005214:	8018      	strh	r0, [r3, #0]
 8005216:	2300      	movs	r3, #0
 8005218:	6123      	str	r3, [r4, #16]
 800521a:	4616      	mov	r6, r2
 800521c:	e7ba      	b.n	8005194 <_printf_i+0x150>
 800521e:	680b      	ldr	r3, [r1, #0]
 8005220:	1d1a      	adds	r2, r3, #4
 8005222:	600a      	str	r2, [r1, #0]
 8005224:	681e      	ldr	r6, [r3, #0]
 8005226:	6862      	ldr	r2, [r4, #4]
 8005228:	2100      	movs	r1, #0
 800522a:	4630      	mov	r0, r6
 800522c:	f7fa ffe0 	bl	80001f0 <memchr>
 8005230:	b108      	cbz	r0, 8005236 <_printf_i+0x1f2>
 8005232:	1b80      	subs	r0, r0, r6
 8005234:	6060      	str	r0, [r4, #4]
 8005236:	6863      	ldr	r3, [r4, #4]
 8005238:	6123      	str	r3, [r4, #16]
 800523a:	2300      	movs	r3, #0
 800523c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005240:	e7a8      	b.n	8005194 <_printf_i+0x150>
 8005242:	6923      	ldr	r3, [r4, #16]
 8005244:	4632      	mov	r2, r6
 8005246:	4649      	mov	r1, r9
 8005248:	4640      	mov	r0, r8
 800524a:	47d0      	blx	sl
 800524c:	3001      	adds	r0, #1
 800524e:	d0ab      	beq.n	80051a8 <_printf_i+0x164>
 8005250:	6823      	ldr	r3, [r4, #0]
 8005252:	079b      	lsls	r3, r3, #30
 8005254:	d413      	bmi.n	800527e <_printf_i+0x23a>
 8005256:	68e0      	ldr	r0, [r4, #12]
 8005258:	9b03      	ldr	r3, [sp, #12]
 800525a:	4298      	cmp	r0, r3
 800525c:	bfb8      	it	lt
 800525e:	4618      	movlt	r0, r3
 8005260:	e7a4      	b.n	80051ac <_printf_i+0x168>
 8005262:	2301      	movs	r3, #1
 8005264:	4632      	mov	r2, r6
 8005266:	4649      	mov	r1, r9
 8005268:	4640      	mov	r0, r8
 800526a:	47d0      	blx	sl
 800526c:	3001      	adds	r0, #1
 800526e:	d09b      	beq.n	80051a8 <_printf_i+0x164>
 8005270:	3501      	adds	r5, #1
 8005272:	68e3      	ldr	r3, [r4, #12]
 8005274:	9903      	ldr	r1, [sp, #12]
 8005276:	1a5b      	subs	r3, r3, r1
 8005278:	42ab      	cmp	r3, r5
 800527a:	dcf2      	bgt.n	8005262 <_printf_i+0x21e>
 800527c:	e7eb      	b.n	8005256 <_printf_i+0x212>
 800527e:	2500      	movs	r5, #0
 8005280:	f104 0619 	add.w	r6, r4, #25
 8005284:	e7f5      	b.n	8005272 <_printf_i+0x22e>
 8005286:	bf00      	nop
 8005288:	08005391 	.word	0x08005391
 800528c:	080053a2 	.word	0x080053a2

08005290 <__retarget_lock_acquire_recursive>:
 8005290:	4770      	bx	lr

08005292 <__retarget_lock_release_recursive>:
 8005292:	4770      	bx	lr

08005294 <memcpy>:
 8005294:	440a      	add	r2, r1
 8005296:	4291      	cmp	r1, r2
 8005298:	f100 33ff 	add.w	r3, r0, #4294967295
 800529c:	d100      	bne.n	80052a0 <memcpy+0xc>
 800529e:	4770      	bx	lr
 80052a0:	b510      	push	{r4, lr}
 80052a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052aa:	4291      	cmp	r1, r2
 80052ac:	d1f9      	bne.n	80052a2 <memcpy+0xe>
 80052ae:	bd10      	pop	{r4, pc}

080052b0 <memmove>:
 80052b0:	4288      	cmp	r0, r1
 80052b2:	b510      	push	{r4, lr}
 80052b4:	eb01 0402 	add.w	r4, r1, r2
 80052b8:	d902      	bls.n	80052c0 <memmove+0x10>
 80052ba:	4284      	cmp	r4, r0
 80052bc:	4623      	mov	r3, r4
 80052be:	d807      	bhi.n	80052d0 <memmove+0x20>
 80052c0:	1e43      	subs	r3, r0, #1
 80052c2:	42a1      	cmp	r1, r4
 80052c4:	d008      	beq.n	80052d8 <memmove+0x28>
 80052c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80052ce:	e7f8      	b.n	80052c2 <memmove+0x12>
 80052d0:	4402      	add	r2, r0
 80052d2:	4601      	mov	r1, r0
 80052d4:	428a      	cmp	r2, r1
 80052d6:	d100      	bne.n	80052da <memmove+0x2a>
 80052d8:	bd10      	pop	{r4, pc}
 80052da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052e2:	e7f7      	b.n	80052d4 <memmove+0x24>

080052e4 <_realloc_r>:
 80052e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e6:	4607      	mov	r7, r0
 80052e8:	4614      	mov	r4, r2
 80052ea:	460e      	mov	r6, r1
 80052ec:	b921      	cbnz	r1, 80052f8 <_realloc_r+0x14>
 80052ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80052f2:	4611      	mov	r1, r2
 80052f4:	f7ff bc46 	b.w	8004b84 <_malloc_r>
 80052f8:	b922      	cbnz	r2, 8005304 <_realloc_r+0x20>
 80052fa:	f7ff fbf3 	bl	8004ae4 <_free_r>
 80052fe:	4625      	mov	r5, r4
 8005300:	4628      	mov	r0, r5
 8005302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005304:	f000 f814 	bl	8005330 <_malloc_usable_size_r>
 8005308:	42a0      	cmp	r0, r4
 800530a:	d20f      	bcs.n	800532c <_realloc_r+0x48>
 800530c:	4621      	mov	r1, r4
 800530e:	4638      	mov	r0, r7
 8005310:	f7ff fc38 	bl	8004b84 <_malloc_r>
 8005314:	4605      	mov	r5, r0
 8005316:	2800      	cmp	r0, #0
 8005318:	d0f2      	beq.n	8005300 <_realloc_r+0x1c>
 800531a:	4631      	mov	r1, r6
 800531c:	4622      	mov	r2, r4
 800531e:	f7ff ffb9 	bl	8005294 <memcpy>
 8005322:	4631      	mov	r1, r6
 8005324:	4638      	mov	r0, r7
 8005326:	f7ff fbdd 	bl	8004ae4 <_free_r>
 800532a:	e7e9      	b.n	8005300 <_realloc_r+0x1c>
 800532c:	4635      	mov	r5, r6
 800532e:	e7e7      	b.n	8005300 <_realloc_r+0x1c>

08005330 <_malloc_usable_size_r>:
 8005330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005334:	1f18      	subs	r0, r3, #4
 8005336:	2b00      	cmp	r3, #0
 8005338:	bfbc      	itt	lt
 800533a:	580b      	ldrlt	r3, [r1, r0]
 800533c:	18c0      	addlt	r0, r0, r3
 800533e:	4770      	bx	lr

08005340 <_init>:
 8005340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005342:	bf00      	nop
 8005344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005346:	bc08      	pop	{r3}
 8005348:	469e      	mov	lr, r3
 800534a:	4770      	bx	lr

0800534c <_fini>:
 800534c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534e:	bf00      	nop
 8005350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005352:	bc08      	pop	{r3}
 8005354:	469e      	mov	lr, r3
 8005356:	4770      	bx	lr
